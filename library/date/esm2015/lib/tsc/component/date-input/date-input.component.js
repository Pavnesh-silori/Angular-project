import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl } from '@angular/forms';
import * as moment from 'moment-timezone';
import { DateInputTypeEnum, DateTypeEnum } from '../../enum/date.enum';
// tsc-library
import { MaterialFormFieldAppearance } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "../../service/date.service";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/datepicker";
import * as i4 from "../../directive/date-month-year-format.directive";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/input";
import * as i7 from "@angular/forms";
import * as i8 from "ngx-daterangepicker-material";
// /tsc-library/
export class DateInputComponent {
    constructor(dateService) {
        this.dateService = dateService;
        this.dateInputTypeEnum = DateInputTypeEnum;
        this.dateTypeEnum = DateTypeEnum;
        this.materialFormFieldAppearance = MaterialFormFieldAppearance;
        this.emitFilter = new EventEmitter();
        this.formFieldAppearance = this.materialFormFieldAppearance.FORM_FIELD_APPEARANCE;
        this.dateType = this.dateTypeEnum.INCLUSIVE;
        this.label = '';
        this.cDRformat = 'YYYY-MM-DD';
        this.timezone = 'UTC';
        this.range = null;
        this.materialFieldWidth = false;
        this.isMandatoryField = false;
        this.showCdrRangeLabel = false;
        this.showRange = false;
        this.showDefaultDuration = false;
        this.showTimeInCDR = false;
        this.daterange = new FormControl();
        this.durationFC = new FormControl();
        this.startDateFC = new FormControl();
        this.endDateFC = new FormControl();
    }
    ngOnInit() {
        this.date = moment().tz(this.timezone).format();
    }
    ngOnChanges(changes) {
        if (changes.materialFormFieldAppearanceInp && this.materialFormFieldAppearanceInp) {
            this.formFieldAppearance = this.materialFormFieldAppearanceInp;
        }
        if (changes.materialFieldWidthInp && this.materialFieldWidthInp) {
            this.materialFieldWidth = this.materialFieldWidthInp;
        }
        if (changes.isMandatoryFieldInp && this.isMandatoryFieldInp) {
            this.isMandatoryField = this.isMandatoryFieldInp;
        }
        if (changes.labelInp && this.labelInp) {
            this.label = this.labelInp;
        }
        if (changes.cdrFormatInp && this.cdrFormatInp) {
            this.cDRformat = this.cdrFormatInp;
        }
        if (changes.showCdrRangeLabelInp && this.showCdrRangeLabelInp) {
            this.showCdrRangeLabel = this.showCdrRangeLabelInp;
        }
        if (changes.showRangeInp && this.showRangeInp) {
            this.showRange = this.showRangeInp;
        }
        if (changes.rangeInp && this.rangeInp) {
            this.range = this.rangeInp;
        }
        if (changes.showDefaultDurationInp && this.showDefaultDurationInp) {
            this.showDefaultDuration = this.showDefaultDurationInp;
        }
        if (changes.showTimeInCDRInp && this.showTimeInCDRInp) {
            this.showTimeInCDR = this.showTimeInCDRInp;
        }
        if (changes.dateTypeInp && this.dateTypeInp) {
            this.dateType = this.dateTypeInp;
        }
        if (changes.timezoneInp && this.timezoneInp) {
            this.timezone = this.timezoneInp;
        }
        if (changes.dateInputTypeInp && this.dateInputTypeInp) {
            this.dateInputType = this.dateInputTypeInp;
        }
        this.patchDefaultConfig();
    }
    patchDefaultConfig() {
        if (this.dateInputType == this.dateInputTypeEnum.DAY_INPUT) {
            if (this.showDefaultDuration) {
                this.durationFC.patchValue(moment(this.date).format('YYYY-MM-DD'));
                this.startDateFC.patchValue(moment().startOf('day').tz(this.timezone).format());
                this.endDateFC.patchValue(moment().tz(this.timezone).format());
            }
        }
        else if (this.dateInputType == this.dateInputTypeEnum.MONTH_INPUT) {
            if (this.showDefaultDuration) {
                this.durationFC.patchValue(moment(this.date).format('YYYY-MM'));
                this.startDateFC.patchValue(moment().startOf('month').tz(this.timezone).format());
                const endDateValue = this.dateType == this.dateTypeEnum.INCLUSIVE
                    ? moment().endOf('month').tz(this.timezone).format()
                    : moment().add(1, 'months').startOf('month').tz(this.timezone).format();
                this.endDateFC.patchValue(endDateValue);
            }
        }
        else if (this.dateInputType == this.dateInputTypeEnum.YEAR_INPUT) {
            if (this.showDefaultDuration) {
                this.durationFC.patchValue(moment(this.date).format('YYYY'));
                this.startDateFC.patchValue(moment().startOf('year').tz(this.timezone).format());
                const endDateValue = this.dateType == this.dateTypeEnum.INCLUSIVE
                    ? moment().endOf('year').tz(this.timezone).format()
                    : moment().add(1, 'year').startOf('year').tz(this.timezone).format();
                this.endDateFC.patchValue(endDateValue);
            }
        }
        else if (this.dateInputType == this.dateInputTypeEnum.CUSTOM_INPUT) {
            if (this.showDefaultDuration) {
                if (this.showTimeInCDR) {
                    this.daterange.patchValue({ startDate: moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).startOf('day'), endDate: moment() });
                }
                else {
                    this.daterange.patchValue({ startDate: moment().startOf('day'), endDate: moment() });
                }
                this.startDateFC.patchValue(moment(this.daterange.value.startDate).tz(this.timezone).format());
                this.endDateFC.patchValue(moment(this.daterange.value.endDate).tz(this.timezone).format());
            }
        }
    }
    ngAfterViewInit() {
        this.emitFilter.emit();
    }
    dayDateInput(selectedDate) {
        let duration = this.dateService.dailySelectedHandler(selectedDate);
        this.durationFC.patchValue(duration);
        this.startDateFC.patchValue(moment(selectedDate).startOf('day').tz(this.timezone).format());
        const endDateValue = this.dateType == this.dateTypeEnum.INCLUSIVE
            ? moment(selectedDate).endOf('day').tz(this.timezone).format()
            : moment(selectedDate).add(1, 'days').startOf('day').tz(this.timezone).format();
        this.endDateFC.patchValue(endDateValue);
        this.emitFilter.emit();
    }
    monthDateInput(selectedDate, datepicker) {
        let duration = this.dateService.handleDateInput(selectedDate, datepicker, "YYYY-MM");
        this.durationFC.patchValue(duration);
        this.startDateFC.patchValue(moment(selectedDate).startOf('month').tz(this.timezone).format());
        const endDateValue = this.dateType == this.dateTypeEnum.INCLUSIVE
            ? moment(selectedDate).endOf('month').tz(this.timezone).format()
            : moment(selectedDate).add(1, 'months').startOf('month').tz(this.timezone).format();
        this.endDateFC.patchValue(endDateValue);
        this.emitFilter.emit();
    }
    yearDateInput(selectedDate, datepicker) {
        let duration = this.dateService.handleDateInput(selectedDate, datepicker, "YYYY");
        this.durationFC.patchValue(duration);
        this.startDateFC.patchValue(moment(selectedDate).startOf('year').tz(this.timezone).format());
        const endDateValue = this.dateType == this.dateTypeEnum.INCLUSIVE
            ? moment(selectedDate).endOf('year').tz(this.timezone).format()
            : moment(selectedDate).add(1, 'year').startOf('year').tz(this.timezone).format();
        this.endDateFC.patchValue(endDateValue);
        this.emitFilter.emit();
    }
    customDateInput(selectedDate) {
        this.startDateFC.patchValue(moment(selectedDate.startDate).tz(this.timezone).format());
        this.endDateFC.patchValue(moment(selectedDate.endDate).tz(this.timezone).format());
        this.emitFilter.emit();
    }
}
DateInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateInputComponent, deps: [{ token: i1.DateService }], target: i0.ɵɵFactoryTarget.Component });
DateInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DateInputComponent, selector: "lib-date-input", inputs: { materialFormFieldAppearanceInp: "materialFormFieldAppearanceInp", materialFieldWidthInp: "materialFieldWidthInp", dateInputTypeInp: "dateInputTypeInp", dateTypeInp: "dateTypeInp", timezoneInp: "timezoneInp", labelInp: "labelInp", rangeInp: "rangeInp", cdrFormatInp: "cdrFormatInp", isMandatoryFieldInp: "isMandatoryFieldInp", showRangeInp: "showRangeInp", showCdrRangeLabelInp: "showCdrRangeLabelInp", showDefaultDurationInp: "showDefaultDurationInp", showTimeInCDRInp: "showTimeInCDRInp" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0, template: "<mat-form-field [ngClass]=\"{'d-none': dateInputType != dateInputTypeEnum.DAY_INPUT, 'matFieldWidth100': materialFieldWidth}\" [appearance]=\"formFieldAppearance\"\n    id=\"dailyField\" appDateMonthYearFormat (click)=\"dateService.openDatepickerOnClick(daily)\"\n    (keydown.arrowdown)=\"dateService.openDatepickerOnClick(daily)\"\n    (keydown.enter)=\"dateService.openDatepickerOnClick(daily)\">\n    <!-- <mat-label> {{ label }} </mat-label> -->\n    <input matInput class=\"noFocus\" [matDatepicker]=\"daily\" [formControl]=\"durationFC\" [max]=\"date\"\n        (dateInput)=\"dayDateInput($event.value)\" readonly [required]=\"isMandatoryField\"/>\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"daily\"></mat-datepicker-toggle>\n    <mat-datepicker #daily (closed)=\"dateService.takeFocusAway('dailyField')\"></mat-datepicker>\n    <mat-error *ngIf=\"durationFC.touched && durationFC.hasError('required')\">\n        {{ label }}\n    </mat-error>\n</mat-form-field>\n\n<mat-form-field\n    [ngClass]=\"{'d-none': dateInputType != dateInputTypeEnum.MONTH_INPUT, 'matFieldWidth100': materialFieldWidth}\"\n    [appearance]=\"formFieldAppearance\" id=\"monthlyField\" appMonthYearFormat\n    (click)=\"dateService.openDatepickerOnClick(monthly)\"\n    (keydown.arrowdown)=\"dateService.openDatepickerOnClick(monthly)\"\n    (keydown.enter)=\"dateService.openDatepickerOnClick(monthly)\">\n    <mat-label> {{ label }} </mat-label>\n    <input matInput class=\"noFocus\" [matDatepicker]=\"monthly\" [formControl]=\"durationFC\" [max]=\"date\" readonly\n        [required]=\"isMandatoryField\" />\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"monthly\"></mat-datepicker-toggle>\n    <mat-datepicker #monthly panelClass=\"monthPicker\" startView=\"year\" (monthSelected)=\"monthDateInput($event, monthly)\"\n        (closed)=\"dateService.takeFocusAway('monthlyField')\"></mat-datepicker>\n    <mat-error *ngIf=\"durationFC.touched && durationFC.hasError('required')\">\n        {{ label }}\n    </mat-error>\n</mat-form-field>\n\n<mat-form-field [ngClass]=\"{'d-none': dateInputType != dateInputTypeEnum.YEAR_INPUT, 'matFieldWidth100': materialFieldWidth}\" [appearance]=\"formFieldAppearance\"\n    id=\"yearlyField\" appYearFormat (click)=\"dateService.openDatepickerOnClick(yearly)\"\n    (keydown.arrowdown)=\"dateService.openDatepickerOnClick(yearly)\"\n    (keydown.enter)=\"dateService.openDatepickerOnClick(yearly)\">\n    <mat-label> {{ label }} </mat-label>\n    <input matInput class=\"noFocus\" [matDatepicker]=\"yearly\" [formControl]=\"durationFC\" [max]=\"date\" readonly [required]=\"isMandatoryField\"/>\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"yearly\"></mat-datepicker-toggle>\n    <mat-datepicker #yearly startView=\"multi-year\" panelClass=\"yearPicker\"\n        (yearSelected)=\"yearDateInput($event, yearly)\"\n        (closed)=\"dateService.takeFocusAway('yearlyField')\"></mat-datepicker>\n    <mat-error *ngIf=\"durationFC.touched && durationFC.hasError('required')\">\n        {{ label }}\n    </mat-error>\n</mat-form-field>\n\n<mat-form-field [ngClass]=\"{'d-none': dateInputType != dateInputTypeEnum.CUSTOM_INPUT, 'matFieldWidth100': materialFieldWidth}\"\n    [appearance]=\"formFieldAppearance\">\n    <mat-label> {{ label }} </mat-label>\n    <input type=\"text\" matInput ngxDaterangepickerMd\n        [locale]=\"{direction: 'ltr', applyLabel: 'Apply', format: cDRformat, customRangeLabel: 'Custom Range'}\"\n        [showCustomRangeLabel]=\"showCdrRangeLabel\" [timePicker]=\"showTimeInCDR\" [ranges]=\"showRange ? range : null\"\n        [drops]=\"'down'\" [opens]=\"'right'\" [alwaysShowCalendars]=\"true\" [keepCalendarOpeningWithRange]=\"true\"\n        [showDropdowns]=\"true\" [showCancel]=\"true\" autocomplete=\"off\" name=\"daterange\" [formControl]=\"daterange\"\n        (ngModelChange)=\"customDateInput(daterange.value)\" [readonly]=\"true\" [required]=\"isMandatoryField\"/>\n    <mat-error *ngIf=\"daterange.touched && daterange.hasError('required')\">\n        {{ label }}\n    </mat-error>\n</mat-form-field>", components: [{ type: i2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i3.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["tabIndex", "disabled", "for", "aria-label", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { type: i3.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }], directives: [{ type: i4.DateMonthYearFormatDirective, selector: "[appDateMonthYearFormat]" }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i3.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2.MatSuffix, selector: "[matSuffix]" }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.MatError, selector: "mat-error", inputs: ["id"] }, { type: i4.MonthYearFormatDirective, selector: "[appMonthYearFormat]" }, { type: i2.MatLabel, selector: "mat-label" }, { type: i4.YearFormatDirective, selector: "[appYearFormat]" }, { type: i8.DaterangepickerDirective, selector: "input[ngxDaterangepickerMd]", inputs: ["dateLimit", "showCancel", "lockStartDate", "timePicker", "timePicker24Hour", "timePickerIncrement", "timePickerSeconds", "closeOnAutoApply", "_endKey", "drops", "opens", "locale", "startKey", "endKey", "minDate", "maxDate", "autoApply", "alwaysShowCalendars", "showCustomRangeLabel", "linkedCalendars", "singleDatePicker", "showWeekNumbers", "showISOWeekNumbers", "showDropdowns", "isInvalidDate", "isCustomDate", "isTooltipDate", "showClearButton", "customRangeDirection", "ranges", "lastMonthDayClass", "emptyWeekRowClass", "emptyWeekColumnClass", "firstDayOfNextMonthClass", "lastDayOfPreviousMonthClass", "keepCalendarOpeningWithRange", "showRangeLabelOnInput"], outputs: ["change", "rangeClicked", "datesUpdated", "startDateChanged", "endDateChanged"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-date-input',
                    templateUrl: './date-input.component.html',
                    styleUrls: []
                }]
        }], ctorParameters: function () { return [{ type: i1.DateService }]; }, propDecorators: { materialFormFieldAppearanceInp: [{
                type: Input
            }], materialFieldWidthInp: [{
                type: Input
            }], dateInputTypeInp: [{
                type: Input
            }], dateTypeInp: [{
                type: Input
            }], timezoneInp: [{
                type: Input
            }], labelInp: [{
                type: Input
            }], rangeInp: [{
                type: Input
            }], cdrFormatInp: [{
                type: Input
            }], isMandatoryFieldInp: [{
                type: Input
            }], showRangeInp: [{
                type: Input
            }], showCdrRangeLabelInp: [{
                type: Input
            }], showDefaultDurationInp: [{
                type: Input
            }], showTimeInCDRInp: [{
                type: Input
            }], emitFilter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,