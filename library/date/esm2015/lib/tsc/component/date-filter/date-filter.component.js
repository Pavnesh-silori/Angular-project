import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import * as moment from 'moment';
import { DaterangepickerDirective } from 'ngx-daterangepicker-material';
import { FrequencyEnum } from '../../enum/frequency.enum';
import { FREQUENCY_CONSTANT } from '../../constant/frequency.constant';
import * as i0 from "@angular/core";
import * as i1 from "../../service/date.service";
import * as i2 from "@angular/material/button-toggle";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/datepicker";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
import * as i7 from "../../directive/date-month-year-format.directive";
import * as i8 from "@angular/material/input";
import * as i9 from "ngx-daterangepicker-material";
export class DateFilterComponent {
    constructor(dateService) {
        this.dateService = dateService;
        this.frequencyOptions = [];
        this.defaultSelectedFrequency = null;
        this.emitFilter = new EventEmitter();
        this.FrequencyEnum = FrequencyEnum;
        this.today = new Date();
        this.daterange = new FormControl();
        this.frequencyFC = new FormControl();
        this.durationFC = new FormControl();
        this.startDateFC = new FormControl();
        this.endDateFC = new FormControl();
    }
    ngOnInit() {
        this.frequencyFC.patchValue(this.defaultSelectedFrequency || FrequencyEnum.MONTHLY);
        this.frequencyOptions = this.frequencyOptions.length ? this.frequencyOptions : FREQUENCY_CONSTANT;
        this.frequencyChange();
    }
    frequencyChange() {
        let duration;
        let startDate;
        let endDate;
        switch (this.frequencyFC.value) {
            case FrequencyEnum.DAILY:
                duration = moment(this.today).format("YYYY-MM-DD");
                startDate = moment().startOf('day').utc().format();
                endDate = moment().endOf('day').utc().format();
                break;
            case FrequencyEnum.MONTHLY:
                duration = moment(this.today).utc().format("YYYY-MM");
                startDate = moment().startOf('month').utc().format();
                endDate = moment().endOf('month').utc().format();
                break;
            case FrequencyEnum.YEARLY:
                duration = moment(this.today).utc().format("YYYY");
                startDate = moment().startOf('year').utc().format();
                endDate = moment().endOf('year').utc().format();
                break;
            case FrequencyEnum.CUSTOM:
                console.log("frequency: ", this.frequencyFC.value);
                break;
            default:
                console.log('undefined case encountered!');
        }
        this.durationFC.patchValue(duration);
        if (this.frequencyFC.value != FrequencyEnum.CUSTOM) {
            this.daterange.patchValue('');
            this.startDateFC.patchValue(startDate);
            this.endDateFC.patchValue(endDate);
            this.emitFilter.emit();
        }
    }
    openDatepicker() {
        if (this.frequencyFC.value == FrequencyEnum.CUSTOM) {
            this.pickerDirective.open();
        }
    }
    openDatepickerOnClick(datepicker) {
        this.dateService.openDatepickerOnClick(datepicker);
    }
    takeFocusAway(durationField) {
        this.durationField = document.getElementById(durationField);
        this.durationField.classList.remove('mat-focused', 'mat-form-field-should-float');
    }
    dailyDateSelectedHandler(chosenDate) {
        let duration = this.dateService.dailySelectedHandler(chosenDate);
        this.durationFC.patchValue(duration);
        this.startDateFC.patchValue(moment(chosenDate).startOf('day').utc().format());
        this.endDateFC.patchValue(moment(chosenDate).endOf('day').utc().format());
        this.emitFilter.emit();
    }
    monthlyDateSelectedHandler(normalizedMonthAndYear, datepicker) {
        let duration = this.dateService.monthSelectedHandler(normalizedMonthAndYear, datepicker);
        this.durationFC.patchValue(duration);
        this.startDateFC.patchValue(moment(normalizedMonthAndYear).startOf('month').utc().format());
        this.endDateFC.patchValue(moment(normalizedMonthAndYear).endOf('month').utc().format());
        this.emitFilter.emit();
    }
    yearlyDateSelectedHandler(normalizedYear, datepicker) {
        let duration = this.dateService.yearSelectedHandler(normalizedYear, datepicker);
        this.durationFC.patchValue(duration);
        this.startDateFC.patchValue(moment(normalizedYear).startOf('year').utc().format());
        this.endDateFC.patchValue(moment(normalizedYear).endOf('year').utc().format());
        this.emitFilter.emit();
    }
    customDateRange(selectedValue) {
        if (this.frequencyFC.value == FrequencyEnum.CUSTOM) {
            this.startDateFC.patchValue(moment(selectedValue.startDate).utc().format());
            this.endDateFC.patchValue(moment(selectedValue.endDate).utc().format());
            this.durationFC.patchValue(this.endDateFC);
            this.emitFilter.emit();
        }
    }
}
DateFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateFilterComponent, deps: [{ token: i1.DateService }], target: i0.ɵɵFactoryTarget.Component });
DateFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DateFilterComponent, selector: "lib-date-filter", inputs: { frequencyOptions: "frequencyOptions", defaultSelectedFrequency: "defaultSelectedFrequency" }, outputs: { emitFilter: "emitFilter" }, viewQueries: [{ propertyName: "pickerDirective", first: true, predicate: DaterangepickerDirective, descendants: true }], ngImport: i0, template: "<mat-button-toggle-group class=\"matBtnFilter\" [formControl]=\"frequencyFC\" (change)=\"frequencyChange()\">\n    <mat-button-toggle *ngFor=\"let frequency of frequencyOptions\" value=\"{{ frequency.keyID }}\">\n        {{ frequency.name }}\n    </mat-button-toggle>\n</mat-button-toggle-group>\n\n<mat-form-field class=\"ms-3\" id=\"dailyField\" appDateMonthYearFormat\n    [ngClass]=\"{'d-none': frequencyFC.value != FrequencyEnum.DAILY}\" (click)=\"openDatepickerOnClick(daily)\"\n    (keydown.arrowdown)=\"openDatepickerOnClick(daily)\" (keydown.enter)=\"openDatepickerOnClick(daily)\">\n    <input matInput class=\"noFocus\" [matDatepicker]=\"daily\" [formControl]=\"durationFC\" [max]=\"today\"\n        (dateInput)=\"dailyDateSelectedHandler($event.value)\" readonly />\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"daily\"></mat-datepicker-toggle>\n    <mat-datepicker #daily (closed)=\"takeFocusAway('dailyField')\"></mat-datepicker>\n</mat-form-field>\n\n<mat-form-field class=\"ms-3\" id=\"monthlyField\" appMonthYearFormat\n    [ngClass]=\"{'d-none': frequencyFC.value != FrequencyEnum.MONTHLY}\" (click)=\"openDatepickerOnClick(monthly)\"\n    (keydown.arrowdown)=\"openDatepickerOnClick(monthly)\" (keydown.enter)=\"openDatepickerOnClick(monthly)\">\n    <input matInput class=\"noFocus\" [matDatepicker]=\"monthly\" [formControl]=\"durationFC\" [max]=\"today\" readonly />\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"monthly\"></mat-datepicker-toggle>\n    <mat-datepicker panelClass=\"monthPicker\" #monthly startView=\"year\"\n        (monthSelected)=\"monthlyDateSelectedHandler($event, monthly)\" (closed)=\"takeFocusAway('monthlyField')\">\n    </mat-datepicker>\n</mat-form-field>\n\n<mat-form-field class=\"ms-3\" id=\"yearlyField\" appYearFormat [ngClass]=\"{'d-none': frequencyFC.value != FrequencyEnum.YEARLY}\"\n    (click)=\"openDatepickerOnClick(yearly)\" (keydown.arrowdown)=\"openDatepickerOnClick(yearly)\"\n    (keydown.enter)=\"openDatepickerOnClick(yearly)\">\n    <input matInput class=\"noFocus\" [matDatepicker]=\"yearly\" [formControl]=\"durationFC\" [max]=\"today\" readonly />\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"yearly\"></mat-datepicker-toggle>\n    <mat-datepicker panelClass=\"yearPicker\" #yearly startView=\"multi-year\"\n        (yearSelected)=\"yearlyDateSelectedHandler($event, yearly)\" (closed)=\"takeFocusAway('yearlyField')\">\n    </mat-datepicker>\n</mat-form-field>\n\n<mat-form-field class=\"ms-3\" [ngClass]=\"{'d-none': frequencyFC.value != FrequencyEnum.CUSTOM}\">\n    <mat-label class=\"formLabel\"> Select date </mat-label>\n    <input type=\"text\" matInput ngxDaterangepickerMd\n        [locale]=\"{direction: 'ltr', applyLabel: 'Apply', format: 'DD-MMM-YYYY', customRangeLabel: 'Custom Range'}\"\n        [drops]=\"'down'\" [opens]=\"'right'\" [alwaysShowCalendars]=\"true\" [keepCalendarOpeningWithRange]=\"true\"\n        [showDropdowns]=\"true\" [showCancel]=\"true\" autocomplete=\"off\" name=\"daterange\" [formControl]=\"daterange\"\n        (ngModelChange)=\"customDateRange(daterange.value)\" [readonly]=\"true\" />\n</mat-form-field>\n", styles: [".matBtnFilter mat-button-toggle.mat-button-toggle-checked{background-color:#e6e6e6!important}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:30px!important}.mat-button-toggle-group-appearance-standard{border-radius:20px!important}\n"], components: [{ type: i2.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-labelledby", "tabIndex", "appearance", "checked", "disabled", "id", "name", "aria-label", "value"], outputs: ["change"], exportAs: ["matButtonToggle"] }, { type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["tabIndex", "disabled", "for", "aria-label", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { type: i4.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }], directives: [{ type: i2.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.DateMonthYearFormatDirective, selector: "[appDateMonthYearFormat]" }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i8.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i4.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.MatSuffix, selector: "[matSuffix]" }, { type: i7.MonthYearFormatDirective, selector: "[appMonthYearFormat]" }, { type: i7.YearFormatDirective, selector: "[appYearFormat]" }, { type: i3.MatLabel, selector: "mat-label" }, { type: i9.DaterangepickerDirective, selector: "input[ngxDaterangepickerMd]", inputs: ["dateLimit", "showCancel", "lockStartDate", "timePicker", "timePicker24Hour", "timePickerIncrement", "timePickerSeconds", "closeOnAutoApply", "_endKey", "drops", "opens", "locale", "startKey", "endKey", "minDate", "maxDate", "autoApply", "alwaysShowCalendars", "showCustomRangeLabel", "linkedCalendars", "singleDatePicker", "showWeekNumbers", "showISOWeekNumbers", "showDropdowns", "isInvalidDate", "isCustomDate", "isTooltipDate", "showClearButton", "customRangeDirection", "ranges", "lastMonthDayClass", "emptyWeekRowClass", "emptyWeekColumnClass", "firstDayOfNextMonthClass", "lastDayOfPreviousMonthClass", "keepCalendarOpeningWithRange", "showRangeLabelOnInput"], outputs: ["change", "rangeClicked", "datesUpdated", "startDateChanged", "endDateChanged"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-date-filter',
                    templateUrl: './date-filter.component.html',
                    styleUrls: ['./date-filter.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.DateService }]; }, propDecorators: { frequencyOptions: [{
                type: Input
            }], defaultSelectedFrequency: [{
                type: Input
            }], emitFilter: [{
                type: Output
            }], pickerDirective: [{
                type: ViewChild,
                args: [DaterangepickerDirective, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,