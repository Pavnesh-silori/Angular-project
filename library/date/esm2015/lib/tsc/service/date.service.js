import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import * as moment from 'moment-timezone';
import { DateTimeIntervalEnum } from '../enum/date.enum';
import { MONTH_CONSTANT } from '../constant/month.constant';
import { Organization } from '@library/organization-service';
import { COMMON_CONSTANT } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@library/organization-service";
// /tsc-library/
export class DateService {
    constructor(storageService, organizationSerive) {
        this.storageService = storageService;
        this.organizationSerive = organizationSerive;
        this.organizationM = new Organization();
    }
    takeFocusAway(duration) {
        return document.getElementById(duration).classList.remove('mat-focused', 'mat-form-field-should-float');
    }
    openDatepickerOnClick(datepicker) {
        if (!datepicker.opened) {
            datepicker.open();
        }
    }
    handleDateInput(normalizedDate, datepicker, format) {
        datepicker.close();
        return moment(normalizedDate).format(format);
    }
    yearSelectedHandler(normalizedYear, datepicker) {
        datepicker.close();
        let duration = moment(normalizedYear).format("YYYY");
        return duration;
    }
    monthSelectedHandler(normalizedMonthAndYear, datepicker) {
        datepicker.close();
        let duration = moment(normalizedMonthAndYear).format("YYYY-MM");
        return duration;
    }
    dailySelectedHandler(selectedDate) {
        let duration = moment(selectedDate).format("YYYY-MM-DD");
        return duration;
    }
    formatDate(selectedDate, format) {
        const date = new Date(selectedDate);
        return moment(date).format(format);
    }
    convertUtcToTimeZone(utcTimeString, targetTimeZone, format) {
        const utcDate = moment(utcTimeString);
        let convertedTimeZone = utcDate.tz(targetTimeZone).format(format);
        return convertedTimeZone;
    }
    getRelativeTimeAgoLabel(dateTime) {
        const timezone = this.storageService.getStorage('timezone');
        return dateTime ? moment.tz(dateTime, timezone).fromNow() : COMMON_CONSTANT.HYPHEN;
    }
    getStartDateTime(selectedRange) {
        let startTime;
        const timezone = this.storageService.getStorage('timezone');
        switch (selectedRange) {
            case DateTimeIntervalEnum.CURRENT_HOUR:
                startTime = moment().startOf('hour').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.LAST_24_HRS:
                startTime = moment().subtract(24, 'hours').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.YESTERDAY:
                startTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).subtract(1, 'days').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.CURRENT_DAY:
                startTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).startOf('day').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.CURRENT_WEEK:
                startTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).startOf('week').add(1, 'days').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.LAST_7_DAYS:
                startTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).subtract(7, 'days').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.CURRENT_MONTH:
                startTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).startOf('month').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.LAST_30_DAYS:
                startTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).subtract(30, 'days').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.LAST_12_MONTHS:
                startTime = moment().subtract(1, 'year').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.LAST_12th_MONTH:
                startTime = moment().subtract(1, 'year').startOf('month').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.CURRENT_YEAR:
                startTime = moment().set({ month: 0, date: 1, hour: 0, minute: 0, second: 0, millisecond: 0 }).tz(timezone).format();
                break;
            default:
                startTime = null;
        }
        return startTime;
    }
    getEndDateTime(selectedRange) {
        let endTime;
        const timezone = this.storageService.getStorage('timezone');
        switch (selectedRange) {
            case DateTimeIntervalEnum.CURRENT_TIME:
                endTime = moment().tz(timezone).format();
                break;
            case DateTimeIntervalEnum.CURRENT_DAY:
                endTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).startOf('day').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.NEXT_DAY:
                endTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).add(1, 'days').startOf('day').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.NEXT_WEEK:
                endTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).add(1, 'week').startOf('week').add(1, 'days').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.NEXT_MONTH:
                endTime = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).add(1, 'months').startOf('month').tz(timezone).format();
                break;
            case DateTimeIntervalEnum.CURRENT_YEAR:
                endTime = moment().startOf('year').tz(timezone).format();
                break;
            default:
                endTime = null;
        }
        return endTime;
    }
    getReportingPeriodList(orgID, endYearLength) {
        return __awaiter(this, void 0, void 0, function* () {
            this.organizationM = (yield this.organizationSerive.getOrganizationByID(orgID));
            let reportingPeriodsList = [];
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const startMonth = this.getMonthIndex(this.organizationM.fiscalStartMonth);
            let endMonth = (startMonth + 11) % 12;
            for (let year = currentYear; year >= currentYear - endYearLength; year--) {
                let startYear = year;
                let endYear;
                if (startMonth == 0) {
                    endYear = startYear;
                }
                else {
                    endYear = startYear + 1;
                }
                let startDate = new Date(startYear, startMonth);
                let endDate = new Date(endYear, endMonth);
                let startMonthLabel = startDate.toLocaleString('default', { month: 'short' });
                let endMonthLabel = endDate.toLocaleString('default', { month: 'short' });
                let period = {
                    name: `${startMonthLabel} ${startYear} - ${endMonthLabel} ${endYear}`,
                    startDate: moment(startDate).format("YYYY-MM-DD"),
                    endDate: moment(endDate).format("YYYY-MM-DD")
                };
                reportingPeriodsList.push(period);
            }
            return reportingPeriodsList;
        });
    }
    getMonthIndex(month) {
        return MONTH_CONSTANT.indexOf(month);
    }
}
DateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateService, deps: [{ token: i1.StorageService }, { token: i2.OrganizationService }], target: i0.ɵɵFactoryTarget.Injectable });
DateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.OrganizationService }]; } });
//# sourceMappingURL=data:application/json;base64,