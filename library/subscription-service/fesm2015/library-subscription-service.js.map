{"version":3,"file":"library-subscription-service.js","sources":["../../../projects/library/subscription-service/src/lib/subscription-service.service.ts","../../../projects/library/subscription-service/src/lib/subscription-service.component.ts","../../../projects/library/subscription-service/src/lib/subscription-service.module.ts","../../../projects/library/subscription-service/src/lib/tsc/constant/subscription.constant.ts","../../../projects/library/subscription-service/src/lib/tsc/enum/plan.enum.ts","../../../projects/library/subscription-service/src/lib/tsc/model/subscription.model.ts","../../../projects/library/subscription-service/src/lib/tsc/controller/subscription.controller.ts","../../../projects/library/subscription-service/src/lib/tsc/service/subscription.service.ts","../../../projects/library/subscription-service/src/lib/tsc/component/expiry-alert/expiry-alert.component.ts","../../../projects/library/subscription-service/src/lib/tsc/component/expiry-alert/expiry-alert.component.html","../../../projects/library/subscription-service/src/lib/tsc/component/expiry-alert/expiry-alert.module.ts","../../../projects/library/subscription-service/src/public-api.ts","../../../projects/library/subscription-service/src/library-subscription-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubscriptionServiceService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-subscription-service',\n  template: `\n    <p>\n      subscription-service works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class SubscriptionServiceComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SubscriptionServiceComponent } from './subscription-service.component';\n\n@NgModule({\n    declarations: [\n        SubscriptionServiceComponent\n    ],\n    imports: [\n    ],\n    exports: [\n        SubscriptionServiceComponent\n    ]\n})\n\nexport class SubscriptionServiceModule {\n    static forRoot(environment: any): ModuleWithProviders<SubscriptionServiceModule> {\n        return {\n            ngModule: SubscriptionServiceModule,\n            providers: [\n                { provide: 'environment', useValue: environment }\n            ]\n        };\n    }\n}\n","export const SUBSCRIPTION_CONSTANT = {\n    BILLING_PROFILE_DELETE: 'BILLING_PROFILE_DELETE',\n}\n","export enum PlanPriceType {\n    PLAN_PRICE_TYPE_FREE = 'FREE',\n    PLAN_PRICE_TYPE_PAID = 'PAID',\n}\n\nexport enum PlanGroupType {\n    PLAN_STANDALONE = 'STANDALONE',\n    PLAN_BUNDLED = 'BUNDLED',\n}\n","\nexport interface ExpiringSubscriptionI {\n    planName: string;\n    planType: string;\n    priceType: string;\n    subscriptionID: number;\n    subscriptionDayLeft: number;\n    futureSubscrptionExists: boolean;\n}\n\nexport class ExpiringSubscriptionM implements ExpiringSubscriptionI {\n    planName;\n    planType;\n    priceType;\n    subscriptionID;\n    subscriptionDayLeft;\n    futureSubscrptionExists;\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { ExpiringSubscriptionM } from \"../model/subscription.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class SubscriptionController {\n    constructor(\n        private http: HttpClient,\n        @Inject('environment') private environment: any\n    ) { }\n\n    orgPlanType(orgID) {\n        return this.http.get(`${this.environment.SUBSCRIPTION_API_URL}organizations/${orgID}/plan-type`);\n    }\n\n    getExpiringSubscription(orgID, applicationID) {\n        return this.http.get<ExpiringSubscriptionM>(`${this.environment.SUBSCRIPTION_API_URL}organizations/${orgID}/applications/${applicationID}/subscription/expiring`);\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { ExpiringSubscriptionM } from '../model/subscription.model';\nimport { SubscriptionController } from '../controller/subscription.controller';\n\nimport { StorageService } from '@library/storage-service';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class SubscriptionService {\n    constructor(\n        @Inject('environment') private environment: any,\n        private storageService: StorageService,\n        private subscriptionController: SubscriptionController\n    ) { }\n\n    async orgPlanType(orgID: number): Promise<any> {\n        let res;\n\n        try {\n            res = await this.subscriptionController.orgPlanType(orgID).toPromise();\n            return res;\n        } catch (error) {\n            console.error('error in orgPlanType -', error);\n            return res;\n        }\n    }\n\n    redirectOnSubscriptionExpire() {\n        this.storageService.clearStorage();\n        window.location.href = this.environment.ADMIN_URL + 'subscription-new/active';\n    }\n\n    getExpiringSubscribtion(orgID, applicationID): Promise<ExpiringSubscriptionM> {\n        let expiringSubscriptionM = new ExpiringSubscriptionM();\n        let expiringSubscription = new ExpiringSubscriptionM();\n\n        return new Promise(resolve => {\n            this.subscriptionController.getExpiringSubscription(orgID, applicationID).subscribe((res) => {\n                expiringSubscriptionM = res;\n            }, error => {\n                expiringSubscriptionM = expiringSubscription;\n                console.error('error in getExpiringSubscribtion -', error);\n            }).add(() => {\n                resolve(expiringSubscriptionM);\n            });\n        });\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\n\n// import { ThemeOptions } from '@rootProject/theme-options';\n\nimport { PlanPriceType } from '../../enum/plan.enum';\nimport { ExpiringSubscriptionM } from '../../model/subscription.model';\nimport { SubscriptionService } from '../../service/subscription.service';\n\nimport { MATERIAL_CONSTANT } from '@library/tsc-common';\nimport { StorageService } from '@library/storage-service';\n\n@Component({\n    selector: 'lib-expiry-alert',\n    templateUrl: './expiry-alert.component.html',\n    styleUrls: ['./expiry-alert.component.scss']\n})\n\nexport class ExpiryAlertComponent implements OnInit {\n    MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n    rootOrgID: any;\n    applicationID: any;\n    showSubscriptionMessage = false;\n    message: string = '';\n    showCloseBtn: boolean;\n    buyLink: string = this.environment.ADMIN_URL + 'subscription-new/active';\n    buyLinkMsg: string = \"Click <a href='\" + this.buyLink + \"' target='blank'>here</a> to buy a subscription.\"\n    expiredSubscribtionMsg = \"Your subscription is expired. \" + this.buyLinkMsg;\n    subscriptionM = new ExpiringSubscriptionM();\n    \n    constructor(\n        // public globals: ThemeOptions,\n        @Inject('environment') private environment: any,\n        private subscriptionService: SubscriptionService,\n        private storageService: StorageService\n    ) { }\n\n    ngOnInit(): void {\n        this.rootOrgID = this.storageService.getStorage(['rootOrgID']);\n        this.applicationID = this.storageService.getStorage(['applicationID']);\n        this.getMessage(this.rootOrgID, this.applicationID);\n    }\n\n    async getMessage(rootOrgID, applicationID) {\n        this.subscriptionM = <ExpiringSubscriptionM>await this.subscriptionService.getExpiringSubscribtion(rootOrgID, applicationID);\n\n        if (this.storageService.getStorage('hideSubscriptionMessage') != 'YES') {\n            if (this.subscriptionM.subscriptionDayLeft <= 10 || this.subscriptionM.priceType == PlanPriceType.PLAN_PRICE_TYPE_FREE) {\n\n                if (this.subscriptionM.subscriptionDayLeft == 0) {\n                    this.message = `Your ${this.subscriptionM.planName} subscription expires today. ${this.buyLinkMsg}`;\n                } else if (this.subscriptionM.subscriptionDayLeft == 1) {\n                    this.message = `Your ${this.subscriptionM.planName} subscription expires in ${this.subscriptionM.subscriptionDayLeft} day. ${this.buyLinkMsg}`;\n                } else if (this.subscriptionM.priceType == PlanPriceType.PLAN_PRICE_TYPE_FREE && this.subscriptionM.subscriptionDayLeft > 10) {\n                    this.message = `You are currently on the ${this.subscriptionM.planName} subscription. ${this.buyLinkMsg}`;\n                } else if (this.subscriptionM.subscriptionDayLeft <= 10  && this.subscriptionM.subscriptionDayLeft >= 0) {\n                    this.message = `Your ${this.subscriptionM.planName} subscription expires in ${this.subscriptionM.subscriptionDayLeft} days. ${this.buyLinkMsg}`;\n                } else if (this.subscriptionM.subscriptionDayLeft < 0) {\n                    this.message = `Your ${this.subscriptionM.planName} subscription has expired. ${this.buyLinkMsg}`;\n                }\n\n                if (this.subscriptionM.priceType == PlanPriceType.PLAN_PRICE_TYPE_FREE) {\n                    this.showCloseBtn = false;\n                } else if (this.subscriptionM.subscriptionDayLeft < 0) {\n                    this.showCloseBtn = false;\n                } else {\n                    this.showCloseBtn = true;\n                }\n\n                this.showSubscriptionMessage = true;\n                // this.globals.toggleSubscriptionExpiring = true;\n            }\n        }\n\n        if (this.subscriptionM.priceType == null) {\n            this.showSubscriptionMessage = false;\n        }\n    }\n\n    hideSubscriptionMessage() {\n        // this.globals.toggleSubscriptionExpiring = false;\n        this.storageService.setStorage('hideSubscriptionMessage', 'YES');\n        this.showSubscriptionMessage = !('YES' == this.storageService.getStorage('hideSubscriptionMessage'));\n    }\n}\n","<div [ngClass]=\"{'showSubscriptionMessage': showSubscriptionMessage}\">\n    <div class=\"alert alert-danger subscriptionExpiringMessage centerAlign\"\n        [ngClass]=\"{'d-none': !showSubscriptionMessage}\">\n        <span class=\"text-light\" [innerHTML]=\"message\"></span>\n        <button *ngIf=\"showCloseBtn\" matRipple [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" type=\"button\" \n            class=\"btn-close rounded-circle btnCloseCustom pt-2\"\n            (click)=\"hideSubscriptionMessage()\">\n        </button>\n    </div>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatRippleModule } from '@angular/material/core';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ExpiryAlertComponent } from './expiry-alert.component';\n\n@NgModule({\n    declarations: [\n        ExpiryAlertComponent\n    ],\n    imports: [\n        CommonModule,\n        MatRippleModule,\n        NgbModule\n    ],\n    exports: [\n        ExpiryAlertComponent\n    ]\n})\n\nexport class ExpiryAlertModule { }\n","/*\n * Public API Surface of subscription-service\n */\n\nexport * from './lib/subscription-service.service';\nexport * from './lib/subscription-service.component';\nexport * from './lib/subscription-service.module';\n\nexport * from './lib/tsc/constant/subscription.constant';\n\nexport * from './lib/tsc/enum/plan.enum';\n\nexport * from './lib/tsc/service/subscription.service';\n\nexport * from './lib/tsc/component/expiry-alert/expiry-alert.module';\nexport * from './lib/tsc/component/expiry-alert/expiry-alert.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2.SubscriptionController","i1.SubscriptionService","i2"],"mappings":"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"}