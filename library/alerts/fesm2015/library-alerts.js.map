{"version":3,"file":"library-alerts.js","sources":["../../../projects/library/alerts/src/lib/alerts.service.ts","../../../projects/library/alerts/src/lib/alerts.component.ts","../../../projects/library/alerts/src/lib/alerts.module.ts","../../../projects/library/alerts/src/lib/tsc/model/alert.model.ts","../../../projects/library/alerts/src/lib/tsc/model/alarm.model.ts","../../../projects/library/alerts/src/lib/tsc/model/escalation.model.ts","../../../projects/library/alerts/src/lib/tsc/enum/alert.enum.ts","../../../projects/library/alerts/src/lib/tsc/controller/alert.controller.ts","../../../projects/library/alerts/src/lib/tsc/controller/escalation.controller.ts","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/page/page.component.ts","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/page/page.component.html","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/page/page-routing.module.ts","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/page/page.module.ts","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/create-update/create-update.component.ts","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/create-update/create-update.component.html","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/create-update/create-update-routing.module.ts","../../../projects/library/alerts/src/lib/tsc/component/alert-rule/create-update/create-update.module.ts","../../../projects/library/alerts/src/lib/tsc/component/escalation/create-update/create-update.component.ts","../../../projects/library/alerts/src/lib/tsc/component/escalation/create-update/create-update.component.html","../../../projects/library/alerts/src/lib/tsc/component/escalation/create-update/create-update.module.ts","../../../projects/library/alerts/src/lib/tsc/component/escalation/list/list.component.ts","../../../projects/library/alerts/src/lib/tsc/component/escalation/list/list.component.html","../../../projects/library/alerts/src/lib/tsc/component/escalation/list/list-routing.module.ts","../../../projects/library/alerts/src/lib/tsc/component/escalation/list/list.module.ts","../../../projects/library/alerts/src/lib/tsc/component/alarm/configured/page/page.component.ts","../../../projects/library/alerts/src/lib/tsc/component/alarm/configured/page/page.component.html","../../../projects/library/alerts/src/lib/tsc/component/alarm/configured/page/page-routing.module.ts","../../../projects/library/alerts/src/lib/tsc/component/alarm/configured/page/page.module.ts","../../../projects/library/alerts/src/lib/tsc/component/alarm/generated/page/page.component.ts","../../../projects/library/alerts/src/lib/tsc/component/alarm/generated/page/page.component.html","../../../projects/library/alerts/src/lib/tsc/component/alarm/generated/page/page-routing.module.ts","../../../projects/library/alerts/src/lib/tsc/component/alarm/generated/page/page.module.ts","../../../projects/library/alerts/src/public-api.ts","../../../projects/library/alerts/src/library-alerts.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-alerts',\n  template: `\n    <p>\n      alerts works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class AlertsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { AlertsComponent } from './alerts.component';\n\n@NgModule({\n    declarations: [\n        AlertsComponent,\n    ],\n    imports: [\n    ],\n    exports: [\n        AlertsComponent\n    ]\n})\n\nexport class AlertsModule {\n    static forRoot(environment: any): ModuleWithProviders<AlertsModule> {\n        return {\n            ngModule: AlertsModule,\n            providers: [\n                { provide: 'environment', useValue: environment }\n            ]\n        };\n    }\n}","export interface AlertPageM {\n    id: number;\n    name: string;\n    associatedWith: string;\n    type: string;\n    status: boolean;\n    ruleDescription: string;\n}\n\nexport class AlertPage implements AlertPageM {\n    id;\n    name;\n    associatedWith;\n    type;\n    status;\n    ruleDescription;\n}\n\nexport interface AlertRuleM {\n    alertType: string;\n    name: string;\n    parameterID: number,\n    isAlertAtDeviceLevel: boolean;\n    isSubEntitiesSelected: boolean;\n    entityID: number[];\n    deviceID: number[];\n    periodicAlertType: string;\n    frequency: string;\n    unitID: number;\n    condition: string;\n    value: number;\n    startValue: number;\n    endValue: number;\n    userChoice: string;\n    userID: number[];\n    isAnyOtherUser: boolean;\n    otherUserEmail: number[];\n    smsFrequency: string;\n    emailFrequency: string;\n    isShift: boolean;\n    shiftID: number[];\n}\n\nexport class AlertRule implements AlertRuleM {\n    alertType;\n    name;\n    parameterID;\n    isAlertAtDeviceLevel;\n    isSubEntitiesSelected;\n    entityID;\n    deviceID;\n    periodicAlertType;\n    frequency;\n    unitID;\n    condition;\n    value;\n    startValue;\n    endValue;\n    userChoice;\n    userID;\n    isAnyOtherUser;\n    otherUserEmail;\n    smsFrequency;\n    emailFrequency;\n    isShift;\n    shiftID;\n}\n\nexport class AlertStatusI {\n    total: number;\n    active: number;\n    resolved: number;\n}\n\nexport class AlertStatus implements AlertStatusI {\n    total;\n    active;\n    resolved;\n}","export interface AlarmPageM {\n    id: number;\n    alertName: string;\n    associatedWith: string;\n    parameterLabel: string;\n    type: string;\n    time: string;\n    status: string;\n    description: string;\n}\n\nexport class AlarmPage implements AlarmPageM {\n    id;\n    alertName;\n    associatedWith;\n    parameterLabel;\n    type;\n    time;\n    status;\n    description;\n}","export interface EscalationPermissionM {\n    isEscalationAllowed: boolean;\n}\n\nexport class EscalationPermission implements EscalationPermissionM {\n    isEscalationAllowed;\n}\n\nexport interface EscalationLevelCountM {\n    level: number;\n}\n\nexport class EscalationLevelCount implements EscalationLevelCountM {\n    level;\n}\n\nexport interface EscalationLevelInfoM {\n    alertRuleID: number;\n    escalationRuleID: number;\n    level: number;\n    intervalValue: number;\n    intervalFrequencyKey: string;\n    intervalFrequencyName: string;\n    notificationPrefValue: number;\n    notificationPrefKey: string;\n    notificationPrefName: string;\n    userChoice: string;\n    userID: number[];\n    isAnyOtherUser: boolean;\n    otherUserEmail: number[];\n}\n\nexport class EscalationLevelInfo implements EscalationLevelInfoM {\n    alertRuleID;\n    escalationRuleID;\n    level;\n    intervalValue;\n    intervalFrequencyKey;\n    intervalFrequencyName;\n    notificationPrefValue;\n    notificationPrefKey;\n    notificationPrefName;\n    userChoice;\n    userID;\n    isAnyOtherUser;\n    otherUserEmail;\n}","export enum AlertTypeLabelEnum {\n    INSTANTANEOUS_LABEL = 'Instantaneous',\n    PERIODIC_LABEL = 'Periodic',\n    CONSTANT_DATA_LABEL = 'Constant data'\n}\n\nexport enum AlertTypeEnum {\n    INSTANTANEOUS = 'INSTANTANEOUS',\n    PERIODIC = 'PERIODIC',\n    CONSTANT_DATA = 'CONSTANT_DATA',\n    ALL = 'ALL'\n}\n\nexport enum AlertStatusEnum {\n    ACTIVE = 'ACTIVE',\n    RESOLVED = 'RESOLVED'\n}\n\nexport enum AlertStatusLabelEnum {\n    ACTIVE_LABEL = 'Active',\n    RESOLVED_LABEL = 'Resolved'\n}","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { AlertPageM, AlertRuleM, AlertStatusI } from '../model/alert.model';\nimport { AlarmPageM } from '../model/alarm.model';\n\n// tsc-library\nimport { PageM, StaticI } from '@library/tsc-common';\n// /tsc-library/\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class AlertRuleController {\n\n    constructor(\n        private http: HttpClient,\n        @Inject('environment') private environment: any\n    ) { }\n\n    getPeriodicAlertType(orgID: number): Observable<StaticI[]> {\n        return this.http.get<StaticI[]>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/periodic-alert-type`);\n    }\n\n    getAlertRuleByPage(pageNo: number, pageSize: number, sortBy: string, orderBy: string, search: any[], alertType, orgID: number): Observable<PageM<AlertPageM>> {\n        let params = new HttpParams();\n\n        params = params.append('pageNo', pageNo);\n        params = params.append('pageSize', pageSize);\n        params = params.append('sortBy', sortBy);\n        params = params.append('orderBy', orderBy);\n        params = params.append('alertType', alertType);\n\n        search.forEach(search => params = params.append('search', search));\n        return this.http.get<PageM<AlertPageM>>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alert-rules/page`, { params: params });\n    }\n\n    getActiveAlertByPage(orgID: number, requestBody): Observable<PageM<AlarmPageM>> {\n        return this.http.post<PageM<AlarmPageM>>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alerts/active/page`, requestBody);\n    }\n\n    getResolvedAlertByPage(orgID: number, requestBody): Observable<PageM<AlarmPageM>> {\n        return this.http.post<PageM<AlarmPageM>>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alerts/resolved/page`, requestBody);\n    }\n\n    updateAlertRuleStatus(orgID, alertRuleID, requestBody) {\n        return this.http.patch(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alert-rules/${alertRuleID}/status`, requestBody);\n    }\n\n    createAlertRule(orgID, requestBody) {\n        return this.http.post(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alert-rules`, requestBody);\n    }\n\n    getAlertRuleByID(orgID, alertRuleID): Observable<AlertRuleM> {\n        return this.http.get<AlertRuleM>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alert-rules/${alertRuleID}`);\n    }\n\n    updateAlertRule(orgID, alertRuleID, requestBody) {\n        return this.http.patch(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alert-rules/${alertRuleID}`, requestBody);\n    }\n\n    deleteAlertRule(orgID, alertRuleID) {\n        return this.http.delete(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alert-rules/${alertRuleID}`)\n    }\n\n    getAlertStatusInfo(orgID): Observable<AlertStatusI> {\n        return this.http.get<AlertStatusI>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alerts/status`);\n    }\n}","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { EscalationLevelCountM, EscalationLevelInfoM, EscalationPermissionM } from '../model/escalation.model';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class EscalationController {\n\n    constructor(\n        private http: HttpClient,\n        @Inject('environment') private environment: any\n    ) { }\n\n    getEscalationPermission(orgID): Observable<EscalationPermissionM> {\n        return this.http.get<EscalationPermissionM>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/escalation/permission`);\n    }\n\n    getEscalationLevelCount(orgID): Observable<EscalationLevelCountM> {\n        return this.http.get<EscalationLevelCountM>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/escalation/level/count`);\n    }\n\n    createEsclationByLevelID(orgID, requestBody) {\n        return this.http.post(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alerts/escalation`, requestBody);\n    }\n\n    getAllLevelEscalation(orgID, alertRuleID): Observable<EscalationLevelInfoM[]> {\n        return this.http.get<EscalationLevelInfoM[]>(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alerts/${alertRuleID}/escalation`);\n    }\n\n    updateEsclationByLevelID(orgID, escalationRuleID, requestBody) {\n        return this.http.patch(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alerts/escalation/${escalationRuleID}`, requestBody);\n    }\n\n    deleteEsclationByLevelID(orgID, escalationRuleID) {\n        return this.http.delete(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/alerts/escalation/${escalationRuleID}`)\n    }\n\n}","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { FormControl } from '@angular/forms';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { merge, fromEvent, of as observableOf } from 'rxjs';\nimport { map, startWith, switchMap, catchError } from \"rxjs/operators\";\n\nimport { faPlus, faEllipsisV } from '@fortawesome/free-solid-svg-icons';\n\nimport { AlertTypeEnum, AlertTypeLabelEnum } from '../../../enum/alert.enum';\n\nimport { AlertPageM } from '../../../model/alert.model';\nimport { EscalationPermission, EscalationPermissionM } from '../../../model/escalation.model';\n\nimport { AlertRuleController } from '../../../controller/alert.controller';\nimport { EscalationController } from '../../../controller/escalation.controller';\n\n// tsc-library\nimport { StorageService } from '@library/storage-service';\nimport { ToastrService } from '@library/toastr-service';\nimport { TABLE_CONSTANT, COMMON_CONSTANT, ButtonLabelEnum, DialogEnum, DialogOneEnum, PageM, SearchBarOneComponent, DialogOneComponent, ResponseM, MATERIAL_CONSTANT } from '@library/tsc-common';\n// /tsc-library/\n\n@Component({\n    selector: 'lib-page',\n    templateUrl: './page.component.html',\n    styleUrls: ['./page.component.scss']\n})\n\nexport class PageComponent implements OnInit {\n    faPlus = faPlus;\n    faEllipsisV = faEllipsisV;\n\n    TABLE_CONSTANT = TABLE_CONSTANT;\n    COMMON_CONSTANT = COMMON_CONSTANT;\n    MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n\n    AlertTypeEnum = AlertTypeEnum;\n    AlertTypeLabelEnum = AlertTypeLabelEnum;\n    ButtonLabelEnum = ButtonLabelEnum;\n    DialogEnum = DialogEnum;\n\n    orgID: any;\n    alertLabel: any;\n\n    baseUrl: any;\n\n    displayedColumn: string[] = ['id', 'name', 'associatedWith', 'ruleDescription', 'status', 'action'];\n    resultLength: number = 0;\n    dataSource: any[] = [];\n\n    searchFlag: boolean = false;\n    searchValue: string;\n    searchArr: any[] = [];\n\n    escalationPermissionM = new EscalationPermission();\n\n    alertStatusFC: FormControl = new FormControl();\n\n    @ViewChild('sort') sort: MatSort;\n    @ViewChild('paginator') paginator: MatPaginator;\n    @ViewChild('refreshBtn') refreshBtn: ElementRef;\n    @ViewChild('searchBar') searchBar: SearchBarOneComponent;\n\n    constructor(\n        private router: Router,\n        private activatedRoute: ActivatedRoute,\n        private storageService: StorageService,\n        private toastrService: ToastrService,\n        private alertController: AlertRuleController,\n        private escalationController: EscalationController,\n        private dialog: MatDialog,\n    ) { }\n\n    ngOnInit(): void {\n        this.orgID = this.storageService.getStorage('currentOrgID');\n\n        this.activatedRoute.data.subscribe(data => {\n            this.alertLabel = data['alertType'];\n        })\n\n        const currentUrl = this.router.url;\n        const segments = currentUrl.split('/');\n        segments.pop();\n\n        this.baseUrl = segments.join('/');\n\n        this.getEscalationPermission();\n    }\n\n    ngAfterViewInit() {\n        merge(\n            this.paginator.page,\n            this.sort.sortChange,\n            fromEvent(this.refreshBtn.nativeElement, 'click')\n        ).pipe(\n            startWith({}),\n            switchMap((): any => {\n                this.searchArr = [];\n                if (this.searchFlag) {\n                    this.searchArr.push('name:' + this.searchValue)\n                }\n\n                const alertType = this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL ? AlertTypeEnum.INSTANTANEOUS : AlertTypeEnum.PERIODIC;\n\n                return this.alertController.getAlertRuleByPage(\n                    this.paginator.pageIndex,\n                    this.paginator.pageSize,\n                    this.sort.active,\n                    this.sort.direction,\n                    this.searchArr,\n                    alertType,\n                    this.orgID\n                ).pipe(catchError(() => observableOf(null)));\n            }),\n            map((response: PageM<AlertPageM>): any => {\n                if (response == null) {\n                    this.resultLength = 0;\n                    return [];\n                }\n                this.resultLength = response[\"totalCount\"];\n                return response[\"records\"];\n            })\n        ).subscribe((dataSource) => {\n            this.dataSource = dataSource;\n            this.dataSource.forEach(alert => {\n                this.alertStatusFC[alert.id] = new FormControl(alert.status);\n            });\n        });\n    }\n\n    getEscalationPermission() {\n        this.escalationController.getEscalationPermission(this.orgID).subscribe((escalationPermissionRes: EscalationPermissionM) => {\n            this.escalationPermissionM = escalationPermissionRes;\n        }, error => {\n            console.log('error in getEscalationPermission() -', error);\n        })\n    }\n\n    getAlertStatusFC(alertID: number): FormControl {\n        return this.alertStatusFC[alertID];\n    }\n\n    alertStatusChange(alertID) {\n        let requestBody = {};\n        requestBody['status'] = this.alertStatusFC[alertID].value;\n\n        this.alertController.updateAlertRuleStatus(this.orgID, alertID, requestBody)\n            .subscribe((alertStatusRes: ResponseM) => {\n                let toast = this.toastrService.getToastStatus(alertStatusRes['status']);\n                this.toastrService.openToast(toast.title, alertStatusRes.message, toast.color);\n            },\n                error => {\n                    console.log('error in alertStatusChange - ', error);\n                });\n    }\n\n    searchFn(value: string) {\n        this.searchFlag = true;\n        this.searchValue = value;\n        if (value.length == 0) {\n            this.resetSearch();\n        } else {\n            this.paginator.pageIndex = 0;\n        }\n        this.refreshBtn.nativeElement.click();\n    }\n\n    resetSearch() {\n        this.searchFlag = false;\n        this.searchBar.searchClear();\n    }\n\n    openDeleteAlertDialog(alertID, alertName) {\n        const dialog = this.dialog.open(DialogOneComponent, {\n            minWidth: '450px',\n            maxWidth: '450px',\n            data: {\n                type: DialogOneEnum.DELETE,\n                icon: 'dangerous',\n                header: 'Delete alert rule?',\n                body: '<b>' + alertName + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',\n                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,\n                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL\n            }\n        });\n        dialog.afterClosed().subscribe(res => {\n            if (res) {\n                this.deleteAlertRule(alertID);\n            }\n        })\n    }\n\n    deleteAlertRule(alertID) {\n        this.alertController.deleteAlertRule(this.orgID, alertID).subscribe((deleteRes: ResponseM) => {\n            this.refreshBtn.nativeElement.click();\n            let toast = this.toastrService.getToastStatus(deleteRes.status);\n            this.toastrService.openToast(toast.title, deleteRes.message, toast.color);\n        });\n    }\n\n}","<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ alertLabel }} Alert</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar searchBy=\"name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n                <a class=\"btn btn-sm btn-success btnBase\" matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" [routerLink]=\"[baseUrl, 'create']\">\n                    <fa-icon [icon]=\"faPlus\"></fa-icon>&nbsp; {{ alertLabel }} Alert\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <div class=\"overflowX customScrollBar\">\n        <table class=\"w-100\" mat-table [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"id\"\n            matSortDirection=\"asc\" matSortDisableClear>\n\n            <ng-container matColumnDef=\"id\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n                    ID\n                </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    {{ row['id'] ? row['id']: COMMON_CONSTANT.HYPHEN }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"name\">\n                <th class=\"px-3 columnWidth2\" mat-header-cell *matHeaderCellDef> Name </th>\n                <td class=\"px-3 columnWidth2\" mat-cell *matCellDef=\"let row\" [matTooltip]=\"row?.['name']?.length>20? row['name']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['name'] ? row['name']: COMMON_CONSTANT.HYPHEN) | dotdotdot:20}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"associatedWith\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Associated with </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.['associatedWith']?.length>25? row['associatedWith']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['associatedWith'] ? row['associatedWith']: COMMON_CONSTANT.HYPHEN) | dotdotdot:25}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"ruleDescription\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Rule </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.['ruleDescription']?.length>25? row['ruleDescription']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['ruleDescription'] ? row['ruleDescription']: COMMON_CONSTANT.HYPHEN) | dotdotdot:25}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"status\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Status </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <mat-slide-toggle [formControl]=\"getAlertStatusFC(row.id)\" (change)=\"alertStatusChange(row.id)\"></mat-slide-toggle>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"action\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef></th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <div class=\"d-flex align-items-center\">\n                        <div class=\"btn-group\" ngbDropdown placement=\"left\">\n                            <button type=\"button\" ngbDropdownToggle class=\"dropdown-after dropdownAfter btn\">\n                                <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\n                            </button>\n                            <div ngbDropdownMenu>\n                                <button class=\"dropdown-item\" [routerLink]=\"[baseUrl, row['id'], 'update']\">\n                                    {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                                </button>\n                                <button class=\"dropdown-item\" [routerLink]=\"[baseUrl + '/' + row['id'] + '/escalation']\" *ngIf=\"escalationPermissionM\">\n                                    Escalation rule\n                                </button>\n                                <button class=\"btn btn-outline-danger rounded-0 dropdown-item\" (click)=\"openDeleteAlertDialog(row.id, row.name)\">\n                                    {{ ButtonLabelEnum.DELETE_BTN_LABEL }}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n            <tr mat-row *matRowDef=\"let task; columns: displayedColumn;\"></tr>\n\n            <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                    {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                </td>\n            </tr>\n        </table>\n    </div>\n    <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageComponent } from './page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: PageComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\n\nexport class PageRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PageRoutingModule } from './page-routing.module';\nimport { PageComponent } from './page.component';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\nimport { SearchBarOneModule } from '@library/tsc-common';\nimport { EllipsisPipeModule } from '@library/tsc-common';\n\n@NgModule({\n    declarations: [\n        PageComponent,\n    ],\n    imports: [\n        CommonModule,\n        PageRoutingModule,\n        SearchBarOneModule,\n        EllipsisPipeModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NgbModule,\n        FontAwesomeModule,\n        MatIconModule,\n        MatButtonModule,\n        MatRippleModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatSortModule,\n        MatDialogModule,\n        MatTooltipModule,\n        MatSlideToggleModule\n    ]\n})\n\nexport class PageModule { }","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\n\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\n\nimport { merge } from 'rxjs';\nimport { isEqual } from \"lodash\";\n\nimport { AlertTypeEnum, AlertTypeLabelEnum } from '../../../enum/alert.enum';\n\nimport { AlertRule, AlertRuleM } from '../../../model/alert.model';\n\nimport { AlertRuleController } from '../../../controller/alert.controller';\n\n// tsc-library\nimport { StorageService } from '@library/storage-service';\nimport { ToastrColor, ToastrService } from '@library/toastr-service';\nimport { ProfileImg, User, UserContext, UserM, UserService } from '@library/user-service';\nimport { COMMON_CONSTANT, ButtonLabelEnum, MATERIAL_CONSTANT, MaterialFormFieldAppearance, TSCCommonService, InvalidForm, SearchBarTwoComponent, MatSelectSearchService, ResponseM, FormAction, PageTitleEnum, FormErrorEnum, StaticI, Static } from '@library/tsc-common';\nimport { LIST_CONSTANT, ParameterComponent, EntityService, ParameterEntityM, ParameterEntity, DevicesWithEntities, EntityDeviceService, DevicesWithEntitiesM, Shift, ShiftM, ShiftService, Unit, UnitM, UnitService } from '@library/tsc-lite';\n// /tsc-library/\n\n@Component({\n    selector: 'lib-create-update',\n    templateUrl: './create-update.component.html',\n    styleUrls: ['./create-update.component.scss']\n})\n\nexport class CreateUpdateComponent implements OnInit {\n\n    COMMON_CONSTANT = COMMON_CONSTANT;\n    MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n    LIST_CONSTANT = LIST_CONSTANT;\n\n    AlertTypeEnum = AlertTypeEnum;\n    AlertTypeLabelEnum = AlertTypeLabelEnum;\n    FormAction = FormAction;\n    FormErrorEnum = FormErrorEnum;\n    PageTitleEnum = PageTitleEnum;\n    ButtonLabelEnum = ButtonLabelEnum;\n    ProfileImg = ProfileImg;\n    InvalidForm = InvalidForm;\n    ToastrColor = ToastrColor;\n    UserContext = UserContext;\n    MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n\n    orgID: any;\n\n    alertRuleFG: FormGroup;\n\n    alertLabel: any;\n    action: any;\n    alertRuleID: any;\n    initialObject: any;\n\n    isEntityPanelExpanded: boolean = false;\n    isFormSubmit: boolean = false;\n    otherUser: boolean = false;\n    isEqual: boolean = true;\n\n    selectable = true;\n    removable = true;\n    addOnBlur = true;\n    readonly separatorKeysCodes = [ENTER, COMMA] as const;\n\n    userContext: any = UserContext.ROOT_ORG_USER;\n\n    inputPlaceholder = \"email1@domain.com, email2@domain.com\";\n\n    periodicAlertType = [new Static()];\n    conditionConstant: any[] = [];\n    entityM = [new ParameterEntity()];\n    devicesWithEntitiesM = [new DevicesWithEntities()];\n    unitM = [new Unit()];\n    userM = [new User()];\n    rootOrgUserM = [new User()];\n    currentOrgUserM = [new User()];\n    shiftM = [new Shift()];\n    alertRuleM = new AlertRule();\n\n    selectedEntities: number[] = [];\n    manualSelectedEntities: number[] = [];\n    allDeviceID: number[] = [];\n    allShiftID: number[] = [];\n    selectedUserIds: number[] = [];\n    totalDeviceCount: number = 0;\n    totalShiftCount: number = 0;\n\n    userFC: FormControl = new FormControl(true, Validators.required);\n    selectedUserFC: FormControl = new FormControl([], [Validators.required]);\n\n    unitSearchUtil: MatSelectSearchService = new MatSelectSearchService(['name']);\n    userSearchUtil: MatSelectSearchService = new MatSelectSearchService(['firstName', 'lastName', 'email']);\n\n    @ViewChild('searchBar') searchBar: SearchBarTwoComponent;\n    @ViewChild('parameterFilterChild') parameterFilterChild: ParameterComponent;\n\n    constructor(\n        private activatedRoute: ActivatedRoute,\n        private alertRuleFB: FormBuilder,\n        private alertController: AlertRuleController,\n\n        // tsc-library\n        private storageService: StorageService,\n        private entityService: EntityService,\n        private entityDeviceService: EntityDeviceService,\n        private unitService: UnitService,\n        private shiftService: ShiftService,\n        private toastrService: ToastrService,\n        public userService: UserService,\n        public tscCommonService: TSCCommonService\n        // /tsc-library/\n    ) { }\n\n    ngOnInit(): void {\n        this.orgID = this.storageService.getStorage('currentOrgID');\n        this.conditionConstant = LIST_CONSTANT.CONDITION;\n\n        this.activatedRoute.data.subscribe(data => {\n            this.alertLabel = data['alertType'];\n\n            if(this.alertLabel == AlertTypeLabelEnum.PERIODIC_LABEL) {\n                this.getPeriodicAlertType();\n            }\n            this.action = data['alertAction'];\n        })\n\n        this.getUsersByOrgID();\n        this.getCurrentOrgUserAccess();\n        this.getShift();\n\n        this.alertInit();\n\n        this.activatedRoute.params.subscribe((pathParam) => {\n            if (pathParam.alertID != null) {\n                this.alertRuleID = pathParam.alertID;\n                this.getAlertRuleByID();\n            }\n        })\n\n    }\n\n    getPeriodicAlertType() {\n        this.alertController.getPeriodicAlertType(this.orgID).subscribe((res: StaticI[]) => {\n            this.periodicAlertType = res;\n        }, error => {\n            console.log('error in getPeriodicAlertType() -', error);\n        })\n    }\n\n    ngAfterViewInit() {\n        merge(\n            this.parameterFilterChild.emitFilter\n        ).subscribe(() => this.valueChange())\n    }\n\n    valueChange() {\n        if (this.parameterFilterChild.selectedParameterFC.value) {\n            const selectedParameter = this.parameterFilterChild.selectedParameterFC.value;\n            this.alertRuleFG.controls['parameterID'].patchValue(selectedParameter);\n\n            this.alertRuleFG.get('entityID').reset([]);\n            this.alertRuleFG.get('isSubEntitiesSelected').patchValue(false);\n            this.alertRuleFG.get('isAlertAtDeviceLevel').reset();\n            this.allDeviceID = [];\n            this.alertRuleFG.get('deviceID').reset([]);\n            this.alertRuleFG.get('unitID').reset();\n\n            this.getEntitiesByParameterID(selectedParameter);\n            this.getUnitByParameterID(selectedParameter);\n        }\n    }\n\n    alertInit() {\n        this.alertRuleFG = this.alertRuleFB.group({\n            alertType: [this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL ? AlertTypeEnum.INSTANTANEOUS : AlertTypeEnum.PERIODIC],\n            name: [, Validators.required],\n            parameterID: [, Validators.required],\n            entityID: [[], Validators.required],\n            isSubEntitiesSelected: [false],\n            isAlertAtDeviceLevel: [],\n            deviceID: [[]],\n            periodicAlertType: [, this.alertLabel == AlertTypeLabelEnum.PERIODIC_LABEL ? Validators.required : []],\n            unitID: [, Validators.required],\n            condition: [, Validators.required],\n            frequency: [, Validators.required],\n            value: [],\n            startValue: [],\n            endValue: [],\n            userChoice: [UserContext.ROOT_ORG_USER],\n            userID: [[], Validators.required],\n            isAnyOtherUser: [false],\n            otherUserEmail: [[]],\n            smsFrequency: [, Validators.required],\n            emailFrequency: [, Validators.required],\n            isShift: [, Validators.required],\n            shiftID: [[]]\n        });\n\n        if (this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL) {\n            this.setValidatorsForAlertLevelPref();\n            this.setValidatorsForDevice();\n        }\n\n        this.alertRuleFG.get('periodicAlertType')?.valueChanges.subscribe(value => {\n            if (value == 'BUDGET') {\n                this.conditionConstant = LIST_CONSTANT.CONDITION.filter(condition => condition.value != 'BETWEEN');\n            } else {\n                this.conditionConstant = LIST_CONSTANT.CONDITION;\n            }\n        });\n\n        this.alertRuleFG.get('isShift')?.valueChanges.subscribe(value => {\n            const shiftControl = this.alertRuleFG.get('shiftID');\n            shiftControl?.clearValidators();\n\n            if (value) {\n                this.addValidation(shiftControl, [Validators.required]);\n            } else {\n                shiftControl?.clearValidators();\n            }\n            shiftControl?.updateValueAndValidity();\n        });\n    }\n\n    addValidation(control: AbstractControl, validators: ValidatorFn[]) {\n        control.setValidators(validators);\n        control.updateValueAndValidity();\n    }\n\n    getAlertRuleByID() {\n        this.alertController.getAlertRuleByID(this.orgID, this.alertRuleID).subscribe((alertRuleRes: AlertRuleM) => {\n            this.alertRuleM = alertRuleRes;\n            this.initialObject = this.alertRuleM;\n\n            this.getEntitiesByParameterID(this.alertRuleM.parameterID);\n            this.getUnitByParameterID(this.alertRuleM.parameterID);\n            this.setValidatorsForOtherUser();\n            this.patchAlertFG();\n        }, error => {\n            console.log('error in getAlertRuleByID() -', error);\n        })\n    }\n\n    patchAlertFG() {\n        this.alertRuleFG.patchValue({\n            alertType: this.alertRuleM.alertType,\n            name: this.alertRuleM.name,\n            parameterID: this.alertRuleM.parameterID,\n            isAlertAtDeviceLevel: this.alertRuleM.isAlertAtDeviceLevel,\n            entityID: this.alertRuleM.entityID,\n            isSubEntitiesSelected: this.alertRuleM.isSubEntitiesSelected,\n            periodicAlertType: this.alertRuleM.periodicAlertType,\n            frequency: this.alertRuleM.frequency,\n            unitID: this.alertRuleM.unitID,\n            condition: this.alertRuleM.condition,\n            value: this.alertRuleM.value,\n            startValue: this.alertRuleM.startValue,\n            endValue: this.alertRuleM.endValue,\n            userChoice: this.alertRuleM.userChoice,\n            userID: this.alertRuleM.userID,\n            isAnyOtherUser: this.alertRuleM.isAnyOtherUser,\n            otherUserEmail: this.alertRuleM.otherUserEmail,\n            smsFrequency: this.alertRuleM.smsFrequency,\n            emailFrequency: this.alertRuleM.emailFrequency,\n            isShift: this.alertRuleM.isShift\n        })\n\n        this.conditionChange(this.alertRuleFG.get('condition').value);\n\n        this.alertRuleFG.get('deviceID').patchValue((this.alertRuleM.deviceID.length == this.totalDeviceCount) ? [-1, ...this.alertRuleM.deviceID] : [...this.alertRuleM.deviceID]);\n        this.alertRuleFG.get('shiftID').patchValue((this.alertRuleM.shiftID.length == this.totalShiftCount) ? [-1, ...this.alertRuleM.shiftID] : [...this.alertRuleM.shiftID]);\n\n        this.parameterFilterChild.selectedParameterFC.patchValue(this.alertRuleM.parameterID);\n\n        this.userFC.patchValue(this.alertRuleM.userChoice == UserContext.CURRENT_ORG_USER ? false : true);\n        this.patchUserFields();\n\n        this.alertRuleFG.valueChanges.subscribe(() => {\n            this.isEqual = isEqual(this.initialObject, this.alertRuleFG.value);\n        });\n    }\n\n    patchUserFields() {\n        this.selectedUserIds = this.alertRuleM.userID;\n\n        this.selectedUserFC.setValue(this.selectedUserIds);\n        this.alertRuleFG.get('userID').setValue(this.selectedUserIds);\n\n        if (this.userContext == UserContext.ROOT_ORG_USER) {\n            this.userM = this.rootOrgUserM.filter(user => !this.selectedUserIds.includes(user.id));\n        } else {\n            this.userM = this.currentOrgUserM.filter(user => !this.selectedUserIds.includes(user.id));\n        }\n\n        this.userSearchUtil.entityArr = this.userM;\n        this.userSearchUtil.createSubscription();\n    }\n\n\n    /* entities code */\n    async getEntitiesByParameterID(parameterID) {\n        this.entityM = <ParameterEntityM[]>await this.entityService.getEntitiesByParameterID(this.orgID, parameterID);\n    }\n\n    entityPanelOpened() {\n        this.isEntityPanelExpanded = true;\n    }\n\n    entityPanelClosed() {\n        this.isEntityPanelExpanded = false;\n    }\n\n    entityChange(entityID, event) {\n        this.allDeviceID = [];\n        this.alertRuleFG.get('deviceID').reset([]);\n\n        let manualSelectedEntities = [...this.manualSelectedEntities];\n        let selctedEntity = this.alertRuleFG.get('entityID').value || [];\n\n        if (event.checked) {\n            selctedEntity.push(entityID);\n            manualSelectedEntities.push(entityID)\n            if (this.alertRuleFG.get('isSubEntitiesSelected').value == true) {\n                this.checkChildren(entityID, selctedEntity);\n            }\n        } else {\n            selctedEntity = selctedEntity.filter(id => id != entityID);\n            manualSelectedEntities = manualSelectedEntities.filter(id => id != entityID);\n        }\n        this.manualSelectedEntities = manualSelectedEntities;\n        this.alertRuleFG.get('entityID').setValue(selctedEntity);\n    }\n\n    checkChildren(entityID, selectedEntities) {\n        const entity = this.findEntityById(this.entityM, entityID);\n\n        if (entity && entity.children && entity.children.length > 0) {\n            const childIds = this.getAllEntityID(entity.children);\n            childIds.forEach(id => {\n                if (!selectedEntities.includes(id)) {\n                    selectedEntities.push(id);\n                }\n            });\n            this.alertRuleFG.get('entityID').setValue([...selectedEntities, ...childIds]);\n        }\n    }\n\n    getAllEntityID(entities: any[]): number[] {\n        let allIds: number[] = [];\n        for (const entity of entities) {\n            allIds.push(entity.id);\n            if (entity.children && entity.children.length > 0) {\n                allIds = allIds.concat(this.getAllEntityID(entity.children));\n            }\n        }\n        return allIds;\n    }\n\n    isSelected(entityId: number): boolean {\n        const selectedEntities = this.alertRuleFG.get('entityID').value || [];\n        return selectedEntities.includes(entityId);\n    }\n\n    selectAllSubEntities(event: any) {\n        this.alertRuleFG.get('deviceID').reset([]);\n\n        const isSubEntitiesSelected = this.alertRuleFG.get('isSubEntitiesSelected');\n        let selectedEntities = this.alertRuleFG.get('entityID').value || [];\n\n        isSubEntitiesSelected.setValue(event.checked);\n\n        if (isSubEntitiesSelected.value) {\n            this.checkAllSubEntities(selectedEntities);\n        } else {\n            this.uncheckAllSubEntities(selectedEntities);\n        }\n    }\n\n    private checkAllSubEntities(selectedEntities: number[]) {\n\n        let entitiesToAdd: Set<number> = new Set(selectedEntities);\n\n        for (const entityId of selectedEntities) {\n            const entity = this.findEntityById(this.entityM, entityId);\n\n            if (entity && entity.children && entity.children.length > 0) {\n                const childIds = this.getAllEntityID(entity.children);\n                childIds.forEach(id => entitiesToAdd.add(id));\n            }\n        }\n\n        this.alertRuleFG.get('entityID').setValue([...entitiesToAdd]);\n    }\n\n    private uncheckAllSubEntities(selectedEntities: number[]) {\n        let updatedSelectedEntities;\n\n        if (this.action == FormAction.UPDATE) {\n            updatedSelectedEntities = selectedEntities.filter(entityId => {\n                const entity = this.findEntityById(this.entityM, entityId);\n\n                if (entity && entity.children) {\n                    selectedEntities = selectedEntities.filter(id => !entity.children.some(child => child.id == id));\n                }\n                this.alertRuleFG.get('entityID').setValue(selectedEntities);\n            });\n\n        } else {\n            updatedSelectedEntities = selectedEntities.filter(id => this.manualSelectedEntities.includes(id));\n            this.alertRuleFG.get('entityID').setValue(updatedSelectedEntities);\n        }\n    }\n\n    findEntityById(entities: any[], entityId: number): any {\n        for (const entity of entities) {\n            if (entity.id == entityId) {\n                return entity;\n            } else if (entity.children && entity.children.length > 0) {\n                const foundEntity = this.findEntityById(entity.children, entityId);\n                if (foundEntity) {\n                    return foundEntity;\n                }\n            }\n        }\n        return null;\n    }\n    /* entities code */\n\n\n    setValidatorsForAlertLevelPref() {\n        this.alertRuleFG.get('entityID').valueChanges.subscribe((value) => {\n            const isAlertAtDeviceLevelControl = this.alertRuleFG.get('isAlertAtDeviceLevel');\n\n            if (value && value.length > 0) {\n                isAlertAtDeviceLevelControl.setValidators([Validators.required]);\n            } else {\n                isAlertAtDeviceLevelControl.clearValidators();\n            }\n\n            isAlertAtDeviceLevelControl.updateValueAndValidity();\n        });\n    }\n\n\n    /* devices code */\n    setValidatorsForDevice() {\n        this.alertRuleFG.get('isAlertAtDeviceLevel').valueChanges.subscribe((value) => {\n\n            const deviceIDControl = this.alertRuleFG.get('deviceID');\n            const parameterID = this.alertRuleFG.get('parameterID').value;\n            const entityID = this.alertRuleFG.get('entityID').value;\n\n            if (value && this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL) {\n                if (parameterID && entityID?.length > 0) {\n                    this.getDevicesWithEntities(entityID, parameterID);\n                }\n                this.alertRuleFG.get('deviceID').reset([]);\n                deviceIDControl.setValidators([Validators.required]);\n            } else {\n                this.alertRuleFG.get('deviceID').reset([]);\n                deviceIDControl.clearValidators();\n            }\n\n            deviceIDControl.updateValueAndValidity();\n        })\n    }\n\n    async getDevicesWithEntities(entityID, parameterID) {\n        let requestBody = {};\n        requestBody['entityID'] = entityID;\n        requestBody['parameterID'] = parameterID;\n\n        this.devicesWithEntitiesM = <DevicesWithEntitiesM[]>await this.entityDeviceService.getDevicesWithEntities(this.orgID, requestBody);\n\n        this.devicesWithEntitiesM?.forEach(entity => {\n            this.totalDeviceCount += entity?.devices?.length;\n\n            const deviceIDs = entity?.devices?.map(device => device?.id);\n            this.allDeviceID?.push(...deviceIDs);\n        });\n    }\n\n    selectAllDevices() {\n        if (!this.alertRuleFG.get('deviceID').value.includes(-1)) {\n            this.alertRuleFG.get('deviceID').reset([]);\n            return;\n        }\n        this.alertRuleFG.get('deviceID').setValue([-1, ...this.allDeviceID]);\n    }\n\n    selectDevices() {\n        const selected = this.alertRuleFG.get('deviceID').value;\n\n        if (selected.includes(-1)) {\n            selected.shift();\n            this.alertRuleFG.get('deviceID').patchValue(selected);\n        } else if (this.alertRuleFG.get('deviceID').value.length == this.totalDeviceCount) {\n            this.allDeviceID.splice(0, 0, -1);\n            this.alertRuleFG.get('deviceID').patchValue(this.allDeviceID);\n        } else {\n            const filteredSelected = selected.filter(s => s != -1);\n            this.alertRuleFG.get('deviceID').patchValue(filteredSelected);\n        }\n    }\n    /* devices code */\n\n\n    async getUnitByParameterID(parameterID) {\n        this.unitM = <UnitM[]>await this.unitService.getUnitByParameterID(this.orgID, parameterID);\n\n        this.unitSearchUtil.entityArr = this.unitM;\n        this.unitSearchUtil.createSubscription();\n    }\n\n    unitChange(selectedUnit) {\n        this.alertRuleFG.get('unitID').patchValue(selectedUnit);\n    }\n\n    conditionChange(condition) {\n        if (condition == 'BETWEEN') {\n            this.alertRuleFG.get('value').clearValidators();\n            this.alertRuleFG.get('startValue').setValidators([Validators.required, this.validateStartEndValues.bind(this)]);\n            this.alertRuleFG.get('endValue').setValidators([Validators.required, this.validateStartEndValues.bind(this)]);\n        } else {\n            this.alertRuleFG.get('startValue').clearValidators();\n            this.alertRuleFG.get('endValue').clearValidators();\n            this.alertRuleFG.get('value').setValidators([Validators.required]);\n        }\n\n        this.alertRuleFG.get('value').updateValueAndValidity();\n        this.alertRuleFG.get('startValue').updateValueAndValidity();\n        this.alertRuleFG.get('endValue').updateValueAndValidity();\n    }\n\n    showValueField(): boolean {\n        return this.alertRuleFG.controls['condition'].value != 'BETWEEN';\n    }\n\n    showStartEndFields(): boolean {\n        return this.alertRuleFG.controls['condition'].value == 'BETWEEN';\n    }\n\n    validateStartEndValues() {\n        const startValue = this.alertRuleFG.get('startValue').value;\n        const endValue = this.alertRuleFG.get('endValue').value;\n\n        if (startValue != null && endValue != null && startValue >= endValue) {\n            return { 'invalidRange': true };\n        }\n\n        return null;\n    }\n\n    getFrequency() {\n        return this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL\n            ? this.LIST_CONSTANT.ALERT_RULE_FREQUENCY.filter(option => option.value == 'INSTANT')\n            : this.LIST_CONSTANT.ALERT_RULE_FREQUENCY.filter(option => option.value != 'INSTANT');\n    }\n\n\n    /* users code */\n    async getUsersByOrgID() {\n        this.rootOrgUserM = <UserM[]>await this.userService.getUsersByOrgID(this.orgID);\n\n        this.userM = this.rootOrgUserM;\n        this.userSearchUtil.entityArr = this.userM;\n        this.userSearchUtil.createSubscription();\n    }\n\n    async getCurrentOrgUserAccess() {\n        this.currentOrgUserM = <UserM[]>await this.userService.getCurrentOrgUserAccess(this.orgID);\n    }\n\n    userContextChange() {\n        this.selectedUserIds = [];\n\n        if (this.userFC.value) {\n            this.userContext = UserContext.ROOT_ORG_USER;\n            this.userM = this.rootOrgUserM;\n            this.alertRuleFG.get('userChoice').setValue(this.userContext);\n        } else {\n            this.userContext = UserContext.CURRENT_ORG_USER;\n            this.userM = this.currentOrgUserM;\n            this.alertRuleFG.get('userChoice').setValue(this.userContext);\n        }\n\n        this.selectedUserFC.setValue(this.selectedUserIds);\n        this.alertRuleFG.get('userID').setValue(this.selectedUserIds);\n\n        this.userSearchUtil.entityArr = this.userM;\n        this.userSearchUtil.createSubscription();\n    }\n\n    onUserSelectionChange(userId: number) {\n        const index = this.selectedUserIds.indexOf(userId);\n\n        if (index == -1) {\n            this.selectedUserIds.push(userId);\n\n            this.userM = this.userM.filter(user => user.id != userId);\n            this.userSearchUtil.entityArr = this.userM;\n            this.userSearchUtil.createSubscription();\n        }\n        this.selectedUserFC.setValue(this.selectedUserIds);\n        this.alertRuleFG.get('userID').setValue(this.selectedUserIds);\n    }\n\n    removeSelectedUsers(userId: number) {\n        const index = this.selectedUserIds.indexOf(userId);\n\n        if (index != -1) {\n            this.selectedUserIds.splice(index, 1);\n            this.selectedUserFC.setValue(this.selectedUserIds);\n            this.alertRuleFG.get('userID').setValue(this.selectedUserIds);\n\n            const removedUser = this.userContext == UserContext.ROOT_ORG_USER ? this.rootOrgUserM.find(user => user.id == userId) : this.currentOrgUserM.find(user => user.id == userId);\n            if (removedUser) {\n                this.userM.push(removedUser);\n                this.userSearchUtil.entityArr = this.userM;\n                this.userSearchUtil.createSubscription();\n            }\n        }\n    }\n\n    getSelectedUsers(): UserM[] {\n        return this.userContext == UserContext.ROOT_ORG_USER ? this.rootOrgUserM.filter(user => this.selectedUserIds.includes(user.id)) : this.currentOrgUserM.filter(user => this.selectedUserIds.includes(user.id));\n    }\n\n    setValidatorsForOtherUser() {\n        this.alertRuleFG.get('isAnyOtherUser').valueChanges.subscribe((value) => {\n\n            if (value == true) {\n                this.otherUserEmail.setValidators([Validators.required]);\n            } else {\n                this.otherUserEmail.reset([]);\n                this.otherUserEmail.clearValidators();\n            }\n\n            this.otherUserEmail.updateValueAndValidity();\n        });\n    }\n\n    addOtherUser(event: any) {\n        const isAnyOtherUser = this.alertRuleFG.get('isAnyOtherUser');\n\n        isAnyOtherUser.setValue(event.checked);\n\n        if (isAnyOtherUser.value) {\n            this.otherUserEmail.setValidators([Validators.required]);\n        } else {\n            this.otherUserEmail.reset([]);\n            this.otherUserEmail.clearValidators();\n        }\n\n        this.otherUserEmail.updateValueAndValidity();\n    }\n\n    onInput() {\n        this.inputPlaceholder = '';\n    }\n\n    get otherUserEmail() {\n        return this.alertRuleFG.get('otherUserEmail');\n    }\n\n    add(event: MatChipInputEvent): void {\n        const value = (event.value || '').trim();\n        if (value) {\n            const emails = value.split(',').map(email => email.trim());\n            const validEmails = emails.filter(email => this.tscCommonService.isValidEmail(email));\n            if (validEmails.length > 0) {\n                this.otherUserEmail.patchValue(this.otherUserEmail.value.concat(validEmails));\n            }\n        }\n        event.chipInput!.clear();\n    }\n\n    removeEmail(email): void {\n        const index = this.otherUserEmail.value.indexOf(email);\n        if (index >= 0) {\n            const emails = [...this.otherUserEmail.value];\n            emails.splice(index, 1);\n            this.otherUserEmail.setValue(emails);\n        }\n    }\n    /* users code */\n\n\n    /* shift code */\n    async getShift() {\n        this.shiftM = <ShiftM[]>await this.shiftService.getShift(this.orgID, 'NO');\n\n        this.totalShiftCount = this.shiftM.length;\n        this.shiftM.forEach(shift => this.allShiftID.push(shift['id']));\n    }\n\n    selectAllShifts() {\n        if (!this.alertRuleFG.get('shiftID').value.includes(-1)) {\n            this.alertRuleFG.get('shiftID').reset([]);\n            return;\n        }\n        this.alertRuleFG.get('shiftID').setValue([-1, ...this.allShiftID]);\n    }\n\n    selectedShift() {\n        const selected = this.alertRuleFG.get('shiftID').value;\n\n        if (selected.includes(-1)) {\n            selected.shift();\n            this.alertRuleFG.get('shiftID').patchValue(selected);\n        } else if (this.alertRuleFG.get('shiftID').value.length == this.totalShiftCount) {\n            this.allShiftID.splice(0, 0, -1);\n            this.alertRuleFG.get('shiftID').patchValue(this.allShiftID);\n        } else {\n            const filteredSelected = selected.filter(s => s != -1);\n            this.alertRuleFG.get('shiftID').patchValue(filteredSelected);\n        }\n    }\n    /* shift code */\n\n\n    createUpdateAlert() {\n\n        this.isFormSubmit = true;\n\n        let shiftID = this.tscCommonService.removeSelectAllID(this.alertRuleFG.controls['shiftID'].value);\n        let deviceID = this.tscCommonService.removeSelectAllID(this.alertRuleFG.controls['deviceID'].value);\n\n        this.alertRuleFG.get('deviceID').patchValue(deviceID);\n        this.alertRuleFG.get('shiftID').patchValue(shiftID);\n\n        if (this.alertRuleFG.invalid) {\n            this.alertRuleFG.markAllAsTouched();\n            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n            return;\n        }\n\n        if (this.action == FormAction.CREATE) {\n            this.alertController.createAlertRule(this.orgID, this.alertRuleFG.value)\n                .subscribe((createRes: ResponseM) => {\n\n                    let toast = this.toastrService.getToastStatus(createRes.status);\n                    this.toastrService.openToast(toast.title, createRes.message, toast.color);\n\n                    this.tscCommonService.back();\n                },\n                    error => {\n                        console.log('error in createAlertRule - ', error);\n                    });\n        } else if (this.action == FormAction.UPDATE) {\n\n            this.alertController.updateAlertRule(this.orgID, this.alertRuleID, this.alertRuleFG.value)\n                .subscribe((updatedRes: ResponseM) => {\n\n                    let toast = this.toastrService.getToastStatus(updatedRes.status);\n                    this.toastrService.openToast(toast.title, updatedRes.message, toast.color);\n\n                    this.tscCommonService.back();\n                },\n                    error => {\n                        console.log('error in updateAlertRule - ', error);\n                    });\n        }\n    }\n\n    public errorHandling = (control: string, error: string) => {\n        return this.alertRuleFG.controls[control].hasError(error);\n    }\n\n}","<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ action == FormAction.CREATE ? PageTitleEnum.CREATE : PageTitleEnum.UPDATE }} {{ alertLabel\n                }} Alert Rule</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"alertRuleFG\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Alert On\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> Alert name </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"text\" placeholder=\"Alert name\" formControlName=\"name\"\n                                        required>\n                                    <mat-error *ngIf=\"errorHandling('name', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-6\">\n                                <lib-parameter #parameterFilterChild></lib-parameter>\n                            </div>\n                        </div>\n\n                        <div class=\"row mt-1\" *ngIf=\"alertRuleFG.get('parameterID').value\">\n                            <div class=\"col-sm-12\">\n                                <mat-accordion>\n                                    <mat-expansion-panel class=\"matAccordion\" [expanded]=\"isEntityPanelExpanded\" (opened)=\"entityPanelOpened()\"\n                                        (closed)=\"entityPanelClosed()\">\n                                        <mat-expansion-panel-header>\n                                            <mat-panel-title>\n                                                <div class=\"card-title sectionTitle\">\n                                                    Select entity *\n                                                </div>\n                                                <div class=\"row ms-2\">\n                                                    <mat-error class=\"entityError\"\n                                                        *ngIf=\"isFormSubmit && !isEntityPanelExpanded && errorHandling('entityID', 'required')\">\n                                                        {{ FormErrorEnum.REQUIRED }}\n                                                    </mat-error>\n                                                </div>\n                                            </mat-panel-title>\n                                        </mat-expansion-panel-header>\n                                        <div class=\"row\">\n                                            <div class=\"mb-3\">\n                                                <small class=\"pageSubtitle\">\n                                                    <span *ngIf=\"alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL\">\n                                                        Choose <span class=\"text-secondary fw-bold\">\n                                                            'Select all sub-entities'\n                                                        </span> to generate alert at the current selection and any future entities\n                                                        at that level.\n                                                    </span> </small>\n                                                <br />\n                                                <small class=\"pageSubtitle\">\n                                                    <span class=\"text-secondary fw-bold\">NOTE: </span> The parameter you've selected is not present in the entities\n                                                    highlighted in <span class=\"fw-bold\"> gray.</span>\n                                                </small>\n                                            </div>\n                                            <div *ngFor=\"let entity of entityM; let i = index\" class=\"mt-2\">\n                                                <mat-checkbox [ngClass]=\"{'text-secondary': !entity.isParameterExists}\" [checked]=\"isSelected(entity.id)\"\n                                                    (change)=\"entityChange(entity.id, $event)\">\n                                                    {{ entity.name }}\n                                                </mat-checkbox>\n                                                <span class=\"ms-5\"\n                                                    *ngIf=\"alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL && alertRuleFG.get('entityID').value && alertRuleFG.get('entityID').value.length > 0\">\n                                                    <mat-checkbox formControlName=\"isSubEntitiesSelected\" (change)=\"selectAllSubEntities($event)\">\n                                                        Select all sub-entities\n                                                    </mat-checkbox>\n                                                </span>\n                                                <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                                                    <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                                                </div>\n                                            </div>\n                                            <ng-template #recursiveTemplate let-entities>\n                                                <div *ngFor=\"let entity of entities; let i = index\" class=\"mt-2\">\n                                                    <mat-checkbox [ngClass]=\"{'text-secondary': !entity.isParameterExists}\" [checked]=\"isSelected(entity.id)\"\n                                                        (change)=\"entityChange(entity.id, $event)\">\n                                                        {{ entity.name }}\n                                                    </mat-checkbox>\n                                                    <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                                                        <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                                                    </div>\n                                                </div>\n                                            </ng-template>\n                                        </div>\n                                        <mat-error class=\"entityError\"\n                                            *ngIf=\"isFormSubmit && isEntityPanelExpanded && errorHandling('entityID', 'required')\">\n                                            <br />{{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-expansion-panel>\n                                </mat-accordion>\n                            </div>\n                        </div>\n\n                        <div *ngIf=\"alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL && alertRuleFG.get('entityID').value && alertRuleFG.get('entityID').value.length > 0\">\n                            <div class=\"row mt-4\">\n                                <div class=\"col-sm-6\">\n                                    <div class=\"radioBtnField\">\n                                        <div class=\"radioBtnGroupLabel\"> Would you prefer to receive alerts at device\n                                            level? </div>\n                                        <mat-radio-group formControlName=\"isAlertAtDeviceLevel\">\n                                            <div class=\"row my-1\">\n                                                <div class=\"col-sm-6\">\n                                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"true\">\n                                                        Yes\n                                                    </mat-radio-button>\n                                                </div>\n                                                <div class=\"col-sm-6\">\n                                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"false\">\n                                                        No\n                                                    </mat-radio-button>\n                                                </div>\n                                                <mat-error class=\"radioBtnGroupError ms-1 mt-1\" *ngIf=\"errorHandling('isAlertAtDeviceLevel', 'required') && \n                                                                                    this.alertRuleFG.controls['isAlertAtDeviceLevel'].touched\">\n                                                    {{ FormErrorEnum.REQUIRED }}\n                                                </mat-error>\n                                            </div>\n                                        </mat-radio-group>\n                                    </div>\n                                </div>\n\n                                <div class=\"col-sm-6\" *ngIf=\"alertRuleFG.get('isAlertAtDeviceLevel').value\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select device</mat-label>\n                                        <mat-select formControlName=\"deviceID\" multiple required>\n                                            <ng-container *ngIf=\"devicesWithEntitiesM && devicesWithEntitiesM.length > 0 && devicesWithEntitiesM[0]['id']; else noDeviceFound\">\n                                                <mat-option [value]=\"-1\" (click)=\"selectAllDevices()\">\n                                                    Select all devices\n                                                </mat-option>\n                                                <mat-optgroup *ngFor=\"let entity of devicesWithEntitiesM\" [label]=\"entity.name\" [disabled]=\"entity.disabled\">\n                                                    <mat-option *ngFor=\"let device of entity.devices\" [value]=\"device.id\" (click)=\"selectDevices(device.id)\">\n                                                        {{ device.name }}\n                                                    </mat-option>\n                                                </mat-optgroup>\n                                            </ng-container>\n                                            <ng-template #noDeviceFound>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling('deviceID', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Rule Definition\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-sm-3\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select unit</mat-label>\n                                    <mat-select (selectionChange)=\"unitChange($event.value)\" formControlName=\"unitID\" required>\n                                        <ng-container *ngIf=\"unitM && unitM.length > 0 && unitM[0]['id']; else noUnitFound\">\n                                            <mat-option>\n                                                <ngx-mat-select-search [formControl]=\"unitSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                                                    noEntriesFoundLabel=\"No matching name found.\">\n                                                </ngx-mat-select-search>\n                                            </mat-option>\n                                            <mat-option *ngFor=\"let unit of unitSearchUtil.filteredEntities | async\" [value]=\"unit.id\">\n                                                {{ unit.name }}\n                                            </mat-option>\n                                        </ng-container>\n                                        <ng-template #noUnitFound>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"alertRuleFG.get('parameterID').invalid\">\n                                        Please select parameter first\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('unitID', 'required') && alertRuleFG.get('parameterID').valid\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-3\" *ngIf=\"alertLabel == AlertTypeLabelEnum.PERIODIC_LABEL\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select alert type</mat-label>\n                                    <mat-select formControlName=\"periodicAlertType\" required>\n                                        <ng-container\n                                            *ngIf=\"periodicAlertType && periodicAlertType.length > 0 && periodicAlertType[0]['id']; else noPeriodicAlertTypeFound\">\n                                            <mat-option *ngFor=\"let type of periodicAlertType\" [value]=\"type.keyID\">\n                                                {{ type.name }}\n                                            </mat-option>\n                                        </ng-container>\n                                        <ng-template #noPeriodicAlertTypeFound>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('periodicAlertType', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-3\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select condition</mat-label>\n                                    <mat-select formControlName=\"condition\" (selectionChange)=\"conditionChange($event.value)\" required>\n                                        <mat-option *ngFor=\"let condition of conditionConstant\" [value]=\"condition.value\">\n                                            {{ condition.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('condition', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div [ngClass]=\"{'col-sm-3': showValueField(), 'col-sm-2': !showValueField()}\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select frequency</mat-label>\n                                    <mat-select formControlName=\"frequency\" required>\n                                        <mat-option *ngFor=\"let frequency of getFrequency()\" [value]=\"frequency.value\">\n                                            {{ frequency.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('frequency', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div [ngClass]=\"{'col-sm-3': showValueField(), 'col-sm-2': !showValueField()}\" *ngIf=\"showValueField()\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> Value {{ alertRuleFG.get('periodicAlertType').value == 'BUDGET' ? '%' : '' }}\n                                    </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"number\" [min]=\"0\"\n                                        [max]=\"alertRuleFG.get('periodicAlertType').value == 'BUDGET' ? 100 : null\" placeholder=\"0.00\"\n                                        formControlName=\"value\" required>\n                                    <mat-error *ngIf=\"errorHandling('value', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('value', 'min')\">\n                                        {{ FormErrorEnum.NEGATIVE }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('value', 'max') && alertRuleFG.get('periodicAlertType').value == 'BUDGET'\">\n                                        % value cannot be more than 100\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-2\" *ngIf=\"showStartEndFields()\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> Start value </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0.00\" formControlName=\"startValue\" required>\n                                    <mat-error *ngIf=\"errorHandling('startValue', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('startValue', 'invalidRange')\">\n                                        Start value must be less than end value\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-2\" *ngIf=\"showStartEndFields()\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> End value </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0.00\" formControlName=\"endValue\" required>\n                                    <mat-error *ngIf=\"errorHandling('endValue', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('endValue', 'invalidRange')\">\n                                        End value must be greater than start value\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Alert Recipient: Select or Add\n                        </div>\n                        <div class=\"row userContext\">\n                            <div class=\"col-sm-12\">\n                                <span class=\"fw-bold text-secondary me-2\"> Current org users </span>\n                                <mat-slide-toggle class=\"slideToggleBtn mt-2\" [formControl]=\"userFC\"\n                                    (change)=\"userContextChange()\"></mat-slide-toggle>\n                                <span class=\"fw-bold text-secondary ms-2\"> All users </span>\n                            </div>\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\"\n                                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select user</mat-label>\n                                    <mat-select [formControl]=\"selectedUserFC\" required>\n                                        <mat-select-trigger>\n                                            Select users\n                                        </mat-select-trigger>\n                                        <ng-container *ngIf=\"userM && userM.length > 0 && userM[0]['id']; else noUserFound\">\n                                            <mat-option>\n                                                <ngx-mat-select-search [formControl]=\"userSearchUtil.filterFC\" placeholderLabel=\"Search by name/email\"\n                                                    noEntriesFoundLabel=\"No matching name/email found.\">\n                                                </ngx-mat-select-search>\n                                            </mat-option>\n                                            <mat-option class=\"matOptionNameEmail\" *ngFor=\"let user of userSearchUtil.filteredEntities | async\"\n                                                [value]=\"user.id\" (onSelectionChange)=\"onUserSelectionChange(user.id)\">\n                                                <!-- <span class=\"ms-3\">\n                                                    <img class=\"rounded-circle border profileImageDropdownView\"\n                                                        [src]=\"user.profileImgUrl || userService.defaultImage(\n                                                        (user?.['firstName'] ? user['firstName'] + ' ' + user?.['lastName'] : ''), \n                                                        ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\"alt=\"Profile image\">\n                                                </span> -->\n                                                <span class=\"ms-3\">\n                                                    {{ user.firstName }} {{ user?.lastName }}\n                                                </span>\n                                                <br />\n                                                <span class=\"ms-3 text-secondary\"> {{user.email}} </span>\n                                            </mat-option>\n                                        </ng-container>\n                                        <ng-template #noUserFound>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"selectedUserFC.hasError('required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-6\" *ngIf=\"selectedUserIds?.length > 0\">\n                                <mat-card class=\"border card\">\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-12\">\n                                            <span class=\"cardTitle\">\n                                                Selected users\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <perfect-scrollbar class=\"scrollHeight\">\n                                        <div class=\"row mt-2\">\n                                            <div class=\"col-sm-12\" *ngFor=\"let user of getSelectedUsers()\">\n                                                <div class=\"d-flex align-items-center\">\n                                                    <div class=\"profileImgContainer\">\n                                                        <img class=\"profileImg rounded-circle border\" [src]=\"user.profileImgUrl || userService.defaultImage(\n                                                            (user?.['firstName'] ? user['firstName'] + ' ' + user?.['lastName'] : ''), \n                                                            ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\"\n                                                            alt=\"Profile img\" />\n                                                    </div>\n                                                    <div class=\"ps-1 lineHeight\">\n                                                        <span> {{ user.firstName }} {{ user?.lastName }} </span>\n                                                        <br />\n                                                        <span class=\"text-secondary\"> {{user.email}} </span>\n                                                    </div>\n                                                    <div class=\"ms-auto\">\n                                                        <span\n                                                            class=\"material-symbols-outlined me-3 text-danger cursorPointer\"\n                                                            matTooltip=\"Remove selected user\" matTooltipPosition=\"above\"\n                                                            (click)=\"removeSelectedUsers(user.id)\">\n                                                            cancel\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </perfect-scrollbar>\n                                </mat-card>\n                            </div>\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-6\">\n                                <mat-checkbox formControlName=\"isAnyOtherUser\" (change)=\"addOtherUser($event)\">\n                                    Any other user\n                                </mat-checkbox>\n                            </div>\n                            <div class=\"col-sm-6\" *ngIf=\"alertRuleFG.controls['isAnyOtherUser'].value == true\">\n                                <mat-form-field class=\"matFieldWidth100\"\n                                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Enter user email</mat-label>\n                                    <mat-chip-list #chipList required>\n                                        <mat-chip *ngFor=\"let email of otherUserEmail.value\" [removable]=\"removable\"\n                                            (removed)=\"removeEmail(email)\">\n                                            {{ email }}\n                                            <button matChipRemove *ngIf=\"removable\">\n                                                <mat-icon>cancel</mat-icon>\n                                            </button>\n                                        </mat-chip>\n                                        <input [placeholder]=\"inputPlaceholder\" [matChipInputFor]=\"chipList\"\n                                            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                                            [matChipInputAddOnBlur]=\"addOnBlur\" (matChipInputTokenEnd)=\"add($event)\"\n                                            (input)=\"onInput()\">\n                                        <mat-error class=\"userEmailError\" *ngIf=\"otherUserEmail.hasError('required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-chip-list>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Notification Preferences\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select SMS frequency</mat-label>\n                                    <mat-select formControlName=\"smsFrequency\" required>\n                                        <mat-option *ngFor=\"let smsFreq of LIST_CONSTANT.SMS_FREQUENCY\" [value]=\"smsFreq.value\">\n                                            {{ smsFreq.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('smsFrequency', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select email frequency</mat-label>\n                                    <mat-select formControlName=\"emailFrequency\" required>\n                                        <mat-option *ngFor=\"let emailFreq of LIST_CONSTANT.EMAIL_FREQUENCY\" [value]=\"emailFreq.value\">\n                                            {{ emailFreq.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('emailFrequency', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    \n                        <div class=\"row\">\n                            <div class=\"col-sm-6\">\n                                <div class=\"ps-1 radioBtnField\">\n                                    <div class=\"radioBtnGroupLabel\"> Is this alert shift specific?\n                                    </div>\n                                    <mat-radio-group formControlName=\"isShift\">\n                                        <div class=\"row my-2\">\n                                            <div class=\"col-sm-6\">\n                                                <mat-radio-button class=\"radioBtnLabel\" [value]=\"true\">\n                                                    Yes\n                                                </mat-radio-button>\n                                            </div>\n                                            <div class=\"col-sm-6\">\n                                                <mat-radio-button class=\"radioBtnLabel\" [value]=\"false\">\n                                                    No\n                                                </mat-radio-button>\n                                            </div>\n                                            <mat-error class=\"textMatError ms-1 mt-1\" *ngIf=\"errorHandling('isShift', 'required')\">\n                                                {{ FormErrorEnum.REQUIRED }}\n                                            </mat-error>\n                                        </div>\n                                    </mat-radio-group>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6\" *ngIf=\"alertRuleFG.get('isShift').value\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select shift</mat-label>\n\n                                    <mat-select formControlName=\"shiftID\" multiple required>\n                                        <ng-container *ngIf=\"shiftM && shiftM.length > 0 && shiftM[0]['id']; else noDataOption\">\n                                            <mat-option [value]=\"-1\" (click)=\"selectAllShifts()\">\n                                                Select all\n                                            </mat-option>\n                                            <mat-option *ngFor=\"let shift of shiftM\" [value]=\"shift.id\" (click)=\"selectedShift()\">\n                                                {{ shift.name }}\n                                            </mat-option>\n                                        </ng-container>\n\n                                        <ng-template #noDataOption>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n\n                                    <mat-error *ngIf=\"errorHandling('shiftID', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div align=\"end\" class=\"mt-3\">\n                <button type=\"button\" class=\"btn btn-sm btn-secondary me-2\" (click)=\"tscCommonService.back()\">\n                    {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                </button>\n                <button type=\"submit\" class=\"btn btn-sm btn-success\" (click)=\"createUpdateAlert()\"\n                    [ngClass]=\"{'disabled': action == FormAction.UPDATE && isEqual}\">\n                    {{ action == FormAction.CREATE ? ButtonLabelEnum.CREATE_BTN_LABEL :\n                    ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                </button>\n            </div>\n        </form>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CreateUpdateComponent } from './create-update.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CreateUpdateComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class CreateUpdateRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRadioModule } from '@angular/material/radio';\n\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\n\nimport { CreateUpdateRoutingModule } from './create-update-routing.module';\nimport { CreateUpdateComponent } from './create-update.component';\n\n// tsc-library\nimport { ParameterModule } from '@library/tsc-lite';\nimport { EllipsisPipeModule, SearchBarTwoModule } from '@library/tsc-common';\n// /tsc-library/\n\n@NgModule({\n    declarations: [\n        CreateUpdateComponent\n    ],\n    imports: [\n        CommonModule,\n        CreateUpdateRoutingModule,\n\n        FormsModule,\n        ReactiveFormsModule,\n\n        MatCardModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatChipsModule,\n        MatExpansionModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n        MatRadioModule,\n\n        NgxMatSelectSearchModule,\n        PerfectScrollbarModule,\n\n        // tsc-library\n        EllipsisPipeModule,\n        SearchBarTwoModule,\n        ParameterModule\n        // /tsc-library/\n    ]\n})\nexport class CreateUpdateModule { }\n","import { Component, Inject, OnInit } from '@angular/core';\n\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\n\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\n\nimport { isEqual } from 'lodash';\n\nimport { EscalationController } from '../../../controller/escalation.controller';\n\n// tsc-library\nimport { StorageService } from '@library/storage-service';\nimport { ToastrColor, ToastrService } from '@library/toastr-service';\nimport { LIST_CONSTANT } from '@library/tsc-lite';\nimport { ProfileImg, User, UserContext, UserM, UserService } from '@library/user-service';\nimport { COMMON_CONSTANT, ButtonLabelEnum, MATERIAL_CONSTANT, MaterialFormFieldAppearance, TSCCommonService, InvalidForm, ResponseM, DialogEnum, PageTitleEnum, MatSelectSearchService, FormErrorEnum } from '@library/tsc-common';\n// /tsc-library/\n\n@Component({\n    selector: 'lib-create-update',\n    templateUrl: './create-update.component.html',\n    styleUrls: ['./create-update.component.scss']\n})\nexport class CreateUpdateEscalationComponent implements OnInit {\n\n    COMMON_CONSTANT = COMMON_CONSTANT;\n    MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n    LIST_CONSTANT = LIST_CONSTANT;\n\n    ButtonLabelEnum = ButtonLabelEnum;\n    PageTitleEnum = PageTitleEnum;\n    DialogEnum = DialogEnum;\n    FormErrorEnum = FormErrorEnum;\n    InvalidForm = InvalidForm;\n    ToastrColor = ToastrColor;\n    UserContext = UserContext;\n    ProfileImg = ProfileImg;\n    MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n\n    userContext: any = UserContext.ROOT_ORG_USER;\n\n    inputPlaceholder = \"email1@domain.com, email2@domain.com\";\n\n    orgID: any;\n\n    alertRuleID: any;\n    levelID: any;\n    action: any;\n    escalationRuleID: any;\n\n    isEqual: boolean = false;\n    initialObject: any;\n    allUserID: any[] = [];\n    totalUserCount: number = 0;\n\n    selectable = true;\n    removable = true;\n    addOnBlur = true;\n    readonly separatorKeysCodes = [ENTER, COMMA] as const;\n\n    userM = [new User()];\n    rootOrgUserM = [new User()];\n    currentOrgUserM = [new User()];\n\n    escalationFG: FormGroup;\n\n    userFC: FormControl = new FormControl(true, Validators.required);\n\n    userSearchUtil: MatSelectSearchService = new MatSelectSearchService(['firstName', 'lastName', 'email']);\n\n    constructor(\n        public dialogRef: MatDialogRef<CreateUpdateEscalationComponent>,\n        @Inject(MAT_DIALOG_DATA) public data,\n        private escalationFB: FormBuilder,\n        private escalationController: EscalationController,\n\n        // tsc-library\n        private storageService: StorageService,\n        private toastrService: ToastrService,\n        public userService: UserService,\n        public tscCommonService: TSCCommonService\n        // /tsc-library/\n    ) {\n        this.alertRuleID = data.alertRuleID;\n        this.levelID = data.levelID;\n        this.action = data.action;\n        this.dialogRef.disableClose = true;\n    }\n\n    ngOnInit(): void {\n        this.orgID = this.storageService.getStorage('currentOrgID');\n\n        this.escalationInit();\n        this.initializeData();\n    }\n\n    async initializeData() {\n        await this.getUsersByOrgID();\n        await this.getCurrentOrgUserAccess();\n\n        if (this.action == PageTitleEnum.UPDATE) {\n            this.escalationRuleID = this.data.escLevelConfig.escalationRuleID;\n            this.setValidatorsForOtherUser();\n            this.patchEscalation(this.data['escLevelConfig']);\n        }\n\n        this.escalationFG.valueChanges.subscribe(() => {\n            this.isEqual = isEqual(this.initialObject, this.escalationFG);\n        });\n    }\n\n    escalationInit() {\n        this.escalationFG = this.escalationFB.group({\n            alertRuleID: [this.alertRuleID],\n            level: [this.levelID],\n            intervalValue: [, [Validators.required, this.integerValidator()]],\n            intervalFrequencyKey: [, Validators.required],\n            notificationPrefValue: [, [Validators.required, this.integerValidator()]],\n            notificationPrefKey: [, Validators.required],\n            userChoice: [UserContext.ROOT_ORG_USER],\n            userID: [[], Validators.required],\n            isAnyOtherUser: [false],\n            otherUserEmail: [[]],\n        });\n    }\n\n    integerValidator(): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } | null => {\n            const value = control.value;\n\n            if (value != null && value != undefined) {\n                const isInteger = Number.isInteger(value);\n\n                return isInteger ? null : { 'integerError': true };\n            }\n            return null;\n        };\n    }\n\n    patchEscalation(escalationLevelConfig) {\n        this.escalationFG.patchValue({\n            alertRuleID: escalationLevelConfig.alertRuleID,\n            level: escalationLevelConfig.level,\n            intervalValue: escalationLevelConfig.intervalValue,\n            intervalFrequencyKey: escalationLevelConfig.intervalFrequencyKey,\n            notificationPrefValue: escalationLevelConfig.notificationPrefValue,\n            notificationPrefKey: escalationLevelConfig.notificationPrefKey,\n            userChoice: escalationLevelConfig.userChoice,\n            isAnyOtherUser: escalationLevelConfig.isAnyOtherUser,\n            otherUserEmail: escalationLevelConfig.otherUserEmail,\n        });\n\n        this.userFC.patchValue(escalationLevelConfig.userChoice == UserContext.CURRENT_ORG_USER ? false : true)\n\n        this.escalationFG.get('userID').patchValue((escalationLevelConfig.userID.length == this.totalUserCount) ? [-1, ...escalationLevelConfig.userID] : [...escalationLevelConfig.userID]);\n\n        this.initialObject = this.escalationFG.value;\n        this.isEqual = true;\n    }\n\n    /* users code */\n    async getUsersByOrgID() {\n        this.rootOrgUserM = <UserM[]>await this.userService.getUsersByOrgID(this.orgID);\n\n        this.userM = this.rootOrgUserM;\n        this.userSearchUtil.entityArr = this.userM;\n        this.userSearchUtil.createSubscription();\n\n        this.totalUserCount = this.userM.length;\n        this.userM.forEach(user => this.allUserID.push(user['id']));\n    }\n\n    async getCurrentOrgUserAccess() {\n        this.currentOrgUserM = <UserM[]>await this.userService.getCurrentOrgUserAccess(this.orgID);\n    }\n\n    userContextChange() {\n        if (this.userFC.value) {\n            this.userContext = UserContext.ROOT_ORG_USER;\n            this.userM = this.rootOrgUserM;\n            this.escalationFG.get('userChoice').setValue(this.userContext);\n        } else {\n            this.userContext = UserContext.CURRENT_ORG_USER;\n            this.userM = this.currentOrgUserM;\n            this.escalationFG.get('userChoice').setValue(this.userContext);\n        }\n\n        this.allUserID = [];\n\n        this.userSearchUtil.entityArr = this.userM;\n        this.userSearchUtil.createSubscription();\n\n        this.totalUserCount = this.userM.length;\n        this.userM.forEach(user => this.allUserID.push(user['id']));\n\n        this.escalationFG.get('userID').setValue([]);\n    }\n\n    selectUser() {\n        const selected = this.escalationFG.get('userID').value;\n        if (selected.includes(-1)) {\n            selected.shift();\n            this.escalationFG.get('userID').patchValue(selected);\n        } else if (this.escalationFG.get('userID').value.length == this.totalUserCount) {\n            this.allUserID.splice(0, 0, -1);\n            this.escalationFG.get('userID').patchValue(this.allUserID);\n        } else {\n            const filteredSelected = selected.filter(s => s != -1);\n            this.escalationFG.get('userID').patchValue(filteredSelected);\n        }\n    }\n\n    selectAllUsers() {\n        if (!this.escalationFG.get('userID').value.includes(-1)) {\n            this.escalationFG.get('userID').reset([]);\n            return;\n        }\n        this.escalationFG.get('userID').setValue([-1, ...this.allUserID]);\n    }\n\n    setValidatorsForOtherUser() {\n        this.escalationFG.get('isAnyOtherUser').valueChanges.subscribe((value) => {\n\n            if (value == true) {\n                this.otherUserEmail.setValidators([Validators.required]);\n            } else {\n                this.otherUserEmail.reset([]);\n                this.otherUserEmail.clearValidators();\n            }\n\n            this.otherUserEmail.updateValueAndValidity();\n        });\n    }\n\n    addOtherUser(event: any) {\n        const isAnyOtherUser = this.escalationFG.get('isAnyOtherUser');\n\n        isAnyOtherUser.setValue(event.checked);\n\n        if (isAnyOtherUser.value) {\n            this.otherUserEmail.setValidators([Validators.required]);\n        } else {\n            this.otherUserEmail.reset([]);\n            this.otherUserEmail.clearValidators();\n        }\n\n        this.otherUserEmail.updateValueAndValidity();\n    }\n\n    onInput() {\n        this.inputPlaceholder = '';\n    }\n\n    get otherUserEmail() {\n        return this.escalationFG.get('otherUserEmail');\n    }\n\n    add(event: MatChipInputEvent): void {\n        const value = (event.value || '').trim();\n        if (value) {\n            const emails = value.split(',').map(email => email.trim());\n            const validEmails = emails.filter(email => this.tscCommonService.isValidEmail(email));\n            if (validEmails.length > 0) {\n                this.otherUserEmail.patchValue(this.otherUserEmail.value.concat(validEmails));\n            }\n        }\n        event.chipInput!.clear();\n    }\n\n    removeEmail(email): void {\n        const index = this.otherUserEmail.value.indexOf(email);\n        if (index >= 0) {\n            const emails = [...this.otherUserEmail.value];\n            emails.splice(index, 1);\n            this.otherUserEmail.setValue(emails);\n        }\n    }\n    /* users code */\n\n\n    createUpdateEscalationRule() {\n\n        let userID = this.tscCommonService.removeSelectAllID(this.escalationFG.get('userID').value);\n        this.escalationFG.get('userID').patchValue(userID);\n\n        if (this.escalationFG.invalid) {\n            this.escalationFG.markAllAsTouched();\n            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n            return [];\n        }\n\n        if (this.action == PageTitleEnum.CREATE) {\n            this.escalationController.createEsclationByLevelID(this.orgID, this.escalationFG.value)\n                .subscribe((createRes: ResponseM) => {\n                    let toast = this.toastrService.getToastStatus(createRes.status);\n                    this.toastrService.openToast(toast.title, createRes.message, toast.color);\n\n                    this.dialogRef.close(DialogEnum.SUCCESS_DR);\n                },\n                    error => {\n                        console.log('error in createEsclationByLevelID - ', error);\n                    });\n        } else if (this.action == PageTitleEnum.UPDATE) {\n\n            if (this.isEqual) return;\n\n            this.escalationController.updateEsclationByLevelID(this.orgID, this.escalationRuleID, this.escalationFG.value)\n                .subscribe((updateRes: ResponseM) => {\n                    let toast = this.toastrService.getToastStatus(updateRes.status);\n                    this.toastrService.openToast(toast.title, updateRes.message, toast.color);\n\n                    this.dialogRef.close(DialogEnum.SUCCESS_DR);\n                },\n                    error => {\n                        console.log('error in updateEsclationByLevelID - ', error);\n                    });\n        }\n    }\n\n    public errorHandling = (control: string, error: string) => {\n        return this.escalationFG.controls[control].hasError(error);\n    }\n\n}","<div mat-dialog-title>\n    <strong class=\"dialogTitle\">\n        {{ action }} Escalation Rule\n    </strong>\n    <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\" matTooltip=\"Close\"\n        matTooltipPosition=\"before\">\n        <span class=\"material-symbols-outlined\" [mat-dialog-close]=\"DialogEnum.CLOSE_DR\">\n            close\n        </span>\n    </button>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <form [formGroup]=\"escalationFG\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"cardTitle\">\n                        Interval\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label class=\"formLabel\"> Value </mat-label>\n                                <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0\" [min]=\"0\"\n                                    formControlName=\"intervalValue\" required>\n                                <mat-error *ngIf=\"errorHandling('intervalValue', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('intervalValue', 'min')\">\n                                    {{ FormErrorEnum.NEGATIVE }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('intervalValue', 'integerError')\">\n                                    Please enter an integer value\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Select frequency</mat-label>\n                                <mat-select formControlName=\"intervalFrequencyKey\" required>\n                                    <mat-option *ngFor=\"let frequency of LIST_CONSTANT.ESCALATION_FREQUENCY\" [value]=\"frequency.value\">\n                                        {{ frequency.label }}\n                                    </mat-option>\n                                </mat-select>\n                                <mat-error *ngIf=\"errorHandling('intervalFrequencyKey', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"cardTitle\">\n                        Notification frequency\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label class=\"formLabel\"> Value </mat-label>\n                                <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0\" [min]=\"0\"\n                                    formControlName=\"notificationPrefValue\" required>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefValue', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefValue', 'min')\">\n                                    {{ FormErrorEnum.NEGATIVE }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefValue', 'integerError')\">\n                                    Please enter an integer value\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Select frequency</mat-label>\n                                <mat-select formControlName=\"notificationPrefKey\" required>\n                                    <mat-option *ngFor=\"let frequency of LIST_CONSTANT.ESCALATION_FREQUENCY\" [value]=\"frequency.value\">\n                                        {{ frequency.label }}\n                                    </mat-option>\n                                </mat-select>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefKey', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"cardTitle\">\n                        Escalated to\n                    </div>\n                    <div class=\"row userContext\">\n                        <div class=\"col-sm-6 d-flex justify-content-start centerAlignVertical\">\n                            <span class=\"fw-bold text-secondary me-2\"> Current org users </span>\n                            <mat-slide-toggle class=\"slideToggleBtn\" [formControl]=\"userFC\"\n                                (change)=\"userContextChange()\"></mat-slide-toggle>\n                            <span class=\"fw-bold text-secondary ms-2\"> All users </span>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Select user</mat-label>\n                                <mat-select formControlName=\"userID\" multiple required>\n                                    <ng-container *ngIf=\"userM && userM.length > 0 && userM[0]['id']; else noUserFound\">\n                                        <mat-option>\n                                            <ngx-mat-select-search [formControl]=\"userSearchUtil.filterFC\"\n                                                placeholderLabel=\"Search by name/email\"\n                                                noEntriesFoundLabel=\"No matching name/email found.\">\n                                            </ngx-mat-select-search>\n                                        </mat-option>\n                                        <mat-option [value]=\"-1\" (click)=\"selectAllUsers()\">\n                                            Select all\n                                        </mat-option>\n                                        <mat-option *ngFor=\"let user of userSearchUtil.filteredEntities | async\" [value]=\"user.id\"\n                                            (click)=\"selectUser()\">\n                                            {{ user?.email }}\n                                        </mat-option>\n                                    </ng-container>\n                                    <ng-template #noUserFound>\n                                        <mat-option disabled>\n                                            {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                        </mat-option>\n                                    </ng-template>\n                                </mat-select>\n                                <mat-error *ngIf=\"errorHandling('userID', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n\n                    <div class=\"row mt-2\">\n                        <div class=\"col-sm-6 mb-3 d-flex justify-content-start centerAlignVertical\">\n                            <mat-checkbox formControlName=\"isAnyOtherUser\" (change)=\"addOtherUser($event)\">\n                                Any other user\n                            </mat-checkbox>\n                        </div>\n\n                        <div class=\"col-sm-6\" *ngIf=\"escalationFG.controls['isAnyOtherUser'].value == true\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Enter user email</mat-label>\n                                <mat-chip-list #chipList>\n                                    <mat-chip *ngFor=\"let email of otherUserEmail.value\" [removable]=\"removable\"\n                                        (removed)=\"removeEmail(email)\">\n                                        {{ email }}\n                                        <button matChipRemove *ngIf=\"removable\">\n                                            <mat-icon>cancel</mat-icon>\n                                        </button>\n                                    </mat-chip>\n                                    <input [placeholder]=\"inputPlaceholder\" [matChipInputFor]=\"chipList\"\n                                        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"addOnBlur\"\n                                        (matChipInputTokenEnd)=\"add($event)\" (input)=\"onInput()\" required>\n                                    <mat-error class=\"userEmailError\" *ngIf=\"otherUserEmail.hasError('required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-chip-list>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div mat-dialog-footer align=\"end\">\n    <button type=\"submit\" class=\"btn btn-sm btn-success\" (click)=\"createUpdateEscalationRule()\"\n        [ngClass]=\"{'disabled': action == PageTitleEnum.UPDATE && isEqual}\">\n        {{ action == PageTitleEnum.CREATE ? ButtonLabelEnum.CREATE_BTN_LABEL :\n        ButtonLabelEnum.UPDATE_BTN_LABEL }}\n    </button>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\n\nimport { CreateUpdateEscalationComponent } from './create-update.component';\n\n@NgModule({\n    declarations: [\n        CreateUpdateEscalationComponent\n    ],\n    imports: [\n        CommonModule,\n\n        FormsModule,\n        ReactiveFormsModule,\n\n        MatDialogModule,\n        MatCardModule,\n        MatFormFieldModule,\n        MatButtonModule,\n        MatInputModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatChipsModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n\n        NgxMatSelectSearchModule\n    ]\n})\nexport class CreateUpdateEscalationModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { EscalationLevelCount, EscalationLevelCountM, EscalationLevelInfo, EscalationLevelInfoM } from '../../../model/escalation.model';\n\nimport { EscalationController } from '../../../controller/escalation.controller';\n\nimport { CreateUpdateEscalationComponent } from '../../escalation/create-update/create-update.component';\n\n// tsc-library\nimport { StorageService } from '@library/storage-service';\nimport { ToastrService } from '@library/toastr-service';\nimport { ButtonLabelEnum, COMMON_CONSTANT, DialogEnum, DialogOneComponent, DialogOneEnum, MATERIAL_CONSTANT, PageTitleEnum, ResponseM } from '@library/tsc-common';\n// /tsc-library/\n\n@Component({\n    selector: 'lib-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss']\n})\n\nexport class ListComponent implements OnInit {\n\n    COMMON_CONSTANT = COMMON_CONSTANT;\n    MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n\n    ButtonLabelEnum = ButtonLabelEnum;\n    PageTitleEnum = PageTitleEnum;\n    DialogEnum = DialogEnum;\n\n    orgID: any;\n    alertRuleID: any;\n\n    escalationLevelJSON: any[] = [];\n\n    escalationLevelCountM = new EscalationLevelCount();\n    escalationLevelInfoM = [new EscalationLevelInfo()];\n\n    constructor(\n        private dialog: MatDialog,\n        private activatedRoute: ActivatedRoute,\n        private escalationController: EscalationController,\n\n        // tsc-library\n        private storageService: StorageService,\n        private toastrService: ToastrService\n        // /tsc-library/\n    ) { }\n\n    ngOnInit(): void {\n        this.orgID = this.storageService.getStorage('currentOrgID');\n\n        this.getEscalationLevelCount();\n\n        this.activatedRoute.params.subscribe((pathParam) => {\n            if (pathParam.alertID != null) {\n                this.alertRuleID = pathParam.alertID;\n            }\n        })\n        this.getAllLevelEscalation();\n    }\n\n    getEscalationLevelCount() {\n        this.escalationController.getEscalationLevelCount(this.orgID).subscribe((escalationLevelCountRes: EscalationLevelCountM) => {\n            this.escalationLevelCountM = escalationLevelCountRes;\n\n            if (this.escalationLevelCountM.level && this.escalationLevelCountM != null) {\n                this.escalationLevelJSON = this.getEscalationLevelJSON(this.escalationLevelCountM);\n            }\n\n        }, error => {\n            console.log('error in getEscalationLevelCount() -', error);\n        })\n    }\n\n    getAllLevelEscalation() {\n        this.escalationController.getAllLevelEscalation(this.orgID, this.alertRuleID).subscribe((escalationLevelRes: EscalationLevelInfoM[]) => {\n            this.escalationLevelInfoM = escalationLevelRes;\n        }, error => {\n            console.log('error in getAllLevelEscalation() -', error);\n        })\n    }\n\n    getEscalationLevelJSON(escalationLevel) {\n        const levelsArray = [];\n\n        for (let i = 1; i <= escalationLevel.level; i++) {\n            levelsArray.push({\n                id: i,\n                name: `Level ${i}`\n            });\n        }\n\n        return levelsArray;\n    }\n\n    isLevelConfigured(levelId: number): boolean {\n        return this.escalationLevelInfoM?.some(level => level.level == levelId);\n    }\n\n    getCorresondingEscLevelConfig(levelId: number): any {\n        return this.escalationLevelInfoM?.find(level => level.level == levelId);\n    }\n\n    hasEscalationDataForPreviousLevel(levelId: number): boolean {\n        return levelId > 1 && this.hasEscalationDataForLevel(levelId - 1);\n    }\n\n    hasEscalationDataForLevel(levelId: number): boolean {\n        const escalationData = this.escalationLevelInfoM?.find(level => level.level == levelId);\n        return !!escalationData;\n    }\n    \n\n    createUpdateEscalationRuleDialog(levelID: number, action: PageTitleEnum, escLevelConfig?: any) {\n        const dialog = this.dialog.open(CreateUpdateEscalationComponent,\n            {\n                data: {\n                    alertRuleID: this.alertRuleID,\n                    levelID: levelID,\n                    action: action,\n                    escLevelConfig: escLevelConfig\n                },\n                minWidth: '50vw',\n                maxWidth: '50vw',\n                height: '100%',\n                position: { right: '-2px', top: '0px' }\n            });\n        dialog.afterClosed().subscribe((result) => {\n            if (result == DialogEnum.SUCCESS_DR) {\n                this.getAllLevelEscalation();\n            }\n        })\n    }\n\n    openDeleteEscRuleDialog(levelID, escLevelConfig) {\n\n        const escalationRuleID = escLevelConfig.escalationRuleID;\n\n        const dialog = this.dialog.open(DialogOneComponent, {\n            minWidth: '500px',\n            maxWidth: '500px',\n            data: {\n                type: DialogOneEnum.DELETE,\n                icon: 'dangerous',\n                header: 'Delete escalation ?',\n                body: 'Escalation configuration for level ' + '<b>' + levelID + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',\n                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,\n                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL\n            }\n        });\n        dialog.afterClosed().subscribe(res => {\n            if (res) {\n                this.deleteEscalationRuleDialog(escalationRuleID);\n            }\n        })\n    }\n\n    deleteEscalationRuleDialog(escalationRuleID) {\n        this.escalationController.deleteEsclationByLevelID(this.orgID, escalationRuleID).subscribe((deleteRes: ResponseM) => {\n\n            window.location.reload();\n\n            let toast = this.toastrService.getToastStatus(deleteRes.status);\n            this.toastrService.openToast(toast.title, deleteRes.message, toast.color);\n        });\n    }\n\n}","<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Escalation Rule</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row mb-3\" *ngFor=\"let level of escalationLevelJSON\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-8\">\n                            <div class=\"cardTitle\">\n                                {{ level.name }}\n                            </div>\n                            <div class=\"col-sm-12\">\n                                <span class=\"text-danger\" *ngIf=\"!isLevelConfigured(level.id)\">\n                                    Not configured.\n                                </span>\n                                <span *ngIf=\"isLevelConfigured(level.id)\">\n                                    <div fxLayout=\"row wrap\">\n                                        <div class=\"col-sm-3\">\n                                            <div>Escalations:</div>\n                                            <div></div>\n                                        </div>\n                                        <div class=\"col-sm-4\">\n                                            <div>Interval</div>\n                                            <div class=\"fw-bold\">{{\n                                                getCorresondingEscLevelConfig(level.id)?.intervalValue}} - {{\n                                                getCorresondingEscLevelConfig(level.id)?.intervalFrequencyName}}</div>\n                                        </div>\n                                        <div class=\"col-sm-4\">\n                                            <div>Notification frequency</div>\n                                            <div class=\"fw-bold\">{{\n                                                getCorresondingEscLevelConfig(level.id)?.notificationPrefValue}}\n                                                - {{ getCorresondingEscLevelConfig(level.id)?.notificationPrefName}}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4 centerAlignVertical justify-content-end\">\n                            <button class=\"btn btn-sm btn-success\" type=\"button\"\n                                (click)=\"createUpdateEscalationRuleDialog(level.id, PageTitleEnum.CREATE)\"\n                                *ngIf=\"!isLevelConfigured(level.id) && (level.id == 1 || (hasEscalationDataForPreviousLevel(level.id) && !hasEscalationDataForLevel(level.id)))\">\n                                {{ ButtonLabelEnum.CREATE_BTN_LABEL }}\n                            </button>\n                            <button class=\"btn btn-sm btn-secondary disableButton\" matTooltipPosition=\"above\"\n                                [matTooltip]=\"'Setting up a previous level is mandatory before creating the escalation metric for the current level'\"\n                                *ngIf=\"!isLevelConfigured(level.id) && level.id != 1 && (hasEscalationDataForLevel(level.id) || !hasEscalationDataForPreviousLevel(level.id))\">\n                                {{ ButtonLabelEnum.CREATE_BTN_LABEL }}\n                            </button>\n                            <button class=\"btn btn-sm btn-primary me-2\" type=\"button\"\n                                (click)=\"createUpdateEscalationRuleDialog(level.id, PageTitleEnum.UPDATE, getCorresondingEscLevelConfig(level.id))\"\n                                *ngIf=\"isLevelConfigured(level.id)\">\n                                {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                            </button>\n                            <button class=\"btn btn-sm btn-danger\" type=\"button\"\n                                (click)=\"openDeleteEscRuleDialog(level.id, getCorresondingEscLevelConfig(level.id))\"\n                                *ngIf=\"isLevelConfigured(level.id)\">\n                                {{ ButtonLabelEnum.DELETE_BTN_LABEL }}\n                            </button>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ListComponent } from './list.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ListComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class ListRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { CreateUpdateEscalationModule } from '../create-update/create-update.module';\n\nimport { ListRoutingModule } from './list-routing.module';\nimport { ListComponent } from './list.component';\n\n\n@NgModule({\n    declarations: [\n        ListComponent\n    ],\n    imports: [\n        CommonModule,\n        ListRoutingModule,\n\n        MatCardModule,\n        MatTableModule,\n        MatTooltipModule,\n\n        FlexLayoutModule,\n\n        CreateUpdateEscalationModule,\n    ]\n})\nexport class ListModule { }\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\n\nimport { merge, fromEvent, of as observableOf } from 'rxjs';\nimport { map, startWith, switchMap, catchError } from \"rxjs/operators\";\n\nimport { AlertTypeLabelEnum, AlertTypeEnum } from '../../../../enum/alert.enum';\n\nimport { AlertPageM } from '../../../../model/alert.model';\n\nimport { AlertRuleController } from '../../../../controller/alert.controller';\n\n// tsc-library\nimport { StorageService } from '@library/storage-service';\nimport { TABLE_CONSTANT, COMMON_CONSTANT, StatusEnum, PageM, SearchBarOneComponent } from '@library/tsc-common';\n// /tsc-library/\n\n@Component({\n    selector: 'lib-page',\n    templateUrl: './page.component.html',\n    styleUrls: ['./page.component.scss']\n})\n\nexport class ConfiguredAlarmPageComponent implements OnInit {\n\n    TABLE_CONSTANT = TABLE_CONSTANT;\n    COMMON_CONSTANT = COMMON_CONSTANT;\n\n    AlertTypeEnum = AlertTypeEnum;\n    AlertTypeLabelEnum = AlertTypeLabelEnum;\n    StatusEnum = StatusEnum;\n\n    orgID: any;\n\n    displayedColumn: string[] = ['id', 'name', 'associatedWith', 'ruleDescription', 'type', 'status'];\n    resultLength: number = 0;\n    dataSource: any[] = [];\n\n    searchFlag: boolean = false;\n    searchValue: string;\n    searchArr: any[] = [];\n\n    @ViewChild('sort') sort: MatSort;\n    @ViewChild('paginator') paginator: MatPaginator;\n    @ViewChild('refreshBtn') refreshBtn: ElementRef;\n    @ViewChild('searchBar') searchBar: SearchBarOneComponent;\n\n    constructor(\n        private storageService: StorageService,\n        private alertController: AlertRuleController,\n    ) { }\n\n    ngOnInit(): void {\n        this.orgID = this.storageService.getStorage('currentOrgID');\n    }\n\n    ngAfterViewInit() {\n        merge(\n            this.paginator.page,\n            this.sort.sortChange,\n            fromEvent(this.refreshBtn.nativeElement, 'click')\n        ).pipe(\n            startWith({}),\n            switchMap((): any => {\n                this.searchArr = [];\n                if (this.searchFlag) {\n                    this.searchArr.push('name:' + this.searchValue)\n                }\n\n                const alertType = AlertTypeEnum.ALL;\n\n                return this.alertController.getAlertRuleByPage(\n                    this.paginator.pageIndex,\n                    this.paginator.pageSize,\n                    this.sort.active,\n                    this.sort.direction,\n                    this.searchArr,\n                    alertType,\n                    this.orgID\n                ).pipe(catchError(() => observableOf(null)));\n            }),\n            map((response: PageM<AlertPageM>): any => {\n                if (response == null) {\n                    this.resultLength = 0;\n                    return [];\n                }\n                this.resultLength = response[\"totalCount\"];\n                return response[\"records\"];\n            })\n        ).subscribe((dataSource) => {\n            this.dataSource = dataSource;\n        });\n    }\n\n    searchFn(value: string) {\n        this.searchFlag = true;\n        this.searchValue = value;\n        if (value.length == 0) {\n            this.resetSearch();\n        } else {\n            this.paginator.pageIndex = 0;\n        }\n        this.refreshBtn.nativeElement.click();\n    }\n\n    resetSearch() {\n        this.searchFlag = false;\n        this.searchBar.searchClear();\n    }\n\n}\n","<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Configured Alarms</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar searchBy=\"name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <div class=\"overflowX customScrollBar\">\n        <table class=\"w-100\" mat-table [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"id\"\n            matSortDirection=\"asc\" matSortDisableClear>\n\n            <ng-container matColumnDef=\"id\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n                    ID\n                </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    {{ row.id ? row.id : COMMON_CONSTANT.HYPHEN }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"name\">\n                <th class=\"px-3 columnWidth2\" mat-header-cell *matHeaderCellDef> Name </th>\n                <td class=\"px-3 columnWidth2\" mat-cell *matCellDef=\"let row\" [matTooltip]=\"row?.name?.length>25? row.name: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row.name ? row.name : COMMON_CONSTANT.HYPHEN) | dotdotdot:25 }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"associatedWith\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Associated with </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.associatedWith?.length>30? row.associatedWith: ''\" matTooltipPosition=\"above\"\n                    matTooltipClass=\"nameTooltip\">\n                    {{ (row.associatedWith ? row.associatedWith : COMMON_CONSTANT.HYPHEN) | dotdotdot:30 }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"ruleDescription\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Rule </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.ruleDescription?.length>30? row.ruleDescription: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row.ruleDescription ? row.ruleDescription : COMMON_CONSTANT.HYPHEN) | dotdotdot:30 }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"type\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Type </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <span class=\"badge rounded-pill bg-light text-dark\" [ngSwitch]=\"row?.type\">\n                        <ng-container *ngSwitchCase=\"AlertTypeEnum.INSTANTANEOUS\">{{\n                            AlertTypeLabelEnum.INSTANTANEOUS_LABEL\n                            }}</ng-container>\n                        <ng-container *ngSwitchCase=\"AlertTypeEnum.PERIODIC\">{{ AlertTypeLabelEnum.PERIODIC_LABEL\n                            }}</ng-container>\n                        <ng-container *ngSwitchCase=\"AlertTypeEnum.CONSTANT_DATA\">{{ AlertTypeLabelEnum.CONSTANT_DATA_LABEL\n                            }}</ng-container>\n                    </span>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"status\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Status </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <span class=\"badge rounded-pill\" [ngClass]=\"{'bg-success': row?.status, 'bg-danger': !row?.status}\">\n                        {{ row?.status ? StatusEnum.ACTIVE_STATUS : StatusEnum.INACTIVE_STATUS }}\n                    </span>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n            <tr mat-row *matRowDef=\"let task; columns: displayedColumn;\"></tr>\n\n            <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                    {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                </td>\n            </tr>\n        </table>\n    </div>\n    <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ConfiguredAlarmPageComponent } from './page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ConfiguredAlarmPageComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\n\nexport class ConfiguredAlarmPageRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfiguredAlarmPageRoutingModule } from './page-routing.module';\nimport { ConfiguredAlarmPageComponent } from './page.component';\n\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { SearchBarOneModule } from '@library/tsc-common';\nimport { EllipsisPipeModule } from '@library/tsc-common';\n\n@NgModule({\n    declarations: [\n        ConfiguredAlarmPageComponent\n    ],\n    imports: [\n        CommonModule,\n        ConfiguredAlarmPageRoutingModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatSortModule,\n        MatTooltipModule,\n        SearchBarOneModule,\n        EllipsisPipeModule\n    ]\n})\nexport class ConfiguredAlarmPageModule { }\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatDatepicker } from '@angular/material/datepicker';\n\nimport { Moment } from 'moment';\nimport * as moment from 'moment-timezone';\n\nimport { merge, fromEvent, of as observableOf } from 'rxjs';\nimport { map, startWith, switchMap, catchError, filter } from \"rxjs/operators\";\n\nimport { AlertTypeLabelEnum, AlertStatusEnum, AlertStatusLabelEnum, AlertTypeEnum } from '../../../../enum/alert.enum';\nimport { AlarmPageM } from '../../../../model/alarm.model';\n\nimport { AlertRuleController } from '../../../../controller/alert.controller';\n\n// tsc-library\nimport { DateService } from '@library/date';\nimport { COMMON_CONSTANT, MaterialFormFieldAppearance, PageM, SearchBarOneComponent, TABLE_CONSTANT } from '@library/tsc-common';\nimport { StorageService } from '@library/storage-service';\nimport { OrganizationService } from '@library/organization-service';\n// /tsc-library/\n\n@Component({\n    selector: 'lib-page',\n    templateUrl: './page.component.html',\n    styleUrls: ['./page.component.scss']\n})\n\nexport class GeneratedAlarmPageComponent implements OnInit {\n\n    TABLE_CONSTANT = TABLE_CONSTANT;\n    COMMON_CONSTANT = COMMON_CONSTANT;\n\n    AlertTypeEnum = AlertTypeEnum;\n    AlertTypeLabelEnum = AlertTypeLabelEnum;\n    AlertStatusEnum = AlertStatusEnum;\n    AlertStatusLabelEnum = AlertStatusLabelEnum;\n    MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n\n    orgID: any;\n\n    displayedColumn: string[] = ['id', 'alertName', 'parameterLabel', 'associatedWith', 'description', 'time', 'type', 'status'];\n    resultLength: number = 0;\n    dataSource: any[] = [];\n\n    searchFlag: boolean = false;\n    searchValue: string;\n    searchArr: any[] = [];\n    timeZone: string = null;\n\n    today: Date = new Date();\n\n    selectedMonthFC: FormControl = new FormControl(moment().format('YYYY-MM'));\n    startDateFC: FormControl = new FormControl();\n    endDateFC: FormControl = new FormControl();\n\n    statusFC: FormControl = new FormControl(AlertStatusEnum.ACTIVE, Validators.required);\n\n    @ViewChild('sort') sort: MatSort;\n    @ViewChild('paginator') paginator: MatPaginator;\n    @ViewChild('refreshBtn') refreshBtn: ElementRef;\n    @ViewChild('searchBar') searchBar: SearchBarOneComponent;\n\n    constructor(\n        public dateService: DateService,\n        private storageService: StorageService,\n        private organizationService: OrganizationService,\n        private alertController: AlertRuleController\n    ) { }\n\n    ngOnInit(): void {\n        this.orgID = this.storageService.getStorage('currentOrgID');\n\n        this.getTimezone();\n    }\n\n    async getTimezone() {\n        this.timeZone = <string>await this.organizationService.getOrgTimezone();\n\n        this.startDateFC.patchValue(moment().startOf('month').tz(this.timeZone).format());\n        this.endDateFC.patchValue(moment().add(1, 'months').startOf('month').tz(this.timeZone).format());\n\n        if (this.statusFC.value == AlertStatusEnum.ACTIVE) {\n            this.getActiveAlertByPage();\n        } else {\n            this.getResolvedAlertByPage();\n        }\n    }\n\n    monthSelectedHandler(normalizedMonth: Moment, datepicker: MatDatepicker<Moment>): void {\n        let duration = this.dateService.monthSelectedHandler(normalizedMonth, datepicker);\n        this.selectedMonthFC.setValue(duration);\n\n        this.startDateFC.patchValue(moment(normalizedMonth).startOf('month').tz(this.timeZone).format());\n        this.endDateFC.patchValue(moment(normalizedMonth).add(1, 'months').startOf('month').tz(this.timeZone).format());\n\n        if (this.statusFC.value == AlertStatusEnum.ACTIVE) {\n            this.getActiveAlertByPage();\n        } else {\n            this.getResolvedAlertByPage();\n        }\n    }\n\n    getActiveAlertByPage() {\n        merge(\n            this.paginator.page,\n            this.sort.sortChange,\n            fromEvent(this.refreshBtn.nativeElement, 'click')\n        ).pipe(\n            startWith({}),\n            filter(() => this.statusFC.value == AlertStatusEnum.ACTIVE),\n            switchMap(() => {\n                let requestBody = {};\n\n                if (this.searchFlag) {\n                    requestBody['search'] = this.searchValue;\n                }\n                requestBody['pageNo'] = this.paginator.pageIndex;\n                requestBody['pageSize'] = this.paginator.pageSize;\n                requestBody['sortBy'] = this.sort.active;\n                requestBody['orderBy'] = this.sort.direction;\n                requestBody['startDate'] = this.startDateFC.value;\n                requestBody['endDate'] = this.endDateFC.value;\n\n                return this.alertController.getActiveAlertByPage(this.orgID, requestBody\n                ).pipe(catchError(() => observableOf(null)));\n            }),\n            map((response: PageM<AlarmPageM>): any => {\n                if (response == null) {\n                    this.resultLength = 0;\n                    return [];\n                }\n                this.resultLength = response[\"totalCount\"];\n                return response[\"records\"];\n            })\n        ).subscribe((dataSource) => {\n            this.dataSource = dataSource;\n        });\n    }\n\n    getResolvedAlertByPage() {\n        merge(\n            this.paginator.page,\n            this.sort.sortChange,\n            fromEvent(this.refreshBtn.nativeElement, 'click')\n        ).pipe(\n            startWith({}),\n            filter(() => this.statusFC.value == AlertStatusEnum.RESOLVED),\n            switchMap(() => {\n                let requestBody = {};\n\n                if (this.searchFlag) {\n                    requestBody['search'] = this.searchValue;\n                }\n                requestBody['pageNo'] = this.paginator.pageIndex;\n                requestBody['pageSize'] = this.paginator.pageSize;\n                requestBody['sortBy'] = this.sort.active;\n                requestBody['orderBy'] = this.sort.direction;\n                requestBody['startDate'] = this.startDateFC.value;\n                requestBody['endDate'] = this.endDateFC.value;\n\n                return this.alertController.getResolvedAlertByPage(this.orgID, requestBody\n                ).pipe(catchError(() => observableOf(null)));\n            }),\n            map((response: PageM<AlarmPageM>): any => {\n                if (response == null) {\n                    this.resultLength = 0;\n                    return [];\n                }\n                this.resultLength = response[\"totalCount\"];\n                return response[\"records\"];\n            })\n        ).subscribe((dataSource) => {\n            this.dataSource = dataSource;\n        });\n    }\n\n    statusChange() {\n        let alertStatus;\n\n        switch (this.statusFC.value) {\n            case AlertStatusEnum.ACTIVE:\n                alertStatus = AlertStatusEnum.ACTIVE;\n                this.getActiveAlertByPage();\n                break;\n            case AlertStatusEnum.RESOLVED:\n                alertStatus = AlertStatusEnum.RESOLVED;\n                this.getResolvedAlertByPage();\n                break;\n            default:\n                console.log(\"undefined case encountered!\");\n        }\n        this.statusFC.patchValue(alertStatus);\n    }\n\n    searchFn(value: string) {\n        this.searchFlag = true;\n        this.searchValue = value;\n        if (value.length == 0) {\n            this.resetSearch();\n        } else {\n            this.paginator.pageIndex = 0;\n        }\n        this.refreshBtn.nativeElement.click();\n    }\n\n    resetSearch() {\n        this.searchFlag = false;\n        this.searchBar.searchClear();\n    }\n\n    getTimeLabel(dateTime) {\n        return dateTime ? moment.tz(dateTime, this.timeZone).fromNow() : COMMON_CONSTANT.HYPHEN;\n    }\n\n    getStatusLabelAndClass(status: AlertStatusEnum): { label: string, class: string } {\n        switch (status) {\n            case AlertStatusEnum.ACTIVE:\n                return { label: AlertStatusLabelEnum.ACTIVE_LABEL, class: 'badge rounded-pill bg-warning text-white' };\n            case AlertStatusEnum.RESOLVED:\n                return { label: AlertStatusLabelEnum.RESOLVED_LABEL, class: 'badge rounded-pill bg-success' };\n            default:\n                return { label: '', class: '' };\n        }\n    }\n\n}\n","<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Generated Alarms</div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-2\">\n                <mat-form-field id=\"monthlyField\" appMonthYearFormat (click)=\"dateService.openDatepickerOnClick(monthly)\"\n                    (keydown.arrowdown)=\"dateService.openDatepickerOnClick(monthly)\"\n                    (keydown.enter)=\"dateService.openDatepickerOnClick(monthly)\" class=\"matFieldWidth100 cursorPointer\"\n                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Select month</mat-label>\n                    <input matInput class=\"noFocus\" [matDatepicker]=\"monthly\" [formControl]=\"selectedMonthFC\" [max]=\"today\" required\n                        readonly />\n                    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"monthly\"></mat-datepicker-toggle>\n                    <mat-datepicker panelClass=\"monthPicker\" #monthly startView=\"year\"\n                        (monthSelected)=\"monthSelectedHandler($event, monthly)\"\n                        (closed)=\"dateService.takeFocusAway('monthlyField')\">\n                    </mat-datepicker>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-10\">\n                <div class=\"float-end me-1 mt-2\">\n                    <mat-button-toggle-group class=\"matBtnFilter\" [formControl]=\"statusFC\" (change)=\"statusChange()\">\n                        <mat-button-toggle value=\"{{ AlertStatusEnum.ACTIVE }}\">\n                            {{ AlertStatusLabelEnum.ACTIVE_LABEL }}\n                        </mat-button-toggle>\n                        <mat-button-toggle value=\"{{ AlertStatusEnum.RESOLVED }}\">\n                            {{ AlertStatusLabelEnum.RESOLVED_LABEL }}\n                        </mat-button-toggle>\n                    </mat-button-toggle-group>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-search-bar-one class=\"me-1 float-end\" #searchBar searchBy=\"parameter name\"\n                    (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n            </div>\n        </div>\n\n        <div class=\"overflowX customScrollBar\">\n            <table class=\"w-100\" mat-table [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"id\"\n                matSortDirection=\"asc\" matSortDisableClear>\n\n                <ng-container matColumnDef=\"id\">\n                    <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n                        ID\n                    </th>\n                    <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                        {{ row.id ? row.id: COMMON_CONSTANT.HYPHEN }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"alertName\">\n                    <th class=\"px-3 columnWidth4\" mat-header-cell *matHeaderCellDef> Name </th>\n                    <td class=\"px-3 columnWidth4\" mat-cell *matCellDef=\"let row\"\n                        [matTooltip]=\"row?.alertName?.length>15? row.alertName: ''\" matTooltipPosition=\"above\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ (row.alertName ? row.alertName: COMMON_CONSTANT.HYPHEN) | dotdotdot:15 }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"parameterLabel\">\n                    <th class=\"px-3 columnWidth4\" mat-header-cell *matHeaderCellDef>\n                        Parameter name\n                    </th>\n                    <td class=\"px-3 columnWidth4\" mat-cell *matCellDef=\"let row\">\n                        {{ row.parameterLabel ? row.parameterLabel: COMMON_CONSTANT.HYPHEN }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"associatedWith\">\n                    <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Associated with </th>\n                    <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                        [matTooltip]=\"row?.associatedWith?.length>30? row.associatedWith: ''\" matTooltipPosition=\"above\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ (row.associatedWith ? row.associatedWith: COMMON_CONSTANT.HYPHEN) | dotdotdot:30 }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"description\">\n                    <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Rule </th>\n                    <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                        [matTooltip]=\"row?.description?.length>30? row.description: ''\" matTooltipPosition=\"above\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ (row.description ? row.description: COMMON_CONSTANT.HYPHEN) | dotdotdot:30 }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"time\">\n                    <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef>\n                        Time\n                    </th>\n                    <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                        {{ getTimeLabel(row.time) }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"type\">\n                    <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Type </th>\n                    <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                        <span class=\"badge rounded-pill bg-light text-dark\" [ngSwitch]=\"row?.type\">\n                            <ng-container *ngSwitchCase=\"AlertTypeEnum.INSTANTANEOUS\">{{\n                                AlertTypeLabelEnum.INSTANTANEOUS_LABEL\n                                }}</ng-container>\n                            <ng-container *ngSwitchCase=\"AlertTypeEnum.PERIODIC\">{{ AlertTypeLabelEnum.PERIODIC_LABEL\n                                }}</ng-container>\n                            <ng-container *ngSwitchCase=\"AlertTypeEnum.CONSTANT_DATA\">{{ AlertTypeLabelEnum.CONSTANT_DATA_LABEL\n                                }}</ng-container>\n                        </span>\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"status\">\n                    <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Status </th>\n                    <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                        <span [ngClass]=\"getStatusLabelAndClass(row.status).class\">\n                            {{ getStatusLabelAndClass(row.status).label }}\n                        </span>\n                    </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n                <tr mat-row *matRowDef=\"let task; columns: displayedColumn;\"></tr>\n\n                <tr class=\"mat-row\" *matNoDataRow>\n                    <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                        {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n            [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n        </mat-paginator>\n    </div>\n\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { GeneratedAlarmPageComponent } from './page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: GeneratedAlarmPageComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\n\nexport class GeneratedAlarmPageRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { GeneratedAlarmPageRoutingModule } from './page-routing.module';\nimport { GeneratedAlarmPageComponent } from './page.component';\n\nimport { MatInputModule } from '@angular/material/input';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { SearchBarOneModule } from '@library/tsc-common';\nimport { EllipsisPipeModule } from '@library/tsc-common';\nimport { DateMonthYearFormatModule } from '@library/date';\n\n@NgModule({\n    declarations: [\n        GeneratedAlarmPageComponent\n    ],\n    imports: [\n        CommonModule,\n        GeneratedAlarmPageRoutingModule,\n        ReactiveFormsModule,\n        DateMonthYearFormatModule,\n        MatInputModule,\n        MatNativeDateModule,\n        MatButtonToggleModule,\n        MatDatepickerModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatSortModule,\n        MatTooltipModule,\n        SearchBarOneModule,\n        EllipsisPipeModule\n    ]\n})\nexport class GeneratedAlarmPageModule { }\n","/*\n * Public API Surface of alerts\n*/\n\nexport * from './lib/alerts.service';\nexport * from './lib/alerts.component';\nexport * from './lib/alerts.module';\n\nexport * from './lib/tsc/model/alert.model';\nexport * from './lib/tsc/model/alarm.model';\nexport * from './lib/tsc/model/escalation.model';\n\nexport * from './lib/tsc/enum/alert.enum';\n\nexport * from './lib/tsc/component/alert-rule/page/page.module';\nexport * from './lib/tsc/component/alert-rule/page/page.component';\n\nexport * from './lib/tsc/component/alert-rule/create-update/create-update.module';\nexport * from './lib/tsc/component/alert-rule/create-update/create-update.component';\n\nexport * from './lib/tsc/component/escalation/create-update/create-update.module';\nexport * from './lib/tsc/component/escalation/create-update/create-update.component';\n\nexport * from './lib/tsc/component/escalation/list/list.module';\nexport * from './lib/tsc/component/escalation/list/list.component';\n\nexport * from './lib/tsc/component/alarm/configured/page/page.module';\nexport * from './lib/tsc/component/alarm/configured/page/page.component';\n\nexport * from './lib/tsc/component/alarm/generated/page/page.module';\nexport * from './lib/tsc/component/alarm/generated/page/page.component';\n\nexport * from './lib/tsc/controller/alert.controller';\nexport * from './lib/tsc/controller/escalation.controller';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["observableOf","i1","i2","i3","i4.AlertRuleController","i5.EscalationController","i6","i13","i15","i17","routes","i3.AlertRuleController","i5","i7","i8","i9","i10","i11","i12","i14","i16","i23","i3.EscalationController","i18","i19","i20","i2.AlertRuleController","i4"],"mappings":"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"}