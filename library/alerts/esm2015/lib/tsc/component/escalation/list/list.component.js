import { Component } from '@angular/core';
import { EscalationLevelCount, EscalationLevelInfo } from '../../../model/escalation.model';
import { CreateUpdateEscalationComponent } from '../../escalation/create-update/create-update.component';
import { ButtonLabelEnum, COMMON_CONSTANT, DialogEnum, DialogOneComponent, DialogOneEnum, MATERIAL_CONSTANT, PageTitleEnum } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/router";
import * as i3 from "../../../controller/escalation.controller";
import * as i4 from "@library/storage-service";
import * as i5 from "@library/toastr-service";
import * as i6 from "@angular/material/card";
import * as i7 from "@angular/common";
import * as i8 from "@angular/flex-layout/flex";
import * as i9 from "@angular/material/tooltip";
// /tsc-library/
export class ListComponent {
    constructor(dialog, activatedRoute, escalationController, 
    // tsc-library
    storageService, toastrService
    // /tsc-library/
    ) {
        this.dialog = dialog;
        this.activatedRoute = activatedRoute;
        this.escalationController = escalationController;
        this.storageService = storageService;
        this.toastrService = toastrService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.PageTitleEnum = PageTitleEnum;
        this.DialogEnum = DialogEnum;
        this.escalationLevelJSON = [];
        this.escalationLevelCountM = new EscalationLevelCount();
        this.escalationLevelInfoM = [new EscalationLevelInfo()];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.getEscalationLevelCount();
        this.activatedRoute.params.subscribe((pathParam) => {
            if (pathParam.alertID != null) {
                this.alertRuleID = pathParam.alertID;
            }
        });
        this.getAllLevelEscalation();
    }
    getEscalationLevelCount() {
        this.escalationController.getEscalationLevelCount(this.orgID).subscribe((escalationLevelCountRes) => {
            this.escalationLevelCountM = escalationLevelCountRes;
            if (this.escalationLevelCountM.level && this.escalationLevelCountM != null) {
                this.escalationLevelJSON = this.getEscalationLevelJSON(this.escalationLevelCountM);
            }
        }, error => {
            console.log('error in getEscalationLevelCount() -', error);
        });
    }
    getAllLevelEscalation() {
        this.escalationController.getAllLevelEscalation(this.orgID, this.alertRuleID).subscribe((escalationLevelRes) => {
            this.escalationLevelInfoM = escalationLevelRes;
        }, error => {
            console.log('error in getAllLevelEscalation() -', error);
        });
    }
    getEscalationLevelJSON(escalationLevel) {
        const levelsArray = [];
        for (let i = 1; i <= escalationLevel.level; i++) {
            levelsArray.push({
                id: i,
                name: `Level ${i}`
            });
        }
        return levelsArray;
    }
    isLevelConfigured(levelId) {
        var _a;
        return (_a = this.escalationLevelInfoM) === null || _a === void 0 ? void 0 : _a.some(level => level.level == levelId);
    }
    getCorresondingEscLevelConfig(levelId) {
        var _a;
        return (_a = this.escalationLevelInfoM) === null || _a === void 0 ? void 0 : _a.find(level => level.level == levelId);
    }
    hasEscalationDataForPreviousLevel(levelId) {
        return levelId > 1 && this.hasEscalationDataForLevel(levelId - 1);
    }
    hasEscalationDataForLevel(levelId) {
        var _a;
        const escalationData = (_a = this.escalationLevelInfoM) === null || _a === void 0 ? void 0 : _a.find(level => level.level == levelId);
        return !!escalationData;
    }
    createUpdateEscalationRuleDialog(levelID, action, escLevelConfig) {
        const dialog = this.dialog.open(CreateUpdateEscalationComponent, {
            data: {
                alertRuleID: this.alertRuleID,
                levelID: levelID,
                action: action,
                escLevelConfig: escLevelConfig
            },
            minWidth: '50vw',
            maxWidth: '50vw',
            height: '100%',
            position: { right: '-2px', top: '0px' }
        });
        dialog.afterClosed().subscribe((result) => {
            if (result == DialogEnum.SUCCESS_DR) {
                this.getAllLevelEscalation();
            }
        });
    }
    openDeleteEscRuleDialog(levelID, escLevelConfig) {
        const escalationRuleID = escLevelConfig.escalationRuleID;
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '500px',
            maxWidth: '500px',
            data: {
                type: DialogOneEnum.DELETE,
                icon: 'dangerous',
                header: 'Delete escalation ?',
                body: 'Escalation configuration for level ' + '<b>' + levelID + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            if (res) {
                this.deleteEscalationRuleDialog(escalationRuleID);
            }
        });
    }
    deleteEscalationRuleDialog(escalationRuleID) {
        this.escalationController.deleteEsclationByLevelID(this.orgID, escalationRuleID).subscribe((deleteRes) => {
            window.location.reload();
            let toast = this.toastrService.getToastStatus(deleteRes.status);
            this.toastrService.openToast(toast.title, deleteRes.message, toast.color);
        });
    }
}
ListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ListComponent, deps: [{ token: i1.MatDialog }, { token: i2.ActivatedRoute }, { token: i3.EscalationController }, { token: i4.StorageService }, { token: i5.ToastrService }], target: i0.ɵɵFactoryTarget.Component });
ListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ListComponent, selector: "lib-list", ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Escalation Rule</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row mb-3\" *ngFor=\"let level of escalationLevelJSON\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-8\">\n                            <div class=\"cardTitle\">\n                                {{ level.name }}\n                            </div>\n                            <div class=\"col-sm-12\">\n                                <span class=\"text-danger\" *ngIf=\"!isLevelConfigured(level.id)\">\n                                    Not configured.\n                                </span>\n                                <span *ngIf=\"isLevelConfigured(level.id)\">\n                                    <div fxLayout=\"row wrap\">\n                                        <div class=\"col-sm-3\">\n                                            <div>Escalations:</div>\n                                            <div></div>\n                                        </div>\n                                        <div class=\"col-sm-4\">\n                                            <div>Interval</div>\n                                            <div class=\"fw-bold\">{{\n                                                getCorresondingEscLevelConfig(level.id)?.intervalValue}} - {{\n                                                getCorresondingEscLevelConfig(level.id)?.intervalFrequencyName}}</div>\n                                        </div>\n                                        <div class=\"col-sm-4\">\n                                            <div>Notification frequency</div>\n                                            <div class=\"fw-bold\">{{\n                                                getCorresondingEscLevelConfig(level.id)?.notificationPrefValue}}\n                                                - {{ getCorresondingEscLevelConfig(level.id)?.notificationPrefName}}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4 centerAlignVertical justify-content-end\">\n                            <button class=\"btn btn-sm btn-success\" type=\"button\"\n                                (click)=\"createUpdateEscalationRuleDialog(level.id, PageTitleEnum.CREATE)\"\n                                *ngIf=\"!isLevelConfigured(level.id) && (level.id == 1 || (hasEscalationDataForPreviousLevel(level.id) && !hasEscalationDataForLevel(level.id)))\">\n                                {{ ButtonLabelEnum.CREATE_BTN_LABEL }}\n                            </button>\n                            <button class=\"btn btn-sm btn-secondary disableButton\" matTooltipPosition=\"above\"\n                                [matTooltip]=\"'Setting up a previous level is mandatory before creating the escalation metric for the current level'\"\n                                *ngIf=\"!isLevelConfigured(level.id) && level.id != 1 && (hasEscalationDataForLevel(level.id) || !hasEscalationDataForPreviousLevel(level.id))\">\n                                {{ ButtonLabelEnum.CREATE_BTN_LABEL }}\n                            </button>\n                            <button class=\"btn btn-sm btn-primary me-2\" type=\"button\"\n                                (click)=\"createUpdateEscalationRuleDialog(level.id, PageTitleEnum.UPDATE, getCorresondingEscLevelConfig(level.id))\"\n                                *ngIf=\"isLevelConfigured(level.id)\">\n                                {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                            </button>\n                            <button class=\"btn btn-sm btn-danger\" type=\"button\"\n                                (click)=\"openDeleteEscRuleDialog(level.id, getCorresondingEscLevelConfig(level.id))\"\n                                *ngIf=\"isLevelConfigured(level.id)\">\n                                {{ ButtonLabelEnum.DELETE_BTN_LABEL }}\n                            </button>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>", styles: [".disableButton{cursor:not-allowed;background-color:#b5b2b2;border-color:#b5b2b2;color:#fff}\n"], components: [{ type: i6.MatCard, selector: "mat-card", exportAs: ["matCard"] }], directives: [{ type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { type: i9.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-list',
                    templateUrl: './list.component.html',
                    styleUrls: ['./list.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.ActivatedRoute }, { type: i3.EscalationController }, { type: i4.StorageService }, { type: i5.ToastrService }]; } });
//# sourceMappingURL=data:application/json;base64,