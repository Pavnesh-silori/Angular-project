import { __awaiter } from "tslib";
import { Component, Inject } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { isEqual } from 'lodash';
import { ToastrColor } from '@library/toastr-service';
import { LIST_CONSTANT } from '@library/tsc-lite';
import { ProfileImg, User, UserContext } from '@library/user-service';
import { COMMON_CONSTANT, ButtonLabelEnum, MATERIAL_CONSTANT, MaterialFormFieldAppearance, InvalidForm, DialogEnum, PageTitleEnum, MatSelectSearchService, FormErrorEnum } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/forms";
import * as i3 from "../../../controller/escalation.controller";
import * as i4 from "@library/storage-service";
import * as i5 from "@library/toastr-service";
import * as i6 from "@library/user-service";
import * as i7 from "@library/tsc-common";
import * as i8 from "@angular/material/button";
import * as i9 from "@angular/material/card";
import * as i10 from "@angular/material/form-field";
import * as i11 from "@angular/material/select";
import * as i12 from "@angular/material/core";
import * as i13 from "@angular/material/slide-toggle";
import * as i14 from "ngx-mat-select-search";
import * as i15 from "@angular/material/checkbox";
import * as i16 from "@angular/material/chips";
import * as i17 from "@angular/material/icon";
import * as i18 from "@angular/material/tooltip";
import * as i19 from "@angular/material/input";
import * as i20 from "@angular/common";
// /tsc-library/
export class CreateUpdateEscalationComponent {
    constructor(dialogRef, data, escalationFB, escalationController, 
    // tsc-library
    storageService, toastrService, userService, tscCommonService
    // /tsc-library/
    ) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.escalationFB = escalationFB;
        this.escalationController = escalationController;
        this.storageService = storageService;
        this.toastrService = toastrService;
        this.userService = userService;
        this.tscCommonService = tscCommonService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.LIST_CONSTANT = LIST_CONSTANT;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.PageTitleEnum = PageTitleEnum;
        this.DialogEnum = DialogEnum;
        this.FormErrorEnum = FormErrorEnum;
        this.InvalidForm = InvalidForm;
        this.ToastrColor = ToastrColor;
        this.UserContext = UserContext;
        this.ProfileImg = ProfileImg;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.userContext = UserContext.ROOT_ORG_USER;
        this.inputPlaceholder = "email1@domain.com, email2@domain.com";
        this.isEqual = false;
        this.allUserID = [];
        this.totalUserCount = 0;
        this.selectable = true;
        this.removable = true;
        this.addOnBlur = true;
        this.separatorKeysCodes = [ENTER, COMMA];
        this.userM = [new User()];
        this.rootOrgUserM = [new User()];
        this.currentOrgUserM = [new User()];
        this.userFC = new FormControl(true, Validators.required);
        this.userSearchUtil = new MatSelectSearchService(['firstName', 'lastName', 'email']);
        this.errorHandling = (control, error) => {
            return this.escalationFG.controls[control].hasError(error);
        };
        this.alertRuleID = data.alertRuleID;
        this.levelID = data.levelID;
        this.action = data.action;
        this.dialogRef.disableClose = true;
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.escalationInit();
        this.initializeData();
    }
    initializeData() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getUsersByOrgID();
            yield this.getCurrentOrgUserAccess();
            if (this.action == PageTitleEnum.UPDATE) {
                this.escalationRuleID = this.data.escLevelConfig.escalationRuleID;
                this.setValidatorsForOtherUser();
                this.patchEscalation(this.data['escLevelConfig']);
            }
            this.escalationFG.valueChanges.subscribe(() => {
                this.isEqual = isEqual(this.initialObject, this.escalationFG);
            });
        });
    }
    escalationInit() {
        this.escalationFG = this.escalationFB.group({
            alertRuleID: [this.alertRuleID],
            level: [this.levelID],
            intervalValue: [, [Validators.required, this.integerValidator()]],
            intervalFrequencyKey: [, Validators.required],
            notificationPrefValue: [, [Validators.required, this.integerValidator()]],
            notificationPrefKey: [, Validators.required],
            userChoice: [UserContext.ROOT_ORG_USER],
            userID: [[], Validators.required],
            isAnyOtherUser: [false],
            otherUserEmail: [[]],
        });
    }
    integerValidator() {
        return (control) => {
            const value = control.value;
            if (value != null && value != undefined) {
                const isInteger = Number.isInteger(value);
                return isInteger ? null : { 'integerError': true };
            }
            return null;
        };
    }
    patchEscalation(escalationLevelConfig) {
        this.escalationFG.patchValue({
            alertRuleID: escalationLevelConfig.alertRuleID,
            level: escalationLevelConfig.level,
            intervalValue: escalationLevelConfig.intervalValue,
            intervalFrequencyKey: escalationLevelConfig.intervalFrequencyKey,
            notificationPrefValue: escalationLevelConfig.notificationPrefValue,
            notificationPrefKey: escalationLevelConfig.notificationPrefKey,
            userChoice: escalationLevelConfig.userChoice,
            isAnyOtherUser: escalationLevelConfig.isAnyOtherUser,
            otherUserEmail: escalationLevelConfig.otherUserEmail,
        });
        this.userFC.patchValue(escalationLevelConfig.userChoice == UserContext.CURRENT_ORG_USER ? false : true);
        this.escalationFG.get('userID').patchValue((escalationLevelConfig.userID.length == this.totalUserCount) ? [-1, ...escalationLevelConfig.userID] : [...escalationLevelConfig.userID]);
        this.initialObject = this.escalationFG.value;
        this.isEqual = true;
    }
    /* users code */
    getUsersByOrgID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.rootOrgUserM = (yield this.userService.getUsersByOrgID(this.orgID));
            this.userM = this.rootOrgUserM;
            this.userSearchUtil.entityArr = this.userM;
            this.userSearchUtil.createSubscription();
            this.totalUserCount = this.userM.length;
            this.userM.forEach(user => this.allUserID.push(user['id']));
        });
    }
    getCurrentOrgUserAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentOrgUserM = (yield this.userService.getCurrentOrgUserAccess(this.orgID));
        });
    }
    userContextChange() {
        if (this.userFC.value) {
            this.userContext = UserContext.ROOT_ORG_USER;
            this.userM = this.rootOrgUserM;
            this.escalationFG.get('userChoice').setValue(this.userContext);
        }
        else {
            this.userContext = UserContext.CURRENT_ORG_USER;
            this.userM = this.currentOrgUserM;
            this.escalationFG.get('userChoice').setValue(this.userContext);
        }
        this.allUserID = [];
        this.userSearchUtil.entityArr = this.userM;
        this.userSearchUtil.createSubscription();
        this.totalUserCount = this.userM.length;
        this.userM.forEach(user => this.allUserID.push(user['id']));
        this.escalationFG.get('userID').setValue([]);
    }
    selectUser() {
        const selected = this.escalationFG.get('userID').value;
        if (selected.includes(-1)) {
            selected.shift();
            this.escalationFG.get('userID').patchValue(selected);
        }
        else if (this.escalationFG.get('userID').value.length == this.totalUserCount) {
            this.allUserID.splice(0, 0, -1);
            this.escalationFG.get('userID').patchValue(this.allUserID);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            this.escalationFG.get('userID').patchValue(filteredSelected);
        }
    }
    selectAllUsers() {
        if (!this.escalationFG.get('userID').value.includes(-1)) {
            this.escalationFG.get('userID').reset([]);
            return;
        }
        this.escalationFG.get('userID').setValue([-1, ...this.allUserID]);
    }
    setValidatorsForOtherUser() {
        this.escalationFG.get('isAnyOtherUser').valueChanges.subscribe((value) => {
            if (value == true) {
                this.otherUserEmail.setValidators([Validators.required]);
            }
            else {
                this.otherUserEmail.reset([]);
                this.otherUserEmail.clearValidators();
            }
            this.otherUserEmail.updateValueAndValidity();
        });
    }
    addOtherUser(event) {
        const isAnyOtherUser = this.escalationFG.get('isAnyOtherUser');
        isAnyOtherUser.setValue(event.checked);
        if (isAnyOtherUser.value) {
            this.otherUserEmail.setValidators([Validators.required]);
        }
        else {
            this.otherUserEmail.reset([]);
            this.otherUserEmail.clearValidators();
        }
        this.otherUserEmail.updateValueAndValidity();
    }
    onInput() {
        this.inputPlaceholder = '';
    }
    get otherUserEmail() {
        return this.escalationFG.get('otherUserEmail');
    }
    add(event) {
        const value = (event.value || '').trim();
        if (value) {
            const emails = value.split(',').map(email => email.trim());
            const validEmails = emails.filter(email => this.tscCommonService.isValidEmail(email));
            if (validEmails.length > 0) {
                this.otherUserEmail.patchValue(this.otherUserEmail.value.concat(validEmails));
            }
        }
        event.chipInput.clear();
    }
    removeEmail(email) {
        const index = this.otherUserEmail.value.indexOf(email);
        if (index >= 0) {
            const emails = [...this.otherUserEmail.value];
            emails.splice(index, 1);
            this.otherUserEmail.setValue(emails);
        }
    }
    /* users code */
    createUpdateEscalationRule() {
        let userID = this.tscCommonService.removeSelectAllID(this.escalationFG.get('userID').value);
        this.escalationFG.get('userID').patchValue(userID);
        if (this.escalationFG.invalid) {
            this.escalationFG.markAllAsTouched();
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return [];
        }
        if (this.action == PageTitleEnum.CREATE) {
            this.escalationController.createEsclationByLevelID(this.orgID, this.escalationFG.value)
                .subscribe((createRes) => {
                let toast = this.toastrService.getToastStatus(createRes.status);
                this.toastrService.openToast(toast.title, createRes.message, toast.color);
                this.dialogRef.close(DialogEnum.SUCCESS_DR);
            }, error => {
                console.log('error in createEsclationByLevelID - ', error);
            });
        }
        else if (this.action == PageTitleEnum.UPDATE) {
            if (this.isEqual)
                return;
            this.escalationController.updateEsclationByLevelID(this.orgID, this.escalationRuleID, this.escalationFG.value)
                .subscribe((updateRes) => {
                let toast = this.toastrService.getToastStatus(updateRes.status);
                this.toastrService.openToast(toast.title, updateRes.message, toast.color);
                this.dialogRef.close(DialogEnum.SUCCESS_DR);
            }, error => {
                console.log('error in updateEsclationByLevelID - ', error);
            });
        }
    }
}
CreateUpdateEscalationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateEscalationComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i2.FormBuilder }, { token: i3.EscalationController }, { token: i4.StorageService }, { token: i5.ToastrService }, { token: i6.UserService }, { token: i7.TSCCommonService }], target: i0.ɵɵFactoryTarget.Component });
CreateUpdateEscalationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreateUpdateEscalationComponent, selector: "lib-create-update", ngImport: i0, template: "<div mat-dialog-title>\n    <strong class=\"dialogTitle\">\n        {{ action }} Escalation Rule\n    </strong>\n    <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\" matTooltip=\"Close\"\n        matTooltipPosition=\"before\">\n        <span class=\"material-symbols-outlined\" [mat-dialog-close]=\"DialogEnum.CLOSE_DR\">\n            close\n        </span>\n    </button>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <form [formGroup]=\"escalationFG\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"cardTitle\">\n                        Interval\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label class=\"formLabel\"> Value </mat-label>\n                                <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0\" [min]=\"0\"\n                                    formControlName=\"intervalValue\" required>\n                                <mat-error *ngIf=\"errorHandling('intervalValue', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('intervalValue', 'min')\">\n                                    {{ FormErrorEnum.NEGATIVE }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('intervalValue', 'integerError')\">\n                                    Please enter an integer value\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Select frequency</mat-label>\n                                <mat-select formControlName=\"intervalFrequencyKey\" required>\n                                    <mat-option *ngFor=\"let frequency of LIST_CONSTANT.ESCALATION_FREQUENCY\" [value]=\"frequency.value\">\n                                        {{ frequency.label }}\n                                    </mat-option>\n                                </mat-select>\n                                <mat-error *ngIf=\"errorHandling('intervalFrequencyKey', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"cardTitle\">\n                        Notification frequency\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label class=\"formLabel\"> Value </mat-label>\n                                <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0\" [min]=\"0\"\n                                    formControlName=\"notificationPrefValue\" required>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefValue', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefValue', 'min')\">\n                                    {{ FormErrorEnum.NEGATIVE }}\n                                </mat-error>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefValue', 'integerError')\">\n                                    Please enter an integer value\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Select frequency</mat-label>\n                                <mat-select formControlName=\"notificationPrefKey\" required>\n                                    <mat-option *ngFor=\"let frequency of LIST_CONSTANT.ESCALATION_FREQUENCY\" [value]=\"frequency.value\">\n                                        {{ frequency.label }}\n                                    </mat-option>\n                                </mat-select>\n                                <mat-error *ngIf=\"errorHandling('notificationPrefKey', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"border cardOverwrite\">\n                    <div class=\"cardTitle\">\n                        Escalated to\n                    </div>\n                    <div class=\"row userContext\">\n                        <div class=\"col-sm-6 d-flex justify-content-start centerAlignVertical\">\n                            <span class=\"fw-bold text-secondary me-2\"> Current org users </span>\n                            <mat-slide-toggle class=\"slideToggleBtn\" [formControl]=\"userFC\"\n                                (change)=\"userContextChange()\"></mat-slide-toggle>\n                            <span class=\"fw-bold text-secondary ms-2\"> All users </span>\n                        </div>\n\n                        <div class=\"col-sm-6\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Select user</mat-label>\n                                <mat-select formControlName=\"userID\" multiple required>\n                                    <ng-container *ngIf=\"userM && userM.length > 0 && userM[0]['id']; else noUserFound\">\n                                        <mat-option>\n                                            <ngx-mat-select-search [formControl]=\"userSearchUtil.filterFC\"\n                                                placeholderLabel=\"Search by name/email\"\n                                                noEntriesFoundLabel=\"No matching name/email found.\">\n                                            </ngx-mat-select-search>\n                                        </mat-option>\n                                        <mat-option [value]=\"-1\" (click)=\"selectAllUsers()\">\n                                            Select all\n                                        </mat-option>\n                                        <mat-option *ngFor=\"let user of userSearchUtil.filteredEntities | async\" [value]=\"user.id\"\n                                            (click)=\"selectUser()\">\n                                            {{ user?.email }}\n                                        </mat-option>\n                                    </ng-container>\n                                    <ng-template #noUserFound>\n                                        <mat-option disabled>\n                                            {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                        </mat-option>\n                                    </ng-template>\n                                </mat-select>\n                                <mat-error *ngIf=\"errorHandling('userID', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n\n                    <div class=\"row mt-2\">\n                        <div class=\"col-sm-6 mb-3 d-flex justify-content-start centerAlignVertical\">\n                            <mat-checkbox formControlName=\"isAnyOtherUser\" (change)=\"addOtherUser($event)\">\n                                Any other user\n                            </mat-checkbox>\n                        </div>\n\n                        <div class=\"col-sm-6\" *ngIf=\"escalationFG.controls['isAnyOtherUser'].value == true\">\n                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                <mat-label>Enter user email</mat-label>\n                                <mat-chip-list #chipList>\n                                    <mat-chip *ngFor=\"let email of otherUserEmail.value\" [removable]=\"removable\"\n                                        (removed)=\"removeEmail(email)\">\n                                        {{ email }}\n                                        <button matChipRemove *ngIf=\"removable\">\n                                            <mat-icon>cancel</mat-icon>\n                                        </button>\n                                    </mat-chip>\n                                    <input [placeholder]=\"inputPlaceholder\" [matChipInputFor]=\"chipList\"\n                                        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"addOnBlur\"\n                                        (matChipInputTokenEnd)=\"add($event)\" (input)=\"onInput()\" required>\n                                    <mat-error class=\"userEmailError\" *ngIf=\"otherUserEmail.hasError('required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-chip-list>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div mat-dialog-footer align=\"end\">\n    <button type=\"submit\" class=\"btn btn-sm btn-success\" (click)=\"createUpdateEscalationRule()\"\n        [ngClass]=\"{'disabled': action == PageTitleEnum.UPDATE && isEqual}\">\n        {{ action == PageTitleEnum.CREATE ? ButtonLabelEnum.CREATE_BTN_LABEL :\n        ButtonLabelEnum.UPDATE_BTN_LABEL }}\n    </button>\n</div>", styles: [".matAccordion{box-shadow:none!important;background:whitesmoke;border-radius:16px!important}.entityError{font-size:10.56px;font-family:Roboto,\"Helvetica Neue\",sans-serif}.userCardHeight{max-height:200px}.card{box-shadow:none!important}.scrollHeight{height:110px}.radioBtnField{height:82px}.radioBtnGroupLabel{font-size:16px}.radioBtnGroupError{font-size:10.56px;font-family:Roboto,\"Helvetica Neue\",sans-serif}.radioBtnLabel{color:#686868f3}.lineHeight{line-height:1}.profileImageDropdownView{height:35px;width:35px}.profileImgContainer{width:35px;min-height:35px;max-height:auto;float:left;margin:3px;padding:3px;display:flex;align-items:center;justify-content:center}.profileImg{width:35px}::ng-deep .userContext .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .userContext .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#5c80de}::ng-deep .userContext .mat-slide-toggle .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .userContext .mat-slide-toggle .mat-slide-toggle-thumb{background-color:#5c80de}.userEmailError{font-size:75%}.matOptionNameEmail{line-height:1.5em!important}\n"], components: [{ type: i8.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i9.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i11.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i12.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i13.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i14.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i15.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i16.MatChipList, selector: "mat-chip-list", inputs: ["aria-orientation", "multiple", "compareWith", "value", "required", "placeholder", "disabled", "selectable", "tabIndex", "errorStateMatcher"], outputs: ["change", "valueChange"], exportAs: ["matChipList"] }, { type: i17.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i18.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.MatLabel, selector: "mat-label" }, { type: i19.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i20.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.MatError, selector: "mat-error", inputs: ["id"] }, { type: i20.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i16.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disableRipple", "tabIndex", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"], exportAs: ["matChip"] }, { type: i16.MatChipRemove, selector: "[matChipRemove]" }, { type: i16.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputSeparatorKeyCodes", "placeholder", "id", "matChipInputFor", "matChipInputAddOnBlur", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { type: i20.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i20.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateEscalationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-create-update',
                    templateUrl: './create-update.component.html',
                    styleUrls: ['./create-update.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i2.FormBuilder }, { type: i3.EscalationController }, { type: i4.StorageService }, { type: i5.ToastrService }, { type: i6.UserService }, { type: i7.TSCCommonService }]; } });
//# sourceMappingURL=data:application/json;base64,