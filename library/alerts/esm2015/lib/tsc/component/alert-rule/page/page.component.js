import { Component, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { map, startWith, switchMap, catchError } from "rxjs/operators";
import { faPlus, faEllipsisV } from '@fortawesome/free-solid-svg-icons';
import { AlertButtonLabelEnum, AlertTypeEnum, AlertPageLabelEnum } from '../../../enum/alert.enum';
import { EscalationPermission } from '../../../model/escalation.model';
import { TABLE_CONSTANT, COMMON_CONSTANT, ButtonLabelEnum, DialogEnum, DialogOneEnum, DialogOneComponent, MATERIAL_CONSTANT, MaterialFormFieldAppearance } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/toastr-service";
import * as i4 from "../../../controller/alert.controller";
import * as i5 from "../../../controller/escalation.controller";
import * as i6 from "@angular/material/dialog";
import * as i7 from "@library/tsc-common";
import * as i8 from "@fortawesome/angular-fontawesome";
import * as i9 from "@angular/material/table";
import * as i10 from "@angular/material/sort";
import * as i11 from "@angular/material/slide-toggle";
import * as i12 from "@angular/material/paginator";
import * as i13 from "@angular/material/core";
import * as i14 from "@angular/material/tooltip";
import * as i15 from "@angular/forms";
import * as i16 from "@ng-bootstrap/ng-bootstrap";
import * as i17 from "@angular/common";
// /tsc-library/
export class PageComponent {
    constructor(router, activatedRoute, storageService, toastrService, alertController, escalationController, dialog) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.storageService = storageService;
        this.toastrService = toastrService;
        this.alertController = alertController;
        this.escalationController = escalationController;
        this.dialog = dialog;
        this.faPlus = faPlus;
        this.faEllipsisV = faEllipsisV;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.AlertTypeEnum = AlertTypeEnum;
        this.AlertPageLabelEnum = AlertPageLabelEnum;
        this.AlertButtonLabelEnum = AlertButtonLabelEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.DialogEnum = DialogEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.displayedColumn = ['id', 'name', 'associatedWith', 'ruleDescription', 'status', 'action'];
        this.resultLength = 0;
        this.dataSource = [];
        this.searchFlag = false;
        this.searchArr = [];
        this.escalationPermissionM = new EscalationPermission();
        this.alertStatusFC = new FormControl();
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.activatedRoute.data.subscribe(data => {
            this.alertLabel = data['alertType'];
        });
        const currentUrl = this.router.url;
        const segments = currentUrl.split('/');
        segments.pop();
        this.baseUrl = segments.join('/');
        this.getEscalationPermission();
    }
    ngAfterViewInit() {
        merge(this.paginator.page, this.sort.sortChange, fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(startWith({}), switchMap(() => {
            this.searchArr = [];
            if (this.searchFlag) {
                this.searchArr.push('name:' + this.searchValue);
            }
            const alertType = this.alertLabel == AlertPageLabelEnum.INSTANTANEOUS_LABEL ? AlertTypeEnum.INSTANTANEOUS : AlertTypeEnum.PERIODIC;
            return this.alertController.getAlertRuleByPage(this.paginator.pageIndex, this.paginator.pageSize, this.sort.active, this.sort.direction, this.searchArr, alertType, this.orgID).pipe(catchError(() => observableOf(null)));
        }), map((response) => {
            if (response == null) {
                this.resultLength = 0;
                return [];
            }
            this.resultLength = response["totalCount"];
            return response["records"];
        })).subscribe((dataSource) => {
            this.dataSource = dataSource;
            this.dataSource.forEach(alert => {
                this.alertStatusFC[alert.id] = new FormControl(alert.status);
            });
        });
    }
    getEscalationPermission() {
        this.escalationController.getEscalationPermission(this.orgID).subscribe((escalationPermissionRes) => {
            this.escalationPermissionM = escalationPermissionRes;
        }, error => {
            console.log('error in getEscalationPermission() -', error);
        });
    }
    getAlertStatusFC(alertID) {
        return this.alertStatusFC[alertID];
    }
    alertStatusChange(alertID) {
        let requestBody = {};
        requestBody['status'] = this.alertStatusFC[alertID].value;
        this.alertController.updateAlertRuleStatus(this.orgID, alertID, requestBody)
            .subscribe((alertStatusRes) => {
            let toast = this.toastrService.getToastStatus(alertStatusRes['status']);
            this.toastrService.openToast(toast.title, alertStatusRes.message, toast.color);
        }, error => {
            console.log('error in alertStatusChange - ', error);
        });
    }
    searchFn(value) {
        this.searchFlag = true;
        this.searchValue = value;
        if (value.length == 0) {
            this.resetSearch();
        }
        else {
            this.paginator.pageIndex = 0;
        }
        this.refreshBtn.nativeElement.click();
    }
    resetSearch() {
        this.searchFlag = false;
        this.searchBar.searchClear();
    }
    openDeleteAlertDialog(alertID, alertName) {
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '450px',
            data: {
                type: DialogOneEnum.DELETE,
                icon: 'dangerous',
                header: 'Delete alert rule?',
                body: '<b>' + alertName + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            if (res) {
                this.deleteAlertRule(alertID);
            }
        });
    }
    deleteAlertRule(alertID) {
        this.alertController.deleteAlertRule(this.orgID, alertID).subscribe((deleteRes) => {
            this.refreshBtn.nativeElement.click();
            let toast = this.toastrService.getToastStatus(deleteRes.status);
            this.toastrService.openToast(toast.title, deleteRes.message, toast.color);
        });
    }
}
PageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageComponent, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.StorageService }, { token: i3.ToastrService }, { token: i4.AlertRuleController }, { token: i5.EscalationController }, { token: i6.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
PageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageComponent, selector: "lib-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ alertLabel }} Alert</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar searchBy=\"name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n                <a class=\"btn btn-sm btn-success btnBase\" matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" [routerLink]=\"[baseUrl, 'create']\">\n                    <fa-icon [icon]=\"faPlus\"></fa-icon>&nbsp; {{ alertLabel }} Alert\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <div class=\"overflowX customScrollBar\">\n        <table class=\"w-100\" mat-table [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"id\"\n            matSortDirection=\"asc\" matSortDisableClear>\n\n            <ng-container matColumnDef=\"id\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n                    ID\n                </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    {{ row['id'] ? row['id']: COMMON_CONSTANT.HYPHEN }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"name\">\n                <th class=\"px-3 columnWidth2\" mat-header-cell *matHeaderCellDef> Name </th>\n                <td class=\"px-3 columnWidth2\" mat-cell *matCellDef=\"let row\" [matTooltip]=\"row?.['name']?.length>20? row['name']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['name'] ? row['name']: COMMON_CONSTANT.HYPHEN) | dotdotdot:20}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"associatedWith\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Associated with </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.['associatedWith']?.length>25? row['associatedWith']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['associatedWith'] ? row['associatedWith']: COMMON_CONSTANT.HYPHEN) | dotdotdot:25}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"ruleDescription\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Rule </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.['ruleDescription']?.length>25? row['ruleDescription']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['ruleDescription'] ? row['ruleDescription']: COMMON_CONSTANT.HYPHEN) | dotdotdot:25}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"status\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Status </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <mat-slide-toggle class=\"slideToggleBtn\" [formControl]=\"getAlertStatusFC(row.id)\"\n                        (change)=\"alertStatusChange(row.id)\"></mat-slide-toggle>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"action\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef></th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <div class=\"d-flex align-items-center\">\n                        <div class=\"btn-group\" ngbDropdown placement=\"left\">\n                            <button type=\"button\" ngbDropdownToggle class=\"dropdown-after dropdownAfter btn\">\n                                <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\n                            </button>\n                            <div ngbDropdownMenu>\n                                <button class=\"dropdown-item\" [routerLink]=\"[baseUrl, row['id'], 'update']\">\n                                    {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                                </button>\n                                <button class=\"dropdown-item\" [routerLink]=\"[baseUrl + '/' + row['id'] + '/escalation']\" *ngIf=\"escalationPermissionM\">\n                                    {{ AlertButtonLabelEnum.ESCALATION_RULE }}\n                                </button>\n                                <button class=\"btn btn-outline-danger rounded-0 dropdown-item\" (click)=\"openDeleteAlertDialog(row.id, row.name)\">\n                                    {{ ButtonLabelEnum.DELETE_BTN_LABEL }}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n            <tr mat-row *matRowDef=\"let task; columns: displayedColumn;\"></tr>\n\n            <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                    {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                </td>\n            </tr>\n        </table>\n    </div>\n    <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", styles: [".columnWidth1{min-width:120px}.columnWidth2{min-width:200px}.columnWidth3{min-width:230px}.slideToggleBtn .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#3ac47d}.slideToggleBtn .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#fff}\n"], components: [{ type: i7.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear"], outputs: ["emitSearch"] }, { type: i8.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i9.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i10.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i11.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i9.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i9.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i12.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i13.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i10.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i9.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i9.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i9.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i9.MatCellDef, selector: "[matCellDef]" }, { type: i9.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i14.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i15.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i15.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i16.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i16.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i16.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i17.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i9.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i9.MatNoDataRow, selector: "ng-template[matNoDataRow]" }], pipes: { "dotdotdot": i7.EllipsisPipeService } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-page',
                    templateUrl: './page.component.html',
                    styleUrls: ['./page.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.StorageService }, { type: i3.ToastrService }, { type: i4.AlertRuleController }, { type: i5.EscalationController }, { type: i6.MatDialog }]; }, propDecorators: { sort: [{
                type: ViewChild,
                args: ['sort']
            }], paginator: [{
                type: ViewChild,
                args: ['paginator']
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn']
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }] } });
//# sourceMappingURL=data:application/json;base64,