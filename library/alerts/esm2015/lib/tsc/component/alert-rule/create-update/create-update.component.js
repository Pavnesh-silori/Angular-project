import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { merge } from 'rxjs';
import { isEqual } from "lodash";
import { AlertTypeEnum, AlertTypeLabelEnum } from '../../../enum/alert.enum';
import { AlertRule } from '../../../model/alert.model';
import { ToastrColor } from '@library/toastr-service';
import { ProfileImg, User, UserContext } from '@library/user-service';
import { COMMON_CONSTANT, ButtonLabelEnum, MATERIAL_CONSTANT, MaterialFormFieldAppearance, InvalidForm, MatSelectSearchService, FormAction, PageTitleEnum, FormErrorEnum, Static } from '@library/tsc-common';
import { LIST_CONSTANT, ParameterEntity, DevicesWithEntities, Shift, Unit } from '@library/tsc-lite';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/forms";
import * as i3 from "../../../controller/alert.controller";
import * as i4 from "@library/storage-service";
import * as i5 from "@library/tsc-lite";
import * as i6 from "@library/toastr-service";
import * as i7 from "@library/user-service";
import * as i8 from "@library/tsc-common";
import * as i9 from "@angular/material/card";
import * as i10 from "@angular/material/form-field";
import * as i11 from "@angular/material/expansion";
import * as i12 from "@angular/material/checkbox";
import * as i13 from "@angular/material/radio";
import * as i14 from "@angular/material/select";
import * as i15 from "@angular/material/core";
import * as i16 from "ngx-mat-select-search";
import * as i17 from "@angular/material/slide-toggle";
import * as i18 from "ngx-perfect-scrollbar";
import * as i19 from "@angular/material/chips";
import * as i20 from "@angular/material/icon";
import * as i21 from "@angular/material/input";
import * as i22 from "@angular/common";
import * as i23 from "@angular/material/tooltip";
// /tsc-library/
export class CreateUpdateComponent {
    constructor(activatedRoute, alertRuleFB, alertController, 
    // tsc-library
    storageService, entityService, entityDeviceService, unitService, shiftService, toastrService, userService, tscCommonService
    // /tsc-library/
    ) {
        this.activatedRoute = activatedRoute;
        this.alertRuleFB = alertRuleFB;
        this.alertController = alertController;
        this.storageService = storageService;
        this.entityService = entityService;
        this.entityDeviceService = entityDeviceService;
        this.unitService = unitService;
        this.shiftService = shiftService;
        this.toastrService = toastrService;
        this.userService = userService;
        this.tscCommonService = tscCommonService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.LIST_CONSTANT = LIST_CONSTANT;
        this.AlertTypeEnum = AlertTypeEnum;
        this.AlertTypeLabelEnum = AlertTypeLabelEnum;
        this.FormAction = FormAction;
        this.FormErrorEnum = FormErrorEnum;
        this.PageTitleEnum = PageTitleEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.ProfileImg = ProfileImg;
        this.InvalidForm = InvalidForm;
        this.ToastrColor = ToastrColor;
        this.UserContext = UserContext;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.isEntityPanelExpanded = false;
        this.isFormSubmit = false;
        this.otherUser = false;
        this.isEqual = true;
        this.selectable = true;
        this.removable = true;
        this.addOnBlur = true;
        this.separatorKeysCodes = [ENTER, COMMA];
        this.userContext = UserContext.ROOT_ORG_USER;
        this.inputPlaceholder = "email1@domain.com, email2@domain.com";
        this.periodicAlertType = [new Static()];
        this.conditionConstant = [];
        this.entityM = [new ParameterEntity()];
        this.devicesWithEntitiesM = [new DevicesWithEntities()];
        this.unitM = [new Unit()];
        this.userM = [new User()];
        this.rootOrgUserM = [new User()];
        this.currentOrgUserM = [new User()];
        this.shiftM = [new Shift()];
        this.alertRuleM = new AlertRule();
        this.selectedEntities = [];
        this.manualSelectedEntities = [];
        this.allDeviceID = [];
        this.allShiftID = [];
        this.selectedUserIds = [];
        this.totalDeviceCount = 0;
        this.totalShiftCount = 0;
        this.userFC = new FormControl(true, Validators.required);
        this.selectedUserFC = new FormControl([], [Validators.required]);
        this.unitSearchUtil = new MatSelectSearchService(['name']);
        this.userSearchUtil = new MatSelectSearchService(['firstName', 'lastName', 'email']);
        this.errorHandling = (control, error) => {
            return this.alertRuleFG.controls[control].hasError(error);
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.conditionConstant = LIST_CONSTANT.CONDITION;
        this.activatedRoute.data.subscribe(data => {
            this.alertLabel = data['alertType'];
            if (this.alertLabel == AlertTypeLabelEnum.PERIODIC_LABEL) {
                this.getPeriodicAlertType();
            }
            this.action = data['alertAction'];
        });
        this.getUsersByOrgID();
        this.getCurrentOrgUserAccess();
        this.getShift();
        this.alertInit();
        this.activatedRoute.params.subscribe((pathParam) => {
            if (pathParam.alertID != null) {
                this.alertRuleID = pathParam.alertID;
                this.getAlertRuleByID();
            }
        });
    }
    getPeriodicAlertType() {
        this.alertController.getPeriodicAlertType(this.orgID).subscribe((res) => {
            this.periodicAlertType = res;
        }, error => {
            console.log('error in getPeriodicAlertType() -', error);
        });
    }
    ngAfterViewInit() {
        merge(this.parameterFilterChild.emitFilter).subscribe(() => this.valueChange());
    }
    valueChange() {
        if (this.parameterFilterChild.selectedParameterFC.value) {
            const selectedParameter = this.parameterFilterChild.selectedParameterFC.value;
            this.alertRuleFG.controls['parameterID'].patchValue(selectedParameter);
            this.alertRuleFG.get('entityID').reset([]);
            this.alertRuleFG.get('isSubEntitiesSelected').patchValue(false);
            this.alertRuleFG.get('isAlertAtDeviceLevel').reset();
            this.allDeviceID = [];
            this.alertRuleFG.get('deviceID').reset([]);
            this.alertRuleFG.get('unitID').reset();
            this.getEntitiesByParameterID(selectedParameter);
            this.getUnitByParameterID(selectedParameter);
        }
    }
    alertInit() {
        var _a, _b;
        this.alertRuleFG = this.alertRuleFB.group({
            alertType: [this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL ? AlertTypeEnum.INSTANTANEOUS : AlertTypeEnum.PERIODIC],
            name: [, Validators.required],
            parameterID: [, Validators.required],
            entityID: [[], Validators.required],
            isSubEntitiesSelected: [false],
            isAlertAtDeviceLevel: [],
            deviceID: [[]],
            periodicAlertType: [, this.alertLabel == AlertTypeLabelEnum.PERIODIC_LABEL ? Validators.required : []],
            unitID: [, Validators.required],
            condition: [, Validators.required],
            frequency: [, Validators.required],
            value: [],
            startValue: [],
            endValue: [],
            userChoice: [UserContext.ROOT_ORG_USER],
            userID: [[], Validators.required],
            isAnyOtherUser: [false],
            otherUserEmail: [[]],
            smsFrequency: [, Validators.required],
            emailFrequency: [, Validators.required],
            isShift: [, Validators.required],
            shiftID: [[]]
        });
        if (this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL) {
            this.setValidatorsForAlertLevelPref();
            this.setValidatorsForDevice();
        }
        (_a = this.alertRuleFG.get('periodicAlertType')) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(value => {
            if (value == 'BUDGET') {
                this.conditionConstant = LIST_CONSTANT.CONDITION.filter(condition => condition.value != 'BETWEEN');
            }
            else {
                this.conditionConstant = LIST_CONSTANT.CONDITION;
            }
        });
        (_b = this.alertRuleFG.get('isShift')) === null || _b === void 0 ? void 0 : _b.valueChanges.subscribe(value => {
            const shiftControl = this.alertRuleFG.get('shiftID');
            shiftControl === null || shiftControl === void 0 ? void 0 : shiftControl.clearValidators();
            if (value) {
                this.addValidation(shiftControl, [Validators.required]);
            }
            else {
                shiftControl === null || shiftControl === void 0 ? void 0 : shiftControl.clearValidators();
            }
            shiftControl === null || shiftControl === void 0 ? void 0 : shiftControl.updateValueAndValidity();
        });
    }
    addValidation(control, validators) {
        control.setValidators(validators);
        control.updateValueAndValidity();
    }
    getAlertRuleByID() {
        this.alertController.getAlertRuleByID(this.orgID, this.alertRuleID).subscribe((alertRuleRes) => {
            this.alertRuleM = alertRuleRes;
            this.initialObject = this.alertRuleM;
            this.getEntitiesByParameterID(this.alertRuleM.parameterID);
            this.getUnitByParameterID(this.alertRuleM.parameterID);
            this.setValidatorsForOtherUser();
            this.patchAlertFG();
        }, error => {
            console.log('error in getAlertRuleByID() -', error);
        });
    }
    patchAlertFG() {
        this.alertRuleFG.patchValue({
            alertType: this.alertRuleM.alertType,
            name: this.alertRuleM.name,
            parameterID: this.alertRuleM.parameterID,
            isAlertAtDeviceLevel: this.alertRuleM.isAlertAtDeviceLevel,
            entityID: this.alertRuleM.entityID,
            isSubEntitiesSelected: this.alertRuleM.isSubEntitiesSelected,
            periodicAlertType: this.alertRuleM.periodicAlertType,
            frequency: this.alertRuleM.frequency,
            unitID: this.alertRuleM.unitID,
            condition: this.alertRuleM.condition,
            value: this.alertRuleM.value,
            startValue: this.alertRuleM.startValue,
            endValue: this.alertRuleM.endValue,
            userChoice: this.alertRuleM.userChoice,
            userID: this.alertRuleM.userID,
            isAnyOtherUser: this.alertRuleM.isAnyOtherUser,
            otherUserEmail: this.alertRuleM.otherUserEmail,
            smsFrequency: this.alertRuleM.smsFrequency,
            emailFrequency: this.alertRuleM.emailFrequency,
            isShift: this.alertRuleM.isShift
        });
        this.conditionChange(this.alertRuleFG.get('condition').value);
        this.alertRuleFG.get('deviceID').patchValue((this.alertRuleM.deviceID.length == this.totalDeviceCount) ? [-1, ...this.alertRuleM.deviceID] : [...this.alertRuleM.deviceID]);
        this.alertRuleFG.get('shiftID').patchValue((this.alertRuleM.shiftID.length == this.totalShiftCount) ? [-1, ...this.alertRuleM.shiftID] : [...this.alertRuleM.shiftID]);
        this.parameterFilterChild.selectedParameterFC.patchValue(this.alertRuleM.parameterID);
        this.userFC.patchValue(this.alertRuleM.userChoice == UserContext.CURRENT_ORG_USER ? false : true);
        this.patchUserFields();
        this.alertRuleFG.valueChanges.subscribe(() => {
            this.isEqual = isEqual(this.initialObject, this.alertRuleFG.value);
        });
    }
    patchUserFields() {
        this.selectedUserIds = this.alertRuleM.userID;
        this.selectedUserFC.setValue(this.selectedUserIds);
        this.alertRuleFG.get('userID').setValue(this.selectedUserIds);
        if (this.userContext == UserContext.ROOT_ORG_USER) {
            this.userM = this.rootOrgUserM.filter(user => !this.selectedUserIds.includes(user.id));
        }
        else {
            this.userM = this.currentOrgUserM.filter(user => !this.selectedUserIds.includes(user.id));
        }
        this.userSearchUtil.entityArr = this.userM;
        this.userSearchUtil.createSubscription();
    }
    /* entities code */
    getEntitiesByParameterID(parameterID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.entityM = (yield this.entityService.getEntitiesByParameterID(this.orgID, parameterID));
        });
    }
    entityPanelOpened() {
        this.isEntityPanelExpanded = true;
    }
    entityPanelClosed() {
        this.isEntityPanelExpanded = false;
    }
    entityChange(entityID, event) {
        this.allDeviceID = [];
        this.alertRuleFG.get('deviceID').reset([]);
        let manualSelectedEntities = [...this.manualSelectedEntities];
        let selctedEntity = this.alertRuleFG.get('entityID').value || [];
        if (event.checked) {
            selctedEntity.push(entityID);
            manualSelectedEntities.push(entityID);
            if (this.alertRuleFG.get('isSubEntitiesSelected').value == true) {
                this.checkChildren(entityID, selctedEntity);
            }
        }
        else {
            selctedEntity = selctedEntity.filter(id => id != entityID);
            manualSelectedEntities = manualSelectedEntities.filter(id => id != entityID);
        }
        this.manualSelectedEntities = manualSelectedEntities;
        this.alertRuleFG.get('entityID').setValue(selctedEntity);
    }
    checkChildren(entityID, selectedEntities) {
        const entity = this.findEntityById(this.entityM, entityID);
        if (entity && entity.children && entity.children.length > 0) {
            const childIds = this.getAllEntityID(entity.children);
            childIds.forEach(id => {
                if (!selectedEntities.includes(id)) {
                    selectedEntities.push(id);
                }
            });
            this.alertRuleFG.get('entityID').setValue([...selectedEntities, ...childIds]);
        }
    }
    getAllEntityID(entities) {
        let allIds = [];
        for (const entity of entities) {
            allIds.push(entity.id);
            if (entity.children && entity.children.length > 0) {
                allIds = allIds.concat(this.getAllEntityID(entity.children));
            }
        }
        return allIds;
    }
    isSelected(entityId) {
        const selectedEntities = this.alertRuleFG.get('entityID').value || [];
        return selectedEntities.includes(entityId);
    }
    selectAllSubEntities(event) {
        this.alertRuleFG.get('deviceID').reset([]);
        const isSubEntitiesSelected = this.alertRuleFG.get('isSubEntitiesSelected');
        let selectedEntities = this.alertRuleFG.get('entityID').value || [];
        isSubEntitiesSelected.setValue(event.checked);
        if (isSubEntitiesSelected.value) {
            this.checkAllSubEntities(selectedEntities);
        }
        else {
            this.uncheckAllSubEntities(selectedEntities);
        }
    }
    checkAllSubEntities(selectedEntities) {
        let entitiesToAdd = new Set(selectedEntities);
        for (const entityId of selectedEntities) {
            const entity = this.findEntityById(this.entityM, entityId);
            if (entity && entity.children && entity.children.length > 0) {
                const childIds = this.getAllEntityID(entity.children);
                childIds.forEach(id => entitiesToAdd.add(id));
            }
        }
        this.alertRuleFG.get('entityID').setValue([...entitiesToAdd]);
    }
    uncheckAllSubEntities(selectedEntities) {
        let updatedSelectedEntities;
        if (this.action == FormAction.UPDATE) {
            updatedSelectedEntities = selectedEntities.filter(entityId => {
                const entity = this.findEntityById(this.entityM, entityId);
                if (entity && entity.children) {
                    selectedEntities = selectedEntities.filter(id => !entity.children.some(child => child.id == id));
                }
                this.alertRuleFG.get('entityID').setValue(selectedEntities);
            });
        }
        else {
            updatedSelectedEntities = selectedEntities.filter(id => this.manualSelectedEntities.includes(id));
            this.alertRuleFG.get('entityID').setValue(updatedSelectedEntities);
        }
    }
    findEntityById(entities, entityId) {
        for (const entity of entities) {
            if (entity.id == entityId) {
                return entity;
            }
            else if (entity.children && entity.children.length > 0) {
                const foundEntity = this.findEntityById(entity.children, entityId);
                if (foundEntity) {
                    return foundEntity;
                }
            }
        }
        return null;
    }
    /* entities code */
    setValidatorsForAlertLevelPref() {
        this.alertRuleFG.get('entityID').valueChanges.subscribe((value) => {
            const isAlertAtDeviceLevelControl = this.alertRuleFG.get('isAlertAtDeviceLevel');
            if (value && value.length > 0) {
                isAlertAtDeviceLevelControl.setValidators([Validators.required]);
            }
            else {
                isAlertAtDeviceLevelControl.clearValidators();
            }
            isAlertAtDeviceLevelControl.updateValueAndValidity();
        });
    }
    /* devices code */
    setValidatorsForDevice() {
        this.alertRuleFG.get('isAlertAtDeviceLevel').valueChanges.subscribe((value) => {
            const deviceIDControl = this.alertRuleFG.get('deviceID');
            const parameterID = this.alertRuleFG.get('parameterID').value;
            const entityID = this.alertRuleFG.get('entityID').value;
            if (value && this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL) {
                if (parameterID && (entityID === null || entityID === void 0 ? void 0 : entityID.length) > 0) {
                    this.getDevicesWithEntities(entityID, parameterID);
                }
                this.alertRuleFG.get('deviceID').reset([]);
                deviceIDControl.setValidators([Validators.required]);
            }
            else {
                this.alertRuleFG.get('deviceID').reset([]);
                deviceIDControl.clearValidators();
            }
            deviceIDControl.updateValueAndValidity();
        });
    }
    getDevicesWithEntities(entityID, parameterID) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let requestBody = {};
            requestBody['entityID'] = entityID;
            requestBody['parameterID'] = parameterID;
            this.devicesWithEntitiesM = (yield this.entityDeviceService.getDevicesWithEntities(this.orgID, requestBody));
            (_a = this.devicesWithEntitiesM) === null || _a === void 0 ? void 0 : _a.forEach(entity => {
                var _a, _b, _c;
                this.totalDeviceCount += (_a = entity === null || entity === void 0 ? void 0 : entity.devices) === null || _a === void 0 ? void 0 : _a.length;
                const deviceIDs = (_b = entity === null || entity === void 0 ? void 0 : entity.devices) === null || _b === void 0 ? void 0 : _b.map(device => device === null || device === void 0 ? void 0 : device.id);
                (_c = this.allDeviceID) === null || _c === void 0 ? void 0 : _c.push(...deviceIDs);
            });
        });
    }
    selectAllDevices() {
        if (!this.alertRuleFG.get('deviceID').value.includes(-1)) {
            this.alertRuleFG.get('deviceID').reset([]);
            return;
        }
        this.alertRuleFG.get('deviceID').setValue([-1, ...this.allDeviceID]);
    }
    selectDevices() {
        const selected = this.alertRuleFG.get('deviceID').value;
        if (selected.includes(-1)) {
            selected.shift();
            this.alertRuleFG.get('deviceID').patchValue(selected);
        }
        else if (this.alertRuleFG.get('deviceID').value.length == this.totalDeviceCount) {
            this.allDeviceID.splice(0, 0, -1);
            this.alertRuleFG.get('deviceID').patchValue(this.allDeviceID);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            this.alertRuleFG.get('deviceID').patchValue(filteredSelected);
        }
    }
    /* devices code */
    getUnitByParameterID(parameterID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.unitM = (yield this.unitService.getUnitByParameterID(this.orgID, parameterID));
            this.unitSearchUtil.entityArr = this.unitM;
            this.unitSearchUtil.createSubscription();
        });
    }
    unitChange(selectedUnit) {
        this.alertRuleFG.get('unitID').patchValue(selectedUnit);
    }
    conditionChange(condition) {
        if (condition == 'BETWEEN') {
            this.alertRuleFG.get('value').clearValidators();
            this.alertRuleFG.get('startValue').setValidators([Validators.required, this.validateStartEndValues.bind(this)]);
            this.alertRuleFG.get('endValue').setValidators([Validators.required, this.validateStartEndValues.bind(this)]);
        }
        else {
            this.alertRuleFG.get('startValue').clearValidators();
            this.alertRuleFG.get('endValue').clearValidators();
            this.alertRuleFG.get('value').setValidators([Validators.required]);
        }
        this.alertRuleFG.get('value').updateValueAndValidity();
        this.alertRuleFG.get('startValue').updateValueAndValidity();
        this.alertRuleFG.get('endValue').updateValueAndValidity();
    }
    showValueField() {
        return this.alertRuleFG.controls['condition'].value != 'BETWEEN';
    }
    showStartEndFields() {
        return this.alertRuleFG.controls['condition'].value == 'BETWEEN';
    }
    validateStartEndValues() {
        const startValue = this.alertRuleFG.get('startValue').value;
        const endValue = this.alertRuleFG.get('endValue').value;
        if (startValue != null && endValue != null && startValue >= endValue) {
            return { 'invalidRange': true };
        }
        return null;
    }
    getFrequency() {
        return this.alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL
            ? this.LIST_CONSTANT.ALERT_RULE_FREQUENCY.filter(option => option.value == 'INSTANT')
            : this.LIST_CONSTANT.ALERT_RULE_FREQUENCY.filter(option => option.value != 'INSTANT');
    }
    /* users code */
    getUsersByOrgID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.rootOrgUserM = (yield this.userService.getUsersByOrgID(this.orgID));
            this.userM = this.rootOrgUserM;
            this.userSearchUtil.entityArr = this.userM;
            this.userSearchUtil.createSubscription();
        });
    }
    getCurrentOrgUserAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentOrgUserM = (yield this.userService.getCurrentOrgUserAccess(this.orgID));
        });
    }
    userContextChange() {
        this.selectedUserIds = [];
        if (this.userFC.value) {
            this.userContext = UserContext.ROOT_ORG_USER;
            this.userM = this.rootOrgUserM;
            this.alertRuleFG.get('userChoice').setValue(this.userContext);
        }
        else {
            this.userContext = UserContext.CURRENT_ORG_USER;
            this.userM = this.currentOrgUserM;
            this.alertRuleFG.get('userChoice').setValue(this.userContext);
        }
        this.selectedUserFC.setValue(this.selectedUserIds);
        this.alertRuleFG.get('userID').setValue(this.selectedUserIds);
        this.userSearchUtil.entityArr = this.userM;
        this.userSearchUtil.createSubscription();
    }
    onUserSelectionChange(userId) {
        const index = this.selectedUserIds.indexOf(userId);
        if (index == -1) {
            this.selectedUserIds.push(userId);
            this.userM = this.userM.filter(user => user.id != userId);
            this.userSearchUtil.entityArr = this.userM;
            this.userSearchUtil.createSubscription();
        }
        this.selectedUserFC.setValue(this.selectedUserIds);
        this.alertRuleFG.get('userID').setValue(this.selectedUserIds);
    }
    removeSelectedUsers(userId) {
        const index = this.selectedUserIds.indexOf(userId);
        if (index != -1) {
            this.selectedUserIds.splice(index, 1);
            this.selectedUserFC.setValue(this.selectedUserIds);
            this.alertRuleFG.get('userID').setValue(this.selectedUserIds);
            const removedUser = this.userContext == UserContext.ROOT_ORG_USER ? this.rootOrgUserM.find(user => user.id == userId) : this.currentOrgUserM.find(user => user.id == userId);
            if (removedUser) {
                this.userM.push(removedUser);
                this.userSearchUtil.entityArr = this.userM;
                this.userSearchUtil.createSubscription();
            }
        }
    }
    getSelectedUsers() {
        return this.userContext == UserContext.ROOT_ORG_USER ? this.rootOrgUserM.filter(user => this.selectedUserIds.includes(user.id)) : this.currentOrgUserM.filter(user => this.selectedUserIds.includes(user.id));
    }
    setValidatorsForOtherUser() {
        this.alertRuleFG.get('isAnyOtherUser').valueChanges.subscribe((value) => {
            if (value == true) {
                this.otherUserEmail.setValidators([Validators.required]);
            }
            else {
                this.otherUserEmail.reset([]);
                this.otherUserEmail.clearValidators();
            }
            this.otherUserEmail.updateValueAndValidity();
        });
    }
    addOtherUser(event) {
        const isAnyOtherUser = this.alertRuleFG.get('isAnyOtherUser');
        isAnyOtherUser.setValue(event.checked);
        if (isAnyOtherUser.value) {
            this.otherUserEmail.setValidators([Validators.required]);
        }
        else {
            this.otherUserEmail.reset([]);
            this.otherUserEmail.clearValidators();
        }
        this.otherUserEmail.updateValueAndValidity();
    }
    onInput() {
        this.inputPlaceholder = '';
    }
    get otherUserEmail() {
        return this.alertRuleFG.get('otherUserEmail');
    }
    add(event) {
        const value = (event.value || '').trim();
        if (value) {
            const emails = value.split(',').map(email => email.trim());
            const validEmails = emails.filter(email => this.tscCommonService.isValidEmail(email));
            if (validEmails.length > 0) {
                this.otherUserEmail.patchValue(this.otherUserEmail.value.concat(validEmails));
            }
        }
        event.chipInput.clear();
    }
    removeEmail(email) {
        const index = this.otherUserEmail.value.indexOf(email);
        if (index >= 0) {
            const emails = [...this.otherUserEmail.value];
            emails.splice(index, 1);
            this.otherUserEmail.setValue(emails);
        }
    }
    /* users code */
    /* shift code */
    getShift() {
        return __awaiter(this, void 0, void 0, function* () {
            this.shiftM = (yield this.shiftService.getShift(this.orgID, 'NO'));
            this.totalShiftCount = this.shiftM.length;
            this.shiftM.forEach(shift => this.allShiftID.push(shift['id']));
        });
    }
    selectAllShifts() {
        if (!this.alertRuleFG.get('shiftID').value.includes(-1)) {
            this.alertRuleFG.get('shiftID').reset([]);
            return;
        }
        this.alertRuleFG.get('shiftID').setValue([-1, ...this.allShiftID]);
    }
    selectedShift() {
        const selected = this.alertRuleFG.get('shiftID').value;
        if (selected.includes(-1)) {
            selected.shift();
            this.alertRuleFG.get('shiftID').patchValue(selected);
        }
        else if (this.alertRuleFG.get('shiftID').value.length == this.totalShiftCount) {
            this.allShiftID.splice(0, 0, -1);
            this.alertRuleFG.get('shiftID').patchValue(this.allShiftID);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            this.alertRuleFG.get('shiftID').patchValue(filteredSelected);
        }
    }
    /* shift code */
    createUpdateAlert() {
        this.isFormSubmit = true;
        let shiftID = this.tscCommonService.removeSelectAllID(this.alertRuleFG.controls['shiftID'].value);
        let deviceID = this.tscCommonService.removeSelectAllID(this.alertRuleFG.controls['deviceID'].value);
        this.alertRuleFG.get('deviceID').patchValue(deviceID);
        this.alertRuleFG.get('shiftID').patchValue(shiftID);
        if (this.alertRuleFG.invalid) {
            this.alertRuleFG.markAllAsTouched();
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        if (this.action == FormAction.CREATE) {
            this.alertController.createAlertRule(this.orgID, this.alertRuleFG.value)
                .subscribe((createRes) => {
                let toast = this.toastrService.getToastStatus(createRes.status);
                this.toastrService.openToast(toast.title, createRes.message, toast.color);
                this.tscCommonService.back();
            }, error => {
                console.log('error in createAlertRule - ', error);
            });
        }
        else if (this.action == FormAction.UPDATE) {
            this.alertController.updateAlertRule(this.orgID, this.alertRuleID, this.alertRuleFG.value)
                .subscribe((updatedRes) => {
                let toast = this.toastrService.getToastStatus(updatedRes.status);
                this.toastrService.openToast(toast.title, updatedRes.message, toast.color);
                this.tscCommonService.back();
            }, error => {
                console.log('error in updateAlertRule - ', error);
            });
        }
    }
}
CreateUpdateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.FormBuilder }, { token: i3.AlertRuleController }, { token: i4.StorageService }, { token: i5.EntityService }, { token: i5.EntityDeviceService }, { token: i5.UnitService }, { token: i5.ShiftService }, { token: i6.ToastrService }, { token: i7.UserService }, { token: i8.TSCCommonService }], target: i0.ɵɵFactoryTarget.Component });
CreateUpdateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreateUpdateComponent, selector: "lib-create-update", viewQueries: [{ propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "parameterFilterChild", first: true, predicate: ["parameterFilterChild"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ action == FormAction.CREATE ? PageTitleEnum.CREATE : PageTitleEnum.UPDATE }} {{ alertLabel\n                }} Alert Rule</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"alertRuleFG\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Alert On\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> Alert name </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"text\" placeholder=\"Alert name\" formControlName=\"name\"\n                                        required>\n                                    <mat-error *ngIf=\"errorHandling('name', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-6\">\n                                <lib-parameter #parameterFilterChild></lib-parameter>\n                            </div>\n                        </div>\n\n                        <div class=\"row mt-1\" *ngIf=\"alertRuleFG.get('parameterID').value\">\n                            <div class=\"col-sm-12\">\n                                <mat-accordion>\n                                    <mat-expansion-panel class=\"matAccordion\" [expanded]=\"isEntityPanelExpanded\" (opened)=\"entityPanelOpened()\"\n                                        (closed)=\"entityPanelClosed()\">\n                                        <mat-expansion-panel-header>\n                                            <mat-panel-title>\n                                                <div class=\"card-title sectionTitle\">\n                                                    Select entity *\n                                                </div>\n                                                <div class=\"row ms-2\">\n                                                    <mat-error class=\"entityError\"\n                                                        *ngIf=\"isFormSubmit && !isEntityPanelExpanded && errorHandling('entityID', 'required')\">\n                                                        {{ FormErrorEnum.REQUIRED }}\n                                                    </mat-error>\n                                                </div>\n                                            </mat-panel-title>\n                                        </mat-expansion-panel-header>\n                                        <div class=\"row\">\n                                            <div class=\"mb-3\">\n                                                <small class=\"pageSubtitle\">\n                                                    <span *ngIf=\"alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL\">\n                                                        Choose <span class=\"text-secondary fw-bold\">\n                                                            'Select all sub-entities'\n                                                        </span> to generate alert at the current selection and any future entities\n                                                        at that level.\n                                                    </span> </small>\n                                                <br />\n                                                <small class=\"pageSubtitle\">\n                                                    <span class=\"text-secondary fw-bold\">NOTE: </span> The parameter you've selected is not present in the entities\n                                                    highlighted in <span class=\"fw-bold\"> gray.</span>\n                                                </small>\n                                            </div>\n                                            <div *ngFor=\"let entity of entityM; let i = index\" class=\"mt-2\">\n                                                <mat-checkbox [ngClass]=\"{'text-secondary': !entity.isParameterExists}\" [checked]=\"isSelected(entity.id)\"\n                                                    (change)=\"entityChange(entity.id, $event)\">\n                                                    {{ entity.name }}\n                                                </mat-checkbox>\n                                                <span class=\"ms-5\"\n                                                    *ngIf=\"alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL && alertRuleFG.get('entityID').value && alertRuleFG.get('entityID').value.length > 0\">\n                                                    <mat-checkbox formControlName=\"isSubEntitiesSelected\" (change)=\"selectAllSubEntities($event)\">\n                                                        Select all sub-entities\n                                                    </mat-checkbox>\n                                                </span>\n                                                <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                                                    <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                                                </div>\n                                            </div>\n                                            <ng-template #recursiveTemplate let-entities>\n                                                <div *ngFor=\"let entity of entities; let i = index\" class=\"mt-2\">\n                                                    <mat-checkbox [ngClass]=\"{'text-secondary': !entity.isParameterExists}\" [checked]=\"isSelected(entity.id)\"\n                                                        (change)=\"entityChange(entity.id, $event)\">\n                                                        {{ entity.name }}\n                                                    </mat-checkbox>\n                                                    <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                                                        <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                                                    </div>\n                                                </div>\n                                            </ng-template>\n                                        </div>\n                                        <mat-error class=\"entityError\"\n                                            *ngIf=\"isFormSubmit && isEntityPanelExpanded && errorHandling('entityID', 'required')\">\n                                            <br />{{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-expansion-panel>\n                                </mat-accordion>\n                            </div>\n                        </div>\n\n                        <div *ngIf=\"alertLabel == AlertTypeLabelEnum.INSTANTANEOUS_LABEL && alertRuleFG.get('entityID').value && alertRuleFG.get('entityID').value.length > 0\">\n                            <div class=\"row mt-4\">\n                                <div class=\"col-sm-6\">\n                                    <div class=\"radioBtnField\">\n                                        <div class=\"radioBtnGroupLabel\"> Would you prefer to receive alerts at device\n                                            level? </div>\n                                        <mat-radio-group formControlName=\"isAlertAtDeviceLevel\">\n                                            <div class=\"row my-1\">\n                                                <div class=\"col-sm-6\">\n                                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"true\">\n                                                        Yes\n                                                    </mat-radio-button>\n                                                </div>\n                                                <div class=\"col-sm-6\">\n                                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"false\">\n                                                        No\n                                                    </mat-radio-button>\n                                                </div>\n                                                <mat-error class=\"radioBtnGroupError ms-1 mt-1\" *ngIf=\"errorHandling('isAlertAtDeviceLevel', 'required') && \n                                                                                    this.alertRuleFG.controls['isAlertAtDeviceLevel'].touched\">\n                                                    {{ FormErrorEnum.REQUIRED }}\n                                                </mat-error>\n                                            </div>\n                                        </mat-radio-group>\n                                    </div>\n                                </div>\n\n                                <div class=\"col-sm-6\" *ngIf=\"alertRuleFG.get('isAlertAtDeviceLevel').value\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select device</mat-label>\n                                        <mat-select formControlName=\"deviceID\" multiple required>\n                                            <ng-container *ngIf=\"devicesWithEntitiesM && devicesWithEntitiesM.length > 0 && devicesWithEntitiesM[0]['id']; else noDeviceFound\">\n                                                <mat-option [value]=\"-1\" (click)=\"selectAllDevices()\">\n                                                    Select all devices\n                                                </mat-option>\n                                                <mat-optgroup *ngFor=\"let entity of devicesWithEntitiesM\" [label]=\"entity.name\" [disabled]=\"entity.disabled\">\n                                                    <mat-option *ngFor=\"let device of entity.devices\" [value]=\"device.id\" (click)=\"selectDevices(device.id)\">\n                                                        {{ device.name }}\n                                                    </mat-option>\n                                                </mat-optgroup>\n                                            </ng-container>\n                                            <ng-template #noDeviceFound>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling('deviceID', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Rule Definition\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-sm-3\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select unit</mat-label>\n                                    <mat-select (selectionChange)=\"unitChange($event.value)\" formControlName=\"unitID\" required>\n                                        <ng-container *ngIf=\"unitM && unitM.length > 0 && unitM[0]['id']; else noUnitFound\">\n                                            <mat-option>\n                                                <ngx-mat-select-search [formControl]=\"unitSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                                                    noEntriesFoundLabel=\"No matching name found.\">\n                                                </ngx-mat-select-search>\n                                            </mat-option>\n                                            <mat-option *ngFor=\"let unit of unitSearchUtil.filteredEntities | async\" [value]=\"unit.id\">\n                                                {{ unit.name }}\n                                            </mat-option>\n                                        </ng-container>\n                                        <ng-template #noUnitFound>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"alertRuleFG.get('parameterID').invalid\">\n                                        Please select parameter first\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('unitID', 'required') && alertRuleFG.get('parameterID').valid\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-3\" *ngIf=\"alertLabel == AlertTypeLabelEnum.PERIODIC_LABEL\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select alert type</mat-label>\n                                    <mat-select formControlName=\"periodicAlertType\" required>\n                                        <ng-container\n                                            *ngIf=\"periodicAlertType && periodicAlertType.length > 0 && periodicAlertType[0]['id']; else noPeriodicAlertTypeFound\">\n                                            <mat-option *ngFor=\"let type of periodicAlertType\" [value]=\"type.keyID\">\n                                                {{ type.name }}\n                                            </mat-option>\n                                        </ng-container>\n                                        <ng-template #noPeriodicAlertTypeFound>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('periodicAlertType', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-3\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select condition</mat-label>\n                                    <mat-select formControlName=\"condition\" (selectionChange)=\"conditionChange($event.value)\" required>\n                                        <mat-option *ngFor=\"let condition of conditionConstant\" [value]=\"condition.value\">\n                                            {{ condition.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('condition', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div [ngClass]=\"{'col-sm-3': showValueField(), 'col-sm-2': !showValueField()}\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select frequency</mat-label>\n                                    <mat-select formControlName=\"frequency\" required>\n                                        <mat-option *ngFor=\"let frequency of getFrequency()\" [value]=\"frequency.value\">\n                                            {{ frequency.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('frequency', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div [ngClass]=\"{'col-sm-3': showValueField(), 'col-sm-2': !showValueField()}\" *ngIf=\"showValueField()\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> Value {{ alertRuleFG.get('periodicAlertType').value == 'BUDGET' ? '%' : '' }}\n                                    </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"number\" [min]=\"0\"\n                                        [max]=\"alertRuleFG.get('periodicAlertType').value == 'BUDGET' ? 100 : null\" placeholder=\"0.00\"\n                                        formControlName=\"value\" required>\n                                    <mat-error *ngIf=\"errorHandling('value', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('value', 'min')\">\n                                        {{ FormErrorEnum.NEGATIVE }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('value', 'max') && alertRuleFG.get('periodicAlertType').value == 'BUDGET'\">\n                                        % value cannot be more than 100\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-2\" *ngIf=\"showStartEndFields()\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> Start value </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0.00\" formControlName=\"startValue\" required>\n                                    <mat-error *ngIf=\"errorHandling('startValue', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('startValue', 'invalidRange')\">\n                                        Start value must be less than end value\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-2\" *ngIf=\"showStartEndFields()\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label class=\"formLabel\"> End value </mat-label>\n                                    <input class=\"formPlaceholder\" matInput type=\"number\" placeholder=\"0.00\" formControlName=\"endValue\" required>\n                                    <mat-error *ngIf=\"errorHandling('endValue', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                    <mat-error *ngIf=\"errorHandling('endValue', 'invalidRange')\">\n                                        End value must be greater than start value\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Alert Recipient: Select or Add\n                        </div>\n                        <div class=\"row userContext\">\n                            <div class=\"col-sm-12\">\n                                <span class=\"fw-bold text-secondary me-2\"> Current org users </span>\n                                <mat-slide-toggle class=\"slideToggleBtn mt-2\" [formControl]=\"userFC\"\n                                    (change)=\"userContextChange()\"></mat-slide-toggle>\n                                <span class=\"fw-bold text-secondary ms-2\"> All users </span>\n                            </div>\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\"\n                                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select user</mat-label>\n                                    <mat-select [formControl]=\"selectedUserFC\" required>\n                                        <mat-select-trigger>\n                                            Select users\n                                        </mat-select-trigger>\n                                        <ng-container *ngIf=\"userM && userM.length > 0 && userM[0]['id']; else noUserFound\">\n                                            <mat-option>\n                                                <ngx-mat-select-search [formControl]=\"userSearchUtil.filterFC\" placeholderLabel=\"Search by name/email\"\n                                                    noEntriesFoundLabel=\"No matching name/email found.\">\n                                                </ngx-mat-select-search>\n                                            </mat-option>\n                                            <mat-option class=\"matOptionNameEmail\" *ngFor=\"let user of userSearchUtil.filteredEntities | async\"\n                                                [value]=\"user.id\" (onSelectionChange)=\"onUserSelectionChange(user.id)\">\n                                                <!-- <span class=\"ms-3\">\n                                                    <img class=\"rounded-circle border profileImageDropdownView\"\n                                                        [src]=\"user.profileImgUrl || userService.defaultImage(\n                                                        (user?.['firstName'] ? user['firstName'] + ' ' + user?.['lastName'] : ''), \n                                                        ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\"alt=\"Profile image\">\n                                                </span> -->\n                                                <span class=\"ms-3\">\n                                                    {{ user.firstName }} {{ user?.lastName }}\n                                                </span>\n                                                <br />\n                                                <span class=\"ms-3 text-secondary\"> {{user.email}} </span>\n                                            </mat-option>\n                                        </ng-container>\n                                        <ng-template #noUserFound>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"selectedUserFC.hasError('required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-6\" *ngIf=\"selectedUserIds?.length > 0\">\n                                <mat-card class=\"border card\">\n                                    <div class=\"row\">\n                                        <div class=\"col-sm-12\">\n                                            <span class=\"cardTitle\">\n                                                Selected users\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <perfect-scrollbar class=\"scrollHeight\">\n                                        <div class=\"row mt-2\">\n                                            <div class=\"col-sm-12\" *ngFor=\"let user of getSelectedUsers()\">\n                                                <div class=\"d-flex align-items-center\">\n                                                    <div class=\"profileImgContainer\">\n                                                        <img class=\"profileImg rounded-circle border\" [src]=\"user.profileImgUrl || userService.defaultImage(\n                                                            (user?.['firstName'] ? user['firstName'] + ' ' + user?.['lastName'] : ''), \n                                                            ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\"\n                                                            alt=\"Profile img\" />\n                                                    </div>\n                                                    <div class=\"ps-1 lineHeight\">\n                                                        <span> {{ user.firstName }} {{ user?.lastName }} </span>\n                                                        <br />\n                                                        <span class=\"text-secondary\"> {{user.email}} </span>\n                                                    </div>\n                                                    <div class=\"ms-auto\">\n                                                        <span\n                                                            class=\"material-symbols-outlined me-3 text-danger cursorPointer\"\n                                                            matTooltip=\"Remove selected user\" matTooltipPosition=\"above\"\n                                                            (click)=\"removeSelectedUsers(user.id)\">\n                                                            cancel\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </perfect-scrollbar>\n                                </mat-card>\n                            </div>\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-6\">\n                                <mat-checkbox formControlName=\"isAnyOtherUser\" (change)=\"addOtherUser($event)\">\n                                    Any other user\n                                </mat-checkbox>\n                            </div>\n                            <div class=\"col-sm-6\" *ngIf=\"alertRuleFG.controls['isAnyOtherUser'].value == true\">\n                                <mat-form-field class=\"matFieldWidth100\"\n                                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Enter user email</mat-label>\n                                    <mat-chip-list #chipList required>\n                                        <mat-chip *ngFor=\"let email of otherUserEmail.value\" [removable]=\"removable\"\n                                            (removed)=\"removeEmail(email)\">\n                                            {{ email }}\n                                            <button matChipRemove *ngIf=\"removable\">\n                                                <mat-icon>cancel</mat-icon>\n                                            </button>\n                                        </mat-chip>\n                                        <input [placeholder]=\"inputPlaceholder\" [matChipInputFor]=\"chipList\"\n                                            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                                            [matChipInputAddOnBlur]=\"addOnBlur\" (matChipInputTokenEnd)=\"add($event)\"\n                                            (input)=\"onInput()\">\n                                        <mat-error class=\"userEmailError\" *ngIf=\"otherUserEmail.hasError('required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-chip-list>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Notification Preferences\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select SMS frequency</mat-label>\n                                    <mat-select formControlName=\"smsFrequency\" required>\n                                        <mat-option *ngFor=\"let smsFreq of LIST_CONSTANT.SMS_FREQUENCY\" [value]=\"smsFreq.value\">\n                                            {{ smsFreq.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('smsFrequency', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n\n                            <div class=\"col-sm-6\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select email frequency</mat-label>\n                                    <mat-select formControlName=\"emailFrequency\" required>\n                                        <mat-option *ngFor=\"let emailFreq of LIST_CONSTANT.EMAIL_FREQUENCY\" [value]=\"emailFreq.value\">\n                                            {{ emailFreq.label }}\n                                        </mat-option>\n                                    </mat-select>\n                                    <mat-error *ngIf=\"errorHandling('emailFrequency', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    \n                        <div class=\"row\">\n                            <div class=\"col-sm-6\">\n                                <div class=\"ps-1 radioBtnField\">\n                                    <div class=\"radioBtnGroupLabel\"> Is this alert shift specific?\n                                    </div>\n                                    <mat-radio-group formControlName=\"isShift\">\n                                        <div class=\"row my-2\">\n                                            <div class=\"col-sm-6\">\n                                                <mat-radio-button class=\"radioBtnLabel\" [value]=\"true\">\n                                                    Yes\n                                                </mat-radio-button>\n                                            </div>\n                                            <div class=\"col-sm-6\">\n                                                <mat-radio-button class=\"radioBtnLabel\" [value]=\"false\">\n                                                    No\n                                                </mat-radio-button>\n                                            </div>\n                                            <mat-error class=\"textMatError ms-1 mt-1\" *ngIf=\"errorHandling('isShift', 'required')\">\n                                                {{ FormErrorEnum.REQUIRED }}\n                                            </mat-error>\n                                        </div>\n                                    </mat-radio-group>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6\" *ngIf=\"alertRuleFG.get('isShift').value\">\n                                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                    <mat-label>Select shift</mat-label>\n\n                                    <mat-select formControlName=\"shiftID\" multiple required>\n                                        <ng-container *ngIf=\"shiftM && shiftM.length > 0 && shiftM[0]['id']; else noDataOption\">\n                                            <mat-option [value]=\"-1\" (click)=\"selectAllShifts()\">\n                                                Select all\n                                            </mat-option>\n                                            <mat-option *ngFor=\"let shift of shiftM\" [value]=\"shift.id\" (click)=\"selectedShift()\">\n                                                {{ shift.name }}\n                                            </mat-option>\n                                        </ng-container>\n\n                                        <ng-template #noDataOption>\n                                            <mat-option disabled>\n                                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                            </mat-option>\n                                        </ng-template>\n                                    </mat-select>\n\n                                    <mat-error *ngIf=\"errorHandling('shiftID', 'required')\">\n                                        {{ FormErrorEnum.REQUIRED }}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div align=\"end\" class=\"mt-3\">\n                <button type=\"button\" class=\"btn btn-sm btn-secondary me-2\" (click)=\"tscCommonService.back()\">\n                    {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                </button>\n                <button type=\"submit\" class=\"btn btn-sm btn-success\" (click)=\"createUpdateAlert()\"\n                    [ngClass]=\"{'disabled': action == FormAction.UPDATE && isEqual}\">\n                    {{ action == FormAction.CREATE ? ButtonLabelEnum.CREATE_BTN_LABEL :\n                    ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                </button>\n            </div>\n        </form>\n    </div>\n</div>", styles: [".matAccordion{box-shadow:none!important;background:whitesmoke;border-radius:16px!important}.entityError{font-size:10.56px;font-family:Roboto,\"Helvetica Neue\",sans-serif}.userCardHeight{max-height:200px}.card{box-shadow:none!important}.scrollHeight{height:110px}.radioBtnField{height:82px}.radioBtnGroupLabel{font-size:16px}.radioBtnGroupError{font-size:10.56px;font-family:Roboto,\"Helvetica Neue\",sans-serif}.radioBtnLabel{color:#686868f3}.lineHeight{line-height:1}.profileImageDropdownView{height:35px;width:35px}.profileImgContainer{width:35px;min-height:35px;max-height:auto;float:left;margin:3px;padding:3px;display:flex;align-items:center;justify-content:center}.profileImg{width:35px}::ng-deep .userContext .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .userContext .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#5c80de}::ng-deep .userContext .mat-slide-toggle .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .userContext .mat-slide-toggle .mat-slide-toggle-thumb{background-color:#5c80de}.userEmailError{font-size:75%}.matOptionNameEmail{line-height:1.5em!important}\n"], components: [{ type: i9.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i5.ParameterComponent, selector: "lib-parameter", outputs: ["emitFilter"] }, { type: i11.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i11.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { type: i12.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i13.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i14.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i15.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i15.MatOptgroup, selector: "mat-optgroup", inputs: ["disabled"], exportAs: ["matOptgroup"] }, { type: i16.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i17.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i18.PerfectScrollbarComponent, selector: "perfect-scrollbar", inputs: ["disabled", "usePSClass", "autoPropagation", "scrollIndicators", "config"], outputs: ["psScrollY", "psScrollX", "psScrollUp", "psScrollDown", "psScrollLeft", "psScrollRight", "psYReachEnd", "psYReachStart", "psXReachEnd", "psXReachStart"], exportAs: ["ngxPerfectScrollbar"] }, { type: i19.MatChipList, selector: "mat-chip-list", inputs: ["aria-orientation", "multiple", "compareWith", "value", "required", "placeholder", "disabled", "selectable", "tabIndex", "errorStateMatcher"], outputs: ["change", "valueChange"], exportAs: ["matChipList"] }, { type: i20.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.MatLabel, selector: "mat-label" }, { type: i21.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i22.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.MatError, selector: "mat-error", inputs: ["id"] }, { type: i11.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i11.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i22.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i22.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i22.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i13.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i2.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { type: i2.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { type: i14.MatSelectTrigger, selector: "mat-select-trigger" }, { type: i23.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i19.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disableRipple", "tabIndex", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"], exportAs: ["matChip"] }, { type: i19.MatChipRemove, selector: "[matChipRemove]" }, { type: i19.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputSeparatorKeyCodes", "placeholder", "id", "matChipInputFor", "matChipInputAddOnBlur", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }], pipes: { "async": i22.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-create-update',
                    templateUrl: './create-update.component.html',
                    styleUrls: ['./create-update.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.FormBuilder }, { type: i3.AlertRuleController }, { type: i4.StorageService }, { type: i5.EntityService }, { type: i5.EntityDeviceService }, { type: i5.UnitService }, { type: i5.ShiftService }, { type: i6.ToastrService }, { type: i7.UserService }, { type: i8.TSCCommonService }]; }, propDecorators: { searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }], parameterFilterChild: [{
                type: ViewChild,
                args: ['parameterFilterChild']
            }] } });
//# sourceMappingURL=data:application/json;base64,