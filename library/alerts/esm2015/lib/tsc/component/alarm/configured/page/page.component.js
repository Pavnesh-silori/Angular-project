import { Component, ViewChild } from '@angular/core';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { map, startWith, switchMap, catchError } from "rxjs/operators";
import { AlertPageLabelEnum, AlertTypeEnum } from '../../../../enum/alert.enum';
import { TABLE_CONSTANT, COMMON_CONSTANT, StatusEnum } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "../../../../controller/alert.controller";
import * as i3 from "@library/tsc-common";
import * as i4 from "@angular/material/table";
import * as i5 from "@angular/material/sort";
import * as i6 from "@angular/material/paginator";
import * as i7 from "@angular/material/tooltip";
import * as i8 from "@angular/common";
// /tsc-library/
export class ConfiguredAlarmPageComponent {
    constructor(storageService, alertController) {
        this.storageService = storageService;
        this.alertController = alertController;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.AlertTypeEnum = AlertTypeEnum;
        this.AlertPageLabelEnum = AlertPageLabelEnum;
        this.StatusEnum = StatusEnum;
        this.displayedColumn = ['id', 'name', 'associatedWith', 'ruleDescription', 'type', 'status'];
        this.resultLength = 0;
        this.dataSource = [];
        this.searchFlag = false;
        this.searchArr = [];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
    }
    ngAfterViewInit() {
        merge(this.paginator.page, this.sort.sortChange, fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(startWith({}), switchMap(() => {
            this.searchArr = [];
            if (this.searchFlag) {
                this.searchArr.push('name:' + this.searchValue);
            }
            const alertType = AlertTypeEnum.ALL;
            return this.alertController.getAlertRuleByPage(this.paginator.pageIndex, this.paginator.pageSize, this.sort.active, this.sort.direction, this.searchArr, alertType, this.orgID).pipe(catchError(() => observableOf(null)));
        }), map((response) => {
            if (response == null) {
                this.resultLength = 0;
                return [];
            }
            this.resultLength = response["totalCount"];
            return response["records"];
        })).subscribe((dataSource) => {
            this.dataSource = dataSource;
        });
    }
    searchFn(value) {
        this.searchFlag = true;
        this.searchValue = value;
        if (value.length == 0) {
            this.resetSearch();
        }
        else {
            this.paginator.pageIndex = 0;
        }
        this.refreshBtn.nativeElement.click();
    }
    resetSearch() {
        this.searchFlag = false;
        this.searchBar.searchClear();
    }
}
ConfiguredAlarmPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ConfiguredAlarmPageComponent, deps: [{ token: i1.StorageService }, { token: i2.AlertRuleController }], target: i0.ɵɵFactoryTarget.Component });
ConfiguredAlarmPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConfiguredAlarmPageComponent, selector: "lib-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Configured Alarms</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar searchBy=\"name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <div class=\"overflowX customScrollBar\">\n        <table class=\"w-100\" mat-table [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"id\"\n            matSortDirection=\"asc\" matSortDisableClear>\n\n            <ng-container matColumnDef=\"id\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n                    ID\n                </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    {{ row['id'] ? row['id']: COMMON_CONSTANT.HYPHEN }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"name\">\n                <th class=\"px-3 columnWidth2\" mat-header-cell *matHeaderCellDef> Name </th>\n                <td class=\"px-3 columnWidth2\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.['name']?.length>25? row['name']: ''\" matTooltipPosition=\"above\"\n                    matTooltipClass=\"nameTooltip\">\n                    {{ (row['name'] ? row['name']: COMMON_CONSTANT.HYPHEN) | dotdotdot:25}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"associatedWith\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Associated with </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.['associatedWith']?.length>30? row['associatedWith']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['associatedWith'] ? row['associatedWith']: COMMON_CONSTANT.HYPHEN) | dotdotdot:30}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"ruleDescription\">\n                <th class=\"px-3 columnWidth3\" mat-header-cell *matHeaderCellDef> Rule </th>\n                <td class=\"px-3 columnWidth3\" mat-cell *matCellDef=\"let row\"\n                    [matTooltip]=\"row?.['ruleDescription']?.length>30? row['ruleDescription']: ''\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                    {{ (row['ruleDescription'] ? row['ruleDescription']: COMMON_CONSTANT.HYPHEN) | dotdotdot:30}}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"type\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Type </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <span class=\"badge rounded-pill bg-light text-dark\" [ngSwitch]=\"row?.type\">\n                        <ng-container *ngSwitchCase=\"AlertTypeEnum.INSTANTANEOUS\">{{\n                            AlertPageLabelEnum.INSTANTANEOUS_LABEL\n                            }}</ng-container>\n                        <ng-container *ngSwitchCase=\"AlertTypeEnum.PERIODIC\">{{ AlertPageLabelEnum.PERIODIC_LABEL\n                            }}</ng-container>\n                    </span>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"status\">\n                <th class=\"px-3 columnWidth1\" mat-header-cell *matHeaderCellDef> Status </th>\n                <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <span class=\"badge rounded-pill\" [ngClass]=\"{'bg-success': row?.status, 'bg-danger': !row?.status}\">\n                        {{ row?.status ? StatusEnum.ACTIVE_STATUS : StatusEnum.INACTIVE_STATUS }}\n                    </span>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n            <tr mat-row *matRowDef=\"let task; columns: displayedColumn;\"></tr>\n\n            <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                    {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                </td>\n            </tr>\n        </table>\n    </div>\n    <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", styles: [".columnWidth1{min-width:120px}.columnWidth2{min-width:250px}.columnWidth3{min-width:300px}.badge{text-transform:none}\n"], components: [{ type: i3.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear"], outputs: ["emitSearch"] }, { type: i4.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i5.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i4.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i4.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i6.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i5.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i4.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i4.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i4.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i4.MatCellDef, selector: "[matCellDef]" }, { type: i4.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i7.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i4.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i4.MatNoDataRow, selector: "ng-template[matNoDataRow]" }], pipes: { "dotdotdot": i3.EllipsisPipeService } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ConfiguredAlarmPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-page',
                    templateUrl: './page.component.html',
                    styleUrls: ['./page.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.AlertRuleController }]; }, propDecorators: { sort: [{
                type: ViewChild,
                args: ['sort']
            }], paginator: [{
                type: ViewChild,
                args: ['paginator']
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn']
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }] } });
//# sourceMappingURL=data:application/json;base64,