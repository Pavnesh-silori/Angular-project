import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { DaterangepickerDirective } from 'ngx-daterangepicker-material';
import * as moment from 'moment';
import { FrequencyEnum } from '../../enum/frequency.enum';
import { FREQUENCY_CONSTANT } from '../../constant/frequency.constant';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@angular/material/button-toggle";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/datepicker";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
import * as i7 from "../../directive/date-month-year-format.directive";
import * as i8 from "@angular/material/input";
import * as i9 from "ngx-daterangepicker-material";
export class DateFilterComponent {
    constructor(storageService) {
        this.storageService = storageService;
        this.frequency = [];
        this.defaultFlag = null;
        this.emitFilter = new EventEmitter();
        this.today = new Date();
        this.durationValueFC = new FormControl(moment().format("YYYY-MM"));
        this.daterange = new FormControl();
        this.startDate = new FormControl(moment().startOf('month').format("YYYY-MM-DD"));
        this.endDate = new FormControl(moment().endOf('month').format("YYYY-MM-DD"));
        this.frequencyKeyIDFC = new FormControl();
    }
    ngOnInit() {
        if (this.defaultFlag) {
            this.frequencyKeyIDFC.patchValue(this.defaultFlag);
        }
        else {
            this.frequencyKeyIDFC.patchValue(FrequencyEnum.MONTHLY_KEY_ID);
        }
        if (this.frequency.length == 0) {
            this.frequency = FREQUENCY_CONSTANT;
        }
        this.frequencyChange();
    }
    frequencyChange() {
        let duration;
        let startDate;
        let endDate;
        switch (this.frequencyKeyIDFC.value) {
            case FrequencyEnum.DAILY_KEY_ID:
                duration = moment(this.today).format("YYYY-MM-DD");
                startDate = moment().format("YYYY-MM-DD");
                endDate = moment().format("YYYY-MM-DD");
                break;
            case FrequencyEnum.MONTHLY_KEY_ID:
                duration = moment(this.today).format("YYYY-MM");
                startDate = moment().startOf('month').format("YYYY-MM-DD");
                endDate = moment().endOf('month').format("YYYY-MM-DD");
                break;
            case FrequencyEnum.YEARLY_KEY_ID:
                duration = moment(this.today).format("YYYY");
                startDate = moment().startOf('year').format("YYYY-MM-DD");
                endDate = moment().endOf('year').format("YYYY-MM-DD");
                break;
            case FrequencyEnum.CUSTOM_KEY_ID:
                console.log("Frequency: ", this.frequencyKeyIDFC.value);
                break;
            default:
                console.log('undefined case encountered!');
        }
        this.durationValueFC.patchValue(duration);
        if (this.frequencyKeyIDFC.value != FrequencyEnum.CUSTOM_KEY_ID) {
            this.daterange.patchValue('');
            this.startDate.patchValue(startDate);
            this.endDate.patchValue(endDate);
            this.emitFilter.emit();
        }
    }
    openDatepicker() {
        if (this.frequencyKeyIDFC.value == FrequencyEnum.CUSTOM_KEY_ID) {
            this.pickerDirective.open();
        }
    }
    openDatepickerOnClick(datepicker) {
        if (!datepicker.opened) {
            datepicker.open();
        }
    }
    takeFocusAway(durationField) {
        this.durationField = document.getElementById(durationField);
        this.durationField.classList.remove('mat-focused', 'mat-form-field-should-float');
    }
    dateSelectedHandler(chosenDate) {
        this.durationValueFC.patchValue(moment(chosenDate).format("YYYY-MM-DD"));
        this.startDate.patchValue(moment(chosenDate).format("YYYY-MM-DD"));
        this.endDate.patchValue(moment(chosenDate).format("YYYY-MM-DD"));
        this.emitFilter.emit();
    }
    monthSelectedHandler(normalizedMonthAndYear, datepicker) {
        datepicker.close();
        let duration = moment(normalizedMonthAndYear).format("YYYY-MM");
        this.durationValueFC.patchValue(duration);
        this.startDate.patchValue(moment(normalizedMonthAndYear).startOf('month').format("YYYY-MM-DD"));
        this.endDate.patchValue(moment(normalizedMonthAndYear).endOf('month').format("YYYY-MM-DD"));
        this.emitFilter.emit();
    }
    yearSelectedHandler(normalizedYear, datepicker) {
        datepicker.close();
        let duration = moment(normalizedYear).format("YYYY");
        this.durationValueFC.patchValue(duration);
        this.startDate.patchValue(moment(normalizedYear).startOf('year').format("YYYY-MM-DD"));
        this.endDate.patchValue(moment(normalizedYear).endOf('year').format("YYYY-MM-DD"));
        this.emitFilter.emit();
    }
    customDateRange(selectedValue) {
        if (this.frequencyKeyIDFC.value == FrequencyEnum.CUSTOM_KEY_ID) {
            this.startDate.patchValue(moment(selectedValue.startDate).format('YYYY-MM-DD'));
            this.endDate.patchValue(moment(selectedValue.endDate).format('YYYY-MM-DD'));
            this.durationValueFC.patchValue(this.endDate);
            this.emitFilter.emit();
        }
    }
}
DateFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateFilterComponent, deps: [{ token: i1.StorageService }], target: i0.ɵɵFactoryTarget.Component });
DateFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DateFilterComponent, selector: "lib-date-filter", inputs: { frequency: "frequency", defaultFlag: "defaultFlag" }, outputs: { emitFilter: "emitFilter" }, viewQueries: [{ propertyName: "pickerDirective", first: true, predicate: DaterangepickerDirective, descendants: true }], ngImport: i0, template: "<mat-button-toggle-group class=\"matBtnFilter\" [formControl]=\"frequencyKeyIDFC\" (change)=\"frequencyChange()\">\n    <mat-button-toggle *ngFor=\"let frequency2 of frequency\" value=\"{{ frequency2.keyID }}\">\n        {{ frequency2.name }}\n    </mat-button-toggle>\n</mat-button-toggle-group>\n\n<mat-form-field class=\"ms-3\" id=\"dailyField\" appDateMonthYearFormat\n    [ngClass]=\"{'d-none': frequencyKeyIDFC.value !='DAILY'}\" (click)=\"openDatepickerOnClick(daily)\"\n    (keydown.arrowdown)=\"openDatepickerOnClick(daily)\" (keydown.enter)=\"openDatepickerOnClick(daily)\">\n    <input matInput class=\"noFocus\" [matDatepicker]=\"daily\" [formControl]=\"durationValueFC\" [max]=\"today\"\n        (dateInput)=\"dateSelectedHandler($event.value)\" readonly />\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"daily\"></mat-datepicker-toggle>\n    <mat-datepicker #daily (closed)=\"takeFocusAway('dailyField')\"></mat-datepicker>\n</mat-form-field>\n\n<mat-form-field class=\"ms-3\" id=\"monthlyField\" appMonthYearFormat\n    [ngClass]=\"{'d-none': frequencyKeyIDFC.value !='MONTHLY'}\" (click)=\"openDatepickerOnClick(monthly)\"\n    (keydown.arrowdown)=\"openDatepickerOnClick(monthly)\" (keydown.enter)=\"openDatepickerOnClick(monthly)\">\n    <input matInput class=\"noFocus\" [matDatepicker]=\"monthly\" [formControl]=\"durationValueFC\" [max]=\"today\" readonly />\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"monthly\"></mat-datepicker-toggle>\n    <mat-datepicker panelClass=\"monthPicker\" #monthly startView=\"year\"\n        (monthSelected)=\"monthSelectedHandler($event, monthly)\" (closed)=\"takeFocusAway('monthlyField')\">\n    </mat-datepicker>\n</mat-form-field>\n\n<mat-form-field class=\"ms-3\" id=\"yearlyField\" appYearFormat [ngClass]=\"{'d-none': frequencyKeyIDFC.value !='YEARLY'}\"\n    (click)=\"openDatepickerOnClick(yearly)\" (keydown.arrowdown)=\"openDatepickerOnClick(yearly)\"\n    (keydown.enter)=\"openDatepickerOnClick(yearly)\">\n    <input matInput class=\"noFocus\" [matDatepicker]=\"yearly\" [formControl]=\"durationValueFC\" [max]=\"today\" readonly />\n    <mat-datepicker-toggle matSuffix class=\"fs-5\" [for]=\"yearly\"></mat-datepicker-toggle>\n    <mat-datepicker panelClass=\"yearPicker\" #yearly startView=\"multi-year\"\n        (yearSelected)=\"yearSelectedHandler($event, yearly)\" (closed)=\"takeFocusAway('yearlyField')\">\n    </mat-datepicker>\n</mat-form-field>\n\n<mat-form-field class=\"ms-3\" [ngClass]=\"{'d-none': frequencyKeyIDFC.value !='CUSTOM'}\">\n    <mat-label class=\"formLabel\"> Select date </mat-label>\n    <input type=\"text\" matInput ngxDaterangepickerMd\n        [locale]=\"{direction: 'ltr', applyLabel: 'Apply', format: 'DD-MMM-YYYY', customRangeLabel: 'Custom Range'}\"\n        [drops]=\"'down'\" [opens]=\"'right'\" [alwaysShowCalendars]=\"true\" [keepCalendarOpeningWithRange]=\"true\"\n        [showDropdowns]=\"true\" [showCancel]=\"true\" autocomplete=\"off\" name=\"daterange\" [formControl]=\"daterange\"\n        (ngModelChange)=\"customDateRange(daterange.value)\" [readonly]=\"true\" />\n</mat-form-field>", styles: [".matBtnFilter mat-button-toggle.mat-button-toggle-checked{background-color:#e6e6e6!important}.noFocus{pointer-events:none}.formLabel{text-transform:none}\n"], components: [{ type: i2.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-labelledby", "tabIndex", "appearance", "checked", "disabled", "id", "name", "aria-label", "value"], outputs: ["change"], exportAs: ["matButtonToggle"] }, { type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["tabIndex", "disabled", "for", "aria-label", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { type: i4.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }], directives: [{ type: i2.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.DateMonthYearFormatDirective, selector: "[appDateMonthYearFormat]" }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i8.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i4.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.MatSuffix, selector: "[matSuffix]" }, { type: i7.MonthYearFormatDirective, selector: "[appMonthYearFormat]" }, { type: i7.YearFormatDirective, selector: "[appYearFormat]" }, { type: i3.MatLabel, selector: "mat-label" }, { type: i9.DaterangepickerDirective, selector: "input[ngxDaterangepickerMd]", inputs: ["dateLimit", "showCancel", "lockStartDate", "timePicker", "timePicker24Hour", "timePickerIncrement", "timePickerSeconds", "closeOnAutoApply", "_endKey", "drops", "opens", "locale", "startKey", "endKey", "minDate", "maxDate", "autoApply", "alwaysShowCalendars", "showCustomRangeLabel", "linkedCalendars", "singleDatePicker", "showWeekNumbers", "showISOWeekNumbers", "showDropdowns", "isInvalidDate", "isCustomDate", "isTooltipDate", "showClearButton", "customRangeDirection", "ranges", "lastMonthDayClass", "emptyWeekRowClass", "emptyWeekColumnClass", "firstDayOfNextMonthClass", "lastDayOfPreviousMonthClass", "keepCalendarOpeningWithRange", "showRangeLabelOnInput"], outputs: ["change", "rangeClicked", "datesUpdated", "startDateChanged", "endDateChanged"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DateFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-date-filter',
                    templateUrl: './date-filter.component.html',
                    styleUrls: ['./date-filter.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }]; }, propDecorators: { frequency: [{
                type: Input
            }], defaultFlag: [{
                type: Input
            }], emitFilter: [{
                type: Output
            }], pickerDirective: [{
                type: ViewChild,
                args: [DaterangepickerDirective, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,