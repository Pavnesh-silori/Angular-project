import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MATERIAL_CONSTANT } from '../../../constant/material.constant';
import { DialogOneEnum } from '../../../enum/dialog-one.enum';
import { MaterialFormFieldAppearance } from '../../../enum/material.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/input";
import * as i5 from "@angular/material/core";
export class TypeConfirmationDialog {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.DialogOneEnum = DialogOneEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.btnFlag = false;
    }
    ngOnInit() {
    }
    confirmationCheck(value) {
        this.data.confirmationInput == value ? this.btnFlag = true : this.btnFlag = false;
    }
    success() {
        this.dialogRef.close(true);
    }
    fail() {
        this.dialogRef.close(false);
    }
}
TypeConfirmationDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TypeConfirmationDialog, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
TypeConfirmationDialog.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TypeConfirmationDialog, selector: "app-type-dialog", ngImport: i0, template: "<ng-container *ngIf=\"data.type; else deleteTemplate\">\n    <div mat-dialog-title class=\"fw-4 mb-1 d-flex\">\n        <div class=\"col-sm-1\">\n            <span class=\"material-symbols-outlined mr-2 pt-2 ps-3\">\n                {{data.icon}}\n            </span>\n        </div>\n\n        <strong class=\"col-sm-11 \">\n            <div class=\"pt-1\" [innerHTML]=\"data.header\"></div>\n        </strong>\n    </div>\n</ng-container>\n\n<ng-template #deleteTemplate>\n    <div mat-dialog-title class=\"fw-4 mb-1 text-danger d-flex\">\n        <div class=\"col-sm-1\">\n            <span class=\"material-symbols-outlined mr-2 pt-2 ps-3\">\n                {{data.icon}}\n            </span>\n        </div>\n\n        <strong class=\"col-sm-11 \">\n            <div class=\"pt-1\" [innerHTML]=\"data.header\"></div>\n        </strong>\n    </div>\n</ng-template>\n\n<div mat-dialog-content class=\"card-body ms-4 mb-2\">\n    <div [innerHTML]=\"data.body\"></div><br />\n    <div class=\"ps-2\">\n        <div class=\"col-sm-6\">\n            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                <mat-label class=\"formLabel\">Please type \"{{data.confirmationInput}}\" to continue.</mat-label>\n                <input matInput type=\"text\" placeholder=\"\"  (input)=\"confirmationCheck($event.target.value)\">\n            </mat-form-field>\n        </div>\n    </div>\n</div>\n\n<div mat-dialog-footer align=\"end\" class=\"ms-2 mb-3\">\n    <ng-container *ngIf=\"data.type; else elseBlock\">\n        <button class=\"btn btn-sm btn-secondary float-end ms-2 mb-3 me-1\" (click)=\"fail()\" matRipple\n            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n            {{ data.buttonOne }}\n        </button>\n        <button class=\"btn btn-sm btn-success float-end ms-2 mb-3 me-1\" (click)=\"success()\" matRipple\n            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" [disabled]=\"!btnFlag\">\n            {{ data.buttonTwo }}\n        </button>\n    </ng-container>\n\n    <ng-template #elseBlock>\n        <button class=\"btn btn-sm btn-secondary float-end ms-2 mb-3 me-1\" (click)=\"fail()\" matRipple\n            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n            {{ data.buttonOne }}\n        </button>\n        <button class=\"btn btn-sm btn-danger float-end ms-2 mb-3 me-1\" (click)=\"success()\" matRipple\n            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" [disabled]=\"!btnFlag\">\n            {{ data.buttonTwo }}\n        </button>\n    </ng-template>\n</div>", components: [{ type: i2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2.MatLabel, selector: "mat-label" }, { type: i4.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i5.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TypeConfirmationDialog, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-type-dialog',
                    templateUrl: './type-confirmation.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1jb25maXJtYXRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtY29tbW9uL3NyYy9saWIvdHNjL2NvbXBvbmVudC9kaWFsb2cvdHlwZS1jb25maXJtYXRpb24vdHlwZS1jb25maXJtYXRpb24uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtY29tbW9uL3NyYy9saWIvdHNjL2NvbXBvbmVudC9kaWFsb2cvdHlwZS1jb25maXJtYXRpb24vdHlwZS1jb25maXJtYXRpb24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFnQixlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDOUQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7Ozs7Ozs7QUFNMUUsTUFBTSxPQUFPLHNCQUFzQjtJQUsvQixZQUNXLFNBQStDLEVBQ3RCLElBQVM7UUFEbEMsY0FBUyxHQUFULFNBQVMsQ0FBc0M7UUFDdEIsU0FBSSxHQUFKLElBQUksQ0FBSztRQU43QyxzQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUN0QyxrQkFBYSxHQUFHLGFBQWEsQ0FBQztRQUM5QixnQ0FBMkIsR0FBRywyQkFBMkIsQ0FBQztRQUMxRCxZQUFPLEdBQVksS0FBSyxDQUFDO0lBSXJCLENBQUM7SUFFTCxRQUFRO0lBQ1IsQ0FBQztJQUVELGlCQUFpQixDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN0RixDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJO1FBQ0EsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7b0hBdkJRLHNCQUFzQiw4Q0FPbkIsZUFBZTt3R0FQbEIsc0JBQXNCLHVEQ1ZuQyxpbEZBOERNOzRGRHBETyxzQkFBc0I7a0JBSmxDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsV0FBVyxFQUFFLG9DQUFvQztpQkFDcEQ7OzBCQVFRLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZ1JlZiwgTUFUX0RJQUxPR19EQVRBIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IE1BVEVSSUFMX0NPTlNUQU5UIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnQvbWF0ZXJpYWwuY29uc3RhbnQnO1xuaW1wb3J0IHsgRGlhbG9nT25lRW51bSB9IGZyb20gJy4uLy4uLy4uL2VudW0vZGlhbG9nLW9uZS5lbnVtJztcbmltcG9ydCB7IE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSB9IGZyb20gJy4uLy4uLy4uL2VudW0vbWF0ZXJpYWwuZW51bSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXBwLXR5cGUtZGlhbG9nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdHlwZS1jb25maXJtYXRpb24uY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBUeXBlQ29uZmlybWF0aW9uRGlhbG9nIHtcbiAgICBNQVRFUklBTF9DT05TVEFOVCA9IE1BVEVSSUFMX0NPTlNUQU5UO1xuICAgIERpYWxvZ09uZUVudW0gPSBEaWFsb2dPbmVFbnVtO1xuICAgIE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSA9IE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZTtcbiAgICBidG5GbGFnOiBib29sZWFuID0gZmFsc2U7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxUeXBlQ29uZmlybWF0aW9uRGlhbG9nPixcbiAgICAgICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhOiBhbnlcbiAgICApIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgfVxuXG4gICAgY29uZmlybWF0aW9uQ2hlY2sodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmRhdGEuY29uZmlybWF0aW9uSW5wdXQgPT0gdmFsdWUgPyB0aGlzLmJ0bkZsYWcgPSB0cnVlIDogdGhpcy5idG5GbGFnID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc3VjY2VzcygpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UodHJ1ZSk7XG4gICAgfVxuXG4gICAgZmFpbCgpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoZmFsc2UpO1xuICAgIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJkYXRhLnR5cGU7IGVsc2UgZGVsZXRlVGVtcGxhdGVcIj5cbiAgICA8ZGl2IG1hdC1kaWFsb2ctdGl0bGUgY2xhc3M9XCJmdy00IG1iLTEgZC1mbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIG1yLTIgcHQtMiBwcy0zXCI+XG4gICAgICAgICAgICAgICAge3tkYXRhLmljb259fVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8c3Ryb25nIGNsYXNzPVwiY29sLXNtLTExIFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB0LTFcIiBbaW5uZXJIVE1MXT1cImRhdGEuaGVhZGVyXCI+PC9kaXY+XG4gICAgICAgIDwvc3Ryb25nPlxuICAgIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG5cbjxuZy10ZW1wbGF0ZSAjZGVsZXRlVGVtcGxhdGU+XG4gICAgPGRpdiBtYXQtZGlhbG9nLXRpdGxlIGNsYXNzPVwiZnctNCBtYi0xIHRleHQtZGFuZ2VyIGQtZmxleFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTFcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBtci0yIHB0LTIgcHMtM1wiPlxuICAgICAgICAgICAgICAgIHt7ZGF0YS5pY29ufX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHN0cm9uZyBjbGFzcz1cImNvbC1zbS0xMSBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdC0xXCIgW2lubmVySFRNTF09XCJkYXRhLmhlYWRlclwiPjwvZGl2PlxuICAgICAgICA8L3N0cm9uZz5cbiAgICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG5cbjxkaXYgbWF0LWRpYWxvZy1jb250ZW50IGNsYXNzPVwiY2FyZC1ib2R5IG1zLTQgbWItMlwiPlxuICAgIDxkaXYgW2lubmVySFRNTF09XCJkYXRhLmJvZHlcIj48L2Rpdj48YnIgLz5cbiAgICA8ZGl2IGNsYXNzPVwicHMtMlwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxtYXQtZm9ybS1maWVsZCBjbGFzcz1cIm1hdEZpZWxkV2lkdGgxMDBcIiBbYXBwZWFyYW5jZV09XCJNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2UuRk9STV9GSUVMRF9BUFBFQVJBTkNFXCI+XG4gICAgICAgICAgICAgICAgPG1hdC1sYWJlbCBjbGFzcz1cImZvcm1MYWJlbFwiPlBsZWFzZSB0eXBlIFwie3tkYXRhLmNvbmZpcm1hdGlvbklucHV0fX1cIiB0byBjb250aW51ZS48L21hdC1sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgbWF0SW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlwiICAoaW5wdXQpPVwiY29uZmlybWF0aW9uQ2hlY2soJGV2ZW50LnRhcmdldC52YWx1ZSlcIj5cbiAgICAgICAgICAgIDwvbWF0LWZvcm0tZmllbGQ+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxkaXYgbWF0LWRpYWxvZy1mb290ZXIgYWxpZ249XCJlbmRcIiBjbGFzcz1cIm1zLTIgbWItM1wiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJkYXRhLnR5cGU7IGVsc2UgZWxzZUJsb2NrXCI+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgZmxvYXQtZW5kIG1zLTIgbWItMyBtZS0xXCIgKGNsaWNrKT1cImZhaWwoKVwiIG1hdFJpcHBsZVxuICAgICAgICAgICAgW21hdFJpcHBsZUNlbnRlcmVkXT1cIk1BVEVSSUFMX0NPTlNUQU5ULk1BVF9SSVBQTEVfQ0VOVEVSXCI+XG4gICAgICAgICAgICB7eyBkYXRhLmJ1dHRvbk9uZSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXN1Y2Nlc3MgZmxvYXQtZW5kIG1zLTIgbWItMyBtZS0xXCIgKGNsaWNrKT1cInN1Y2Nlc3MoKVwiIG1hdFJpcHBsZVxuICAgICAgICAgICAgW21hdFJpcHBsZUNlbnRlcmVkXT1cIk1BVEVSSUFMX0NPTlNUQU5ULk1BVF9SSVBQTEVfQ0VOVEVSXCIgW2Rpc2FibGVkXT1cIiFidG5GbGFnXCI+XG4gICAgICAgICAgICB7eyBkYXRhLmJ1dHRvblR3byB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgIDxuZy10ZW1wbGF0ZSAjZWxzZUJsb2NrPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IGZsb2F0LWVuZCBtcy0yIG1iLTMgbWUtMVwiIChjbGljayk9XCJmYWlsKClcIiBtYXRSaXBwbGVcbiAgICAgICAgICAgIFttYXRSaXBwbGVDZW50ZXJlZF09XCJNQVRFUklBTF9DT05TVEFOVC5NQVRfUklQUExFX0NFTlRFUlwiPlxuICAgICAgICAgICAge3sgZGF0YS5idXR0b25PbmUgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1kYW5nZXIgZmxvYXQtZW5kIG1zLTIgbWItMyBtZS0xXCIgKGNsaWNrKT1cInN1Y2Nlc3MoKVwiIG1hdFJpcHBsZVxuICAgICAgICAgICAgW21hdFJpcHBsZUNlbnRlcmVkXT1cIk1BVEVSSUFMX0NPTlNUQU5ULk1BVF9SSVBQTEVfQ0VOVEVSXCIgW2Rpc2FibGVkXT1cIiFidG5GbGFnXCI+XG4gICAgICAgICAgICB7eyBkYXRhLmJ1dHRvblR3byB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L25nLXRlbXBsYXRlPlxuPC9kaXY+Il19