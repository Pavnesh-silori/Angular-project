import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { DialogOneEnum } from '../../../enum/dialog-one.enum';
import { MATERIAL_CONSTANT } from '../../../constant/material.constant';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/core";
export class DialogOneComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.dialogOne = DialogOneEnum;
        this.dialogRef.disableClose = true;
    }
    ngOnInit() {
    }
    success() {
        this.dialogRef.close(true);
    }
    fail() {
        this.dialogRef.close(false);
    }
}
DialogOneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DialogOneComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
DialogOneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DialogOneComponent, selector: "lib-dialog-one", ngImport: i0, template: "<div mat-dialog-title class=\"dialogTitle mb-0\">\n    <div *ngIf=\"data.type == dialogOne.DELETE;else ElseBlock\" class=\"d-flex text-danger row\">\n        <div class=\"row d-flix\">\n            <div class=\"col-sm-1 centerAlign\">\n                <span class=\"material-symbols-outlined \">\n                    {{data.icon}}\n                </span>\n            </div>\n            <div class=\"col-sm-11\">\n                <strong>\n                    {{data.header}}\n                </strong>\n            </div>\n        </div>\n\n    </div>\n    <ng-template #ElseBlock class=\"d-flex row\">\n        <div class=\"row\" [ngClass]=\"{'text-warning': data.type == dialogOne.CONFIRMATION, 'text-info': data.type == dialogOne.INFO}\">\n            <div class=\"col-sm-1 ps-2 centerAlign\">\n                <span class=\"material-symbols-outlined\">\n                    {{data.icon}}\n                </span>\n            </div>\n            <div class=\"col-sm-11\">\n                <strong>\n                    {{data.header}}\n                </strong>\n            </div>\n        </div>\n    </ng-template>\n</div>\n<div class=\"card-body breakLine mat-typography ms-4\">\n    <div [innerHTML]=\"data.body\"></div><br />\n</div>\n<div *ngIf=\"data.type == dialogOne.DELETE\">\n    <button class=\"btn btn-sm btn-secondary float-end ms-2\" (click)=\"fail()\" matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n        {{ data.buttonOne }}\n    </button>\n    <button class=\"btn btn-sm btn-danger float-end ms-2\" (click)=\"success()\" matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n        {{ data.buttonTwo }}\n    </button>\n</div>\n\n<div *ngIf=\"data.type == dialogOne.INFO\">\n    <button class=\"btn btn-sm  float-centre ms-2\" (click)=\"success()\" matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n        {{ data.buttonOne }}\n    </button>\n</div>\n\n<div *ngIf=\"data.type == dialogOne.CONFIRMATION\">\n    <button class=\"btn btn-sm btn-warning text-white float-end ms-2\" (click)=\"success()\" matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n        {{ data.buttonTwo }}\n    </button>\n    <button class=\"btn btn-sm btn-secondary float-end ms-2\" (click)=\"fail()\" matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n        {{ data.buttonOne }}\n    </button>\n</div>", directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DialogOneComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-dialog-one',
                    templateUrl: './dialog-one.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLW9uZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1jb21tb24vc3JjL2xpYi90c2MvY29tcG9uZW50L2RpYWxvZy9kaWFsb2ctb25lL2RpYWxvZy1vbmUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtY29tbW9uL3NyYy9saWIvdHNjL2NvbXBvbmVudC9kaWFsb2cvZGlhbG9nLW9uZS9kaWFsb2ctb25lLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBZ0IsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOzs7OztBQVN4RSxNQUFNLE9BQU8sa0JBQWtCO0lBRzNCLFlBQ1csU0FBMkMsRUFDbEIsSUFBZ0I7UUFEekMsY0FBUyxHQUFULFNBQVMsQ0FBa0M7UUFDbEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUpwRCxzQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQVN0QyxjQUFTLEdBQUcsYUFBYSxDQUFDO1FBSHRCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUN2QyxDQUFDO0lBSUQsUUFBUTtJQUNSLENBQUM7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDOztnSEFyQlEsa0JBQWtCLDhDQUtmLGVBQWU7b0dBTGxCLGtCQUFrQixzRENkL0IsNjVFQTZETTs0RkQvQ08sa0JBQWtCO2tCQVA5QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFdBQVcsRUFBRSw2QkFBNkI7b0JBQzFDLE1BQU0sRUFBRSxFQUNQO2lCQUNKOzswQkFPUSxNQUFNOzJCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2dSZWYsIE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbmltcG9ydCB7IERpYWxvZ09uZU0gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9kaWFsb2ctb25lLm1vZGVsJztcbmltcG9ydCB7IERpYWxvZ09uZUVudW0gfSBmcm9tICcuLi8uLi8uLi9lbnVtL2RpYWxvZy1vbmUuZW51bSc7XG5pbXBvcnQgeyBNQVRFUklBTF9DT05TVEFOVCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50L21hdGVyaWFsLmNvbnN0YW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItZGlhbG9nLW9uZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RpYWxvZy1vbmUuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlczogW1xuICAgIF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBEaWFsb2dPbmVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIE1BVEVSSUFMX0NPTlNUQU5UID0gTUFURVJJQUxfQ09OU1RBTlQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPERpYWxvZ09uZUNvbXBvbmVudD4sXG4gICAgICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogRGlhbG9nT25lTVxuICAgICkge1xuICAgICAgICB0aGlzLmRpYWxvZ1JlZi5kaXNhYmxlQ2xvc2UgPSB0cnVlO1xuICAgIH1cblxuICAgIGRpYWxvZ09uZSA9IERpYWxvZ09uZUVudW07XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB9XG5cbiAgICBzdWNjZXNzKCkge1xuICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh0cnVlKTtcbiAgICB9XG5cbiAgICBmYWlsKCkge1xuICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZShmYWxzZSk7XG4gICAgfVxuXG59XG4iLCI8ZGl2IG1hdC1kaWFsb2ctdGl0bGUgY2xhc3M9XCJkaWFsb2dUaXRsZSBtYi0wXCI+XG4gICAgPGRpdiAqbmdJZj1cImRhdGEudHlwZSA9PSBkaWFsb2dPbmUuREVMRVRFO2Vsc2UgRWxzZUJsb2NrXCIgY2xhc3M9XCJkLWZsZXggdGV4dC1kYW5nZXIgcm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZC1mbGl4XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEgY2VudGVyQWxpZ25cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQgXCI+XG4gICAgICAgICAgICAgICAgICAgIHt7ZGF0YS5pY29ufX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTFcIj5cbiAgICAgICAgICAgICAgICA8c3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICB7e2RhdGEuaGVhZGVyfX1cbiAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuICAgIDxuZy10ZW1wbGF0ZSAjRWxzZUJsb2NrIGNsYXNzPVwiZC1mbGV4IHJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgW25nQ2xhc3NdPVwieyd0ZXh0LXdhcm5pbmcnOiBkYXRhLnR5cGUgPT0gZGlhbG9nT25lLkNPTkZJUk1BVElPTiwgJ3RleHQtaW5mbyc6IGRhdGEudHlwZSA9PSBkaWFsb2dPbmUuSU5GT31cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMSBwcy0yIGNlbnRlckFsaWduXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkXCI+XG4gICAgICAgICAgICAgICAgICAgIHt7ZGF0YS5pY29ufX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTFcIj5cbiAgICAgICAgICAgICAgICA8c3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICB7e2RhdGEuaGVhZGVyfX1cbiAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L25nLXRlbXBsYXRlPlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiY2FyZC1ib2R5IGJyZWFrTGluZSBtYXQtdHlwb2dyYXBoeSBtcy00XCI+XG4gICAgPGRpdiBbaW5uZXJIVE1MXT1cImRhdGEuYm9keVwiPjwvZGl2PjxiciAvPlxuPC9kaXY+XG48ZGl2ICpuZ0lmPVwiZGF0YS50eXBlID09IGRpYWxvZ09uZS5ERUxFVEVcIj5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IGZsb2F0LWVuZCBtcy0yXCIgKGNsaWNrKT1cImZhaWwoKVwiIG1hdFJpcHBsZVxuICAgICAgICBbbWF0UmlwcGxlQ2VudGVyZWRdPVwiTUFURVJJQUxfQ09OU1RBTlQuTUFUX1JJUFBMRV9DRU5URVJcIj5cbiAgICAgICAge3sgZGF0YS5idXR0b25PbmUgfX1cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tZGFuZ2VyIGZsb2F0LWVuZCBtcy0yXCIgKGNsaWNrKT1cInN1Y2Nlc3MoKVwiIG1hdFJpcHBsZVxuICAgICAgICBbbWF0UmlwcGxlQ2VudGVyZWRdPVwiTUFURVJJQUxfQ09OU1RBTlQuTUFUX1JJUFBMRV9DRU5URVJcIj5cbiAgICAgICAge3sgZGF0YS5idXR0b25Ud28gfX1cbiAgICA8L2J1dHRvbj5cbjwvZGl2PlxuXG48ZGl2ICpuZ0lmPVwiZGF0YS50eXBlID09IGRpYWxvZ09uZS5JTkZPXCI+XG4gICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gIGZsb2F0LWNlbnRyZSBtcy0yXCIgKGNsaWNrKT1cInN1Y2Nlc3MoKVwiIG1hdFJpcHBsZVxuICAgICAgICBbbWF0UmlwcGxlQ2VudGVyZWRdPVwiTUFURVJJQUxfQ09OU1RBTlQuTUFUX1JJUFBMRV9DRU5URVJcIj5cbiAgICAgICAge3sgZGF0YS5idXR0b25PbmUgfX1cbiAgICA8L2J1dHRvbj5cbjwvZGl2PlxuXG48ZGl2ICpuZ0lmPVwiZGF0YS50eXBlID09IGRpYWxvZ09uZS5DT05GSVJNQVRJT05cIj5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4td2FybmluZyB0ZXh0LXdoaXRlIGZsb2F0LWVuZCBtcy0yXCIgKGNsaWNrKT1cInN1Y2Nlc3MoKVwiIG1hdFJpcHBsZVxuICAgICAgICBbbWF0UmlwcGxlQ2VudGVyZWRdPVwiTUFURVJJQUxfQ09OU1RBTlQuTUFUX1JJUFBMRV9DRU5URVJcIj5cbiAgICAgICAge3sgZGF0YS5idXR0b25Ud28gfX1cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IGZsb2F0LWVuZCBtcy0yXCIgKGNsaWNrKT1cImZhaWwoKVwiIG1hdFJpcHBsZVxuICAgICAgICBbbWF0UmlwcGxlQ2VudGVyZWRdPVwiTUFURVJJQUxfQ09OU1RBTlQuTUFUX1JJUFBMRV9DRU5URVJcIj5cbiAgICAgICAge3sgZGF0YS5idXR0b25PbmUgfX1cbiAgICA8L2J1dHRvbj5cbjwvZGl2PiJdfQ==