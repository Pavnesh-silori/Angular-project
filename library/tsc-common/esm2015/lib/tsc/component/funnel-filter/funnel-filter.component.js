import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MATERIAL_CONSTANT } from '../../constant/material.constant';
import { MatSelectSearchService } from '../../service/mat-select-search.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/button";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/select";
import * as i4 from "@angular/material/core";
import * as i5 from "ngx-mat-select-search";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
export class FunnelFilterComponent {
    constructor() {
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.header = 'Filter Key'; /* header value shown next to funnel icon */
        this.active = false; /* show filter icon with blue color or not */
        this.showSearchBar = true; /* show search bar or not */
        this.searchByPlaceholder = 'name'; /* search placehodler */
        this.searchBy = ['name']; /* in search bar which column used to search */
        this.selectAllLabel = 'All'; /* in dropdown first column for all */
        this.entityList = []; /* filter list */
        this.view = 'name'; /* values visible to user in dropdown */
        this.value = 'keyID'; /* value that gets passes to form control */
        this.resetFlag = false; /*reset all filter */
        this.mono = new EventEmitter(); /* emits selected value for single select */
        this.multi = new EventEmitter(); /* emits selected value for multiple select */
        this.selected = new EventEmitter(); /* output for selected object for chip creation */
        this.all_entities_length = 0;
        this.filterFC = new FormControl();
        this.init = true;
        this.all_entities_value = [];
        this.selected_entities = new Set();
        this.multiFilterApplied = false;
        this.searchUtil = new MatSelectSearchService(this.searchBy);
    }
    ;
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes.searchBy) {
            this.searchUtil.searchBy = this.searchBy;
        }
        if ((changes === null || changes === void 0 ? void 0 : changes.entityList) || ((changes === null || changes === void 0 ? void 0 : changes.resetFlag) && !changes.resetFlag.firstChange)) {
            this.addAllEntities();
        }
    }
    addAllEntities() {
        if (this.entityList != null && this.entityList != undefined && this.entityList.length > 0) {
            if (this.type == 'multi') {
                this.all_entities_length = this.entityList.length;
                this.all_entities_value = ['all'];
                this.entityList.forEach(entity => {
                    this.selected_entities.add(entity);
                    this.all_entities_value.push(entity[this.value]);
                });
                this.selectFC.patchValue(this.all_entities_value);
            }
            this.searchUtil.entityArr = this.entityList;
            this.searchUtil.createSubscription();
        }
    }
    selectionChange(value) { this.mono.emit(value); }
    selectedEntity(entity) { this.selected.next(entity); }
    resetOnNoChange(event) {
        if (event) {
            this.prev = this.selectFC.value;
            this.multiFilterApplied = false;
        }
        else {
            if (this.prev != this.selectFC.value && !this.multiFilterApplied) {
                this.selectFC.patchValue(this.prev, { onlySelf: true });
            }
        }
    }
    selectEntity(entity /* entity: json */) {
        if (!this.selected_entities.delete(entity)) {
            this.selected_entities.add(entity);
        }
        const k = this.selectFC.value.indexOf('all');
        if (k > -1) {
            if (this.selectFC.value.length > this.all_entities_length) {
                this.selectFC.patchValue([]);
            }
            else if (this.selectFC.value.length == this.all_entities_length) {
                this.selectFC.value.splice(k, 1);
                this.selectFC.patchValue(this.selectFC.value);
            }
            else {
                this.selectFC.patchValue(this.all_entities_value);
            }
        }
        else {
            if (this.selectFC.value.length == this.all_entities_length) {
                this.selectFC.patchValue(this.all_entities_value);
            }
        }
    }
    applyFilter() {
        if (this.selectFC.value.length == 0)
            return;
        this.multiFilterApplied = true;
        this.multi.emit(this.selectFC.value);
        this.selected.next(this.selected_entities);
    }
    selectAllEntities() {
        if (!this.selectFC.value.includes('all') && this.selectFC.value.length > 0) {
            this.selectFC.reset([]);
            this.selected_entities.clear();
            return;
        }
        this.selectFC.patchValue(this.all_entities_value);
        this.entityList.forEach(entity => this.selected_entities.add(entity));
    }
}
FunnelFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FunnelFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FunnelFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: FunnelFilterComponent, selector: "funnel-filter", inputs: { header: "header", active: "active", showSearchBar: "showSearchBar", searchByPlaceholder: "searchByPlaceholder", searchBy: "searchBy", selectAllLabel: "selectAllLabel", entityList: "entityList", view: "view", value: "value", type: "type", selectFC: "selectFC", resetFlag: "resetFlag" }, outputs: { mono: "mono", multi: "multi", selected: "selected" }, usesOnChanges: true, ngImport: i0, template: "<!-- for single select -->\n<ng-container *ngIf=\"type == 'mono'\">\n    <div class=\"row\">\n        <div class=\"col-sm-12 centerAlignVertical d-flex justify-content-start\">\n            {{ header }}\n            <div>\n                <button mat-icon-button (click)=\"select.open()\">\n                    <span class=\"fs-4 material-symbols-outlined funnel\" [ngClass]=\"{'text-primary': active}\">\n                        filter_alt\n                    </span>\n                    <div class=\"funnelFilterDD\">\n                        <mat-form-field>\n                            <mat-select #select [formControl]=\"selectFC\" (selectionChange)=\"selectionChange($event);\">\n                                <mat-select-trigger class=\"d-none\"></mat-select-trigger>\n                                <mat-option *ngIf=\"showSearchBar\">\n                                    <ngx-mat-select-search [formControl]=\"searchUtil.filterFC\"\n                                        [placeholderLabel]=\"'Search by '+ searchByPlaceholder\"\n                                        noEntriesFoundLabel=\"No match found.\">\n                                    </ngx-mat-select-search>\n                                </mat-option>\n\n                                <mat-option *ngFor=\"let entity of searchUtil.filteredEntities | async\"\n                                    [value]=\"entity?.[value]\" (click)=\"selectedEntity(entity)\">\n                                    <span class=\"d-flex justify-content-between\">\n                                        {{ entity?.[view] }}\n                                    </span>\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </button>\n            </div>\n        </div>\n    </div>\n</ng-container>\n\n\n<!-- for multiple select -->\n<ng-container *ngIf=\"type == 'multi'\">\n    <div class=\"row\">\n        <div class=\"col-sm-12 centerAlignVertical justify-content-start pe-0\">\n            {{ header }}\n            <div>\n                <button mat-icon-button (click)=\"multiSelect.open()\">\n                    <span class=\"material-symbols-outlined fs-4 funnel\" [ngClass]=\"{'text-primary': active}\">\n                        filter_alt\n                    </span>\n                    <div class=\"funnelFilterDD\">\n                        <mat-form-field>\n                            <mat-select #multiSelect [formControl]=\"selectFC\" (openedChange)=\"resetOnNoChange($event)\"\n                                multiple>\n                                <mat-option *ngIf=\"showSearchBar\">\n                                    <ngx-mat-select-search [formControl]=\"searchUtil.filterFC\"\n                                        [placeholderLabel]=\"'Search by '+ searchByPlaceholder\"\n                                        noEntriesFoundLabel=\"No match found.\">\n                                    </ngx-mat-select-search>\n                                </mat-option>\n                                <mat-select-trigger class=\"d-none\"></mat-select-trigger>\n                                <mat-option value=\"all\" (click)=\"selectAllEntities()\">\n                                    {{ selectAllLabel }}\n                                </mat-option>\n                                <mat-option *ngFor=\"let entity of searchUtil.filteredEntities | async\"\n                                    [value]=\"entity[value]\" (click)=\"selectEntity(entity)\">\n                                    {{ entity[view] }}\n                                </mat-option>\n                                <div class=\"row m-0 dropdownFooter\">\n                                    <div class=\"col-sm-12\">\n                                        <button class=\"button btn btn-primary float-end m-1\"\n                                            [ngClass]=\"{'disableBtn': selectFC.value.length == 0}\"\n                                            (click)=\"selectFC.value.length == 0 ? null : applyFilter();\"\n                                            (click)=\"selectFC.value.length == 0 ? null : multiSelect.close();\" matRipple\n                                            [matRippleCentered]=\"MATERIAL_CONSTANT.matRippleCentered\">\n                                            Apply\n                                        </button>\n                                    </div>\n                                </div>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </button>\n            </div>\n        </div>\n    </div>\n</ng-container>", styles: [".funnelFilterDD{width:0;height:0;overflow:hidden}.dropdownFooter{position:sticky;bottom:0;background-color:#fff;padding:8px;z-index:1000}\n"], components: [{ type: i1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i2.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i3.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i4.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i5.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i3.MatSelectTrigger, selector: "mat-select-trigger" }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: FunnelFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'funnel-filter',
                    templateUrl: './funnel-filter.component.html',
                    styleUrls: ['./funnel-filter.component.scss']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { header: [{
                type: Input
            }], active: [{
                type: Input
            }], showSearchBar: [{
                type: Input
            }], searchByPlaceholder: [{
                type: Input
            }], searchBy: [{
                type: Input
            }], selectAllLabel: [{
                type: Input
            }], entityList: [{
                type: Input
            }], view: [{
                type: Input
            }], value: [{
                type: Input
            }], type: [{
                type: Input
            }], selectFC: [{
                type: Input
            }], resetFlag: [{
                type: Input
            }], mono: [{
                type: Output
            }], multi: [{
                type: Output
            }], selected: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,