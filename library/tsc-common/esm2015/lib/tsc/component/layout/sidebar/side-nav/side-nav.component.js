import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { select } from '@angular-redux/store';
import { NgbAccordion, NgbAccordionConfig } from '@ng-bootstrap/ng-bootstrap';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/application-service";
import * as i4 from "ngx-perfect-scrollbar";
import * as i5 from "@ng-bootstrap/ng-bootstrap";
import * as i6 from "@angular/common";
import * as i7 from "@library/feature-service";
import * as i8 from "@library/rbac-service";
import * as i9 from "@angular/material/tooltip";
import * as i10 from "../../../../service/ellipsis-pipe.service";
// /tsc-library/
export class SideNavComponent {
    constructor(router, storageService, applicationService) {
        this.router = router;
        this.storageService = storageService;
        this.applicationService = applicationService;
        this.menuOutput = new EventEmitter();
        this.toggleSidebarGlobal = new EventEmitter(true);
        this.toggleSettingDrawerGlobal = new EventEmitter(true);
        this.sidebarArray = [];
        this.activeID = [];
    }
    ngOnInit() {
        this.applicationKeyID = this.storageService.getStorage(['applicationKeyID']);
        this.sidebarType = this.sidebarTypeInp;
        this.sidebarArray = this.sidebarArrayInp;
        this.openAccordion();
        // this.handleActiveTabOnRefresh();  /* TODO: SOMYA AGRAWAL, added to handle selected tab on refresh, not working properly */
    }
    ngOnChanges(changes) {
        if (changes.sidebarArrayInp && this.sidebarArrayInp) {
            this.onMenuClick(this.sidebarArrayInp);
        }
    }
    onMenuClick(menu) {
        if (menu === null || menu === void 0 ? void 0 : menu.route) {
            this.navigate(menu);
        }
        if (menu.dualMenu) {
            if (this.sidebarType == 'LEFT') {
                this.sidebarArray = menu.dualMenu;
                this.openAccordion();
            }
            const defaultMenu = this.findDefaultLandingPage(menu.dualMenu);
            if (defaultMenu) {
                this.navigate(defaultMenu);
            }
        }
        if (this.sidebarType == 'RIGHT') {
            const clonedMenu = Object.assign({}, menu);
            this.menuOutput.emit(clonedMenu);
            this.toggleSettingDrawerFun();
        }
    }
    findDefaultLandingPage(menuArray) {
        for (const menu of menuArray) {
            if (menu.isDefaultLandingPage) {
                return menu;
            }
            if (menu.children) {
                const result = this.findDefaultLandingPage(menu.children);
                if (result) {
                    return result;
                }
            }
        }
        return null;
    }
    backFunc(menu) {
        if (menu === null || menu === void 0 ? void 0 : menu.backMenuItem) {
            this.sidebarArray = menu.backMenuItem;
        }
        if (menu === null || menu === void 0 ? void 0 : menu.navigateToLandingPage) {
            const landingPageItem = menu === null || menu === void 0 ? void 0 : menu.backMenuItem.find(item => item.isLandingPage);
            if (landingPageItem) {
                this.navigate(landingPageItem);
                return;
            }
        }
        this.openAccordion();
    }
    openAccordion() {
        var _a;
        const openAccordionItems = (_a = this.sidebarArray) === null || _a === void 0 ? void 0 : _a.filter(item => (item === null || item === void 0 ? void 0 : item.type) == 'ACCORDION' && (item === null || item === void 0 ? void 0 : item.defaultState) == 'OPEN');
        this.activeID = openAccordionItems === null || openAccordionItems === void 0 ? void 0 : openAccordionItems.map(item => item === null || item === void 0 ? void 0 : item.label);
    }
    changeAccordionState(menu) {
        this.accordion.collapseAll();
        this.activeID = menu.label;
        this.accordion.expand(menu.label);
        if (menu.children) {
            menu.children.forEach((child) => {
                this.accordion.expand(child.label);
            });
        }
    }
    handleActiveTabOnRefresh() {
        this.sidebarArray.forEach(menu => {
            if (menu.dualMenu) {
                menu.dualMenu.forEach(dualMenuItem => {
                    if (dualMenuItem.children) {
                        dualMenuItem.children.forEach(child => {
                            if ((child === null || child === void 0 ? void 0 : child.route) == window.location.pathname) {
                                child.active = true;
                            }
                        });
                    }
                });
            }
        });
    }
    isActiveRoute(menu) {
        if (!menu) {
            return false;
        }
        if (menu.activeLink) {
            for (const parentLink of menu.activeLink) {
                if (this.router.isActive(parentLink, false)) {
                    return true;
                }
            }
        }
        return false;
    }
    navigate(menu) {
        this.router.navigate([
            menu === null || menu === void 0 ? void 0 : menu.route,
            { outlets: this.getOutlets(menu) }
        ], { queryParams: this.getQueryParams(menu) });
    }
    getOutlets(menu) {
        let outlets = {};
        if (menu === null || menu === void 0 ? void 0 : menu.outlet) {
            menu === null || menu === void 0 ? void 0 : menu.outlet.forEach(outlet => {
                outlets[outlet['outlet']] = outlet['route'];
            });
        }
        return outlets;
    }
    getQueryParams(menu) {
        let params = {};
        if (menu === null || menu === void 0 ? void 0 : menu.queryParam) {
            menu === null || menu === void 0 ? void 0 : menu.queryParam.forEach(param => {
                params[param['key']] = param['param'];
            });
        }
        return params;
    }
    navigateToLandingPage() {
        this.router.navigate([this.landingPageRouteInp]);
    }
    toggleSidebarFun() {
        this.toggleSidebar = !this.toggleSidebar;
        this.toggleSidebarGlobal.emit(this.toggleSidebar);
    }
    toggleSettingDrawerFun() {
        this.toggleSettingDrawer = !this.toggleSettingDrawer;
        this.toggleSettingDrawerGlobal.emit(this.toggleSettingDrawer);
    }
}
SideNavComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SideNavComponent, deps: [{ token: i1.Router }, { token: i2.StorageService }, { token: i3.ApplicationService }], target: i0.ɵɵFactoryTarget.Component });
SideNavComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SideNavComponent, selector: "lib-side-nav", inputs: { sidebarTypeInp: "sidebarTypeInp", sidebarArrayInp: "sidebarArrayInp", sidebarHeaderLabelInp: "sidebarHeaderLabelInp", headerLogo: "headerLogo", footerLogo: "footerLogo", toggleSidebar: "toggleSidebar", toggleSettingDrawer: "toggleSettingDrawer", landingPageRouteInp: "landingPageRouteInp" }, outputs: { menuOutput: "menuOutput", toggleSidebarGlobal: "toggleSidebarGlobal", toggleSettingDrawerGlobal: "toggleSettingDrawerGlobal" }, providers: [NgbAccordionConfig], viewQueries: [{ propertyName: "accordion", first: true, predicate: NgbAccordion, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n    [ngClass]=\"[sidebarType == 'LEFT' ? 'app-sidebar sidebar-shadow ' : 'setting-sidebar setting-drawer-wrapper', toggleSettingDrawer ? 'setting-drawer-open' : '']\">\n\n    <div class=\"app-header__logo separator-bottom\" *ngIf=\"headerLogo\">\n        <div (click)=\"navigateToLandingPage()\" class=\"cursorPointer\" *ngIf=\"!toggleSidebar\">\n            <img class=\"headerProductLogo ms-1\"\n                [src]=\"applicationService.getApplicationLogoWithSideName(applicationKeyID)\" alt=\"Application logo\" />\n        </div>\n        <div class=\"header__pane ms-auto\">\n            <button type=\"button\" class=\"hamburger hamburger--elastic\" [ngClass]=\"{'is-active' : !toggleSidebar}\"\n                (click)=\"toggleSidebarFun();\">\n                <span class=\"hamburger-box\"><span class=\"hamburger-inner\"></span></span>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"drawer-nav-btn\" *ngIf=\"!headerLogo\">\n        <button type=\"button\" class=\"hamburger hamburger--elastic\" [ngClass]=\"{'is-active' : toggleSettingDrawer}\"\n            (click)=\"toggleSettingDrawerFun()\">\n            <span class=\"hamburger-box\"><span class=\"hamburger-inner\"></span></span>\n        </button>\n    </div>\n\n    <div class=\"app-sidebar-content pt-2\" [ngClass]=\"{'drawer-content-wrapper': sidebarType == 'RIGHT'}\">\n        <div class=\"app-sidebar-scroll\">\n            <perfect-scrollbar [config]=\"{wheelPropagation: false}\" class=\"scroll-fix\" [scrollIndicators]=\"true\">\n                <div class=\"v-sidebar-menu\">\n                    <div class=\"vsm-list\">\n                        <div *ngIf=\"sidebarHeaderLabelInp\" [ngClass]=\"{'bottomMargin': sidebarHeaderLabelInp}\">\n                            <span class=\"fw-bold ms-2 fs-4\">{{ sidebarHeaderLabelInp }}</span>\n                        </div>\n\n                        <div *ngFor=\"let menu of sidebarArray\">\n                            <ng-container *ngIf=\"!toggleSidebar; else closedSidebar\">\n                                <ng-container *ngIf=\"!menu.children && !menu.isSidebarHeaderLabel; else childrenView\">\n                                    <ng-container *isRenderFeature=\"menu?.featureKeyID\">\n                                        <ng-container *isRenderRBAC=\"menu?.resourcePermission\">\n                                            <div class=\"vsm-link mb-1\"\n                                                [ngClass]=\"{'mb-3': menu.isBackButton, 'customPadding': !menu?.icon, 'selected': isActiveRoute(menu)}\"\n                                                (click)=\"menu.isBackButton ? backFunc(menu) : onMenuClick(menu)\"\n                                                routerLinkActive=\"active-item\"\n                                                [matTooltip]=\"menu?.label?.length>18? menu.label: ''\"\n                                                matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                                                <div class=\"d-flex align-items-center\">\n                                                    <span class=\"material-symbols-outlined vsm-icon icon me-3\"> {{\n                                                        menu?.icon }}\n                                                    </span>\n                                                    <span\n                                                        [ngClass]=\"{'fw-bold fs-4': menu.isSidebarHeaderLabel, 'fw-bold': isActiveRoute(menu)}\">{{\n                                                        menu?.label | dotdotdot:18 }}</span>\n                                                    <span class=\"material-symbols-outlined showRightArrowOnHover ms-2\"\n                                                        *ngIf=\"menu?.dualMenu\">\n                                                        arrow_circle_right\n                                                    </span>\n                                                </div>\n                                            </div>\n                                        </ng-container>\n                                    </ng-container>\n                                </ng-container>\n\n                                <ng-template #childrenView>\n\n                                    <ng-container *ngIf=\"menu.type == 'ACCORDION'; else openMenuView\">\n                                        <ng-container\n                                            *ngTemplateOutlet=\"accordionTemplate; context: { accordionContent: menu }\"></ng-container>\n                                    </ng-container>\n\n                                    <ng-template #openMenuView>\n                                        <div class=\"openMenuHeader vsm-title mb-2\"\n                                            [ngClass]=\"{'fw-bold fs-4': menu.isSidebarHeaderLabel}\"\n                                            [matTooltip]=\"menu?.label?.length>18? menu.label: ''\"\n                                            matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                                            {{ menu?.label | dotdotdot:18 }}\n                                        </div>\n                                        <div *ngFor=\"let openMenuChildren of menu.children\">\n                                            <ng-container *isRenderFeature=\"openMenuChildren?.featureKeyID\">\n                                                <ng-container *isRenderRBAC=\"openMenuChildren?.resourcePermission\">\n                                                    <a class=\"vsm-link mb-1\"\n                                                        [ngClass]=\"{'selected': isActiveRoute(openMenuChildren)}\"\n                                                        routerLinkActive=\"active-item\"\n                                                        (click)=\"navigate(openMenuChildren)\"\n                                                        [matTooltip]=\"openMenuChildren?.label?.length>18? openMenuChildren.label: ''\"\n                                                        matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                                                        <div class=\"d-flex align-items-center\">\n                                                            <span class=\"material-symbols-outlined icon ms-3\"> {{\n                                                                openMenuChildren?.icon }} </span>\n                                                            <span class=\"ms-3\"\n                                                                [ngClass]=\"{'fw-bold': isActiveRoute(openMenuChildren)}\">\n                                                                {{\n                                                                openMenuChildren?.label | dotdotdot:18 }} </span>\n                                                        </div>\n                                                    </a>\n                                                </ng-container>\n                                            </ng-container>\n                                        </div>\n                                    </ng-template>\n\n                                </ng-template>\n                            </ng-container>\n\n                            <ng-template #closedSidebar>\n                                <div *ngIf=\"!menu.children && !menu.isSidebarHeaderLabel\">\n                                    <ng-container\n                                        *ngTemplateOutlet=\"closedSidebarTemplate; context: { menuItem: menu }\"></ng-container>\n                                </div>\n                                <ng-container *ngFor=\"let child of menu.children\">\n                                    <ng-container *ngIf=\"!child.subLabel\">\n                                        <ng-container\n                                            *ngTemplateOutlet=\"closedSidebarTemplate; context: { menuItem: child }\"></ng-container>\n                                    </ng-container>\n                                </ng-container>\n                            </ng-template>\n\n                        </div>\n                    </div>\n                </div>\n            </perfect-scrollbar>\n        </div>\n    </div>\n\n    <div class=\"app-header__logo separator-top\" *ngIf=\"footerLogo\">\n        <img class=\"tscLogoWithName\" [ngClass]=\"{'d-none': toggleSidebar}\"\n            src=\"../assets/images/application-logo/tsc-with-name.png\" />\n        <img class=\"tscLogoWithoutName\" [ngClass]=\"{'d-none': !toggleSidebar}\"\n            src=\"../assets/images/application-logo/tsc-without-name.png\" />\n    </div>\n</div>\n\n<div class=\"setting-drawer-overlay\" (click)=\"toggleSettingDrawerFun()\"></div>\n\n<ng-template #accordionTemplate let-accordionContent=\"accordionContent\">\n    <ngb-accordion [destroyOnHide]=\"true\" #acc=\"ngbAccordion\" [activeIds]=\"activeID\">\n        <ngb-panel [id]=\"accordionContent.label\">\n\n            <ng-template ngbPanelHeader>\n                <button ngbPanelToggle routerLinkActive=\"active-item\" class=\"vsm-link\"\n                    [ngClass]=\"{'customPadding': !accordionContent?.icon}\"\n                    [matTooltip]=\"accordionContent?.label?.length>18? accordionContent.label: ''\"\n                    matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                    <div class=\"d-flex align-items-center\">\n                        <span class=\"material-symbols-outlined icon me-3\">{{ accordionContent?.icon }}</span>\n                        <span class=\"fw-normal\">{{ accordionContent?.label | dotdotdot:18 }}</span>\n                    </div>\n                    <i class=\"vsm-arrow\"></i>\n                </button>\n            </ng-template>\n\n            <ng-template ngbPanelContent>\n                <div class=\"vsm-dropdown\">\n                    <div class=\"vsm-list\">\n                        <ng-container *ngFor=\"let submenuItem of accordionContent?.children\">\n\n                            <ng-container *ngIf=\"!submenuItem.subLabel; else subMenuSubHeader\">\n                                <ng-container *isRenderFeature=\"submenuItem?.featureKeyID\">\n                                    <ng-container *isRenderRBAC=\"submenuItem?.resourcePermission\">\n                                        <a class=\"vsm-link mb-1 ms-3\"\n                                            [ngClass]=\"{'selected': isActiveRoute(submenuItem)}\"\n                                            routerLinkActive=\"active-item\"\n                                            (click)=\"changeAccordionState(accordionContent); navigate(submenuItem)\"\n                                            [matTooltip]=\"submenuItem?.label?.length>18? submenuItem.label: ''\"\n                                            matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                                            <div class=\"d-flex align-items-center\">\n                                                <span class=\"material-symbols-outlined icon me-3\"> {{ submenuItem?.icon\n                                                    }}\n                                                </span>\n                                                <span [ngClass]=\"{'fw-bold': isActiveRoute(openMenuChildren)}\"> {{\n                                                    submenuItem?.label | dotdotdot:18}} </span>\n                                            </div>\n                                        </a>\n                                    </ng-container>\n                                </ng-container>\n                            </ng-container>\n\n                            <ng-template #subMenuSubHeader>\n                                <div class=\"ms-4 text-secondary fw-bold mb-2\"\n                                    [matTooltip]=\"submenuItem?.label?.length>18? submenuItem.label: ''\"\n                                    matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\"> {{ submenuItem.subLabel\n                                    | dotdotdot:18}} </div>\n                            </ng-template>\n\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-template>\n        </ngb-panel>\n    </ngb-accordion>\n</ng-template>\n\n<ng-template #closedSidebarTemplate let-menuItem=\"menuItem\">\n    <ng-container *isRenderFeature=\"menuItem?.featureKeyID\">\n        <ng-container *isRenderRBAC=\"menuItem?.resourcePermission\">\n            <a class=\"vsm-link mb-1 closedSideBarIconPadding\" [ngClass]=\"{'selected': isActiveRoute(menuItem)}\"\n                routerLinkActive=\"active-item\"\n                (click)=\"menuItem.isBackButton ? backFunc(menuItem) : onMenuClick(menuItem); navigate(menuItem)\"\n                [matTooltip]=\"menuItem?.label\" matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                <div class=\"d-flex align-items-center\">\n                    <span class=\"material-symbols-outlined vsm-icon icon me-3\"> {{ menuItem?.icon }}\n                    </span>\n                </div>\n            </a>\n        </ng-container>\n    </ng-container>\n</ng-template>", styles: [".scroll-fix{height:calc(100vh - 122px)!important}.material-symbols-outlined{font-variation-settings:\"FILL\" 1}.headerProductLogo{height:40px;width:auto}.vsm-link.selected{background-color:#e0f3ff;color:#3f6ad8}.vsm-link{font-weight:normal!important;min-height:30px!important;border-radius:16px}.vsm-link:hover .showRightArrowOnHover{opacity:1}.showRightArrowOnHover{text-align:center;width:34px;height:34px;line-height:34px;position:absolute;right:5px;top:50%;margin-top:-17px;font-size:1.5rem;opacity:0}.showLeftArrow{text-align:center;width:34px;height:34px;line-height:34px;position:absolute;left:5px;top:50%;margin-top:-17px;font-size:1.5rem}.customPadding{padding:0 1.5rem 0 15px}.sideBarTooltip{white-space:pre-line!important;max-width:1100px!important;max-height:550px!important;font-size:18px!important}.openMenuHeader{pointer-events:none;padding:0 1.5rem 0 15px}.vsm-title{font-size:14px;white-space:nowrap;position:relative;font-weight:normal}.v-sidebar-menu .vsm-dropdown .vsm-list{padding:.75rem}.vsm-icon{opacity:1}.icon{text-align:center;width:34px;height:34px;line-height:34px;position:absolute;left:5px;top:50%;margin-top:-17px;font-size:1.3rem}.subLabelMargin{margin-left:1.9rem!important}.separator-top{border-top:1px solid #f6eded;background-color:#fff!important;position:fixed;bottom:0;left:0}.tscLogoWithName{height:38px;width:auto}.tscLogoWithoutName{width:32px;height:32px}.bottomMargin{margin-bottom:17px}.closedSideBarIconPadding{padding:unset}\n"], components: [{ type: i4.PerfectScrollbarComponent, selector: "perfect-scrollbar", inputs: ["disabled", "usePSClass", "autoPropagation", "scrollIndicators", "config"], outputs: ["psScrollY", "psScrollX", "psScrollUp", "psScrollDown", "psScrollLeft", "psScrollRight", "psYReachEnd", "psYReachStart", "psXReachEnd", "psXReachStart"], exportAs: ["ngxPerfectScrollbar"] }, { type: i5.NgbAccordion, selector: "ngb-accordion", inputs: ["animation", "activeIds", "closeOthers", "destroyOnHide", "type"], outputs: ["panelChange", "shown", "hidden"], exportAs: ["ngbAccordion"] }], directives: [{ type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.FeatureDirective2, selector: "[isRenderFeature]", inputs: ["isRenderFeature"] }, { type: i8.RBACDirective2, selector: "[isRenderRBAC]", inputs: ["isRenderRBAC"] }, { type: i9.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgbPanel, selector: "ngb-panel", inputs: ["disabled", "id", "title", "type", "cardClass"], outputs: ["shown", "hidden"] }, { type: i5.NgbPanelHeader, selector: "ng-template[ngbPanelHeader]" }, { type: i5.NgbPanelToggle, selector: "button[ngbPanelToggle]", inputs: ["ngbPanelToggle"] }, { type: i5.NgbPanelContent, selector: "ng-template[ngbPanelContent]" }], pipes: { "dotdotdot": i10.EllipsisPipeService } });
__decorate([
    select('config')
], SideNavComponent.prototype, "config$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SideNavComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-side-nav',
                    templateUrl: './side-nav.component.html',
                    styleUrls: ['./side-nav.component.scss'],
                    providers: [NgbAccordionConfig],
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.StorageService }, { type: i3.ApplicationService }]; }, propDecorators: { sidebarTypeInp: [{
                type: Input
            }], sidebarArrayInp: [{
                type: Input
            }], sidebarHeaderLabelInp: [{
                type: Input
            }], headerLogo: [{
                type: Input
            }], footerLogo: [{
                type: Input
            }], toggleSidebar: [{
                type: Input
            }], toggleSettingDrawer: [{
                type: Input
            }], landingPageRouteInp: [{
                type: Input
            }], menuOutput: [{
                type: Output
            }], toggleSidebarGlobal: [{
                type: Output
            }], toggleSettingDrawerGlobal: [{
                type: Output
            }], config$: [], accordion: [{
                type: ViewChild,
                args: [NgbAccordion]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZS1uYXYuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtY29tbW9uL3NyYy9saWIvdHNjL2NvbXBvbmVudC9sYXlvdXQvc2lkZWJhci9zaWRlLW5hdi9zaWRlLW5hdi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1jb21tb24vc3JjL2xpYi90c2MvY29tcG9uZW50L2xheW91dC9zaWRlYmFyL3NpZGUtbmF2L3NpZGUtbmF2LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFpQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekcsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7Ozs7Ozs7O0FBTzlFLGdCQUFnQjtBQVNoQixNQUFNLE9BQU8sZ0JBQWdCO0lBNEN6QixZQUNZLE1BQWMsRUFDZCxjQUE4QixFQUMvQixrQkFBc0M7UUFGckMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUMvQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBcEJqRCxlQUFVLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFHeEQsd0JBQW1CLEdBQTBCLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBR3BFLDhCQUF5QixHQUEwQixJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUkxRSxpQkFBWSxHQUFVLEVBQUUsQ0FBQztRQUN6QixhQUFRLEdBQWEsRUFBRSxDQUFDO0lBVXBCLENBQUM7SUFFTCxRQUFRO1FBQ0osSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBRTdFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFFekMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLDZIQUE2SDtJQUNqSSxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzFDO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFJO1FBQ1osSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsS0FBSyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtRQUVELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxNQUFNLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3hCO1lBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvRCxJQUFJLFdBQVcsRUFBRTtnQkFDYixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzlCO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksT0FBTyxFQUFFO1lBQzdCLE1BQU0sVUFBVSxxQkFBUSxJQUFJLENBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUVqQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztTQUNqQztJQUVMLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxTQUFTO1FBQzVCLEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxFQUFFO1lBQzFCLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUMzQixPQUFPLElBQUksQ0FBQzthQUNmO1lBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzFELElBQUksTUFBTSxFQUFFO29CQUNSLE9BQU8sTUFBTSxDQUFDO2lCQUNqQjthQUNKO1NBQ0o7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQUk7UUFDVCxJQUFJLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxZQUFZLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQ3pDO1FBRUQsSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUscUJBQXFCLEVBQUU7WUFDN0IsTUFBTSxlQUFlLEdBQUcsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDNUUsSUFBSSxlQUFlLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQy9CLE9BQU87YUFDVjtTQUNKO1FBRUQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxhQUFhOztRQUNULE1BQU0sa0JBQWtCLEdBQUcsTUFBQSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxJQUFJLEtBQUksV0FBVyxJQUFJLENBQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFlBQVksS0FBSSxNQUFNLENBQUMsQ0FBQztRQUN4SCxJQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixhQUFsQixrQkFBa0IsdUJBQWxCLGtCQUFrQixDQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsb0JBQW9CLENBQUMsSUFBSTtRQUNyQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0lBRUQsd0JBQXdCO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtvQkFDakMsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFO3dCQUN2QixZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTs0QkFDbEMsSUFBSSxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxLQUFLLEtBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7Z0NBQzFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOzZCQUN2Qjt3QkFDTCxDQUFDLENBQUMsQ0FBQztxQkFDTjtnQkFDTCxDQUFDLENBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQUk7UUFDZCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsS0FBSyxNQUFNLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUN0QyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsRUFBRTtvQkFDekMsT0FBTyxJQUFJLENBQUM7aUJBQ2Y7YUFDSjtTQUNKO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFJO1FBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDakIsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEtBQUs7WUFDWCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1NBQUMsRUFDbkMsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUM3QyxDQUFDO0lBQ04sQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFJO1FBQ1gsSUFBSSxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ3RCLElBQUksSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE1BQU0sRUFBRTtZQUNkLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUMxQixPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELENBQUMsQ0FBQyxDQUFDO1NBQ047UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQsY0FBYyxDQUFDLElBQUk7UUFDZixJQUFJLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDckIsSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsVUFBVSxFQUFFO1lBQ2xCLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM3QixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFDLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELHNCQUFzQjtRQUNsQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUM7UUFDckQsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs4R0F0TlEsZ0JBQWdCO2tHQUFoQixnQkFBZ0IsZ2VBSGQsQ0FBQyxrQkFBa0IsQ0FBQyxxRUE2Q3BCLFlBQVkscUVDL0QzQixtbGFBME1jO0FEN0lRO0lBQWpCLE1BQU0sQ0FBQyxRQUFRLENBQUM7aURBQWlDOzRGQXhDekMsZ0JBQWdCO2tCQVA1QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QixXQUFXLEVBQUUsMkJBQTJCO29CQUN4QyxTQUFTLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztvQkFDeEMsU0FBUyxFQUFFLENBQUMsa0JBQWtCLENBQUM7aUJBQ2xDOzJKQUtHLGNBQWM7c0JBRGIsS0FBSztnQkFJTixlQUFlO3NCQURkLEtBQUs7Z0JBSU4scUJBQXFCO3NCQURwQixLQUFLO2dCQUlOLFVBQVU7c0JBRFQsS0FBSztnQkFJTixVQUFVO3NCQURULEtBQUs7Z0JBSU4sYUFBYTtzQkFEWixLQUFLO2dCQUlOLG1CQUFtQjtzQkFEbEIsS0FBSztnQkFJTixtQkFBbUI7c0JBRGxCLEtBQUs7Z0JBSU4sVUFBVTtzQkFEVCxNQUFNO2dCQUlQLG1CQUFtQjtzQkFEbEIsTUFBTTtnQkFJUCx5QkFBeUI7c0JBRHhCLE1BQU07Z0JBUWtCLE9BQU8sTUFFUCxTQUFTO3NCQUFqQyxTQUFTO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ0Bhbmd1bGFyLXJlZHV4L3N0b3JlJztcblxuaW1wb3J0IHsgTmdiQWNjb3JkaW9uLCBOZ2JBY2NvcmRpb25Db25maWcgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gdHNjLWxpYnJhcnlcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvc3RvcmFnZS1zZXJ2aWNlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L2FwcGxpY2F0aW9uLXNlcnZpY2UnO1xuLy8gL3RzYy1saWJyYXJ5L1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2xpYi1zaWRlLW5hdicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NpZGUtbmF2LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zaWRlLW5hdi5jb21wb25lbnQuc2NzcyddLFxuICAgIHByb3ZpZGVyczogW05nYkFjY29yZGlvbkNvbmZpZ10sXG59KVxuXG5leHBvcnQgY2xhc3MgU2lkZU5hdkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBASW5wdXQoKVxuICAgIHNpZGViYXJUeXBlSW5wOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHNpZGViYXJBcnJheUlucDogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzaWRlYmFySGVhZGVyTGFiZWxJbnA6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgaGVhZGVyTG9nbzogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgZm9vdGVyTG9nbzogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgdG9nZ2xlU2lkZWJhcjogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgdG9nZ2xlU2V0dGluZ0RyYXdlcjogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgbGFuZGluZ1BhZ2VSb3V0ZUlucDogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgbWVudU91dHB1dDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHRvZ2dsZVNpZGViYXJHbG9iYWw6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIodHJ1ZSk7XG5cbiAgICBAT3V0cHV0KClcbiAgICB0b2dnbGVTZXR0aW5nRHJhd2VyR2xvYmFsOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKHRydWUpO1xuXG4gICAgc2lkZWJhclR5cGU6IHN0cmluZztcbiAgICBhcHBsaWNhdGlvbktleUlEOiBzdHJpbmc7XG4gICAgc2lkZWJhckFycmF5OiBhbnlbXSA9IFtdO1xuICAgIGFjdGl2ZUlEOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgQHNlbGVjdCgnY29uZmlnJykgcHVibGljIGNvbmZpZyQ6IE9ic2VydmFibGU8YW55PjtcblxuICAgIEBWaWV3Q2hpbGQoTmdiQWNjb3JkaW9uKSBhY2NvcmRpb246IE5nYkFjY29yZGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgcHVibGljIGFwcGxpY2F0aW9uU2VydmljZTogQXBwbGljYXRpb25TZXJ2aWNlLFxuICAgICkgeyB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbktleUlEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKFsnYXBwbGljYXRpb25LZXlJRCddKTtcblxuICAgICAgICB0aGlzLnNpZGViYXJUeXBlID0gdGhpcy5zaWRlYmFyVHlwZUlucDtcbiAgICAgICAgdGhpcy5zaWRlYmFyQXJyYXkgPSB0aGlzLnNpZGViYXJBcnJheUlucDtcblxuICAgICAgICB0aGlzLm9wZW5BY2NvcmRpb24oKTtcbiAgICAgICAgLy8gdGhpcy5oYW5kbGVBY3RpdmVUYWJPblJlZnJlc2goKTsgIC8qIFRPRE86IFNPTVlBIEFHUkFXQUwsIGFkZGVkIHRvIGhhbmRsZSBzZWxlY3RlZCB0YWIgb24gcmVmcmVzaCwgbm90IHdvcmtpbmcgcHJvcGVybHkgKi9cbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGlmIChjaGFuZ2VzLnNpZGViYXJBcnJheUlucCAmJiB0aGlzLnNpZGViYXJBcnJheUlucCkge1xuICAgICAgICAgICAgdGhpcy5vbk1lbnVDbGljayh0aGlzLnNpZGViYXJBcnJheUlucCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbk1lbnVDbGljayhtZW51KSB7XG4gICAgICAgIGlmIChtZW51Py5yb3V0ZSkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZShtZW51KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZW51LmR1YWxNZW51KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaWRlYmFyVHlwZSA9PSAnTEVGVCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNpZGViYXJBcnJheSA9IG1lbnUuZHVhbE1lbnU7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuQWNjb3JkaW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRNZW51ID0gdGhpcy5maW5kRGVmYXVsdExhbmRpbmdQYWdlKG1lbnUuZHVhbE1lbnUpO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRNZW51KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZShkZWZhdWx0TWVudSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zaWRlYmFyVHlwZSA9PSAnUklHSFQnKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWRNZW51ID0geyAuLi5tZW51IH07XG4gICAgICAgICAgICB0aGlzLm1lbnVPdXRwdXQuZW1pdChjbG9uZWRNZW51KTtcblxuICAgICAgICAgICAgdGhpcy50b2dnbGVTZXR0aW5nRHJhd2VyRnVuKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZpbmREZWZhdWx0TGFuZGluZ1BhZ2UobWVudUFycmF5KSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVudSBvZiBtZW51QXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChtZW51LmlzRGVmYXVsdExhbmRpbmdQYWdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbnU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZW51LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5maW5kRGVmYXVsdExhbmRpbmdQYWdlKG1lbnUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBiYWNrRnVuYyhtZW51KSB7XG4gICAgICAgIGlmIChtZW51Py5iYWNrTWVudUl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuc2lkZWJhckFycmF5ID0gbWVudS5iYWNrTWVudUl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWVudT8ubmF2aWdhdGVUb0xhbmRpbmdQYWdlKSB7XG4gICAgICAgICAgICBjb25zdCBsYW5kaW5nUGFnZUl0ZW0gPSBtZW51Py5iYWNrTWVudUl0ZW0uZmluZChpdGVtID0+IGl0ZW0uaXNMYW5kaW5nUGFnZSk7XG4gICAgICAgICAgICBpZiAobGFuZGluZ1BhZ2VJdGVtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZShsYW5kaW5nUGFnZUl0ZW0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3BlbkFjY29yZGlvbigpO1xuICAgIH1cblxuICAgIG9wZW5BY2NvcmRpb24oKSB7XG4gICAgICAgIGNvbnN0IG9wZW5BY2NvcmRpb25JdGVtcyA9IHRoaXMuc2lkZWJhckFycmF5Py5maWx0ZXIoaXRlbSA9PiBpdGVtPy50eXBlID09ICdBQ0NPUkRJT04nICYmIGl0ZW0/LmRlZmF1bHRTdGF0ZSA9PSAnT1BFTicpO1xuICAgICAgICB0aGlzLmFjdGl2ZUlEID0gb3BlbkFjY29yZGlvbkl0ZW1zPy5tYXAoaXRlbSA9PiBpdGVtPy5sYWJlbCk7XG4gICAgfVxuXG4gICAgY2hhbmdlQWNjb3JkaW9uU3RhdGUobWVudSkge1xuICAgICAgICB0aGlzLmFjY29yZGlvbi5jb2xsYXBzZUFsbCgpO1xuICAgICAgICB0aGlzLmFjdGl2ZUlEID0gbWVudS5sYWJlbDtcbiAgICAgICAgdGhpcy5hY2NvcmRpb24uZXhwYW5kKG1lbnUubGFiZWwpO1xuXG4gICAgICAgIGlmIChtZW51LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBtZW51LmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY2NvcmRpb24uZXhwYW5kKGNoaWxkLmxhYmVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQWN0aXZlVGFiT25SZWZyZXNoKCkge1xuICAgICAgICB0aGlzLnNpZGViYXJBcnJheS5mb3JFYWNoKG1lbnUgPT4ge1xuICAgICAgICAgICAgaWYgKG1lbnUuZHVhbE1lbnUpIHtcbiAgICAgICAgICAgICAgICBtZW51LmR1YWxNZW51LmZvckVhY2goZHVhbE1lbnVJdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGR1YWxNZW51SXRlbS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHVhbE1lbnVJdGVtLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZD8ucm91dGUgPT0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaXNBY3RpdmVSb3V0ZShtZW51KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghbWVudSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lbnUuYWN0aXZlTGluaykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYXJlbnRMaW5rIG9mIG1lbnUuYWN0aXZlTGluaykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvdXRlci5pc0FjdGl2ZShwYXJlbnRMaW5rLCBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG5hdmlnYXRlKG1lbnUpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW1xuICAgICAgICAgICAgbWVudT8ucm91dGUsXG4gICAgICAgICAgICB7IG91dGxldHM6IHRoaXMuZ2V0T3V0bGV0cyhtZW51KSB9XSxcbiAgICAgICAgICAgIHsgcXVlcnlQYXJhbXM6IHRoaXMuZ2V0UXVlcnlQYXJhbXMobWVudSkgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldE91dGxldHMobWVudSkge1xuICAgICAgICBsZXQgb3V0bGV0czogYW55ID0ge307XG4gICAgICAgIGlmIChtZW51Py5vdXRsZXQpIHtcbiAgICAgICAgICAgIG1lbnU/Lm91dGxldC5mb3JFYWNoKG91dGxldCA9PiB7XG4gICAgICAgICAgICAgICAgb3V0bGV0c1tvdXRsZXRbJ291dGxldCddXSA9IG91dGxldFsncm91dGUnXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRsZXRzO1xuICAgIH1cblxuICAgIGdldFF1ZXJ5UGFyYW1zKG1lbnUpIHtcbiAgICAgICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgICAgIGlmIChtZW51Py5xdWVyeVBhcmFtKSB7XG4gICAgICAgICAgICBtZW51Py5xdWVyeVBhcmFtLmZvckVhY2gocGFyYW0gPT4ge1xuICAgICAgICAgICAgICAgIHBhcmFtc1twYXJhbVsna2V5J11dID0gcGFyYW1bJ3BhcmFtJ107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cblxuICAgIG5hdmlnYXRlVG9MYW5kaW5nUGFnZSgpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3RoaXMubGFuZGluZ1BhZ2VSb3V0ZUlucF0pO1xuICAgIH1cblxuICAgIHRvZ2dsZVNpZGViYXJGdW4oKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlU2lkZWJhciA9ICF0aGlzLnRvZ2dsZVNpZGViYXI7XG4gICAgICAgIHRoaXMudG9nZ2xlU2lkZWJhckdsb2JhbC5lbWl0KHRoaXMudG9nZ2xlU2lkZWJhcik7XG4gICAgfVxuXG4gICAgdG9nZ2xlU2V0dGluZ0RyYXdlckZ1bigpIHtcbiAgICAgICAgdGhpcy50b2dnbGVTZXR0aW5nRHJhd2VyID0gIXRoaXMudG9nZ2xlU2V0dGluZ0RyYXdlcjtcbiAgICAgICAgdGhpcy50b2dnbGVTZXR0aW5nRHJhd2VyR2xvYmFsLmVtaXQodGhpcy50b2dnbGVTZXR0aW5nRHJhd2VyKTtcbiAgICB9XG5cbn0iLCI8ZGl2XG4gICAgW25nQ2xhc3NdPVwiW3NpZGViYXJUeXBlID09ICdMRUZUJyA/ICdhcHAtc2lkZWJhciBzaWRlYmFyLXNoYWRvdyAnIDogJ3NldHRpbmctc2lkZWJhciBzZXR0aW5nLWRyYXdlci13cmFwcGVyJywgdG9nZ2xlU2V0dGluZ0RyYXdlciA/ICdzZXR0aW5nLWRyYXdlci1vcGVuJyA6ICcnXVwiPlxuXG4gICAgPGRpdiBjbGFzcz1cImFwcC1oZWFkZXJfX2xvZ28gc2VwYXJhdG9yLWJvdHRvbVwiICpuZ0lmPVwiaGVhZGVyTG9nb1wiPlxuICAgICAgICA8ZGl2IChjbGljayk9XCJuYXZpZ2F0ZVRvTGFuZGluZ1BhZ2UoKVwiIGNsYXNzPVwiY3Vyc29yUG9pbnRlclwiICpuZ0lmPVwiIXRvZ2dsZVNpZGViYXJcIj5cbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJoZWFkZXJQcm9kdWN0TG9nbyBtcy0xXCJcbiAgICAgICAgICAgICAgICBbc3JjXT1cImFwcGxpY2F0aW9uU2VydmljZS5nZXRBcHBsaWNhdGlvbkxvZ29XaXRoU2lkZU5hbWUoYXBwbGljYXRpb25LZXlJRClcIiBhbHQ9XCJBcHBsaWNhdGlvbiBsb2dvXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfX3BhbmUgbXMtYXV0b1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJoYW1idXJnZXIgaGFtYnVyZ2VyLS1lbGFzdGljXCIgW25nQ2xhc3NdPVwieydpcy1hY3RpdmUnIDogIXRvZ2dsZVNpZGViYXJ9XCJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwidG9nZ2xlU2lkZWJhckZ1bigpO1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaGFtYnVyZ2VyLWJveFwiPjxzcGFuIGNsYXNzPVwiaGFtYnVyZ2VyLWlubmVyXCI+PC9zcGFuPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJkcmF3ZXItbmF2LWJ0blwiICpuZ0lmPVwiIWhlYWRlckxvZ29cIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJoYW1idXJnZXIgaGFtYnVyZ2VyLS1lbGFzdGljXCIgW25nQ2xhc3NdPVwieydpcy1hY3RpdmUnIDogdG9nZ2xlU2V0dGluZ0RyYXdlcn1cIlxuICAgICAgICAgICAgKGNsaWNrKT1cInRvZ2dsZVNldHRpbmdEcmF3ZXJGdW4oKVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJoYW1idXJnZXItYm94XCI+PHNwYW4gY2xhc3M9XCJoYW1idXJnZXItaW5uZXJcIj48L3NwYW4+PC9zcGFuPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJhcHAtc2lkZWJhci1jb250ZW50IHB0LTJcIiBbbmdDbGFzc109XCJ7J2RyYXdlci1jb250ZW50LXdyYXBwZXInOiBzaWRlYmFyVHlwZSA9PSAnUklHSFQnfVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYXBwLXNpZGViYXItc2Nyb2xsXCI+XG4gICAgICAgICAgICA8cGVyZmVjdC1zY3JvbGxiYXIgW2NvbmZpZ109XCJ7d2hlZWxQcm9wYWdhdGlvbjogZmFsc2V9XCIgY2xhc3M9XCJzY3JvbGwtZml4XCIgW3Njcm9sbEluZGljYXRvcnNdPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2LXNpZGViYXItbWVudVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNtLWxpc3RcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJzaWRlYmFySGVhZGVyTGFiZWxJbnBcIiBbbmdDbGFzc109XCJ7J2JvdHRvbU1hcmdpbic6IHNpZGViYXJIZWFkZXJMYWJlbElucH1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZ3LWJvbGQgbXMtMiBmcy00XCI+e3sgc2lkZWJhckhlYWRlckxhYmVsSW5wIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nRm9yPVwibGV0IG1lbnUgb2Ygc2lkZWJhckFycmF5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiF0b2dnbGVTaWRlYmFyOyBlbHNlIGNsb3NlZFNpZGViYXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFtZW51LmNoaWxkcmVuICYmICFtZW51LmlzU2lkZWJhckhlYWRlckxhYmVsOyBlbHNlIGNoaWxkcmVuVmlld1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqaXNSZW5kZXJGZWF0dXJlPVwibWVudT8uZmVhdHVyZUtleUlEXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqaXNSZW5kZXJSQkFDPVwibWVudT8ucmVzb3VyY2VQZXJtaXNzaW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c20tbGluayBtYi0xXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnbWItMyc6IG1lbnUuaXNCYWNrQnV0dG9uLCAnY3VzdG9tUGFkZGluZyc6ICFtZW51Py5pY29uLCAnc2VsZWN0ZWQnOiBpc0FjdGl2ZVJvdXRlKG1lbnUpfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwibWVudS5pc0JhY2tCdXR0b24gPyBiYWNrRnVuYyhtZW51KSA6IG9uTWVudUNsaWNrKG1lbnUpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckxpbmtBY3RpdmU9XCJhY3RpdmUtaXRlbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbWF0VG9vbHRpcF09XCJtZW51Py5sYWJlbD8ubGVuZ3RoPjE4PyBtZW51LmxhYmVsOiAnJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRUb29sdGlwUG9zaXRpb249XCJsZWZ0XCIgbWF0VG9vbHRpcENsYXNzPVwic2lkZUJhclRvb2x0aXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIHZzbS1pY29uIGljb24gbWUtM1wiPiB7e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51Py5pY29uIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnZnctYm9sZCBmcy00JzogbWVudS5pc1NpZGViYXJIZWFkZXJMYWJlbCwgJ2Z3LWJvbGQnOiBpc0FjdGl2ZVJvdXRlKG1lbnUpfVwiPnt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnU/LmxhYmVsIHwgZG90ZG90ZG90OjE4IH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBzaG93UmlnaHRBcnJvd09uSG92ZXIgbXMtMlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwibWVudT8uZHVhbE1lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dfY2lyY2xlX3JpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjY2hpbGRyZW5WaWV3PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwibWVudS50eXBlID09ICdBQ0NPUkRJT04nOyBlbHNlIG9wZW5NZW51Vmlld1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJhY2NvcmRpb25UZW1wbGF0ZTsgY29udGV4dDogeyBhY2NvcmRpb25Db250ZW50OiBtZW51IH1cIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI29wZW5NZW51Vmlldz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3Blbk1lbnVIZWFkZXIgdnNtLXRpdGxlIG1iLTJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J2Z3LWJvbGQgZnMtNCc6IG1lbnUuaXNTaWRlYmFySGVhZGVyTGFiZWx9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW21hdFRvb2x0aXBdPVwibWVudT8ubGFiZWw/Lmxlbmd0aD4xOD8gbWVudS5sYWJlbDogJydcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRUb29sdGlwUG9zaXRpb249XCJsZWZ0XCIgbWF0VG9vbHRpcENsYXNzPVwic2lkZUJhclRvb2x0aXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgbWVudT8ubGFiZWwgfCBkb3Rkb3Rkb3Q6MTggfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2ICpuZ0Zvcj1cImxldCBvcGVuTWVudUNoaWxkcmVuIG9mIG1lbnUuY2hpbGRyZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqaXNSZW5kZXJGZWF0dXJlPVwib3Blbk1lbnVDaGlsZHJlbj8uZmVhdHVyZUtleUlEXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICppc1JlbmRlclJCQUM9XCJvcGVuTWVudUNoaWxkcmVuPy5yZXNvdXJjZVBlcm1pc3Npb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInZzbS1saW5rIG1iLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J3NlbGVjdGVkJzogaXNBY3RpdmVSb3V0ZShvcGVuTWVudUNoaWxkcmVuKX1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJMaW5rQWN0aXZlPVwiYWN0aXZlLWl0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwibmF2aWdhdGUob3Blbk1lbnVDaGlsZHJlbilcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbWF0VG9vbHRpcF09XCJvcGVuTWVudUNoaWxkcmVuPy5sYWJlbD8ubGVuZ3RoPjE4PyBvcGVuTWVudUNoaWxkcmVuLmxhYmVsOiAnJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdFRvb2x0aXBQb3NpdGlvbj1cImxlZnRcIiBtYXRUb29sdGlwQ2xhc3M9XCJzaWRlQmFyVG9vbHRpcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIGljb24gbXMtM1wiPiB7e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5NZW51Q2hpbGRyZW4/Lmljb24gfX0gPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtcy0zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J2Z3LWJvbGQnOiBpc0FjdGl2ZVJvdXRlKG9wZW5NZW51Q2hpbGRyZW4pfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbk1lbnVDaGlsZHJlbj8ubGFiZWwgfCBkb3Rkb3Rkb3Q6MTggfX0gPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI2Nsb3NlZFNpZGViYXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCIhbWVudS5jaGlsZHJlbiAmJiAhbWVudS5pc1NpZGViYXJIZWFkZXJMYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiY2xvc2VkU2lkZWJhclRlbXBsYXRlOyBjb250ZXh0OiB7IG1lbnVJdGVtOiBtZW51IH1cIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGNoaWxkIG9mIG1lbnUuY2hpbGRyZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhY2hpbGQuc3ViTGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiY2xvc2VkU2lkZWJhclRlbXBsYXRlOyBjb250ZXh0OiB7IG1lbnVJdGVtOiBjaGlsZCB9XCI+PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9wZXJmZWN0LXNjcm9sbGJhcj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiYXBwLWhlYWRlcl9fbG9nbyBzZXBhcmF0b3ItdG9wXCIgKm5nSWY9XCJmb290ZXJMb2dvXCI+XG4gICAgICAgIDxpbWcgY2xhc3M9XCJ0c2NMb2dvV2l0aE5hbWVcIiBbbmdDbGFzc109XCJ7J2Qtbm9uZSc6IHRvZ2dsZVNpZGViYXJ9XCJcbiAgICAgICAgICAgIHNyYz1cIi4uL2Fzc2V0cy9pbWFnZXMvYXBwbGljYXRpb24tbG9nby90c2Mtd2l0aC1uYW1lLnBuZ1wiIC8+XG4gICAgICAgIDxpbWcgY2xhc3M9XCJ0c2NMb2dvV2l0aG91dE5hbWVcIiBbbmdDbGFzc109XCJ7J2Qtbm9uZSc6ICF0b2dnbGVTaWRlYmFyfVwiXG4gICAgICAgICAgICBzcmM9XCIuLi9hc3NldHMvaW1hZ2VzL2FwcGxpY2F0aW9uLWxvZ28vdHNjLXdpdGhvdXQtbmFtZS5wbmdcIiAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxkaXYgY2xhc3M9XCJzZXR0aW5nLWRyYXdlci1vdmVybGF5XCIgKGNsaWNrKT1cInRvZ2dsZVNldHRpbmdEcmF3ZXJGdW4oKVwiPjwvZGl2PlxuXG48bmctdGVtcGxhdGUgI2FjY29yZGlvblRlbXBsYXRlIGxldC1hY2NvcmRpb25Db250ZW50PVwiYWNjb3JkaW9uQ29udGVudFwiPlxuICAgIDxuZ2ItYWNjb3JkaW9uIFtkZXN0cm95T25IaWRlXT1cInRydWVcIiAjYWNjPVwibmdiQWNjb3JkaW9uXCIgW2FjdGl2ZUlkc109XCJhY3RpdmVJRFwiPlxuICAgICAgICA8bmdiLXBhbmVsIFtpZF09XCJhY2NvcmRpb25Db250ZW50LmxhYmVsXCI+XG5cbiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBuZ2JQYW5lbEhlYWRlcj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG5nYlBhbmVsVG9nZ2xlIHJvdXRlckxpbmtBY3RpdmU9XCJhY3RpdmUtaXRlbVwiIGNsYXNzPVwidnNtLWxpbmtcIlxuICAgICAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J2N1c3RvbVBhZGRpbmcnOiAhYWNjb3JkaW9uQ29udGVudD8uaWNvbn1cIlxuICAgICAgICAgICAgICAgICAgICBbbWF0VG9vbHRpcF09XCJhY2NvcmRpb25Db250ZW50Py5sYWJlbD8ubGVuZ3RoPjE4PyBhY2NvcmRpb25Db250ZW50LmxhYmVsOiAnJ1wiXG4gICAgICAgICAgICAgICAgICAgIG1hdFRvb2x0aXBQb3NpdGlvbj1cImxlZnRcIiBtYXRUb29sdGlwQ2xhc3M9XCJzaWRlQmFyVG9vbHRpcFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIGljb24gbWUtM1wiPnt7IGFjY29yZGlvbkNvbnRlbnQ/Lmljb24gfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZ3LW5vcm1hbFwiPnt7IGFjY29yZGlvbkNvbnRlbnQ/LmxhYmVsIHwgZG90ZG90ZG90OjE4IH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ2c20tYXJyb3dcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuXG4gICAgICAgICAgICA8bmctdGVtcGxhdGUgbmdiUGFuZWxDb250ZW50PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c20tZHJvcGRvd25cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZzbS1saXN0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBzdWJtZW51SXRlbSBvZiBhY2NvcmRpb25Db250ZW50Py5jaGlsZHJlblwiPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFzdWJtZW51SXRlbS5zdWJMYWJlbDsgZWxzZSBzdWJNZW51U3ViSGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKmlzUmVuZGVyRmVhdHVyZT1cInN1Ym1lbnVJdGVtPy5mZWF0dXJlS2V5SURcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKmlzUmVuZGVyUkJBQz1cInN1Ym1lbnVJdGVtPy5yZXNvdXJjZVBlcm1pc3Npb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInZzbS1saW5rIG1iLTEgbXMtM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnc2VsZWN0ZWQnOiBpc0FjdGl2ZVJvdXRlKHN1Ym1lbnVJdGVtKX1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJMaW5rQWN0aXZlPVwiYWN0aXZlLWl0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwiY2hhbmdlQWNjb3JkaW9uU3RhdGUoYWNjb3JkaW9uQ29udGVudCk7IG5hdmlnYXRlKHN1Ym1lbnVJdGVtKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFttYXRUb29sdGlwXT1cInN1Ym1lbnVJdGVtPy5sYWJlbD8ubGVuZ3RoPjE4PyBzdWJtZW51SXRlbS5sYWJlbDogJydcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRUb29sdGlwUG9zaXRpb249XCJsZWZ0XCIgbWF0VG9vbHRpcENsYXNzPVwic2lkZUJhclRvb2x0aXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBpY29uIG1lLTNcIj4ge3sgc3VibWVudUl0ZW0/Lmljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gW25nQ2xhc3NdPVwieydmdy1ib2xkJzogaXNBY3RpdmVSb3V0ZShvcGVuTWVudUNoaWxkcmVuKX1cIj4ge3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtZW51SXRlbT8ubGFiZWwgfCBkb3Rkb3Rkb3Q6MTh9fSA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjc3ViTWVudVN1YkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1zLTQgdGV4dC1zZWNvbmRhcnkgZnctYm9sZCBtYi0yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFttYXRUb29sdGlwXT1cInN1Ym1lbnVJdGVtPy5sYWJlbD8ubGVuZ3RoPjE4PyBzdWJtZW51SXRlbS5sYWJlbDogJydcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0VG9vbHRpcFBvc2l0aW9uPVwibGVmdFwiIG1hdFRvb2x0aXBDbGFzcz1cInNpZGVCYXJUb29sdGlwXCI+IHt7IHN1Ym1lbnVJdGVtLnN1YkxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvdGRvdGRvdDoxOH19IDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgIDwvbmdiLXBhbmVsPlxuICAgIDwvbmdiLWFjY29yZGlvbj5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZSAjY2xvc2VkU2lkZWJhclRlbXBsYXRlIGxldC1tZW51SXRlbT1cIm1lbnVJdGVtXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqaXNSZW5kZXJGZWF0dXJlPVwibWVudUl0ZW0/LmZlYXR1cmVLZXlJRFwiPlxuICAgICAgICA8bmctY29udGFpbmVyICppc1JlbmRlclJCQUM9XCJtZW51SXRlbT8ucmVzb3VyY2VQZXJtaXNzaW9uXCI+XG4gICAgICAgICAgICA8YSBjbGFzcz1cInZzbS1saW5rIG1iLTEgY2xvc2VkU2lkZUJhckljb25QYWRkaW5nXCIgW25nQ2xhc3NdPVwieydzZWxlY3RlZCc6IGlzQWN0aXZlUm91dGUobWVudUl0ZW0pfVwiXG4gICAgICAgICAgICAgICAgcm91dGVyTGlua0FjdGl2ZT1cImFjdGl2ZS1pdGVtXCJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwibWVudUl0ZW0uaXNCYWNrQnV0dG9uID8gYmFja0Z1bmMobWVudUl0ZW0pIDogb25NZW51Q2xpY2sobWVudUl0ZW0pOyBuYXZpZ2F0ZShtZW51SXRlbSlcIlxuICAgICAgICAgICAgICAgIFttYXRUb29sdGlwXT1cIm1lbnVJdGVtPy5sYWJlbFwiIG1hdFRvb2x0aXBQb3NpdGlvbj1cImxlZnRcIiBtYXRUb29sdGlwQ2xhc3M9XCJzaWRlQmFyVG9vbHRpcFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCB2c20taWNvbiBpY29uIG1lLTNcIj4ge3sgbWVudUl0ZW0/Lmljb24gfX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbjwvbmctdGVtcGxhdGU+Il19