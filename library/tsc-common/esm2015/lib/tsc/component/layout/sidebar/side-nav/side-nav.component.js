import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { select } from '@angular-redux/store';
import { NgbAccordion, NgbAccordionConfig } from '@ng-bootstrap/ng-bootstrap';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/application-service";
import * as i4 from "ngx-perfect-scrollbar";
import * as i5 from "@ng-bootstrap/ng-bootstrap";
import * as i6 from "@angular/common";
import * as i7 from "@library/feature-service";
import * as i8 from "@library/rbac-service";
import * as i9 from "@angular/material/tooltip";
import * as i10 from "../../../../service/ellipsis-pipe.service";
// /tsc-library/
export class SideNavComponent {
    constructor(router, storageService, applicationService) {
        this.router = router;
        this.storageService = storageService;
        this.applicationService = applicationService;
        this.menuOutput = new EventEmitter();
        this.toggleSidebarGlobal = new EventEmitter(true);
        this.toggleSettingDrawerGlobal = new EventEmitter(true);
        this.sidebarArray = [];
        this.activeID = [];
        this.titleCharLength = 25;
        this.menuItemCharLength = 20;
    }
    ngOnInit() {
        this.applicationKeyID = this.storageService.getStorage(['applicationKeyID']);
        this.sidebarType = this.sidebarTypeInp;
        this.sidebarArray = this.sidebarArrayInp;
        this.openAccordion();
        if (this.sidebarType == 'LEFT' && !(this.router.url.includes('dashboard') && this.applicationKeyID == ApplicationKeyID.NETZERO_KEY_ID)) {
            this.openCurrentActiveRouteMenu();
        }
        // this.handleActiveTabOnRefresh();  /* TODO: SOMYA AGRAWAL, added to handle selected tab on refresh, not working properly */
    }
    openCurrentActiveRouteMenu() {
        let currentSideBar = null;
        this.sidebarArray.forEach(menu => {
            if (menu === null || menu === void 0 ? void 0 : menu.mainRoute) {
                menu.mainRoute.forEach(route => {
                    if (this.router.url.includes(route)) {
                        currentSideBar = menu;
                    }
                });
                if (currentSideBar != null) {
                    this.sidebarArray = [currentSideBar];
                    this.onMenuClick(currentSideBar);
                }
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.sidebarArrayInp && this.sidebarArrayInp) {
            this.onMenuClick(this.sidebarArrayInp);
        }
    }
    onMenuClick(menu) {
        if (menu === null || menu === void 0 ? void 0 : menu.route) {
            this.navigate(menu);
            return;
        }
        if (this.sidebarType == 'LEFT') {
            if (menu.dualMenu) {
                this.sidebarArray = menu.dualMenu;
                let shouldNavigateToDefault = true;
                if (menu === null || menu === void 0 ? void 0 : menu.mainRoute) {
                    menu.mainRoute.forEach(route => {
                        if (this.router.url.includes(route)) {
                            shouldNavigateToDefault = false;
                        }
                    });
                }
                if (shouldNavigateToDefault) {
                    const defaultMenu = this.findDefaultLandingPage(menu.dualMenu);
                    if (defaultMenu) {
                        this.navigate(defaultMenu);
                    }
                }
                this.openAccordion();
            }
        }
        else {
            const clonedMenu = Object.assign({}, menu);
            this.menuOutput.emit(clonedMenu);
            this.toggleSettingDrawerFun();
        }
    }
    findDefaultLandingPage(menuArray) {
        for (const menu of menuArray) {
            if (menu.isDefaultLandingPage) {
                return menu;
            }
            if (menu.children) {
                const result = this.findDefaultLandingPage(menu.children);
                if (result) {
                    return result;
                }
            }
        }
        return null;
    }
    backFunc(menu) {
        if (menu === null || menu === void 0 ? void 0 : menu.backMenuItem) {
            this.sidebarArray = menu.backMenuItem;
        }
        if (menu === null || menu === void 0 ? void 0 : menu.navigateToLandingPage) {
            const landingPageItem = menu === null || menu === void 0 ? void 0 : menu.backMenuItem.find(item => item.isLandingPage);
            if (landingPageItem) {
                this.navigate(landingPageItem);
                return;
            }
        }
        this.openAccordion();
    }
    openAccordion() {
        var _a;
        const openAccordionItems = (_a = this.sidebarArray) === null || _a === void 0 ? void 0 : _a.filter(item => (item === null || item === void 0 ? void 0 : item.type) == 'ACCORDION' && (item === null || item === void 0 ? void 0 : item.defaultState) == 'OPEN');
        this.activeID = openAccordionItems === null || openAccordionItems === void 0 ? void 0 : openAccordionItems.map(item => item === null || item === void 0 ? void 0 : item.label);
    }
    changeAccordionState(menu) {
        this.accordion.collapseAll();
        this.activeID = menu.label;
        this.accordion.expand(menu.label);
        if (menu.children) {
            menu.children.forEach((child) => {
                this.accordion.expand(child.label);
            });
        }
    }
    handleActiveTabOnRefresh() {
        this.sidebarArray.forEach(menu => {
            if (menu.dualMenu) {
                menu.dualMenu.forEach(dualMenuItem => {
                    if (dualMenuItem.children) {
                        dualMenuItem.children.forEach(child => {
                            if ((child === null || child === void 0 ? void 0 : child.route) == window.location.pathname) {
                                child.active = true;
                            }
                        });
                    }
                });
            }
        });
    }
    isActiveRoute(menu) {
        if (!menu) {
            return false;
        }
        if (menu.activeLink) {
            for (const parentLink of menu.activeLink) {
                if (this.router.isActive(parentLink, false)) {
                    return true;
                }
            }
        }
        return false;
    }
    navigate(menu) {
        this.router.navigate([
            menu === null || menu === void 0 ? void 0 : menu.route,
            { outlets: this.getOutlets(menu) }
        ], { queryParams: this.getQueryParams(menu) });
    }
    getOutlets(menu) {
        let outlets = {};
        if (menu === null || menu === void 0 ? void 0 : menu.outlet) {
            menu === null || menu === void 0 ? void 0 : menu.outlet.forEach(outlet => {
                outlets[outlet['outlet']] = outlet['route'];
            });
        }
        return outlets;
    }
    getQueryParams(menu) {
        let params = {};
        if (menu === null || menu === void 0 ? void 0 : menu.queryParam) {
            menu === null || menu === void 0 ? void 0 : menu.queryParam.forEach(param => {
                params[param['key']] = param['param'];
            });
        }
        return params;
    }
    navigateToLandingPage() {
        this.router.navigate([this.landingPageRouteInp]);
    }
    toggleSidebarFun() {
        this.toggleSidebar = !this.toggleSidebar;
        this.toggleSidebarGlobal.emit(this.toggleSidebar);
    }
    toggleSettingDrawerFun() {
        this.toggleSettingDrawer = false;
        this.toggleSettingDrawerGlobal.emit(this.toggleSettingDrawer);
    }
}
SideNavComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SideNavComponent, deps: [{ token: i1.Router }, { token: i2.StorageService }, { token: i3.ApplicationService }], target: i0.ɵɵFactoryTarget.Component });
SideNavComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SideNavComponent, selector: "lib-side-nav", inputs: { sidebarTypeInp: "sidebarTypeInp", sidebarArrayInp: "sidebarArrayInp", sidebarHeaderLabelInp: "sidebarHeaderLabelInp", headerLogo: "headerLogo", footerLogo: "footerLogo", toggleSidebar: "toggleSidebar", toggleSettingDrawer: "toggleSettingDrawer", landingPageRouteInp: "landingPageRouteInp" }, outputs: { menuOutput: "menuOutput", toggleSidebarGlobal: "toggleSidebarGlobal", toggleSettingDrawerGlobal: "toggleSettingDrawerGlobal" }, providers: [NgbAccordionConfig], viewQueries: [{ propertyName: "accordion", first: true, predicate: NgbAccordion, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n    [ngClass]=\"[sidebarType == 'LEFT' ? 'app-sidebar sidebar-shadow ' : 'setting-sidebar setting-drawer-wrapper', toggleSettingDrawer ? 'setting-drawer-open' : '']\">\n\n    <div class=\"app-header__logo separator-bottom\" *ngIf=\"headerLogo\">\n        <div (click)=\"navigateToLandingPage()\" class=\"cursorPointer\" *ngIf=\"!toggleSidebar\">\n            <img class=\"headerProductLogo ms-1\"\n                [src]=\"applicationService.getApplicationLogoWithSideName(applicationKeyID)\" alt=\"Application logo\" />\n        </div>\n        <div class=\"header__pane ms-auto\">\n            <button type=\"button\" class=\"hamburger hamburger--elastic\" [ngClass]=\"{'is-active' : !toggleSidebar}\"\n                (click)=\"toggleSidebarFun();\">\n                <span class=\"hamburger-box\"><span class=\"hamburger-inner\"></span></span>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"drawer-nav-btn\" *ngIf=\"!headerLogo\">\n        <button type=\"button\" class=\"hamburger hamburger--elastic\" [ngClass]=\"{'is-active' : toggleSettingDrawer}\"\n            (click)=\"toggleSettingDrawerFun()\">\n            <span class=\"hamburger-box\"><span class=\"hamburger-inner\"></span></span>\n        </button>\n    </div>\n\n    <div class=\"app-sidebar-content pt-2\" [ngClass]=\"{'drawer-content-wrapper': sidebarType == 'RIGHT'}\">\n        <div class=\"app-sidebar-scroll\">\n            <perfect-scrollbar [config]=\"{wheelPropagation: false}\" class=\"scroll-fix\" [scrollIndicators]=\"true\">\n                <div class=\"v-sidebar-menu\">\n                    <div class=\"vsm-list\">\n                        <div *ngIf=\"sidebarHeaderLabelInp\" [ngClass]=\"{'bottomMargin': sidebarHeaderLabelInp}\">\n                            <span class=\"fw-bold ms-2 fs-4\">{{ sidebarHeaderLabelInp }}</span>\n                        </div>\n\n                        <div *ngFor=\"let menu of sidebarArray\">\n                            <ng-container *ngIf=\"!toggleSidebar; else closedSidebar\">\n                                <ng-container *ngIf=\"!menu.children && !menu.isSidebarHeaderLabel; else childrenView\">\n                                    <ng-container *isRenderFeature=\"menu?.featureKeyID\">\n                                        <ng-container *isRenderRBAC=\"menu?.resourcePermission\">\n                                            <div class=\"vsm-link mb-1\"\n                                                [ngClass]=\"{'mb-3': menu.isBackButton, 'customPadding': !menu?.icon, 'selected': isActiveRoute(menu)}\"\n                                                (click)=\"menu.isBackButton ? backFunc(menu) : onMenuClick(menu)\"\n                                                routerLinkActive=\"active-item\"\n                                                [matTooltip]=\"menu?.label?.length> menuItemCharLength? menu.label: ''\"\n                                                matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                                                <div class=\"d-flex align-items-center\">\n                                                    <span class=\"material-symbols-outlined vsm-icon icon me-3\">\n                                                        {{ menu?.icon }}\n                                                    </span>\n                                                    <span\n                                                        [ngClass]=\"{'fw-bold fs-4': menu.isSidebarHeaderLabel, 'fw-bold': isActiveRoute(menu)}\">\n                                                        {{ menu?.label | dotdotdot: menuItemCharLength }}\n                                                    </span>\n                                                    <span class=\"material-symbols-outlined showRightArrowOnHover ms-2\"\n                                                        *ngIf=\"menu?.dualMenu\">\n                                                        arrow_circle_right\n                                                    </span>\n                                                </div>\n                                            </div>\n                                        </ng-container>\n                                    </ng-container>\n                                </ng-container>\n\n                                <ng-template #childrenView>\n                                    <ng-container *ngIf=\"menu.type == 'ACCORDION'; else openMenuView\">\n                                        <ng-container\n                                            *ngTemplateOutlet=\"accordionTemplate; context: { accordionContent: menu }\"></ng-container>\n                                    </ng-container>\n\n                                    <ng-template #openMenuView>\n                                        <div class=\"openMenuHeader vsm-title mb-2\" [ngClass]=\"{'fw-bold fs-4': menu.isSidebarHeaderLabel}\"\n                                            [matTooltip]=\"menu?.label?.length> titleCharLength? menu.label: ''\"\n                                            matTooltipPosition=\"right\" matTooltipClass=\"sideBarTooltip\">\n                                            {{ menu?.label | dotdotdot: titleCharLength }}\n                                        </div>\n                                        <div *ngFor=\"let openMenuChildren of menu.children\">\n                                            <ng-container *isRenderFeature=\"openMenuChildren?.featureKeyID\">\n                                                <ng-container *isRenderRBAC=\"openMenuChildren?.resourcePermission\">\n                                                    <a class=\"vsm-link mb-1\"\n                                                        [ngClass]=\"{'selected': isActiveRoute(openMenuChildren)}\"\n                                                        routerLinkActive=\"active-item\"\n                                                        (click)=\"navigate(openMenuChildren)\"\n                                                        [matTooltip]=\"openMenuChildren?.label?.length> menuItemCharLength? openMenuChildren.label: ''\"\n                                                        matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                                                        <div class=\"d-flex align-items-center\">\n                                                            <span class=\"material-symbols-outlined icon ms-3\">\n                                                                {{ openMenuChildren?.icon }}\n                                                            </span>\n                                                            <span class=\"ms-3\"\n                                                                [ngClass]=\"{'fw-bold': isActiveRoute(openMenuChildren)}\">\n                                                                {{ openMenuChildren?.label | dotdotdot: menuItemCharLength }}\n                                                            </span>\n                                                        </div>\n                                                    </a>\n                                                </ng-container>\n                                            </ng-container>\n                                        </div>\n                                    </ng-template>\n\n                                </ng-template>\n                            </ng-container>\n\n                            <ng-template #closedSidebar>\n                                <div *ngIf=\"!menu.children && !menu.isSidebarHeaderLabel\">\n                                    <ng-container\n                                        *ngTemplateOutlet=\"closedSidebarTemplate; context: { menuItem: menu }\"></ng-container>\n                                </div>\n                                <ng-container *ngFor=\"let child of menu.children\">\n                                    <ng-container *ngIf=\"!child.subLabel\">\n                                        <ng-container\n                                            *ngTemplateOutlet=\"closedSidebarTemplate; context: { menuItem: child }\"></ng-container>\n                                    </ng-container>\n                                </ng-container>\n                            </ng-template>\n\n                        </div>\n                    </div>\n                </div>\n            </perfect-scrollbar>\n        </div>\n    </div>\n\n    <div class=\"app-header__logo separator-top\" *ngIf=\"footerLogo\">\n        <img class=\"tscLogoWithName\" [ngClass]=\"{'d-none': toggleSidebar}\"\n            src=\"../assets/images/application-logo/tsc-with-name.png\" />\n        <img class=\"tscLogoWithoutName\" [ngClass]=\"{'d-none': !toggleSidebar}\"\n            src=\"../assets/images/application-logo/tsc-without-name.png\" />\n    </div>\n</div>\n\n<div class=\"setting-drawer-overlay\" (click)=\"toggleSettingDrawerFun()\"></div>\n\n<ng-template #accordionTemplate let-accordionContent=\"accordionContent\">\n    <ngb-accordion [destroyOnHide]=\"true\" #acc=\"ngbAccordion\" [activeIds]=\"activeID\">\n        <ngb-panel [id]=\"accordionContent.label\">\n\n            <ng-template ngbPanelHeader>\n                <button ngbPanelToggle routerLinkActive=\"active-item\" class=\"vsm-link\"\n                    [ngClass]=\"{'customPadding': !accordionContent?.icon, 'selected': isActiveRoute(accordionContent)}\"\n                    [matTooltip]=\"accordionContent?.label?.length> titleCharLength? accordionContent.label: ''\"\n                    matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                    <div class=\"d-flex align-items-center\">\n                        <span class=\"material-symbols-outlined icon me-3\">{{ accordionContent?.icon }}</span>\n                        <span class=\"fw-normal\">{{ accordionContent?.label | dotdotdot: titleCharLength }}</span>\n                    </div>\n                    <i class=\"vsm-arrow\"></i>\n                </button>\n            </ng-template>\n\n            <ng-template ngbPanelContent>\n                <div class=\"vsm-dropdown\">\n                    <div class=\"vsm-list\">\n                        <ng-container *ngFor=\"let submenuItem of accordionContent?.children\">\n\n                            <ng-container *ngIf=\"!submenuItem.subLabel; else subMenuSubHeader\">\n                                <ng-container *isRenderFeature=\"submenuItem?.featureKeyID\">\n                                    <ng-container *isRenderRBAC=\"submenuItem?.resourcePermission\">\n                                        <a class=\"vsm-link mb-1 ms-3\"\n                                            [ngClass]=\"{'selected': isActiveRoute(submenuItem)}\"\n                                            routerLinkActive=\"active-item\"\n                                            (click)=\"changeAccordionState(accordionContent); navigate(submenuItem)\"\n                                            [matTooltip]=\"submenuItem?.label?.length> menuItemCharLength? submenuItem.label: ''\"\n                                            matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                                            <div class=\"d-flex align-items-center\">\n                                                <span class=\"material-symbols-outlined icon me-3\"> {{ submenuItem?.icon\n                                                    }}\n                                                </span>\n                                                <span [ngClass]=\"{'fw-bold': isActiveRoute(openMenuChildren)}\"> {{\n                                                    submenuItem?.label | dotdotdot: menuItemCharLength}} </span>\n                                            </div>\n                                        </a>\n                                    </ng-container>\n                                </ng-container>\n                            </ng-container>\n\n                            <ng-template #subMenuSubHeader>\n                                <div class=\"ms-4 text-secondary fw-bold mb-2\"\n                                    [matTooltip]=\"submenuItem?.label?.length> titleCharLength? submenuItem.label: ''\"\n                                    matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\"> {{ submenuItem.subLabel\n                                    | dotdotdot: titleCharLength}} </div>\n                            </ng-template>\n\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-template>\n        </ngb-panel>\n    </ngb-accordion>\n</ng-template>\n\n<ng-template #closedSidebarTemplate let-menuItem=\"menuItem\">\n    <ng-container *isRenderFeature=\"menuItem?.featureKeyID\">\n        <ng-container *isRenderRBAC=\"menuItem?.resourcePermission\">\n            <a class=\"vsm-link mb-1 closedSideBarIconPadding\" [ngClass]=\"{'selected': isActiveRoute(menuItem)}\"\n                routerLinkActive=\"active-item\"\n                (click)=\"menuItem.isBackButton ? backFunc(menuItem) : onMenuClick(menuItem); navigate(menuItem)\"\n                [matTooltip]=\"menuItem?.label\" matTooltipPosition=\"left\" matTooltipClass=\"sideBarTooltip\">\n                <div class=\"d-flex align-items-center\">\n                    <span class=\"material-symbols-outlined vsm-icon icon me-3\"> {{ menuItem?.icon }}\n                    </span>\n                </div>\n            </a>\n        </ng-container>\n    </ng-container>\n</ng-template>", styles: [".scroll-fix{height:calc(100vh - 122px)!important}.material-symbols-outlined{font-variation-settings:\"FILL\" 1}.headerProductLogo{height:40px;width:auto}.vsm-link.selected{background-color:#e0f3ff;color:#3f6ad8}.vsm-link{font-weight:normal!important;min-height:30px!important;border-radius:16px}.vsm-link:hover .showRightArrowOnHover{opacity:1}.showRightArrowOnHover{text-align:center;width:34px;height:34px;line-height:34px;position:absolute;right:5px;top:50%;margin-top:-17px;font-size:1.5rem;opacity:0}.showLeftArrow{text-align:center;width:34px;height:34px;line-height:34px;position:absolute;left:5px;top:50%;margin-top:-17px;font-size:1.5rem}.customPadding{padding:0 1.5rem 0 15px}.sideBarTooltip{white-space:pre-line!important;max-width:1100px!important;max-height:550px!important;font-size:18px!important}.openMenuHeader{cursor:default;padding:0 1.5rem 0 15px}.vsm-title{font-size:14px;white-space:nowrap;position:relative;font-weight:normal}.v-sidebar-menu .vsm-dropdown .vsm-list{padding:.75rem}.vsm-icon{opacity:1}.icon{text-align:center;width:34px;height:34px;line-height:34px;position:absolute;left:5px;top:50%;margin-top:-17px;font-size:1.3rem}.subLabelMargin{margin-left:1.9rem!important}.separator-top{border-top:1px solid #f6eded;background-color:#fff!important;position:fixed;bottom:0;left:0}.tscLogoWithName{height:38px;width:auto}.tscLogoWithoutName{width:32px;height:32px}.bottomMargin{margin-bottom:17px}.closedSideBarIconPadding{padding:unset}\n"], components: [{ type: i4.PerfectScrollbarComponent, selector: "perfect-scrollbar", inputs: ["disabled", "usePSClass", "autoPropagation", "scrollIndicators", "config"], outputs: ["psScrollY", "psScrollX", "psScrollUp", "psScrollDown", "psScrollLeft", "psScrollRight", "psYReachEnd", "psYReachStart", "psXReachEnd", "psXReachStart"], exportAs: ["ngxPerfectScrollbar"] }, { type: i5.NgbAccordion, selector: "ngb-accordion", inputs: ["animation", "activeIds", "closeOthers", "destroyOnHide", "type"], outputs: ["panelChange", "shown", "hidden"], exportAs: ["ngbAccordion"] }], directives: [{ type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.FeatureDirective2, selector: "[isRenderFeature]", inputs: ["isRenderFeature"] }, { type: i8.RBACDirective2, selector: "[isRenderRBAC]", inputs: ["isRenderRBAC"] }, { type: i9.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgbPanel, selector: "ngb-panel", inputs: ["disabled", "id", "title", "type", "cardClass"], outputs: ["shown", "hidden"] }, { type: i5.NgbPanelHeader, selector: "ng-template[ngbPanelHeader]" }, { type: i5.NgbPanelToggle, selector: "button[ngbPanelToggle]", inputs: ["ngbPanelToggle"] }, { type: i5.NgbPanelContent, selector: "ng-template[ngbPanelContent]" }], pipes: { "dotdotdot": i10.EllipsisPipeService } });
__decorate([
    select('config')
], SideNavComponent.prototype, "config$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SideNavComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-side-nav',
                    templateUrl: './side-nav.component.html',
                    styleUrls: ['./side-nav.component.scss'],
                    providers: [NgbAccordionConfig],
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.StorageService }, { type: i3.ApplicationService }]; }, propDecorators: { sidebarTypeInp: [{
                type: Input
            }], sidebarArrayInp: [{
                type: Input
            }], sidebarHeaderLabelInp: [{
                type: Input
            }], headerLogo: [{
                type: Input
            }], footerLogo: [{
                type: Input
            }], toggleSidebar: [{
                type: Input
            }], toggleSettingDrawer: [{
                type: Input
            }], landingPageRouteInp: [{
                type: Input
            }], menuOutput: [{
                type: Output
            }], toggleSidebarGlobal: [{
                type: Output
            }], toggleSettingDrawerGlobal: [{
                type: Output
            }], config$: [], accordion: [{
                type: ViewChild,
                args: [NgbAccordion]
            }] } });
//# sourceMappingURL=data:application/json;base64,