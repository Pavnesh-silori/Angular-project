import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { COMMON_CONSTANT } from '../../../../constant/common.constant';
import { Layout } from '@library/layout-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/layout-service";
import * as i4 from "../../../../event/common.event";
import * as i5 from "@ng-bootstrap/ng-bootstrap";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "@angular/common";
import * as i8 from "../../../../service/ellipsis-pipe.service";
export class LayoutDrawerComponent {
    constructor(router, storageService, layoutService, commonEvent) {
        this.router = router;
        this.storageService = storageService;
        this.layoutService = layoutService;
        this.commonEvent = commonEvent;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.layoutM = [new Layout()];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage(['currentOrgID']);
        this.commonEvent.layoutChange.subscribe((msg) => {
            this.getLayoutByOrgID();
        });
    }
    getLayoutByOrgID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.layoutM = (yield this.layoutService.getLayoutByOrgID(this.orgID));
            const layoutID = this.storageService.getStorage('layoutID');
            if (layoutID) {
                this.selectedLayout = this.layoutM.find(layout => layout.id == layoutID);
            }
            else {
                const defaultLayout = this.layoutM.find(layout => layout.isDefault);
                if (defaultLayout) {
                    this.selectedLayout = defaultLayout;
                    this.storageService.setStorage('layoutID', defaultLayout.id);
                }
            }
        });
    }
    changeLayout(layout) {
        this.storageService.setStorage('layoutID', layout.id);
        this.selectedLayout = layout;
        window.location.reload();
    }
    viewLayout(layoutID) {
        this.router.navigate([`layout/${layoutID}/list`]);
    }
}
LayoutDrawerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: LayoutDrawerComponent, deps: [{ token: i1.Router }, { token: i2.StorageService }, { token: i3.LayoutService }, { token: i4.CommonEvent }], target: i0.ɵɵFactoryTarget.Component });
LayoutDrawerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: LayoutDrawerComponent, selector: "lib-layout-drawer", ngImport: i0, template: "<div class=\"header-dots\">\n    <div class=\"btn-group\" ngbDropdown placement=\"bottom\">\n        <button type=\"button\" class=\"btn dropdownAfter\" ngbDropdownToggle>\n            <span class=\"material-symbols-outlined layoutIcon\" matTooltip=\"Layout\" matTooltipPosition=\"below\">\n                grid_view\n            </span>\n        </button>\n        <div class=\"selectedItem\" ngbDropdownMenu>\n            <ng-container *ngIf=\"layoutM && layoutM.length > 0 && layoutM[0]['id']; else noLayoutFound\">\n                <a class=\"dropdown-item mt-1\" *ngFor=\"let layout of layoutM\"\n                    [ngClass]=\"{'active': layout.id == selectedLayout?.id}\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"float-start\">\n                                <span class=\"me-2\" [matTooltip]=\"layout?.['name']?.length>22? layout['name']: ''\"\n                                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\"\n                                    (click)=\"changeLayout(layout)\">{{ layout?.name | dotdotdot:22\n                                    }}</span>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"float-end\">\n                                <span class=\"text-secondary me-1\">|</span>\n                                <span class=\"text-primary\" (click)=\"viewLayout(layout.id)\">View</span>\n                            </div>\n                        </div>\n                    </div>\n                </a>\n            </ng-container>\n            <ng-template #noLayoutFound>\n                <a class=\"dropdown-item\">\n                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                </a>\n            </ng-template>\n        </div>\n    </div>\n</div>", styles: [".layoutIcon{color:#4d4d4d;font-size:22px}.dropdownAfter:after{display:none}.selectedItem .dropdown-item.active,.selectedItem .dropdown-item:active{color:#000;background-color:#e0f3ff}.dropdown-menu .dropdown-item{display:block!important}\n"], directives: [{ type: i5.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i5.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i5.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "dotdotdot": i8.EllipsisPipeService } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: LayoutDrawerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-layout-drawer',
                    templateUrl: './layout-drawer.component.html',
                    styleUrls: ['./layout-drawer.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.StorageService }, { type: i3.LayoutService }, { type: i4.CommonEvent }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWRyYXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1jb21tb24vc3JjL2xpYi90c2MvY29tcG9uZW50L2xheW91dC9kcmF3ZXIvbGF5b3V0LWRyYXdlci9sYXlvdXQtZHJhd2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWNvbW1vbi9zcmMvbGliL3RzYy9jb21wb25lbnQvbGF5b3V0L2RyYXdlci9sYXlvdXQtZHJhd2VyL2xheW91dC1kcmF3ZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFHbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBS3ZFLE9BQU8sRUFBRSxNQUFNLEVBQTBCLE1BQU0seUJBQXlCLENBQUM7Ozs7Ozs7Ozs7QUFRekUsTUFBTSxPQUFPLHFCQUFxQjtJQVE5QixZQUNZLE1BQWMsRUFDZCxjQUE4QixFQUM5QixhQUE0QixFQUM1QixXQUF3QjtRQUh4QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBWHBDLG9CQUFlLEdBQUcsZUFBZSxDQUFDO1FBSWxDLFlBQU8sR0FBRyxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQztJQVFyQixDQUFDO0lBRUwsUUFBUTtRQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2pELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVLLGdCQUFnQjs7WUFDbEIsSUFBSSxDQUFDLE9BQU8sSUFBYyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUM7WUFDaEYsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDNUQsSUFBSSxRQUFRLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksUUFBUSxDQUFDLENBQUE7YUFDM0U7aUJBQU07Z0JBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3BFLElBQUksYUFBYSxFQUFFO29CQUNmLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO29CQUNwQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNoRTthQUNKO1FBQ0wsQ0FBQztLQUFBO0lBRUQsWUFBWSxDQUFDLE1BQWU7UUFDeEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztRQUM3QixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBUTtRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxRQUFRLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7bUhBN0NRLHFCQUFxQjt1R0FBckIscUJBQXFCLHlEQ2hCbEMsMjREQW9DTTs0RkRwQk8scUJBQXFCO2tCQU5qQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFdBQVcsRUFBRSxnQ0FBZ0M7b0JBQzdDLFNBQVMsRUFBRSxDQUFDLGdDQUFnQyxDQUFDO2lCQUNoRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBDT01NT05fQ09OU1RBTlQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb25zdGFudC9jb21tb24uY29uc3RhbnQnO1xuXG5pbXBvcnQgeyBDb21tb25FdmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2V2ZW50L2NvbW1vbi5ldmVudCc7XG5cbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvc3RvcmFnZS1zZXJ2aWNlJztcbmltcG9ydCB7IExheW91dCwgTGF5b3V0TSwgTGF5b3V0U2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L2xheW91dC1zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItbGF5b3V0LWRyYXdlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2xheW91dC1kcmF3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2xheW91dC1kcmF3ZXIuY29tcG9uZW50LnNjc3MnXVxufSlcblxuZXhwb3J0IGNsYXNzIExheW91dERyYXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQ09NTU9OX0NPTlNUQU5UID0gQ09NTU9OX0NPTlNUQU5UO1xuXG4gICAgb3JnSUQ6IGFueTtcblxuICAgIGxheW91dE0gPSBbbmV3IExheW91dCgpXTtcbiAgICBzZWxlY3RlZExheW91dDogYW55O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxheW91dFNlcnZpY2U6IExheW91dFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgY29tbW9uRXZlbnQ6IENvbW1vbkV2ZW50LFxuICAgICkgeyB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcmdJRCA9IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0U3RvcmFnZShbJ2N1cnJlbnRPcmdJRCddKTtcblxuICAgICAgICB0aGlzLmNvbW1vbkV2ZW50LmxheW91dENoYW5nZS5zdWJzY3JpYmUoKG1zZzogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdldExheW91dEJ5T3JnSUQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TGF5b3V0QnlPcmdJRCgpIHtcbiAgICAgICAgdGhpcy5sYXlvdXRNID0gPExheW91dE1bXT5hd2FpdCB0aGlzLmxheW91dFNlcnZpY2UuZ2V0TGF5b3V0QnlPcmdJRCh0aGlzLm9yZ0lEKTtcbiAgICAgICAgY29uc3QgbGF5b3V0SUQgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoJ2xheW91dElEJyk7XG4gICAgICAgIGlmIChsYXlvdXRJRCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZExheW91dCA9IHRoaXMubGF5b3V0TS5maW5kKGxheW91dCA9PiBsYXlvdXQuaWQgPT0gbGF5b3V0SUQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0TGF5b3V0ID0gdGhpcy5sYXlvdXRNLmZpbmQobGF5b3V0ID0+IGxheW91dC5pc0RlZmF1bHQpO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRMYXlvdXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTGF5b3V0ID0gZGVmYXVsdExheW91dDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNldFN0b3JhZ2UoJ2xheW91dElEJywgZGVmYXVsdExheW91dC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VMYXlvdXQobGF5b3V0OiBMYXlvdXRNKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2V0U3RvcmFnZSgnbGF5b3V0SUQnLCBsYXlvdXQuaWQpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkTGF5b3V0ID0gbGF5b3V0O1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfVxuXG4gICAgdmlld0xheW91dChsYXlvdXRJRCkge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYGxheW91dC8ke2xheW91dElEfS9saXN0YF0pO1xuICAgIH1cblxufVxuIiwiPGRpdiBjbGFzcz1cImhlYWRlci1kb3RzXCI+XG4gICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIG5nYkRyb3Bkb3duIHBsYWNlbWVudD1cImJvdHRvbVwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBkcm9wZG93bkFmdGVyXCIgbmdiRHJvcGRvd25Ub2dnbGU+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQgbGF5b3V0SWNvblwiIG1hdFRvb2x0aXA9XCJMYXlvdXRcIiBtYXRUb29sdGlwUG9zaXRpb249XCJiZWxvd1wiPlxuICAgICAgICAgICAgICAgIGdyaWRfdmlld1xuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNlbGVjdGVkSXRlbVwiIG5nYkRyb3Bkb3duTWVudT5cbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJsYXlvdXRNICYmIGxheW91dE0ubGVuZ3RoID4gMCAmJiBsYXlvdXRNWzBdWydpZCddOyBlbHNlIG5vTGF5b3V0Rm91bmRcIj5cbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW0gbXQtMVwiICpuZ0Zvcj1cImxldCBsYXlvdXQgb2YgbGF5b3V0TVwiXG4gICAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnYWN0aXZlJzogbGF5b3V0LmlkID09IHNlbGVjdGVkTGF5b3V0Py5pZH1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsb2F0LXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWUtMlwiIFttYXRUb29sdGlwXT1cImxheW91dD8uWyduYW1lJ10/Lmxlbmd0aD4yMj8gbGF5b3V0WyduYW1lJ106ICcnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdFRvb2x0aXBQb3NpdGlvbj1cImFib3ZlXCIgbWF0VG9vbHRpcENsYXNzPVwibmFtZVRvb2x0aXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cImNoYW5nZUxheW91dChsYXlvdXQpXCI+e3sgbGF5b3V0Py5uYW1lIHwgZG90ZG90ZG90OjIyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsb2F0LWVuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtc2Vjb25kYXJ5IG1lLTFcIj58PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtcHJpbWFyeVwiIChjbGljayk9XCJ2aWV3TGF5b3V0KGxheW91dC5pZClcIj5WaWV3PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNub0xheW91dEZvdW5kPlxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICB7eyBDT01NT05fQ09OU1RBTlQuTk9fREFUQV9GT1VORCB9fVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+Il19