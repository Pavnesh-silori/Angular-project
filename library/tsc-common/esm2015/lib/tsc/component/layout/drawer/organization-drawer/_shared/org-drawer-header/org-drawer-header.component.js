import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Facility } from '@library/facility-service';
import { OrgType, Organization } from '@library/organization-service';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@library/organization-service";
import * as i3 from "@library/facility-service";
import * as i4 from "@angular/common";
export class OrgDrawerHeaderComponent {
    constructor(storageService, organizationService, facilityService) {
        this.storageService = storageService;
        this.organizationService = organizationService;
        this.facilityService = facilityService;
        this.toggleOrgDrawerGlobal = new EventEmitter(true);
        this.OrgType = OrgType;
        this.organizationM = new Organization();
        this.facilityM = new Facility();
    }
    ngOnInit() {
        this.toggleOrgDrawerGlobal.emit(false);
        this.rootOrgID = this.storageService.getStorage(['rootOrgID']);
        this.currentOrgID = this.storageService.getStorage(['currentOrgID']);
        this.currentOrgType = this.storageService.getStorage(['currentOrgType']);
        this.getOrgDetail();
    }
    getOrgDetail() {
        switch (this.currentOrgType) {
            case OrgType.ORGANIZATION:
                this.getOrgByID();
                break;
            case OrgType.SITE:
                this.getFacilityByID();
                break;
            default:
                console.error('Exception in getOrgDetail');
        }
    }
    getOrgByID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.organizationM = (yield this.organizationService.getOrganizationByID(this.currentOrgID));
        });
    }
    getFacilityByID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.facilityM = (yield this.facilityService.getFacilityByID(this.rootOrgID, this.currentOrgID));
        });
    }
    toggleOrgDrawFn() {
        this.toggleOrgDrawer = !this.toggleOrgDrawer;
        this.toggleOrgDrawerGlobal.emit(this.toggleOrgDrawer);
    }
}
OrgDrawerHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OrgDrawerHeaderComponent, deps: [{ token: i1.StorageService }, { token: i2.OrganizationService }, { token: i3.FacilityService }], target: i0.ɵɵFactoryTarget.Component });
OrgDrawerHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: OrgDrawerHeaderComponent, selector: "lib-org-drawer-header", inputs: { toggleOrgDrawer: "toggleOrgDrawer" }, outputs: { toggleOrgDrawerGlobal: "toggleOrgDrawerGlobal" }, ngImport: i0, template: "<div class=\"headerText\" placement=\"bottom-right\">\n    <button type=\"button\" class=\"btn\" (click)=\"toggleOrgDrawFn()\">\n        <ng-container [ngSwitch]=\"currentOrgType\">\n            <span *ngSwitchCase=\"OrgType.ORGANIZATION\">\n                <div class=\"d-flex align-items-center\">\n                    <ng-container *ngIf=\"organizationM.logoUrl && organizationM.logoUrl != null; else showDefaultOrgIcon;\">\n                        <img class=\"headerImg pe-2\" [src]=\"organizationM.logoUrl\" alt=\"logo\" />\n                    </ng-container>\n                    <ng-template #showDefaultOrgIcon>\n                        <span class=\"material-symbols-outlined fs-1 pe-2\">\n                            corporate_fare\n                        </span>\n                    </ng-template>\n                    <span class=\"headerSection\">{{ organizationM.name }}</span>\n                    &nbsp;\n                    <i class=\"fa fa-caret-down\"></i>\n                </div>\n            </span>\n            \n            <span *ngSwitchCase=\"OrgType.SITE\">\n                <div class=\"d-flex align-items-center\">\n                    <ng-container *ngIf=\"facilityM.logoUrl && facilityM.logoUrl != null; else showDefaultFacilityIcon;\">\n                        <img class=\"headerImg pe-2\" [src]=\"facilityM.logoUrl\" alt=\"logo\" />\n                    </ng-container>\n                    <ng-template #showDefaultFacilityIcon>\n                        <span class=\"material-symbols-outlined fs-1 pe-2\">\n                            factory\n                        </span>\n                    </ng-template>\n                    <span class=\"headerSection\">{{ facilityM.name }}</span>\n                    &nbsp;\n                    <i class=\"fa fa-caret-down\"></i>\n                </div>\n            </span>\n        </ng-container>\n    </button>\n</div>", styles: [".drawer-overlay{position:fixed;height:0%;width:0%;z-index:999;background:rgba(0,0,0,.3);display:block;content:\"\";left:0;top:0;visibility:hidden;opacity:0;transition:opacity .2s}.drawer-wrapper{width:500px;height:100%;position:fixed;right:-500px;top:0;transition:all .2s;z-index:9999}.org-drawer-open .drawer-wrapper{right:0;box-shadow:0 .76875rem 2.4875rem #343a404d,0 1.3375rem 1.70625rem #343a404d,0 .55rem .53125rem #0000000d,0 .225rem .4375rem #343a404d}.org-drawer-open .drawer-wrapper:before{opacity:1}.org-drawer-open .drawer-overlay{visibility:visible;opacity:1;height:100%;width:100%}.headerText{color:#4d4d4d}.headerSection{font-size:15px}.headerImg{height:40px}\n"], directives: [{ type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OrgDrawerHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-org-drawer-header',
                    templateUrl: './org-drawer-header.component.html',
                    styleUrls: ['./org-drawer-header.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.OrganizationService }, { type: i3.FacilityService }]; }, propDecorators: { toggleOrgDrawer: [{
                type: Input
            }], toggleOrgDrawerGlobal: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,