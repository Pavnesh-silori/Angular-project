import { Injectable } from "@angular/core";
import { FormAction } from "../enum/form.enum";
import { ButtonLabelEnum } from "../enum/button.enum";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class TSCCommonService {
    constructor(location) {
        this.location = location;
    }
    nullToBlank(value) {
        return value ? value : '';
    }
    back() {
        this.location.back();
    }
    formatLargeNumber(value, roundOff, decimalPlace) {
        if (!roundOff) {
            roundOff = true;
        }
        if (!decimalPlace) {
            decimalPlace = 0;
        }
        var preFix = "";
        var postFix = "";
        if (value < 0) {
            value *= -1;
            preFix = "-";
        }
        if (value >= 1000) {
            if (value > 1000000000) {
                value = value / 1000000000;
                postFix = " G";
            }
            else if (value > 1000000) {
                value = value / 1000000;
                postFix = " M";
            }
            else if (value > 1000) {
                value = value / 1000;
                postFix = " K";
            }
            value = (roundOff == "true" ? Math.round(value) : value);
            if (roundOff == "false") {
                value = value.toFixed(decimalPlace);
            }
        }
        var formattedNumber = preFix + value + postFix;
        return formattedNumber;
    }
    removeSelectAllID(arr) {
        return arr.filter(item => item != -1);
    }
    getUniqueObject(objList, key, value) {
        return objList.find(obj => obj[key] == value);
    }
    getButtonLabel(action) {
        let label;
        switch (action) {
            case FormAction.CREATE:
                label = ButtonLabelEnum.CREATE_BTN_LABEL;
                break;
            case FormAction.UPDATE:
                label = ButtonLabelEnum.UPDATE_BTN_LABEL;
                break;
            default:
                label = ButtonLabelEnum.SAVE_BTN_LABEL;
                break;
        }
        return label;
    }
    isValidEmail(email) {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return emailRegex.test(email);
    }
}
TSCCommonService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TSCCommonService, deps: [{ token: i1.Location }], target: i0.ɵɵFactoryTarget.Injectable });
TSCCommonService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TSCCommonService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TSCCommonService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Location }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHNjLWNvbW1vbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtY29tbW9uL3NyYy9saWIvdHNjL3NlcnZpY2UvdHNjLWNvbW1vbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBTXRELE1BQU0sT0FBTyxnQkFBZ0I7SUFFekIsWUFDWSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQzFCLENBQUM7SUFFTCxXQUFXLENBQUMsS0FBSztRQUNiLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSTtRQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELGlCQUFpQixDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsWUFBWTtRQUMzQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsUUFBUSxHQUFHLElBQUksQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDZixZQUFZLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVqQixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDWixNQUFNLEdBQUcsR0FBRyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2YsSUFBSSxLQUFLLEdBQUcsVUFBVSxFQUFFO2dCQUNwQixLQUFLLEdBQUcsS0FBSyxHQUFHLFVBQVUsQ0FBQztnQkFDM0IsT0FBTyxHQUFHLElBQUksQ0FBQzthQUNsQjtpQkFBTSxJQUFJLEtBQUssR0FBRyxPQUFPLEVBQUU7Z0JBQ3hCLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTyxDQUFDO2dCQUN4QixPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ2xCO2lCQUFNLElBQUksS0FBSyxHQUFHLElBQUksRUFBRTtnQkFDckIsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLE9BQU8sR0FBRyxJQUFJLENBQUM7YUFDbEI7WUFFRCxLQUFLLEdBQUcsQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6RCxJQUFJLFFBQVEsSUFBSSxPQUFPLEVBQUU7Z0JBQ3JCLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3ZDO1NBQ0o7UUFFRCxJQUFJLGVBQWUsR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUMvQyxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDO0lBRUQsaUJBQWlCLENBQUMsR0FBVTtRQUN4QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQWMsRUFBRSxHQUFXLEVBQUUsS0FBVTtRQUNuRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFjO1FBQ3pCLElBQUksS0FBYSxDQUFDO1FBRWxCLFFBQVEsTUFBTSxFQUFFO1lBQ1osS0FBSyxVQUFVLENBQUMsTUFBTTtnQkFDbEIsS0FBSyxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDekMsTUFBTTtZQUNWLEtBQUssVUFBVSxDQUFDLE1BQU07Z0JBQ2xCLEtBQUssR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3pDLE1BQU07WUFDVjtnQkFDSSxLQUFLLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQztnQkFDdkMsTUFBTTtTQUNiO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFhO1FBQ3RCLE1BQU0sVUFBVSxHQUFHLGtEQUFrRCxDQUFDO1FBQ3RFLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs4R0FqRlEsZ0JBQWdCO2tIQUFoQixnQkFBZ0IsY0FIYixNQUFNOzRGQUdULGdCQUFnQjtrQkFKNUIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBGb3JtQWN0aW9uIH0gZnJvbSBcIi4uL2VudW0vZm9ybS5lbnVtXCI7XG5pbXBvcnQgeyBCdXR0b25MYWJlbEVudW0gfSBmcm9tIFwiLi4vZW51bS9idXR0b24uZW51bVwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuXG5leHBvcnQgY2xhc3MgVFNDQ29tbW9uU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgKSB7IH1cblxuICAgIG51bGxUb0JsYW5rKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IHZhbHVlIDogJyc7XG4gICAgfVxuXG4gICAgYmFjaygpIHtcbiAgICAgICAgdGhpcy5sb2NhdGlvbi5iYWNrKCk7XG4gICAgfVxuXG4gICAgZm9ybWF0TGFyZ2VOdW1iZXIodmFsdWUsIHJvdW5kT2ZmLCBkZWNpbWFsUGxhY2UpIHtcbiAgICAgICAgaWYgKCFyb3VuZE9mZikge1xuICAgICAgICAgICAgcm91bmRPZmYgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkZWNpbWFsUGxhY2UpIHtcbiAgICAgICAgICAgIGRlY2ltYWxQbGFjZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZUZpeCA9IFwiXCI7XG4gICAgICAgIHZhciBwb3N0Rml4ID0gXCJcIjtcblxuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB2YWx1ZSAqPSAtMTtcbiAgICAgICAgICAgIHByZUZpeCA9IFwiLVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID49IDEwMDApIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IDEwMDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gMTAwMDAwMDAwMDtcbiAgICAgICAgICAgICAgICBwb3N0Rml4ID0gXCIgR1wiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEwMDAwMDApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gMTAwMDAwMDtcbiAgICAgICAgICAgICAgICBwb3N0Rml4ID0gXCIgTVwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEwMDApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gMTAwMDtcbiAgICAgICAgICAgICAgICBwb3N0Rml4ID0gXCIgS1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IChyb3VuZE9mZiA9PSBcInRydWVcIiA/IE1hdGgucm91bmQodmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJvdW5kT2ZmID09IFwiZmFsc2VcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9GaXhlZChkZWNpbWFsUGxhY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZvcm1hdHRlZE51bWJlciA9IHByZUZpeCArIHZhbHVlICsgcG9zdEZpeDtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZE51bWJlcjtcbiAgICB9XG5cbiAgICByZW1vdmVTZWxlY3RBbGxJRChhcnI6IGFueVtdKSB7XG4gICAgICAgIHJldHVybiBhcnIuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPSAtMSk7XG4gICAgfVxuXG4gICAgZ2V0VW5pcXVlT2JqZWN0KG9iakxpc3Q6IGFueVtdLCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICByZXR1cm4gb2JqTGlzdC5maW5kKG9iaiA9PiBvYmpba2V5XSA9PSB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0QnV0dG9uTGFiZWwoYWN0aW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgbGFiZWw6IHN0cmluZztcblxuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBGb3JtQWN0aW9uLkNSRUFURTpcbiAgICAgICAgICAgICAgICBsYWJlbCA9IEJ1dHRvbkxhYmVsRW51bS5DUkVBVEVfQlROX0xBQkVMO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGb3JtQWN0aW9uLlVQREFURTpcbiAgICAgICAgICAgICAgICBsYWJlbCA9IEJ1dHRvbkxhYmVsRW51bS5VUERBVEVfQlROX0xBQkVMO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBsYWJlbCA9IEJ1dHRvbkxhYmVsRW51bS5TQVZFX0JUTl9MQUJFTDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG5cbiAgICBpc1ZhbGlkRW1haWwoZW1haWw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBlbWFpbFJlZ2V4ID0gL15bYS16QS1aMC05Ll8lKy1dK0BbYS16QS1aMC05Li1dK1xcLlthLXpBLVpdezIsfSQvO1xuICAgICAgICByZXR1cm4gZW1haWxSZWdleC50ZXN0KGVtYWlsKTtcbiAgICB9XG5cbn0iXX0=