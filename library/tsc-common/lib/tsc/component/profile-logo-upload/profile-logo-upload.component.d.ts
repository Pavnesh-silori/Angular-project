import { ElementRef, EventEmitter, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { ImageCroppedEvent, LoadedImage } from 'ngx-image-cropper';
import { ButtonLabelEnum } from '../../enum/button.enum';
import { ToastrService } from '@library/toastr-service';
import * as i0 from "@angular/core";
export declare class ProfileLogoUploadComponent implements OnInit {
    private dialog;
    private toastrService;
    roundCropper: boolean;
    imageInp: any;
    showDeleteBtnInp: boolean;
    previewBtnLabelInp: string;
    removeImgActionInp: string;
    imageSelectedEvent: EventEmitter<{
        image: any;
    }>;
    imageRemoveEvent: EventEmitter<void>;
    imageUpdate: ElementRef;
    openCropper: TemplateRef<any>;
    cropperImageInput: ElementRef;
    ButtonLabelEnum: typeof ButtonLabelEnum;
    currentImg: any;
    image: Blob[];
    croppedImage: any;
    previewBtnLabel: string;
    hideCropper: boolean;
    imageChangedEvent: any;
    dialogRef: MatDialogRef<any>;
    constructor(dialog: MatDialog, toastrService: ToastrService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    chooseImage(): void;
    imageSelected(): void;
    emptyInput(): void;
    imageCropped(event: ImageCroppedEvent): void;
    imageLoaded(image: LoadedImage): void;
    cropperReady(): void;
    loadImageFailed(): void;
    fileChangeEvent(event: any): void;
    isFileAllowed(fileName: string): boolean;
    isFileSizeAllowed(size: any): boolean;
    openEditDialog(): void;
    updateFile(fileEvent: any): void;
    updateImage(): void;
    removeImage(): void;
    deleteImage(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProfileLogoUploadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProfileLogoUploadComponent, "lib-profile-logo-upload", never, { "roundCropper": "roundCropper"; "imageInp": "imageInp"; "showDeleteBtnInp": "showDeleteBtnInp"; "previewBtnLabelInp": "previewBtnLabelInp"; "removeImgActionInp": "removeImgActionInp"; }, { "imageSelectedEvent": "imageSelectedEvent"; "imageRemoveEvent": "imageRemoveEvent"; }, never, never>;
}
