import { EventEmitter, OnInit, SimpleChanges } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { NgbAccordion } from '@ng-bootstrap/ng-bootstrap';
import { StorageService } from '@library/storage-service';
import { ApplicationService } from '@library/application-service';
import * as i0 from "@angular/core";
export declare class SideNavComponent implements OnInit {
    private router;
    private storageService;
    applicationService: ApplicationService;
    sidebarTypeInp: 'RIGHT' | 'LEFT';
    sidebarArrayInp: any;
    sidebarHeaderLabelInp: string;
    headerLogo: boolean;
    footerLogo: boolean;
    toggleSidebar: boolean;
    toggleSettingDrawer: boolean;
    landingPageRouteInp: string;
    menuOutput: EventEmitter<any>;
    toggleSidebarGlobal: EventEmitter<boolean>;
    toggleSettingDrawerGlobal: EventEmitter<boolean>;
    sidebarType: 'RIGHT' | 'LEFT';
    applicationKeyID: string;
    sidebarArray: any[];
    activeID: string[];
    titleCharLength: number;
    menuItemCharLength: number;
    config$: Observable<any>;
    accordion: NgbAccordion;
    constructor(router: Router, storageService: StorageService, applicationService: ApplicationService);
    ngOnInit(): void;
    openCurrentActiveRouteMenu(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onMenuClick(menu: any): void;
    findDefaultLandingPage(menuArray: any): any;
    backFunc(menu: any): void;
    openAccordion(): void;
    changeAccordionState(menu: any): void;
    handleActiveTabOnRefresh(): void;
    isActiveRoute(menu: any): boolean;
    navigate(menu: any): void;
    getOutlets(menu: any): any;
    getQueryParams(menu: any): any;
    navigateToLandingPage(): void;
    toggleSidebarFun(): void;
    toggleSettingDrawerFun(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SideNavComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SideNavComponent, "lib-side-nav", never, { "sidebarTypeInp": "sidebarTypeInp"; "sidebarArrayInp": "sidebarArrayInp"; "sidebarHeaderLabelInp": "sidebarHeaderLabelInp"; "headerLogo": "headerLogo"; "footerLogo": "footerLogo"; "toggleSidebar": "toggleSidebar"; "toggleSettingDrawer": "toggleSettingDrawer"; "landingPageRouteInp": "landingPageRouteInp"; }, { "menuOutput": "menuOutput"; "toggleSidebarGlobal": "toggleSidebarGlobal"; "toggleSettingDrawerGlobal": "toggleSettingDrawerGlobal"; }, never, never>;
}
