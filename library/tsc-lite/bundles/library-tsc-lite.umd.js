(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('@angular/router'), require('@library/storage-service'), require('@angular/common/http'), require('@angular/common'), require('@angular/forms'), require('@angular/material/dialog'), require('@angular/material/button'), require('@angular/material/input'), require('@angular/material/form-field'), require('@angular/material/select'), require('@angular/material/tooltip'), require('moment'), require('@library/tsc-common'), require('@library/date'), require('@library/echart'), require('@angular/material/core'), require('@angular/material/radio'), require('@angular/material/icon'), require('@ng-bootstrap/ng-bootstrap'), require('@library/layout-service'), require('@library/organization-service'), require('ngx-mat-select-search'), require('@angular/material/card'), require('ngx-perfect-scrollbar'), require('ng-circle-progress'), require('@library/application-service'), require('@angular/material/button-toggle'), require('@angular/material/expansion'), require('@angular/material/tabs'), require('@library/toastr-service'), require('@angular/material/table'), require('@angular/material/slide-toggle'), require('@angular/material/chips'), require('@angular/cdk/keycodes'), require('@library/user-service'), require('@angular/material/sort'), require('@angular/material/paginator'), require('@angular/material/menu'), require('@fortawesome/angular-fontawesome'), require('rxjs'), require('@fortawesome/free-solid-svg-icons'), require('lodash'), require('@angular/material/checkbox'), require('ngx-echarts'), require('@angular/cdk/clipboard'), require('ngx-smart-popover'), require('@angular/cdk/collections')) :
    typeof define === 'function' && define.amd ? define('@library/tsc-lite', ['exports', '@angular/core', 'rxjs/operators', '@angular/router', '@library/storage-service', '@angular/common/http', '@angular/common', '@angular/forms', '@angular/material/dialog', '@angular/material/button', '@angular/material/input', '@angular/material/form-field', '@angular/material/select', '@angular/material/tooltip', 'moment', '@library/tsc-common', '@library/date', '@library/echart', '@angular/material/core', '@angular/material/radio', '@angular/material/icon', '@ng-bootstrap/ng-bootstrap', '@library/layout-service', '@library/organization-service', 'ngx-mat-select-search', '@angular/material/card', 'ngx-perfect-scrollbar', 'ng-circle-progress', '@library/application-service', '@angular/material/button-toggle', '@angular/material/expansion', '@angular/material/tabs', '@library/toastr-service', '@angular/material/table', '@angular/material/slide-toggle', '@angular/material/chips', '@angular/cdk/keycodes', '@library/user-service', '@angular/material/sort', '@angular/material/paginator', '@angular/material/menu', '@fortawesome/angular-fontawesome', 'rxjs', '@fortawesome/free-solid-svg-icons', 'lodash', '@angular/material/checkbox', 'ngx-echarts', '@angular/cdk/clipboard', 'ngx-smart-popover', '@angular/cdk/collections'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.library = global.library || {}, global.library["tsc-lite"] = {}), global.ng.core, global.rxjs.operators, global.ng.router, global.i1$2, global.ng.common.http, global.ng.common, global.ng.forms, global.ng.material.dialog, global.ng.material.button, global.ng.material.input, global.ng.material.formField, global.ng.material.select, global.ng.material.tooltip, global.moment, global.i3, global.i2, global.i10, global.ng.material.core, global.ng.material.radio, global.ng.material.icon, global.i12$2, global.i5, global.i3$2, global.i6$1, global.ng.material.card, global.i12$3, global.i7, global.applicationService, global.ng.material.buttonToggle, global.ng.material.expansion, global.ng.material.tabs, global.i2$3, global.ng.material.table, global.ng.material.slideToggle, global.ng.material.chips, global.ng.cdk.keycodes, global.i4$1, global.ng.material.sort, global.ng.material.paginator, global.ng.material.menu, global.i6$2, global.rxjs, global.freeSolidSvgIcons, global.lodash, global.ng.material.checkbox, global.i4$2, global.ng.cdk.clipboard, global.i11$2, global.ng.cdk.collections));
})(this, (function (exports, i0, operators, i1$1, i1$2, i1, i14, i2$1, i1$3, i6, i12, i3$1, i4, i11, moment, i3, i2, i10, i10$1, i13, i12$1, i12$2, i5, i3$2, i6$1, i9, i12$3, i7, applicationService, i1$4, i5$1, i2$2, i2$3, i7$1, i9$1, i11$1, keycodes, i4$1, i8, i9$2, i10$2, i6$2, rxjs, freeSolidSvgIcons, lodash, i10$3, i4$2, i17, i11$2, collections) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i14__namespace = /*#__PURE__*/_interopNamespace(i14);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i12__namespace$3 = /*#__PURE__*/_interopNamespace(i12);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var moment__namespace = /*#__PURE__*/_interopNamespace(moment);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i10__namespace$1 = /*#__PURE__*/_interopNamespace(i10);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10$1);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i12__namespace$2 = /*#__PURE__*/_interopNamespace(i12$1);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12$2);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i12__namespace$1 = /*#__PURE__*/_interopNamespace(i12$3);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i9__namespace$1 = /*#__PURE__*/_interopNamespace(i9$1);
    var i11__namespace$1 = /*#__PURE__*/_interopNamespace(i11$1);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i9__namespace$2 = /*#__PURE__*/_interopNamespace(i9$2);
    var i10__namespace$2 = /*#__PURE__*/_interopNamespace(i10$2);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i10__namespace$3 = /*#__PURE__*/_interopNamespace(i10$3);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i17__namespace = /*#__PURE__*/_interopNamespace(i17);
    var i11__namespace$2 = /*#__PURE__*/_interopNamespace(i11$2);

    var TscLiteService = /** @class */ (function () {
        function TscLiteService() {
        }
        return TscLiteService;
    }());
    TscLiteService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TscLiteService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return []; } });

    var TscLiteComponent = /** @class */ (function () {
        function TscLiteComponent() {
        }
        TscLiteComponent.prototype.ngOnInit = function () {
        };
        return TscLiteComponent;
    }());
    TscLiteComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TscLiteComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TscLiteComponent, selector: "lib-tsc-lite", ngImport: i0__namespace, template: "\n    <p>\n      tsc-lite works!\n    </p>\n  ", isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-tsc-lite',
                        template: "\n    <p>\n      tsc-lite works!\n    </p>\n  ",
                        styles: []
                    }]
            }], ctorParameters: function () { return []; } });

    var TscLiteModule = /** @class */ (function () {
        function TscLiteModule() {
        }
        TscLiteModule.forRoot = function (environment) {
            return {
                ngModule: TscLiteModule,
                providers: [
                    { provide: 'environment', useValue: environment }
                ]
            };
        };
        return TscLiteModule;
    }());
    TscLiteModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TscLiteModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteModule, declarations: [TscLiteComponent], exports: [TscLiteComponent] });
    TscLiteModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteModule, imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscLiteModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            TscLiteComponent,
                        ],
                        imports: [],
                        exports: [
                            TscLiteComponent
                        ]
                    }]
            }] });

    var LIST_CONSTANT = {
        CONDITION: [
            {
                label: '>= (Greater or Equal)',
                value: 'GTE'
            },
            {
                label: '<= (Less or Equal)',
                value: 'LTE'
            },
            {
                label: '= (Equal)',
                value: 'EQUAL'
            },
            {
                label: '> (Greater than)',
                value: 'GREATER'
            },
            {
                label: '< (Less than)',
                value: 'LESS'
            },
            {
                label: 'between',
                value: 'BETWEEN'
            }
        ],
        EMAIL_FREQUENCY: [
            {
                label: "Never",
                value: "NEVER"
            },
            {
                label: "24 Hrs",
                value: "HOURS_24"
            },
            {
                label: "12 Hrs",
                value: "HOURS_12"
            },
            {
                label: "6 Hrs",
                value: "HOURS_6"
            },
            {
                label: "4 Hrs",
                value: "HOURS_4"
            }
        ],
        SMS_FREQUENCY: [
            {
                label: "Never",
                value: "NEVER"
            },
            {
                label: "24 Hrs",
                value: "HOURS_24"
            },
            {
                label: "12 Hrs",
                value: "HOURS_12"
            }
        ],
        ESCALATION_FREQUENCY: [
            {
                label: "Day",
                value: "DAY"
            },
            {
                label: "Hour",
                value: "HOUR"
            },
            {
                label: "Min",
                value: "MIN"
            }
        ],
        ALERT_RULE_FREQUENCY: [
            {
                label: 'Instant',
                value: 'INSTANT'
            },
            {
                label: "Daily(Today)",
                value: "DAILY_TODAY"
            },
            {
                label: "Daily(Yesterday)",
                value: "DAILY_YESTERDAY"
            },
            {
                label: "Monthly(Current month)",
                value: "MONTHLY_CURRENT"
            },
            {
                label: "Monthly(Last month)",
                value: "MONTHLY_LAST"
            },
            {
                label: "Hourly(Current hour)",
                value: "HOURLY_CURRENT"
            },
            {
                label: "Hourly(Last hour)",
                value: "HOURLY_LAST"
            }
        ],
        TREND_DATE_RANGE: [
            {
                label: "Last 24 hrs",
                value: "LAST_24_HRS"
            },
            {
                label: "Last 7 days",
                value: "LAST_7_DAYS"
            },
            {
                label: "Last 30 days",
                value: "LAST_30_DAYS"
            }
        ],
        AGGREGATION_DURATION: [
            {
                label: "15 minutes",
                value: "min_15"
            },
            {
                label: "30 minutes",
                value: "min_30"
            },
            {
                label: "Hourly",
                value: "hour_1"
            },
            {
                label: "12 hours",
                value: "hour_12"
            },
            {
                label: "Daily",
                value: "day_1"
            },
            {
                label: "Monthly",
                value: "month_1"
            }
        ],
        AGGREGATION: [
            {
                label: 'Absolute Average',
                value: 'avgabs'
            },
            {
                label: 'Absolute Maximum',
                value: 'maxabs'
            },
            {
                label: 'Absolute Minimum',
                value: 'minabs'
            },
            {
                label: 'Absolute Sum',
                value: 'sumabs'
            },
            {
                label: 'Average',
                value: 'avg'
            },
            {
                label: 'Count',
                value: 'count'
            },
            {
                label: 'First',
                value: 'first'
            },
            {
                label: 'Last',
                value: 'last'
            },
            {
                label: 'Maximum',
                value: 'max'
            },
            {
                label: 'Minimum',
                value: 'min'
            },
            {
                label: 'Sum',
                value: 'sum'
            }
        ],
        DOWNLOAD_TYPE: [
            {
                label: "PDF",
                value: "pdf"
            },
            {
                label: "CSV",
                value: "csv"
            },
            {
                label: "XLSX",
                value: "xlsx"
            }
        ],
        SOURCE_LOAD: [
            {
                label: "Source",
                value: "source"
            },
            {
                label: "Consumer",
                value: "load"
            }
        ],
        HOURLY_NOTIFICATION_FREQUENCY: [
            {
                hour: 1,
                label: "1 Hr",
                value: "HOURS_1"
            },
            {
                hour: 2,
                label: "2 Hrs",
                value: "HOURS_2"
            },
            {
                hour: 4,
                label: "4 Hrs",
                value: "HOURS_4"
            },
            {
                hour: 6,
                label: "6 Hrs",
                value: "HOURS_6"
            },
            {
                hour: 8,
                label: "8 Hrs",
                value: "HOURS_8"
            },
            {
                hour: 12,
                label: "12 Hrs",
                value: "HOURS_12"
            },
            {
                hour: 24,
                label: "24 Hrs",
                value: "HOURS_24"
            }
        ],
        HOURLY_REMINDER_FREQUENCY: [
            {
                hour: 2,
                label: "2 Hrs",
                value: "HOURS_2"
            },
            {
                hour: 4,
                label: "4 Hrs",
                value: "HOURS_4"
            },
            {
                hour: 6,
                label: "6 Hrs",
                value: "HOURS_6"
            },
            {
                hour: 12,
                label: "12 Hrs",
                value: "HOURS_12"
            },
            {
                hour: 24,
                label: "24 Hrs",
                value: "HOURS_24"
            },
            {
                hour: 48,
                label: "48 Hrs",
                value: "HOURS_48"
            }
        ],
        ENERGY_APP_SCHEDULE_REPORT_TYPE: [
            {
                label: "Energy sourcing report",
                value: "SOURCING_REPORT"
            },
            {
                label: "Energy breakup report",
                value: "BREAKUP_REPORT"
            },
            {
                label: "Energy consumption report",
                value: "CONSUMPTION_REPORT"
            },
            {
                label: "Temperature Report",
                value: "TEMPERATURE_REPORT"
            }
        ],
        WATER_APP_SCHEDULE_REPORT_TYPE: [
            {
                label: "Water sourcing report",
                value: "SOURCING_REPORT"
            },
            {
                label: "Water breakup report",
                value: "BREAKUP_REPORT"
            },
            {
                label: "Water consumption report",
                value: "CONSUMPTION_REPORT"
            },
            {
                label: "CGWA Report",
                value: "CGWA_REPORT"
            }
        ]
    };

    exports.ReportErrorEnum = void 0;
    (function (ReportErrorEnum) {
        ReportErrorEnum["INVALID_DATE_LABEL"] = "Invalid dates!";
        ReportErrorEnum["INVALID_DATE_MESSAGE"] = "Select distinct dates to view the desired report.";
        ReportErrorEnum["TIME_EXCEEDED_LABEL"] = "Time exceeded!";
        ReportErrorEnum["HOUR_24_TIME_EXCEEDED_MESSAGE"] = "You cannot view or download report for more than 24 hours.";
        ReportErrorEnum["DAY_30_TIME_EXCEEDED_MESSAGE"] = "You cannot view or download report for more than 30 days.";
        ReportErrorEnum["DATA_NOT_FOUND_LABEL"] = "No data found!";
        ReportErrorEnum["DATA_NOT_FOUND_MESSAGE"] = "No data was recorded for the above specified filters. Please keep changing the filters and try again.";
        ReportErrorEnum["INVALID_ERROR_LABEL"] = "Please try again later!";
        ReportErrorEnum["INVALID_ERROR_MESSAGE"] = "We are not able to fetch the data for the specified filters at the moment. Please keep changing the filters and try again.";
    })(exports.ReportErrorEnum || (exports.ReportErrorEnum = {}));
    exports.DashboardErrorEnum = void 0;
    (function (DashboardErrorEnum) {
        DashboardErrorEnum["DATA_NOT_FOUND_LABEL"] = "No data found!";
        DashboardErrorEnum["DATA_NOT_FOUND_MESSAGE"] = "No data was recorded at the moment. Please try again after sometime.";
        DashboardErrorEnum["INVALID_ERROR_LABEL"] = "Please try again later!";
        DashboardErrorEnum["INVALID_ERROR_MESSAGE"] = "We are not able to fetch the requested data at the moment. Please try again after sometime.";
    })(exports.DashboardErrorEnum || (exports.DashboardErrorEnum = {}));

    exports.ScheduleReportTypeEnum = void 0;
    (function (ScheduleReportTypeEnum) {
        ScheduleReportTypeEnum["SOURCING_REPORT"] = "SOURCING_REPORT";
        ScheduleReportTypeEnum["BREAKUP_REPORT"] = "BREAKUP_REPORT";
        ScheduleReportTypeEnum["CONSUMPTION_REPORT"] = "CONSUMPTION_REPORT";
        ScheduleReportTypeEnum["CGWA_REPORT"] = "CGWA_REPORT";
        ScheduleReportTypeEnum["TEMPERATURE_REPORT"] = "TEMPERATURE_REPORT";
    })(exports.ScheduleReportTypeEnum || (exports.ScheduleReportTypeEnum = {}));

    var Alert = /** @class */ (function () {
        function Alert() {
            this.showAlert = false;
            this.alertLabel = '';
            this.alertContent = '';
            this.messageAlertType = '';
            this.messageAlertIcon = '';
        }
        return Alert;
    }());

    var Parameter = /** @class */ (function () {
        function Parameter() {
        }
        return Parameter;
    }());
    var ConsumptionParameter = /** @class */ (function () {
        function ConsumptionParameter() {
        }
        return ConsumptionParameter;
    }());
    var SavedConsumptionParameter = /** @class */ (function () {
        function SavedConsumptionParameter() {
        }
        return SavedConsumptionParameter;
    }());

    var Entity = /** @class */ (function () {
        function Entity() {
        }
        return Entity;
    }());
    var ParameterEntity = /** @class */ (function () {
        function ParameterEntity() {
        }
        return ParameterEntity;
    }());
    var EntityWithChildren = /** @class */ (function () {
        function EntityWithChildren() {
            this.id = null;
            this.name = null;
            this.type = null;
            this.entityStatusFlag = false;
            this.children = [];
        }
        return EntityWithChildren;
    }());
    var EntityLevelConsumption = /** @class */ (function () {
        function EntityLevelConsumption() {
        }
        return EntityLevelConsumption;
    }());
    var EntityType = /** @class */ (function () {
        function EntityType() {
            this.type = null;
        }
        return EntityType;
    }());
    var DashboardEntities = /** @class */ (function () {
        function DashboardEntities() {
            this.id = null;
            this.name = null;
            this.type = null;
            this.status = null;
        }
        return DashboardEntities;
    }());

    var Device = /** @class */ (function () {
        function Device() {
        }
        return Device;
    }());
    var DevicesWithEntities = /** @class */ (function () {
        function DevicesWithEntities() {
        }
        return DevicesWithEntities;
    }());
    var StatusInfo = /** @class */ (function () {
        function StatusInfo() {
        }
        return StatusInfo;
    }());
    var DeviceMapping = /** @class */ (function () {
        function DeviceMapping() {
        }
        return DeviceMapping;
    }());

    var Unit = /** @class */ (function () {
        function Unit() {
        }
        return Unit;
    }());

    var Shift = /** @class */ (function () {
        function Shift() {
        }
        return Shift;
    }());

    var RecentDataRequestWithParam = /** @class */ (function () {
        function RecentDataRequestWithParam() {
            this.params = null;
            this.deviceID = null;
            this.includeDescendants = false;
            this.timezone = null;
            this.entityType = null;
            this.backscan = null;
        }
        return RecentDataRequestWithParam;
    }());
    var RecentDataRequestWithoutParam = /** @class */ (function () {
        function RecentDataRequestWithoutParam() {
            this.entityID = null;
            this.timezone = null;
            this.entityType = null;
            this.backscan = null;
        }
        return RecentDataRequestWithoutParam;
    }());
    var OrgRecentData = /** @class */ (function () {
        function OrgRecentData() {
            this.orgID = null;
            this.entityID = null;
            this.entityName = null;
            this.entityType = null;
            this.entityStatusFlag = false;
            this.deviceData = null;
        }
        return OrgRecentData;
    }());
    var DeviceRecentData = /** @class */ (function () {
        function DeviceRecentData() {
            this.deviceID = null;
            this.deviceName = null;
            this.status = null;
            this.paramData = [];
        }
        return DeviceRecentData;
    }());

    var DownloadReportRequest = /** @class */ (function () {
        function DownloadReportRequest() {
            this.request = null;
            this.reportName = null;
            this.reportFormat = null;
        }
        return DownloadReportRequest;
    }());

    var AggregateDataRequest = /** @class */ (function () {
        function AggregateDataRequest() {
            this.interval = null;
            this.entityType = null;
            this.shiftKey = null;
            this.deviceID = null;
            this.entityID = null;
            this.params = null;
            this.showImmediateChildOnly = false;
            this.groupAll = false;
            this.startTime = null;
            this.endTime = null;
        }
        AggregateDataRequest.prototype.nullifyParams = function () {
            var _a;
            (_a = this.params) === null || _a === void 0 ? void 0 : _a.forEach(function (param) {
                param.name = param.name || null;
                param.dsAgg = param.dsAgg || null;
                param.agg = param.agg || null;
                param.source_or_load = param.source_or_load || null;
                param.sourceLoadType = param.sourceLoadType || null;
            });
        };
        return AggregateDataRequest;
    }());
    var MeterData = /** @class */ (function () {
        function MeterData() {
        }
        return MeterData;
    }());

    var MakeModel = /** @class */ (function () {
        function MakeModel() {
        }
        return MakeModel;
    }());

    var RegulatorType = /** @class */ (function () {
        function RegulatorType() {
        }
        return RegulatorType;
    }());
    var RegulatorsEntities = /** @class */ (function () {
        function RegulatorsEntities() {
            this.regulator = {
                id: null,
                name: null
            };
            this.entity = {
                id: null,
                name: null
            };
            this.status = null;
        }
        return RegulatorsEntities;
    }());

    var ParameterController = /** @class */ (function () {
        function ParameterController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        ParameterController.prototype.getParameterByOrgID = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/parameters");
        };
        ParameterController.prototype.getParameterByLayoutID = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/parameters");
        };
        ParameterController.prototype.getParameterByDeviceID = function (orgID, requestBody) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/devices/parameters", requestBody);
        };
        ParameterController.prototype.getParameterByEntityType = function (orgID, requestBody) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entity-type/parameters", requestBody);
        };
        ParameterController.prototype.getConsumptionParameter = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumption-parameters");
        };
        ParameterController.prototype.saveConsumptionParameter = function (orgID, parameter) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumption-parameters", parameter);
        };
        ParameterController.prototype.getSavedConsumptionParameter = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/saved-consumption-parameters");
        };
        return ParameterController;
    }());
    ParameterController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ParameterController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    // /tsc-library/
    var ResolveGuard = /** @class */ (function () {
        function ResolveGuard(router, storageService, parameterController) {
            this.router = router;
            this.storageService = storageService;
            this.parameterController = parameterController;
        }
        ResolveGuard.prototype.resolve = function (next, state) {
            var _this = this;
            var layoutID = this.storageService.getStorage('layoutID');
            var orgID = this.storageService.getStorage('currentOrgID');
            if (!layoutID) {
                this.router.navigate(['/not-found']);
                return false;
            }
            else {
                return this.parameterController.getSavedConsumptionParameter(orgID).pipe(operators.map(function (response) {
                    if (response && response.length == 0) {
                        _this.router.navigate(['/not-found']);
                        return false;
                    }
                    else {
                        return true;
                    }
                }), operators.catchError(function (error) {
                    console.log('error in getSavedConsumptionParameter -', error);
                    _this.router.navigate(['/not-found']);
                    return [false];
                }));
            }
        };
        return ResolveGuard;
    }());
    ResolveGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ResolveGuard, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$2.StorageService }, { token: ParameterController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ResolveGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ResolveGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ResolveGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$2.StorageService }, { type: ParameterController }]; } });

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function")
            throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn)
                context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access)
                context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done)
                throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0)
                    continue;
                if (result === null || typeof result !== "object")
                    throw new TypeError("Object expected");
                if (_ = accept(result.get))
                    descriptor.get = _;
                if (_ = accept(result.set))
                    descriptor.set = _;
                if (_ = accept(result.init))
                    initializers.unshift(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field")
                    initializers.unshift(_);
                else
                    descriptor[key] = _;
            }
        }
        if (target)
            Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    }
    ;
    function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    }
    ;
    function __propKey(x) {
        return typeof x === "symbol" ? x : "".concat(x);
    }
    ;
    function __setFunctionName(f, name, prefix) {
        if (typeof name === "symbol")
            name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    }
    ;
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function () { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }
    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
            throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }
    function __addDisposableResource(env, value, async) {
        if (value !== null && value !== void 0) {
            if (typeof value !== "object" && typeof value !== "function")
                throw new TypeError("Object expected.");
            var dispose;
            if (async) {
                if (!Symbol.asyncDispose)
                    throw new TypeError("Symbol.asyncDispose is not defined.");
                dispose = value[Symbol.asyncDispose];
            }
            if (dispose === void 0) {
                if (!Symbol.dispose)
                    throw new TypeError("Symbol.dispose is not defined.");
                dispose = value[Symbol.dispose];
            }
            if (typeof dispose !== "function")
                throw new TypeError("Object not disposable.");
            env.stack.push({ value: value, dispose: dispose, async: async });
        }
        else if (async) {
            env.stack.push({ async: true });
        }
        return value;
    }
    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    function __disposeResources(env) {
        function fail(e) {
            env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        function next() {
            while (env.stack.length) {
                var rec = env.stack.pop();
                try {
                    var result = rec.dispose && rec.dispose.call(rec.value);
                    if (rec.async)
                        return Promise.resolve(result).then(next, function (e) { fail(e); return next(); });
                }
                catch (e) {
                    fail(e);
                }
            }
            if (env.hasError)
                throw env.error;
        }
        return next();
    }
    var tslib_es6 = {
        __extends: __extends,
        __assign: __assign,
        __rest: __rest,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter,
        __generator: __generator,
        __createBinding: __createBinding,
        __exportStar: __exportStar,
        __values: __values,
        __read: __read,
        __spread: __spread,
        __spreadArrays: __spreadArrays,
        __spreadArray: __spreadArray,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues,
        __makeTemplateObject: __makeTemplateObject,
        __importStar: __importStar,
        __importDefault: __importDefault,
        __classPrivateFieldGet: __classPrivateFieldGet,
        __classPrivateFieldSet: __classPrivateFieldSet,
        __classPrivateFieldIn: __classPrivateFieldIn,
        __addDisposableResource: __addDisposableResource,
        __disposeResources: __disposeResources,
    };

    var ParameterService = /** @class */ (function () {
        function ParameterService(parameterController) {
            this.parameterController = parameterController;
        }
        ParameterService.prototype.getParameterByOrgID = function (orgID) {
            return __awaiter(this, void 0, void 0, function () {
                var parameterM, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.parameterController.getParameterByOrgID(orgID).toPromise()];
                        case 1:
                            parameterM = _a.sent();
                            if (parameterM) {
                                return [2 /*return*/, parameterM];
                            }
                            else {
                                return [2 /*return*/, [new Parameter()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, [new Parameter()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ParameterService.prototype.getParameterByLayoutID = function (orgID) {
            return __awaiter(this, void 0, void 0, function () {
                var parameterM, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.parameterController.getParameterByLayoutID(orgID).toPromise()];
                        case 1:
                            parameterM = _a.sent();
                            if (parameterM) {
                                return [2 /*return*/, parameterM];
                            }
                            else {
                                return [2 /*return*/, [new Parameter()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _a.sent();
                            console.error('Error -', error_2);
                            return [2 /*return*/, [new Parameter()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ParameterService.prototype.getParameterByDeviceID = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var parameterM, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.parameterController.getParameterByDeviceID(orgID, requestBody).toPromise()];
                        case 1:
                            parameterM = _a.sent();
                            if (parameterM) {
                                return [2 /*return*/, parameterM];
                            }
                            else {
                                return [2 /*return*/, [new Parameter()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_3 = _a.sent();
                            console.error('Error -', error_3);
                            return [2 /*return*/, [new Parameter()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ParameterService.prototype.getConsumptionParameter = function (orgID) {
            return __awaiter(this, void 0, void 0, function () {
                var consumptionParamM, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.parameterController.getConsumptionParameter(orgID).toPromise()];
                        case 1:
                            consumptionParamM = _a.sent();
                            if (consumptionParamM) {
                                return [2 /*return*/, consumptionParamM];
                            }
                            else {
                                return [2 /*return*/, new ConsumptionParameter()];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_4 = _a.sent();
                            console.error('Error -', error_4);
                            return [2 /*return*/, new ConsumptionParameter()];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ParameterService.prototype.getSavedConsumptionParameter = function (orgID) {
            return __awaiter(this, void 0, void 0, function () {
                var savedConsumptionParamM, error_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.parameterController.getSavedConsumptionParameter(orgID).toPromise()];
                        case 1:
                            savedConsumptionParamM = _a.sent();
                            if (savedConsumptionParamM) {
                                return [2 /*return*/, savedConsumptionParamM];
                            }
                            else {
                                return [2 /*return*/, [new SavedConsumptionParameter()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_5 = _a.sent();
                            console.error('Error -', error_5);
                            return [2 /*return*/, [new SavedConsumptionParameter()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return ParameterService;
    }());
    ParameterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterService, deps: [{ token: ParameterController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ParameterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: ParameterController }]; } });

    var AggregateDataController = /** @class */ (function () {
        function AggregateDataController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        AggregateDataController.prototype.getAggregateData = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/data/aggregate", requestBody, { headers: headers });
        };
        AggregateDataController.prototype.getMeterAggregateDataForReport = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/meter-data", requestBody, { headers: headers });
        };
        AggregateDataController.prototype.getDeviceAggregateData = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/devices/data/aggregate", requestBody, { headers: headers });
        };
        AggregateDataController.prototype.getCumulativeConsumption = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumption", requestBody, { headers: headers });
        };
        AggregateDataController.prototype.getEntityParameterData = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entity/parameter-data", requestBody, { headers: headers });
        };
        AggregateDataController.prototype.getAvoidedEmissionData = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/avoided-emissions", requestBody, { headers: headers });
        };
        return AggregateDataController;
    }());
    AggregateDataController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregateDataController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AggregateDataController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregateDataController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregateDataController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var AggregateDataService = /** @class */ (function () {
        function AggregateDataService(aggregateDataController) {
            this.aggregateDataController = aggregateDataController;
        }
        AggregateDataService.prototype.getAggregateData = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var aggregatedData, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.aggregateDataController.getAggregateData(orgID, requestBody).toPromise()];
                        case 1:
                            aggregatedData = _a.sent();
                            if (aggregatedData) {
                                return [2 /*return*/, aggregatedData];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            throw error_1;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AggregateDataService.prototype.getMeterAggregateDataForReport = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var meterReportData, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.aggregateDataController.getMeterAggregateDataForReport(orgID, requestBody).toPromise()];
                        case 1:
                            meterReportData = _a.sent();
                            if (meterReportData) {
                                return [2 /*return*/, [new MeterData()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _a.sent();
                            console.error('Error -', error_2);
                            throw error_2;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AggregateDataService.prototype.getDeviceAggregateData = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var deviceAggregateData, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.aggregateDataController.getDeviceAggregateData(orgID, requestBody).toPromise()];
                        case 1:
                            deviceAggregateData = _a.sent();
                            if (deviceAggregateData) {
                                return [2 /*return*/, deviceAggregateData];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_3 = _a.sent();
                            console.error('Error -', error_3);
                            throw error_3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return AggregateDataService;
    }());
    AggregateDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregateDataService, deps: [{ token: AggregateDataController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AggregateDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregateDataService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregateDataService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: AggregateDataController }]; } });

    // /tsc-library/
    var TrendComponent = /** @class */ (function () {
        function TrendComponent(data, storageService, dateService, parameterService, aggregateDataService, tscCommonService) {
            this.data = data;
            this.storageService = storageService;
            this.dateService = dateService;
            this.parameterService = parameterService;
            this.aggregateDataService = aggregateDataService;
            this.tscCommonService = tscCommonService;
            this.listConstant = LIST_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.dateTimeIntervalEnum = i2.DateTimeIntervalEnum;
            this.dialogEnum = i3.DialogEnum;
            this.parameterM = [new Parameter()];
            this.chartType = i10.ChartTypeEnum.BASIC_AREA_CHART;
            this.viewStateFlag = i10.ChartViewStateEnum.LOADING;
            this.chartTitle = new i10.ChartTitle();
            this.chartData = new i10.BasicAreaLineBarChart();
            this.dateRangeFC = new i2$1.FormControl('LAST_24_HRS', i2$1.Validators.required);
            this.trendData = data['trendData'];
        }
        TrendComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.dateRangeChange(this.dateRangeFC.value);
            this.getParameterByLayoutID();
        };
        TrendComponent.prototype.getParameterByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _f;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            _f = this;
                            return [4 /*yield*/, this.parameterService.getParameterByLayoutID(this.orgID)];
                        case 1:
                            _f.parameterM = (_g.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        TrendComponent.prototype.dateRangeChange = function (selectedDateRange) {
            this.startTime = this.dateService.getStartDateTime(selectedDateRange);
            switch (selectedDateRange) {
                case i2.DateTimeIntervalEnum.LAST_24_HRS:
                    this.endTime = this.dateService.getEndDateTime(i2.DateTimeIntervalEnum.CURRENT_TIME);
                    this.interval = 'min_15';
                    break;
                case i2.DateTimeIntervalEnum.LAST_7_DAYS:
                    this.endTime = this.dateService.getEndDateTime(i2.DateTimeIntervalEnum.CURRENT_DAY);
                    this.interval = 'hour_1';
                    break;
                case i2.DateTimeIntervalEnum.LAST_30_DAYS:
                    this.endTime = this.dateService.getEndDateTime(i2.DateTimeIntervalEnum.CURRENT_DAY);
                    this.interval = 'day_1';
                    break;
                default:
                    this.endTime = null;
                    this.interval = null;
                    break;
            }
            this.getTrendData();
        };
        TrendComponent.prototype.getCounterParameter = function (paramMetricValue) {
            var parameter = this.tscCommonService.getUniqueObject(this.parameterM, 'isCounter', paramMetricValue);
            return parameter ? parameter.isCounter : false;
        };
        TrendComponent.prototype.getTrendData = function () {
            var _a, _b, _c, _d, _e;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, isCounterParameter, trendRes, error_1;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            this.viewStateFlag = i10.ChartViewStateEnum.LOADING;
                            _f.label = 1;
                        case 1:
                            _f.trys.push([1, 3, , 4]);
                            requestData = new AggregateDataRequest();
                            isCounterParameter = this.getCounterParameter((_a = this.trendData) === null || _a === void 0 ? void 0 : _a.paramMetric);
                            requestData.interval = this.interval;
                            requestData.entityID = ((_b = this.trendData) === null || _b === void 0 ? void 0 : _b.entityID) ? [this.trendData.entityID] : null;
                            requestData.deviceID = ((_c = this.trendData) === null || _c === void 0 ? void 0 : _c.deviceID) ? [this.trendData.deviceID] : null;
                            requestData.entityType = (_d = this.trendData) === null || _d === void 0 ? void 0 : _d.entityType;
                            requestData.params = [
                                {
                                    name: this.trendData.paramMetric,
                                    dsAgg: "avg",
                                    agg: "avg",
                                    sourceLoadType: isCounterParameter ? "all" : null,
                                    source_or_load: isCounterParameter ? "source" : null,
                                }
                            ];
                            requestData.nullifyParams();
                            requestData.startTime = this.startTime;
                            requestData.endTime = this.endTime;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            trendRes = _f.sent();
                            if (((_e = trendRes === null || trendRes === void 0 ? void 0 : trendRes[0]) === null || _e === void 0 ? void 0 : _e.data.length) > 0) {
                                this.paramLabel = trendRes === null || trendRes === void 0 ? void 0 : trendRes[0].paramLabel;
                                this.chartData.metaData = trendRes === null || trendRes === void 0 ? void 0 : trendRes[0].data.map(function (item) { return ({
                                    name: moment__namespace(new Date(item.date)).format("YYYY-MM-DD HH:mm:ss"),
                                    value: item.value
                                }); });
                                this.chartData.unit = {
                                    name: '',
                                    code: trendRes === null || trendRes === void 0 ? void 0 : trendRes[0].unit,
                                };
                                this.chartData.yAxisLabel = (trendRes === null || trendRes === void 0 ? void 0 : trendRes[0].paramLabel) + ' (' + (trendRes === null || trendRes === void 0 ? void 0 : trendRes[0].unit) + ')';
                                this.chartData.showDataZoomSlider = true;
                                this.chartData.showDataView = true;
                                this.chartData.showMagicType = true;
                                this.chartData.showRestore = true;
                                this.chartData.showDownloadImage = true;
                                this.viewStateFlag = i10.ChartViewStateEnum.HAS_DATA;
                            }
                            else {
                                this.viewStateFlag = i10.ChartViewStateEnum.NO_DATA;
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _f.sent();
                            this.viewStateFlag = i10.ChartViewStateEnum.NO_DATA;
                            console.error("Error in getTrendData()", error_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return TrendComponent;
    }());
    TrendComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendComponent, deps: [{ token: i1$3.MAT_DIALOG_DATA }, { token: i1__namespace$2.StorageService }, { token: i2__namespace.DateService }, { token: ParameterService }, { token: AggregateDataService }, { token: i3__namespace.TSCCommonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TrendComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TrendComponent, selector: "lib-trend", ngImport: i0__namespace, template: "<div mat-dialog-title>\n    <strong class=\"dialogTitle\">\n        {{ paramLabel }} Trend\n    </strong>\n\n    <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\" matTooltip=\"Close\"\n        matTooltipPosition=\"before\">\n        <span class=\"material-symbols-outlined\" [mat-dialog-close]=\"dialogEnum.CLOSE_DR\">\n            close\n        </span>\n    </button>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <div class=\"row\">\n        <div class=\"col-sm-6\">\n            <mat-form-field class=\"matFieldWidth100\"\n                [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                <mat-label>Select daterange</mat-label>\n                <mat-select (selectionChange)=\"dateRangeChange($event.value)\" [formControl]=\"dateRangeFC\">\n                    <mat-option disabled>Select daterange</mat-option>\n                    <mat-option *ngFor=\"let daterange of listConstant.TREND_DATE_RANGE\" [value]=\"daterange.value\">\n                        {{ daterange.label }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <lib-basic-area-line-bar [chartTypeInp]=\"chartType\" [chartTitleInp]=\"chartTitle\" [viewStateInp]=\"viewStateFlag\"\n                [dataInp]=\"chartData\"></lib-basic-area-line-bar>\n        </div>\n    </div>\n</div>", components: [{ type: i6__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i10__namespace$1.BasicAreaLineBarComponent, selector: "lib-basic-area-line-bar", inputs: ["chartTypeInp", "viewStateInp", "chartTitleInp", "dataInp"] }], directives: [{ type: i1__namespace$3.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace$3.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1__namespace$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-trend',
                        templateUrl: './trend.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.MAT_DIALOG_DATA]
                        }] }, { type: i1__namespace$2.StorageService }, { type: i2__namespace.DateService }, { type: ParameterService }, { type: AggregateDataService }, { type: i3__namespace.TSCCommonService }];
        } });

    // /tsc-library/
    var TrendModule = /** @class */ (function () {
        function TrendModule() {
        }
        return TrendModule;
    }());
    TrendModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TrendModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendModule, declarations: [TrendComponent], imports: [i14.CommonModule,
            i10.BasicAreaLineBarModule,
            i2$1.ReactiveFormsModule,
            i1$3.MatDialogModule,
            i6.MatButtonModule,
            i12.MatInputModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i11.MatTooltipModule] });
    TrendModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendModule, imports: [[
                i14.CommonModule,
                i10.BasicAreaLineBarModule,
                i2$1.ReactiveFormsModule,
                i1$3.MatDialogModule,
                i6.MatButtonModule,
                i12.MatInputModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i11.MatTooltipModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            TrendComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i10.BasicAreaLineBarModule,
                            i2$1.ReactiveFormsModule,
                            i1$3.MatDialogModule,
                            i6.MatButtonModule,
                            i12.MatInputModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i11.MatTooltipModule,
                        ]
                    }]
            }] });

    // /tsc-library/
    var EntityDialogComponent = /** @class */ (function () {
        function EntityDialogComponent(dialogRef, data) {
            this.dialogRef = dialogRef;
            this.data = data;
            this.DialogEnum = i3.DialogEnum;
            this.entityFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.entityID = data === null || data === void 0 ? void 0 : data.entityID;
            this.entityType = data === null || data === void 0 ? void 0 : data.entityType;
            this.entityObject = data === null || data === void 0 ? void 0 : data.entityObject;
            this.dialogRef.disableClose = true;
        }
        EntityDialogComponent.prototype.ngOnInit = function () {
            if (this.entityID) {
                this.entityFC.patchValue(this.entityID);
            }
        };
        EntityDialogComponent.prototype.onEntityChange = function (selectedValue) {
            this.entityFC.patchValue(selectedValue);
            this.dialogRef.close({
                result: i3.DialogEnum.CLOSE_DR,
                entityID: this.entityFC.value
            });
        };
        return EntityDialogComponent;
    }());
    EntityDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDialogComponent, deps: [{ token: i1__namespace$3.MatDialogRef }, { token: i1$3.MAT_DIALOG_DATA }], target: i0__namespace.ɵɵFactoryTarget.Component });
    EntityDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: EntityDialogComponent, selector: "lib-entity", ngImport: i0__namespace, template: "<div mat-dialog-title>\n    <div class=\"row\">\n        <div class=\"col-sm-11\">\n            <div class=\"pageTitle dialogHeader fw-bold\"> Select Entity </div>\n            <div class=\"pageSubtitle\">\n                Entities displayed in gray color have never had consumption, whereas those in black have consumption.\n            </div>\n        </div>\n        <div class=\"col-sm-1\">\n            <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\"\n                matTooltip=\"Close\" matTooltipPosition=\"before\">\n                <span class=\"material-symbols-outlined\">\n                    close\n                </span>\n            </button>\n        </div>\n    </div>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <mat-radio-group [formControl]=\"entityFC\" (change)=\"onEntityChange($event.value)\" *ngIf=\"entityObject && entityObject.length > 0 && entityObject[0].id\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div *ngFor=\"let entity of entityObject; let i = index\" class=\"mt-2\">\n                    <mat-radio-button class=\"radioBtnLabel me-2\" [ngClass]=\"{'text-secondary': !entity.entityStatusFlag}\"\n                        [value]=\"entity.id\" [disabled]=\"!entity.entityStatusFlag\">\n                        {{ entity.name }}\n                    </mat-radio-button>\n                    <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                        <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <ng-template #recursiveTemplate let-entities>\n            <div *ngFor=\"let entity of entities; let i = index\" class=\"mt-2\">\n                <mat-radio-button class=\"radioBtnLabel me-2\" [ngClass]=\"{'text-secondary': !entity.entityStatusFlag}\"\n                    [value]=\"entity.id\" [disabled]=\"!entity.entityStatusFlag\">\n                    {{ entity.name }}\n                </mat-radio-button>\n                <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                    <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                </div>\n            </div>\n        </ng-template>\n    </mat-radio-group>\n</div>", components: [{ type: i6__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i13__namespace.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }], directives: [{ type: i1__namespace$3.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace$3.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1__namespace$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i13__namespace.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-entity',
                        templateUrl: './entity.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$3.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.MAT_DIALOG_DATA]
                        }] }];
        } });

    var EntityDialogModule = /** @class */ (function () {
        function EntityDialogModule() {
        }
        return EntityDialogModule;
    }());
    EntityDialogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDialogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EntityDialogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDialogModule, declarations: [EntityDialogComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i13.MatRadioModule,
            i12$1.MatIconModule,
            i6.MatButtonModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule] });
    EntityDialogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDialogModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i13.MatRadioModule,
                i12$1.MatIconModule,
                i6.MatButtonModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDialogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            EntityDialogComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i13.MatRadioModule,
                            i12$1.MatIconModule,
                            i6.MatButtonModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var DownloadReportComponent = /** @class */ (function () {
        function DownloadReportComponent() {
            this.listConstant = LIST_CONSTANT;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.fileTypeEnum = i3.FileTypeEnum;
            this.fileTypeEmitted = new i0.EventEmitter();
            this.excludeFileType = '';
        }
        DownloadReportComponent.prototype.ngOnInit = function () {
        };
        DownloadReportComponent.prototype.onChange = function (selectedType) {
            this.fileTypeEmitted.emit(selectedType);
        };
        DownloadReportComponent.prototype.ngOnChanges = function (changes) {
            if (changes.excludeFileTypeInp && this.excludeFileTypeInp) {
                this.excludeFileType = this.excludeFileTypeInp;
            }
        };
        return DownloadReportComponent;
    }());
    DownloadReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DownloadReportComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DownloadReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DownloadReportComponent, selector: "lib-download-report", inputs: { excludeFileTypeInp: "excludeFileTypeInp" }, outputs: { fileTypeEmitted: "fileTypeEmitted" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"btn-group\" ngbDropdown>\n    <button type=\"button\" ngbDropdownToggle class=\"btn btn-sm btn-primary ms-2 dropdownAfter\" matRipple\n        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n        <div class=\"d-flex align-items-center\">\n            <span class=\"me-2\">\n                Export as\n            </span>\n            <span class=\"material-symbols-outlined iconSize\">\n                arrow_drop_down\n            </span>\n        </div>\n    </button>\n\n    <div ngbDropdownMenu>\n        <button *ngFor=\"let type of listConstant.DOWNLOAD_TYPE\" class=\"dropdown-item\" [hidden]=\"excludeFileType == type.value\"\n            (click)=\"onChange(type.value)\">\n            <div class=\"d-flex align-items-center\">\n                <span class=\"material-symbols-outlined me-2 fs-5\" [ngSwitch]=\"type.value\">\n                    <span *ngSwitchCase=\"fileTypeEnum.PDF\" class=\"material-symbols-outlined pdfColor\">\n                        picture_as_pdf\n                    </span>\n                    <span *ngSwitchCase=\"fileTypeEnum.CSV\" class=\"material-symbols-outlined csvXlsxColor\">\n                        csv\n                    </span>\n                    <span *ngSwitchCase=\"fileTypeEnum.XLSX\" class=\"material-symbols-outlined csvXlsxColor\">\n                        description\n                    </span>\n                </span>\n                <span>\n                    {{ type.label }}\n                </span>\n            </div>\n        </button>\n    </div>\n</div>", styles: [".funnelFilterDD{width:0;height:0;overflow:hidden}.pdfColor{color:#dc3545}.csvXlsxColor{color:#1d712b}.iconSize{font-size:18px}\n"], directives: [{ type: i12__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i12__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i12__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DownloadReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-download-report',
                        templateUrl: './download-report.component.html',
                        styleUrls: ['./download-report.component.scss']
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { excludeFileTypeInp: [{
                    type: i0.Input
                }], fileTypeEmitted: [{
                    type: i0.Output
                }] } });

    var DownloadReportModule = /** @class */ (function () {
        function DownloadReportModule() {
        }
        return DownloadReportModule;
    }());
    DownloadReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DownloadReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DownloadReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DownloadReportModule, declarations: [DownloadReportComponent], imports: [i14.CommonModule,
            i12$2.NgbModule,
            i2$1.ReactiveFormsModule,
            i2$1.FormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i12$1.MatIconModule,
            i6.MatButtonModule,
            i10$1.MatRippleModule], exports: [DownloadReportComponent] });
    DownloadReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DownloadReportModule, imports: [[
                i14.CommonModule,
                i12$2.NgbModule,
                i2$1.ReactiveFormsModule,
                i2$1.FormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i12$1.MatIconModule,
                i6.MatButtonModule,
                i10$1.MatRippleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DownloadReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            DownloadReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i12$2.NgbModule,
                            i2$1.ReactiveFormsModule,
                            i2$1.FormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i12$1.MatIconModule,
                            i6.MatButtonModule,
                            i10$1.MatRippleModule
                        ],
                        exports: [DownloadReportComponent]
                    }]
            }] });

    var LayoutNotFoundComponent = /** @class */ (function () {
        function LayoutNotFoundComponent() {
        }
        LayoutNotFoundComponent.prototype.ngOnInit = function () {
        };
        return LayoutNotFoundComponent;
    }());
    LayoutNotFoundComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LayoutNotFoundComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    LayoutNotFoundComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: LayoutNotFoundComponent, selector: "lib-layout-not-found", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h-100\">\n    <div class=\"card-body\">\n        <div class=\"container d-flex align-items-center\">\n            <div class=\"mx-auto text-center\">\n                <img class=\"layoutNotFindImg\" src=\"/assets/images/tsc-restrict.jpg\" alt=\"Layout not found\" />\n                <br />\n                <br />\n                You don't have any layout to showcase the respective page. Please create a layout for better experience.\n                <br />\n                Click <a [href]=\"'layout/page'\">here</a> to create a layout.\n            </div>\n        </div>\n    </div>\n</div>\n", styles: [".layoutNotFindImg{max-width:450px}\n"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LayoutNotFoundComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-layout-not-found',
                        templateUrl: './layout-not-found.component.html',
                        styleUrls: ['./layout-not-found.component.scss']
                    }]
            }], ctorParameters: function () { return []; } });

    var LayoutNotFoundModule = /** @class */ (function () {
        function LayoutNotFoundModule() {
        }
        LayoutNotFoundModule.forRoot = function (environment) {
            return {
                ngModule: LayoutNotFoundModule,
                providers: [
                    { provide: 'environment', useValue: environment }
                ]
            };
        };
        return LayoutNotFoundModule;
    }());
    LayoutNotFoundModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LayoutNotFoundModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    LayoutNotFoundModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LayoutNotFoundModule, declarations: [LayoutNotFoundComponent], imports: [i14.CommonModule], exports: [LayoutNotFoundComponent] });
    LayoutNotFoundModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LayoutNotFoundModule, imports: [[
                i14.CommonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LayoutNotFoundModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            LayoutNotFoundComponent,
                        ],
                        imports: [
                            i14.CommonModule
                        ],
                        exports: [
                            LayoutNotFoundComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var TscRestrictComponent = /** @class */ (function () {
        function TscRestrictComponent(storageService, parameterService) {
            this.storageService = storageService;
            this.parameterService = parameterService;
            this.consumptionParameter = [new SavedConsumptionParameter()];
            this.setLayoutRedirectUrl = '/layout/page';
            this.setConsumptionRedirectUrl = '/preference/consumption-parameter/add';
        }
        TscRestrictComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.layoutID = this.storageService.getStorage('layoutID');
            this.getSavedConsumptionParameter();
        };
        TscRestrictComponent.prototype.getSavedConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.parameterService.getSavedConsumptionParameter(this.orgID)];
                        case 1:
                            _a.consumptionParameter = (_b.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        return TscRestrictComponent;
    }());
    TscRestrictComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscRestrictComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: ParameterService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TscRestrictComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TscRestrictComponent, selector: "lib-tsc-restrict", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h-100\">\n    <div class=\"card-body\">\n        <div class=\"container d-flex align-items-center\">\n            <div class=\"mx-auto text-center\">\n                <img class=\"img\" src=\"/assets/images/tsc-restrict.jpg\" alt=\"Not found\" />\n                <br />\n                <br />\n                <ng-container\n                    *ngIf=\"!consumptionParameter?.[0]?.['consumptionParamID'] && !layoutID; else setConsumptionParameter\">\n                    You have not set consumption parameters. Please add consumption parameters for better experience.\n                    <br />\n                    Click <a [href]=\"setConsumptionRedirectUrl\">here</a> to add consumption parameters.\n                    <br />\n                    <br />\n                    You don't have any layout to showcase the respective page. Please create a layout for better\n                    experience.\n                    <br />\n                    Click <a [href]=\"setLayoutRedirectUrl\">here</a> to create a layout.\n                </ng-container>\n                <ng-template #setConsumptionParameter>\n                    <ng-container\n                        *ngIf=\"!consumptionParameter?.[0]?.['consumptionParamID'] && layoutID; else setLayout\">\n                        You have not set consumption parameters. Please add consumption parameters for better\n                        experience.\n                        <br />\n                        Click <a [href]=\"setConsumptionRedirectUrl\">here</a> to add consumption parameters.\n                    </ng-container>\n                    <ng-template #setLayout>\n                        You don't have any layout to showcase the respective page. Please create a layout for better\n                        experience.\n                        <br />\n                        Click <a [href]=\"setLayoutRedirectUrl\">here</a> to create a layout.\n                    </ng-template>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>", styles: [".img{max-width:600px}\n"], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscRestrictComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-tsc-restrict',
                        templateUrl: './tsc-restrict.component.html',
                        styleUrls: ['./tsc-restrict.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: ParameterService }]; } });

    var TscRestrictModule = /** @class */ (function () {
        function TscRestrictModule() {
        }
        TscRestrictModule.forRoot = function (environment) {
            return {
                ngModule: TscRestrictModule,
                providers: [
                    { provide: 'environment', useValue: environment }
                ]
            };
        };
        return TscRestrictModule;
    }());
    TscRestrictModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscRestrictModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TscRestrictModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscRestrictModule, declarations: [TscRestrictComponent], imports: [i14.CommonModule], exports: [TscRestrictComponent] });
    TscRestrictModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscRestrictModule, imports: [[
                i14.CommonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TscRestrictModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            TscRestrictComponent,
                        ],
                        imports: [
                            i14.CommonModule
                        ],
                        exports: [
                            TscRestrictComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var SuccessComponent = /** @class */ (function () {
        function SuccessComponent(activatedRoute, router, layoutService, organizationService, storageService) {
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.layoutService = layoutService;
            this.organizationService = organizationService;
            this.storageService = storageService;
            this.redirectUrl = '/';
            this.noTimezone = './timezone-not-found';
            this.layoutM = [new i5.Layout()];
            this.timezone = null;
        }
        SuccessComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.activatedRoute.queryParams.subscribe(function (queryParam) {
                if (queryParam.redirectUrl) {
                    _this.redirectUrl = queryParam.redirectUrl;
                }
            });
            // INFO: SOMYA AGRAWAL
            // Clearing layoutID from storage in switch org because previous layoutID remains in local storage even if current org does not have any layout!
            this.storageService.deleteStorage('layoutID');
            this.timeZoneCheck();
        };
        SuccessComponent.prototype.timeZoneCheck = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.organizationService.getOrgTimezone()];
                        case 1:
                            _a.timezone = (_b.sent());
                            if (this.timezone) {
                                this.storageService.setStorage('timezone', this.timezone);
                                this.getLayoutsByOrgID();
                            }
                            else {
                                this.router.navigate([this.noTimezone]);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        SuccessComponent.prototype.getLayoutsByOrgID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var orgID, _a, defaultLayout, defaultLayoutID;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            orgID = this.storageService.getStorage('currentOrgID');
                            _a = this;
                            return [4 /*yield*/, this.layoutService.getLayoutByOrgID(orgID)];
                        case 1:
                            _a.layoutM = (_b.sent());
                            defaultLayout = this.layoutM.find(function (layout) { return layout.isDefault; });
                            if (defaultLayout) {
                                defaultLayoutID = defaultLayout.id;
                                this.storageService.setStorage('layoutID', defaultLayoutID);
                            }
                            else {
                                console.error('No layout found.');
                            }
                            this.router.navigate([this.redirectUrl]);
                            return [2 /*return*/];
                    }
                });
            });
        };
        return SuccessComponent;
    }());
    SuccessComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SuccessComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$1.Router }, { token: i5__namespace.LayoutService }, { token: i3__namespace$2.OrganizationService }, { token: i1__namespace$2.StorageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SuccessComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SuccessComponent, selector: "app-success", ngImport: i0__namespace, template: "<div class=\"d-flex h-100 justify-content-center align-items-center\">\n    <div class=\"text-center fs-4\"><img class=\"appAuthImg\"\n            src=\"assets/images/application-logo/tsc-with-name.png\" />\n        <br />\n        <br />\n        <span class=\"spinner-border spinner-border-sm text-success\"></span> ..\n    </div>\n</div>\n", styles: [".appAuthImg{height:55px}\n"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SuccessComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-success',
                        templateUrl: './success.component.html',
                        styleUrls: ['./success.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$1.Router }, { type: i5__namespace.LayoutService }, { type: i3__namespace$2.OrganizationService }, { type: i1__namespace$2.StorageService }]; } });

    // /tsc-library/
    var AggregationComponent = /** @class */ (function () {
        function AggregationComponent() {
            this.listConstant = LIST_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.allAggregationIDs = [];
            this.totalAggregationCount = 0;
            this.aggregationFC = new i2$1.FormControl(['avg'], [i2$1.Validators.required]);
            this.emitFilter = new i0.EventEmitter();
        }
        AggregationComponent.prototype.ngOnInit = function () {
            var _this = this;
            var aggregationList = this.listConstant.AGGREGATION;
            this.totalAggregationCount = aggregationList.length;
            aggregationList.forEach(function (aggregation) { return _this.allAggregationIDs.push(aggregation['value']); });
        };
        AggregationComponent.prototype.ngAfterViewInit = function () {
            this.emitFilter.emit();
        };
        AggregationComponent.prototype.selectAllAggregation = function () {
            if (!this.aggregationFC.value.includes(-1)) {
                this.aggregationFC.reset([]);
                return;
            }
            this.aggregationFC.setValue(__spreadArray([-1], __read(this.allAggregationIDs)));
            this.emitFilter.emit();
        };
        AggregationComponent.prototype.selectedAggregation = function () {
            var selected = this.aggregationFC.value;
            if (selected.includes(-1)) {
                selected.shift();
                this.aggregationFC.patchValue(selected);
            }
            else if (this.aggregationFC.value.length == this.totalAggregationCount) {
                this.allAggregationIDs.splice(0, 0, -1);
                this.aggregationFC.patchValue(this.allAggregationIDs);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.aggregationFC.patchValue(filteredSelected);
            }
            this.emitFilter.emit();
        };
        return AggregationComponent;
    }());
    AggregationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    AggregationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AggregationComponent, selector: "lib-aggregation", outputs: { emitFilter: "emitFilter" }, ngImport: i0__namespace, template: "<mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select aggregation</mat-label>\n    <mat-select [formControl]=\"aggregationFC\" multiple required>\n        <mat-option [value]=\"-1\" (click)=\"selectAllAggregation()\">\n            Select all\n        </mat-option>\n        <mat-option *ngFor=\"let aggregation of listConstant.AGGREGATION\" [value]=\"aggregation.value\"\n            (click)=\"selectedAggregation()\">\n            {{ aggregation.label }}\n        </mat-option>\n    </mat-select>\n    <mat-error *ngIf=\"aggregationFC.touched && aggregationFC.hasError('required')\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-aggregation',
                        templateUrl: './aggregation.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { emitFilter: [{
                    type: i0.Output
                }] } });

    var AggregationModule = /** @class */ (function () {
        function AggregationModule() {
        }
        return AggregationModule;
    }());
    AggregationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AggregationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationModule, declarations: [AggregationComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [AggregationComponent] });
    AggregationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            AggregationComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            AggregationComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var AggregationDurationComponent = /** @class */ (function () {
        function AggregationDurationComponent() {
            this.listConstant = LIST_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.aggDurationFC = new i2$1.FormControl('min_15', [i2$1.Validators.required]);
            this.emitFilter = new i0.EventEmitter();
        }
        AggregationDurationComponent.prototype.ngOnInit = function () {
        };
        AggregationDurationComponent.prototype.ngAfterViewInit = function () {
            this.emitFilter.emit();
        };
        AggregationDurationComponent.prototype.onChange = function (selectedAD) {
            this.aggDurationFC.patchValue(selectedAD);
            this.emitFilter.emit();
        };
        return AggregationDurationComponent;
    }());
    AggregationDurationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationDurationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    AggregationDurationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: { emitFilter: "emitFilter" }, ngImport: i0__namespace, template: "<mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select aggregation duration</mat-label>\n    <mat-select (selectionChange)=\"onChange($event.value)\" [formControl]=\"aggDurationFC\" required>\n        <mat-option *ngFor=\"let duration of listConstant.AGGREGATION_DURATION\" [value]=\"duration.value\">\n            {{ duration.label }}\n        </mat-option>\n    </mat-select>\n    <mat-error *ngIf=\"aggDurationFC.touched && aggDurationFC.hasError('required')\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationDurationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-aggregation-duration',
                        templateUrl: './aggregation-duration.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { emitFilter: [{
                    type: i0.Output
                }] } });

    var AggregationDurationModule = /** @class */ (function () {
        function AggregationDurationModule() {
        }
        return AggregationDurationModule;
    }());
    AggregationDurationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationDurationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AggregationDurationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationDurationModule, declarations: [AggregationDurationComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [AggregationDurationComponent] });
    AggregationDurationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationDurationModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AggregationDurationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            AggregationDurationComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            AggregationDurationComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var ParamMetricComponent = /** @class */ (function () {
        function ParamMetricComponent(storageService, parameterService) {
            this.storageService = storageService;
            this.parameterService = parameterService;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.parameterM = [new Parameter()];
            this.allParameterID = [];
            this.totalParameterCount = 0;
            this.parameterFC = new i2$1.FormControl([], [i2$1.Validators.required]);
            this.paramSearchUtil = new i3.MatSelectSearchService(['label']);
            this.emitFilter = new i0.EventEmitter();
        }
        ParamMetricComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
        };
        ParamMetricComponent.prototype.ngOnChanges = function (changes) {
            if (changes.deviceInp && this.deviceInp) {
                this.getParameterByDeviceID(this.deviceInp);
                this.parameterFC.reset([]);
                this.emitFilter.emit();
            }
        };
        ParamMetricComponent.prototype.getParameterByDeviceID = function (selectedDevices) {
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.allParameterID = [];
                            requestBody = {};
                            requestBody['deviceID'] = [selectedDevices];
                            _a = this;
                            return [4 /*yield*/, this.parameterService.getParameterByDeviceID(this.orgID, requestBody)];
                        case 1:
                            _a.parameterM = (_b.sent());
                            this.paramSearchUtil.entityArr = this.parameterM;
                            this.paramSearchUtil.createSubscription();
                            this.totalParameterCount = this.parameterM.length;
                            this.parameterM.forEach(function (parameter) { return _this.allParameterID.push(parameter['paramMetric']); });
                            this.emitFilter.emit();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ParamMetricComponent.prototype.selectAllParameters = function () {
            if (!this.parameterFC.value.includes(-1)) {
                this.parameterFC.reset([]);
                return;
            }
            this.parameterFC.setValue(__spreadArray([-1], __read(this.allParameterID)));
            this.emitFilter.emit();
        };
        ParamMetricComponent.prototype.selectedParameters = function () {
            var selected = this.parameterFC.value;
            if (selected.includes(-1)) {
                selected.shift();
                this.parameterFC.patchValue(selected);
            }
            else if (this.parameterFC.value.length == this.totalParameterCount) {
                this.allParameterID.splice(0, 0, -1);
                this.parameterFC.patchValue(this.allParameterID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.parameterFC.patchValue(filteredSelected);
            }
            this.emitFilter.emit();
        };
        return ParamMetricComponent;
    }());
    ParamMetricComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParamMetricComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: ParameterService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ParamMetricComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ParamMetricComponent, selector: "lib-param-metric", inputs: { deviceInp: "deviceInp" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0__namespace, template: "<mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select parameter</mat-label>\n\n    <mat-select [formControl]=\"parameterFC\" multiple required>\n        <ng-container *ngIf=\"parameterM && parameterM.length > 0 && parameterM[0]['id']; else noDataOption\">\n            <ngx-mat-select-search [formControl]=\"paramSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                noEntriesFoundLabel=\"No matching name found.\">\n            </ngx-mat-select-search>\n            <mat-option [value]=\"-1\" (click)=\"selectAllParameters()\" [hidden]=\"paramSearchUtil.filterFC.value\">\n                Select all\n            </mat-option>\n            <mat-option *ngFor=\"let parameter of paramSearchUtil.filteredEntities | async\" [value]=\"parameter.paramMetric\"\n                (click)=\"selectedParameters()\">\n                {{ parameter.label }}\n            </mat-option>\n        </ng-container>\n        <ng-template #noDataOption>\n            <mat-option disabled>\n                {{ commonConstant.NO_DATA_FOUND }}\n            </mat-option>\n        </ng-template>\n    </mat-select>\n\n    <mat-error *ngIf=\"!deviceInp\">\n        Please select device first\n    </mat-error>\n    <mat-error *ngIf=\"parameterFC.touched && parameterFC.hasError('required') && deviceInp\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParamMetricComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-param-metric',
                        templateUrl: './param-metric.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: ParameterService }]; }, propDecorators: { deviceInp: [{
                    type: i0.Input
                }], emitFilter: [{
                    type: i0.Output
                }] } });

    var ParamMetricModule = /** @class */ (function () {
        function ParamMetricModule() {
        }
        return ParamMetricModule;
    }());
    ParamMetricModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParamMetricModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ParamMetricModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParamMetricModule, declarations: [ParamMetricComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [ParamMetricComponent] });
    ParamMetricModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParamMetricModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParamMetricModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ParamMetricComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            ParamMetricComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var ParameterComponent = /** @class */ (function () {
        function ParameterComponent(storageService, parameterService) {
            this.storageService = storageService;
            this.parameterService = parameterService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.emitFilter = new i0.EventEmitter();
            this.parameterM = [new Parameter()];
            this.selectedParameterFC = new i2$1.FormControl('', [i2$1.Validators.required]);
            this.parameterSearchUtil = new i3.MatSelectSearchService(['label']);
        }
        ParameterComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getParameterByLayoutID();
        };
        ParameterComponent.prototype.getParameterByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.parameterService.getParameterByLayoutID(this.orgID)];
                        case 1:
                            _a.parameterM = (_b.sent());
                            this.parameterSearchUtil.entityArr = this.parameterM;
                            this.parameterSearchUtil.createSubscription();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ParameterComponent.prototype.parameterChange = function (selectedParameter) {
            this.selectedParameterFC.patchValue(selectedParameter);
            this.emitFilter.emit();
        };
        return ParameterComponent;
    }());
    ParameterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: ParameterService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ParameterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ParameterComponent, selector: "lib-parameter", outputs: { emitFilter: "emitFilter" }, ngImport: i0__namespace, template: "<div class=\"row\">\n    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n        <mat-label>Select parameter</mat-label>\n        <mat-select (selectionChange)=\"parameterChange($event.value)\" [formControl]=\"selectedParameterFC\" required>\n            <ng-container *ngIf=\"parameterM && parameterM.length > 0 && parameterM[0]['id']; else noDataFound\">\n                <mat-option>\n                    <ngx-mat-select-search [formControl]=\"parameterSearchUtil.filterFC\"\n                        placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                    </ngx-mat-select-search>\n                </mat-option>\n                <mat-option *ngFor=\"let parameter of parameterSearchUtil.filteredEntities | async\" [value]=\"parameter.id\">\n                    {{ parameter.label }}\n                </mat-option>\n            </ng-container>\n            <ng-template #noDataFound>\n                <mat-option disabled>\n                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                </mat-option>\n            </ng-template>\n        </mat-select>\n        <mat-error *ngIf=\"selectedParameterFC.hasError('required')\">\n            {{ FormErrorEnum.REQUIRED }}\n        </mat-error>\n    </mat-form-field>\n</div>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-parameter',
                        templateUrl: './parameter.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: ParameterService }]; }, propDecorators: { emitFilter: [{
                    type: i0.Output
                }] } });

    var ParameterModule = /** @class */ (function () {
        function ParameterModule() {
        }
        return ParameterModule;
    }());
    ParameterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ParameterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterModule, declarations: [ParameterComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [ParameterComponent] });
    ParameterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ParameterComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            ParameterComponent
                        ]
                    }]
            }] });

    var DropdownTypeEnum;
    (function (DropdownTypeEnum) {
        DropdownTypeEnum["SINGLE_DROPDOWN"] = "SINGLE";
        DropdownTypeEnum["MULTIPLE_DROPDOWN"] = "MULTIPLE";
    })(DropdownTypeEnum || (DropdownTypeEnum = {}));

    // /tsc-library/
    var DeviceController = /** @class */ (function () {
        function DeviceController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        DeviceController.prototype.getDeviceStatusInfo = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/devices/status");
        };
        DeviceController.prototype.getDevicesByEntityID = function (orgID, requestBody) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entities/devices", requestBody);
        };
        DeviceController.prototype.getUnMappedDevices = function (pageNo, pageSize, sortBy, orderBy, search, orgID, layoutID, entityID) {
            var params = new i1.HttpParams();
            params = params.append('pageNo', pageNo);
            params = params.append('pageSize', pageSize);
            params = params.append('sortBy', sortBy);
            params = params.append('orderBy', orderBy);
            search.forEach(function (search) { return params = params.append('search', search); });
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID + "/devices/unmapped", { params: params });
        };
        DeviceController.prototype.getMappedDevices = function (pageNo, pageSize, search, orgID, layoutID, entityID) {
            var params = new i1.HttpParams();
            params = params.append('pageNo', pageNo);
            params = params.append('pageSize', pageSize);
            search.forEach(function (search) { return params = params.append('search', search); });
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID + "/devices/mapped", { params: params });
        };
        DeviceController.prototype.saveDeviceMapping = function (orgID, layoutID, entityID, devices) {
            return this.http.patch(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID + "/map-devices", devices);
        };
        DeviceController.prototype.deleteDeviceMapping = function (orgID, layoutID, entityID, deviceID) {
            var params = new i1.HttpParams();
            params = params.append('deviceID', deviceID);
            return this.http.delete(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID + "/devices", { params: params });
        };
        DeviceController.prototype.updateSourceLoad = function (orgID, layoutID, entityID, deviceID, requestBody) {
            return this.http.patch(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID + "/devices/" + deviceID + "/source-load", requestBody);
        };
        return DeviceController;
    }());
    DeviceController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DeviceController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var DeviceService = /** @class */ (function () {
        function DeviceService(deviceController) {
            this.deviceController = deviceController;
        }
        DeviceService.prototype.getDevicesByEntityID = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var deviceM, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.deviceController.getDevicesByEntityID(orgID, requestBody).toPromise()];
                        case 1:
                            deviceM = _a.sent();
                            if (deviceM) {
                                return [2 /*return*/, deviceM];
                            }
                            else {
                                return [2 /*return*/, [new Device()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, [new Device()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return DeviceService;
    }());
    DeviceService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceService, deps: [{ token: DeviceController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DeviceService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: DeviceController }]; } });

    // /tsc-library/
    var DeviceComponent = /** @class */ (function () {
        function DeviceComponent(storageService, deviceService) {
            this.storageService = storageService;
            this.deviceService = deviceService;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.dropdownTypeEnum = DropdownTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.deviceM = [new Device()];
            this.allDeviceID = [];
            this.totalDeviceCount = 0;
            this.deviceFC = new i2$1.FormControl('', [i2$1.Validators.required]);
            this.multipleDeviceFC = new i2$1.FormControl([], [i2$1.Validators.required]);
            this.deviceSearchUtil = new i3.MatSelectSearchService(['name']);
            this.emitFilter = new i0.EventEmitter();
        }
        DeviceComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
        };
        DeviceComponent.prototype.ngOnChanges = function (changes) {
            var _a;
            if (changes.dropdownTypeInp && this.dropdownTypeInp) {
                this.dropdownType = this.dropdownTypeInp;
            }
            if (this.entityInp && ((_a = this.entityInp) === null || _a === void 0 ? void 0 : _a.length) != 0) {
                if (changes.entityInp) {
                    this.getDevicesByEntityID(this.entityInp);
                    this.deviceFC.patchValue(null);
                    this.emitFilter.emit();
                }
            }
        };
        DeviceComponent.prototype.getDevicesByEntityID = function (entityID) {
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            requestBody = { 'entityID': this.dropdownTypeInp == 'SINGLE' ? [entityID] : entityID };
                            _b = this;
                            return [4 /*yield*/, this.deviceService.getDevicesByEntityID(this.orgID, requestBody)];
                        case 1:
                            _b.deviceM = (_c.sent());
                            this.deviceSearchUtil.entityArr = this.deviceM;
                            this.deviceSearchUtil.createSubscription();
                            this.totalDeviceCount = this.deviceM.length;
                            this.deviceM.forEach(function (device) { return _this.allDeviceID.push(device['id']); });
                            this.emitFilter.emit();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceComponent.prototype.onChange = function (selectedDevice) {
            this.deviceFC.patchValue(selectedDevice);
            this.emitFilter.emit();
        };
        DeviceComponent.prototype.selectAllDevices = function () {
            if (!this.multipleDeviceFC.value.includes(-1)) {
                this.multipleDeviceFC.reset([]);
                return;
            }
            this.multipleDeviceFC.setValue(__spreadArray([-1], __read(this.allDeviceID)));
            this.emitFilter.emit();
        };
        DeviceComponent.prototype.selectedDevices = function () {
            var selected = this.multipleDeviceFC.value;
            if (selected.includes(-1)) {
                selected.shift();
                this.multipleDeviceFC.patchValue(selected);
            }
            else if (this.multipleDeviceFC.value.length == this.totalDeviceCount) {
                this.allDeviceID.splice(0, 0, -1);
                this.multipleDeviceFC.patchValue(this.allDeviceID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.multipleDeviceFC.patchValue(filteredSelected);
            }
            this.emitFilter.emit();
        };
        return DeviceComponent;
    }());
    DeviceComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: DeviceService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeviceComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DeviceComponent, selector: "lib-device", inputs: { dropdownTypeInp: "dropdownTypeInp", entityInp: "entityInp" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0__namespace, template: "<mat-form-field *ngIf=\"dropdownType == dropdownTypeEnum.SINGLE_DROPDOWN\" class=\"matFieldWidth100\"\n    [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select device</mat-label>\n    <mat-select (selectionChange)=\"onChange($event.value)\" [formControl]=\"deviceFC\" required>\n        <ng-container *ngIf=\"deviceM && deviceM.length > 0 && deviceM[0]['id']; else noDeviceFound\">\n            <mat-option>\n                <ngx-mat-select-search [formControl]=\"deviceSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                    noEntriesFoundLabel=\"No matching name found.\">\n                </ngx-mat-select-search>\n            </mat-option>\n            <mat-option *ngFor=\"let device of deviceSearchUtil.filteredEntities | async\" [value]=\"device.id\">\n                {{ device.name }}\n            </mat-option>\n        </ng-container>\n        <ng-template #noDeviceFound>\n            <mat-option disabled>\n                {{ commonConstant.NO_DATA_FOUND }}\n            </mat-option>\n        </ng-template>\n    </mat-select>\n    <mat-error *ngIf=\"!entityInp\">\n        Please select entity first\n    </mat-error>\n    <mat-error *ngIf=\"deviceFC.touched && deviceFC.hasError('required') && entityInp\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>\n\n<mat-form-field *ngIf=\"dropdownType == dropdownTypeEnum.MULTIPLE_DROPDOWN\" class=\"matFieldWidth100\"\n    [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select device</mat-label>\n\n    <mat-select [formControl]=\"multipleDeviceFC\" multiple required>\n        <ng-container *ngIf=\"deviceM && deviceM.length > 0 && deviceM[0]['id']; else noDataOption\">\n            <ngx-mat-select-search [formControl]=\"deviceSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                noEntriesFoundLabel=\"No matching name found.\">\n            </ngx-mat-select-search>\n            <mat-option [value]=\"-1\" (click)=\"selectAllDevices()\" [hidden]=\"deviceSearchUtil.filterFC.value\">\n                Select all\n            </mat-option>\n            <mat-option *ngFor=\"let device of deviceSearchUtil.filteredEntities | async\" [value]=\"device.id\"\n                (click)=\"selectedDevices()\">\n                {{ device.name }}\n            </mat-option>\n        </ng-container>\n        <ng-template #noDataOption>\n            <mat-option disabled>\n                {{ commonConstant.NO_DATA_FOUND }}\n            </mat-option>\n        </ng-template>\n    </mat-select>\n\n    <mat-error *ngIf=\"!entityInp\">\n        Please select entity first\n    </mat-error>\n    <mat-error *ngIf=\"multipleDeviceFC.touched && multipleDeviceFC.hasError('required') && entityInp\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-device',
                        templateUrl: './device.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: DeviceService }]; }, propDecorators: { dropdownTypeInp: [{
                    type: i0.Input
                }], entityInp: [{
                    type: i0.Input
                }], emitFilter: [{
                    type: i0.Output
                }] } });

    var DeviceModule = /** @class */ (function () {
        function DeviceModule() {
        }
        return DeviceModule;
    }());
    DeviceModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DeviceModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceModule, declarations: [DeviceComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [DeviceComponent] });
    DeviceModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DeviceModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            DeviceComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            DeviceComponent
                        ]
                    }]
            }] });

    var EntityController = /** @class */ (function () {
        function EntityController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        EntityController.prototype.getEntitiesHavingDevicesByOrgID = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entities-having-devices");
        };
        EntityController.prototype.getEntityByID = function (orgID, layoutID, entityID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID);
        };
        EntityController.prototype.getConsumptionEntities = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/consumption-entities");
        };
        EntityController.prototype.getEntitiesByParameterID = function (orgID, parameterID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/parameters/" + parameterID + "/entities");
        };
        EntityController.prototype.getEntitiesByLayoutID = function (orgID, layoutID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities");
        };
        EntityController.prototype.getEntitiesWithDevicesByLayoutID = function (orgID, layoutID, requestBody, skipLoader) {
            var headers = new i1.HttpHeaders().set('skipLoader', skipLoader);
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entity-device", requestBody, { headers: headers });
        };
        EntityController.prototype.getEntitiesByEntityType = function (orgID, requestBody) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entity-type/entities", requestBody);
        };
        EntityController.prototype.getEntitiesByParamMetric = function (orgID, paramName) {
            var params = new i1.HttpParams();
            params = params.append('paramName', paramName);
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/parameter-entities", { params: params });
        };
        EntityController.prototype.getEntityLevelConsumption = function (orgID, requestBody) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entities/load-consumption", requestBody);
        };
        EntityController.prototype.getEntityTypeByLayoutID = function (orgID, skipLoader) {
            var headers = new i1.HttpHeaders().set('skipLoader', skipLoader);
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entities/type", { headers: headers });
        };
        EntityController.prototype.createEntity = function (orgID, layoutID, entityID, entity) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID + "/add-child", entity);
        };
        EntityController.prototype.updateEntity = function (orgID, layoutID, entityID, entity) {
            return this.http.patch(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID, entity);
        };
        EntityController.prototype.deleteEntity = function (orgID, layoutID, entityID) {
            return this.http.delete(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/" + layoutID + "/entities/" + entityID);
        };
        EntityController.prototype.getEntityStatusInfo = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entities/status");
        };
        EntityController.prototype.getDashboardEntities = function (entityTypeFilterArr, orgID) {
            var params = new i1.HttpParams();
            entityTypeFilterArr.forEach(function (filter) { return params = params.append('filter', filter); });
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/dashboard/entities", { params: params });
        };
        return EntityController;
    }());
    EntityController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EntityController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var EntityService = /** @class */ (function () {
        function EntityService(entityController) {
            this.entityController = entityController;
        }
        EntityService.prototype.getEntitiesHavingDevicesByOrgID = function (orgID) {
            return __awaiter(this, void 0, void 0, function () {
                var entityM, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityController.getEntitiesHavingDevicesByOrgID(orgID).toPromise()];
                        case 1:
                            entityM = _a.sent();
                            if (entityM) {
                                return [2 /*return*/, entityM];
                            }
                            else {
                                return [2 /*return*/, [new Entity()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, [new Entity()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EntityService.prototype.getEntitiesByParameterID = function (orgID, parameterID) {
            return __awaiter(this, void 0, void 0, function () {
                var entityTreeM, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityController.getEntitiesByParameterID(orgID, parameterID).toPromise()];
                        case 1:
                            entityTreeM = _a.sent();
                            if (entityTreeM) {
                                return [2 /*return*/, entityTreeM];
                            }
                            else {
                                return [2 /*return*/, [new ParameterEntity()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _a.sent();
                            console.error('Error -', error_2);
                            return [2 /*return*/, [new ParameterEntity()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EntityService.prototype.getEntityTypeByLayoutID = function (orgID, skipLoader) {
            return __awaiter(this, void 0, void 0, function () {
                var entityTypeM, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityController.getEntityTypeByLayoutID(orgID, skipLoader).toPromise()];
                        case 1:
                            entityTypeM = _a.sent();
                            if (entityTypeM) {
                                return [2 /*return*/, entityTypeM];
                            }
                            else {
                                return [2 /*return*/, [new EntityType()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_3 = _a.sent();
                            console.error('Error -', error_3);
                            return [2 /*return*/, [new EntityType()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EntityService.prototype.getEntitiesWithDevicesByLayoutID = function (orgID, layoutID, requestBody, skipLoader) {
            return __awaiter(this, void 0, void 0, function () {
                var entityDeviceM, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityController.getEntitiesWithDevicesByLayoutID(orgID, layoutID, requestBody, skipLoader).toPromise()];
                        case 1:
                            entityDeviceM = _a.sent();
                            if (entityDeviceM) {
                                return [2 /*return*/, entityDeviceM];
                            }
                            else {
                                return [2 /*return*/, new ParameterEntity()];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_4 = _a.sent();
                            console.error('Error -', error_4);
                            return [2 /*return*/, new ParameterEntity()];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EntityService.prototype.getEntityByID = function (orgID, layoutID, entityID) {
            return __awaiter(this, void 0, void 0, function () {
                var layoutM, error_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityController.getEntityByID(orgID, layoutID, entityID).toPromise()];
                        case 1:
                            layoutM = _a.sent();
                            if (layoutM) {
                                return [2 /*return*/, layoutM];
                            }
                            else {
                                return [2 /*return*/, new Entity()];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_5 = _a.sent();
                            console.error('Error -', error_5);
                            return [2 /*return*/, new Entity()];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EntityService.prototype.getEntitiesByParamMetric = function (orgID, paramName) {
            return __awaiter(this, void 0, void 0, function () {
                var entityM, error_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityController.getEntitiesByParamMetric(orgID, paramName).toPromise()];
                        case 1:
                            entityM = _a.sent();
                            if (entityM) {
                                return [2 /*return*/, entityM];
                            }
                            else {
                                return [2 /*return*/, [new Entity()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_6 = _a.sent();
                            console.error('Error -', error_6);
                            return [2 /*return*/, [new Entity()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return EntityService;
    }());
    EntityService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityService, deps: [{ token: EntityController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EntityService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: EntityController }]; } });

    // /tsc-library/
    var EntityComponent = /** @class */ (function () {
        function EntityComponent(storageService, entityService) {
            this.storageService = storageService;
            this.entityService = entityService;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.dropdownTypeEnum = DropdownTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.entityM = [new Entity()];
            this.dropdownType = this.dropdownTypeEnum.SINGLE_DROPDOWN;
            this.allEntityID = [];
            this.totalEntityCount = 0;
            this.entityFC = new i2$1.FormControl('', [i2$1.Validators.required]);
            this.multipleEntityFC = new i2$1.FormControl([], [i2$1.Validators.required]);
            this.entitySearchUtil = new i3.MatSelectSearchService(['name']);
            this.emitFilter = new i0.EventEmitter();
        }
        EntityComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getEntitiesHavingDevicesByOrgID();
        };
        EntityComponent.prototype.ngOnChanges = function (changes) {
            if (changes.dropdownTypeInp && this.dropdownTypeInp) {
                this.dropdownType = this.dropdownTypeInp;
            }
        };
        EntityComponent.prototype.getEntitiesHavingDevicesByOrgID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntitiesHavingDevicesByOrgID(this.orgID)];
                        case 1:
                            _a.entityM = (_b.sent());
                            this.entitySearchUtil.entityArr = this.entityM;
                            this.entitySearchUtil.createSubscription();
                            this.totalEntityCount = this.entityM.length;
                            this.entityM.forEach(function (entity) { return _this.allEntityID.push(entity['id']); });
                            if (this.entityM.length > 0) {
                                this.entityFC.patchValue(this.entityM[0]['id']);
                                this.emitFilter.emit();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        EntityComponent.prototype.onChange = function (selectedEntity) {
            this.entityFC.patchValue(selectedEntity);
            this.emitFilter.emit();
        };
        EntityComponent.prototype.selectAllEntities = function () {
            if (!this.multipleEntityFC.value.includes(-1)) {
                this.multipleEntityFC.reset([]);
                return;
            }
            this.multipleEntityFC.setValue(__spreadArray([-1], __read(this.allEntityID)));
            this.emitFilter.emit();
        };
        EntityComponent.prototype.selectedEntities = function () {
            var selected = this.multipleEntityFC.value;
            if (selected.includes(-1)) {
                selected.shift();
                this.multipleEntityFC.patchValue(selected);
            }
            else if (this.multipleEntityFC.value.length == this.totalEntityCount) {
                this.allEntityID.splice(0, 0, -1);
                this.multipleEntityFC.patchValue(this.allEntityID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.multipleEntityFC.patchValue(filteredSelected);
            }
            this.emitFilter.emit();
        };
        return EntityComponent;
    }());
    EntityComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: EntityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    EntityComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: EntityComponent, selector: "lib-entity", inputs: { dropdownTypeInp: "dropdownTypeInp" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0__namespace, template: "<mat-form-field *ngIf=\"dropdownType == dropdownTypeEnum.SINGLE_DROPDOWN\" class=\"matFieldWidth100\"\n    [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select entity</mat-label>\n    <mat-select (selectionChange)=\"onChange($event.value)\" [formControl]=\"entityFC\" required>\n        <ng-container *ngIf=\"entityM && entityM.length > 0 && entityM[0]['id']; else noDataFound\">\n            <mat-option>\n                <ngx-mat-select-search [formControl]=\"entitySearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                    noEntriesFoundLabel=\"No matching name found.\">\n                </ngx-mat-select-search>\n            </mat-option>\n            <mat-option *ngFor=\"let entity of entitySearchUtil.filteredEntities | async\" [value]=\"entity.id\">\n                {{ entity.name }}\n            </mat-option>\n        </ng-container>\n        <ng-template #noDataFound>\n            <mat-option disabled>\n                {{ commonConstant.NO_DATA_FOUND }}\n            </mat-option>\n        </ng-template>\n    </mat-select>\n    <mat-error *ngIf=\"entityFC.touched && entityFC.hasError('required')\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>\n\n<mat-form-field *ngIf=\"dropdownType == dropdownTypeEnum.MULTIPLE_DROPDOWN\" class=\"matFieldWidth100\"\n    [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select entity</mat-label>\n\n    <mat-select [formControl]=\"multipleEntityFC\" multiple required>\n        <ng-container *ngIf=\"entityM && entityM.length > 0 && entityM[0]['id']; else noDataOption\">\n            <ngx-mat-select-search [formControl]=\"entitySearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                noEntriesFoundLabel=\"No matching name found.\">\n            </ngx-mat-select-search>\n            <mat-option [value]=\"-1\" (click)=\"selectAllEntities()\" [hidden]=\"entitySearchUtil.filterFC.value\">\n                Select all\n            </mat-option>\n            <mat-option *ngFor=\"let entity of entitySearchUtil.filteredEntities | async\" [value]=\"entity.id\"\n                (click)=\"selectedEntities()\">\n                {{ entity.name }}\n            </mat-option>\n        </ng-container>\n        <ng-template #noDataOption>\n            <mat-option disabled>\n                {{ commonConstant.NO_DATA_FOUND }}\n            </mat-option>\n        </ng-template>\n    </mat-select>\n    <mat-error *ngIf=\"multipleEntityFC.hasError('required')\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-entity',
                        templateUrl: './entity.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: EntityService }]; }, propDecorators: { dropdownTypeInp: [{
                    type: i0.Input
                }], emitFilter: [{
                    type: i0.Output
                }] } });

    var EntityModule = /** @class */ (function () {
        function EntityModule() {
        }
        return EntityModule;
    }());
    EntityModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EntityModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityModule, declarations: [EntityComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [EntityComponent] });
    EntityModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            EntityComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            EntityComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var EntityTypeComponent = /** @class */ (function () {
        function EntityTypeComponent(storageService, entityService) {
            this.storageService = storageService;
            this.entityService = entityService;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.entityTypeM = [new EntityType()];
            this.entityTypeFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.entityTypeSearchUtil = new i3.MatSelectSearchService(['type']);
            this.emitFilter = new i0.EventEmitter();
        }
        EntityTypeComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.layoutID = this.storageService.getStorage('layoutID');
            this.getEntityTypeByLayoutID();
        };
        EntityTypeComponent.prototype.getEntityTypeByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, defaultEntityType;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntityTypeByLayoutID(this.orgID, 'NO')];
                        case 1:
                            _a.entityTypeM = (_b.sent());
                            this.entityTypeSearchUtil.entityArr = this.entityTypeM;
                            this.entityTypeSearchUtil.createSubscription();
                            if (this.entityTypeM && this.entityTypeM.length > 0) {
                                defaultEntityType = this.entityTypeM[0].type;
                                if (defaultEntityType) {
                                    this.entityTypeFC.patchValue(defaultEntityType);
                                    this.emitFilter.emit();
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        EntityTypeComponent.prototype.onChange = function (selectedType) {
            this.entityTypeFC.patchValue(selectedType);
            this.emitFilter.emit();
        };
        return EntityTypeComponent;
    }());
    EntityTypeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityTypeComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: EntityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    EntityTypeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: EntityTypeComponent, selector: "lib-entity-type", outputs: { emitFilter: "emitFilter" }, ngImport: i0__namespace, template: "<mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n    <mat-label>Select entity type</mat-label>\n    <mat-select (selectionChange)=\"onChange($event.value)\" [formControl]=\"entityTypeFC\" required>\n        <ng-container *ngIf=\"entityTypeM && entityTypeM.length > 0 && entityTypeM?.[0]?.type; else noDataFound\">\n            <mat-option>\n                <ngx-mat-select-search [formControl]=\"entityTypeSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                    noEntriesFoundLabel=\"No matching name found.\">\n                </ngx-mat-select-search>\n            </mat-option>\n            <mat-option *ngFor=\"let type of entityTypeSearchUtil.filteredEntities | async\" [value]=\"type.type\">\n                {{ type.type | titlecase }}\n            </mat-option>\n        </ng-container>\n        <ng-template #noDataFound>\n            <mat-option disabled>\n                {{ commonConstant.NO_DATA_FOUND }}\n            </mat-option>\n        </ng-template>\n    </mat-select>\n    <mat-error *ngIf=\"entityTypeFC.touched && entityTypeFC.hasError('required')\">\n        {{ FormErrorEnum.REQUIRED }}\n    </mat-error>\n</mat-form-field>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i14__namespace.AsyncPipe, "titlecase": i14__namespace.TitleCasePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityTypeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-entity-type',
                        templateUrl: './entity-type.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: EntityService }]; }, propDecorators: { emitFilter: [{
                    type: i0.Output
                }] } });

    var EntityTypeModule = /** @class */ (function () {
        function EntityTypeModule() {
        }
        return EntityTypeModule;
    }());
    EntityTypeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityTypeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EntityTypeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityTypeModule, declarations: [EntityTypeComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [EntityTypeComponent] });
    EntityTypeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityTypeModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityTypeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            EntityTypeComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            EntityTypeComponent
                        ]
                    }]
            }] });

    var UnitController = /** @class */ (function () {
        function UnitController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        UnitController.prototype.getUnitByParameterID = function (orgID, parameterID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/parameters/" + parameterID + "/unit-type");
        };
        return UnitController;
    }());
    UnitController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var UnitService = /** @class */ (function () {
        function UnitService(unitController) {
            this.unitController = unitController;
        }
        UnitService.prototype.getUnitByParameterID = function (orgID, parameterID) {
            return __awaiter(this, void 0, void 0, function () {
                var unitM, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.unitController.getUnitByParameterID(orgID, parameterID).toPromise()];
                        case 1:
                            unitM = _a.sent();
                            if (unitM) {
                                return [2 /*return*/, unitM];
                            }
                            else {
                                return [2 /*return*/, [new Unit()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, [new Unit()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return UnitService;
    }());
    UnitService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitService, deps: [{ token: UnitController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: UnitController }]; } });

    // /tsc-library/
    var UnitComponent = /** @class */ (function () {
        function UnitComponent(storageService, unitService) {
            this.storageService = storageService;
            this.unitService = unitService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.emitFilter = new i0.EventEmitter();
            this.unitM = [new Unit()];
            this.selectedUnitFC = new i2$1.FormControl('', [i2$1.Validators.required]);
            this.unitSearchUtil = new i3.MatSelectSearchService(['name']);
        }
        UnitComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
        };
        UnitComponent.prototype.ngOnChanges = function (changes) {
            if (this.selectedParameterID) {
                if (changes.selectedParameterID) {
                    this.getUnitByParameterID(this.selectedParameterID);
                }
            }
        };
        UnitComponent.prototype.getUnitByParameterID = function (parameterID) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.unitService.getUnitByParameterID(this.orgID, parameterID)];
                        case 1:
                            _a.unitM = (_b.sent());
                            this.unitSearchUtil.entityArr = this.unitM;
                            this.unitSearchUtil.createSubscription();
                            return [2 /*return*/];
                    }
                });
            });
        };
        UnitComponent.prototype.unitChange = function (selectedUnit) {
            this.selectedUnitFC.patchValue(selectedUnit);
            this.emitFilter.emit();
        };
        return UnitComponent;
    }());
    UnitComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: UnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: UnitComponent, selector: "lib-unit", inputs: { selectedParameterID: "selectedParameterID" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"row\">\n    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n        <mat-label>Select unit</mat-label>\n\n        <mat-select (selectionChange)=\"unitChange($event.value)\" [formControl]=\"selectedUnitFC\" required>\n            <ng-container *ngIf=\"unitM && unitM.length > 0 && unitM[0]['id']; else noDataFound\">\n                <mat-option>\n                    <ngx-mat-select-search [formControl]=\"unitSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                        noEntriesFoundLabel=\"No matching name found.\">\n                    </ngx-mat-select-search>\n                </mat-option>\n                <mat-option *ngFor=\"let unit of unitSearchUtil.filteredEntities | async\" [value]=\"unit.id\">\n                    {{ unit.name }}\n                </mat-option>\n            </ng-container>\n            <ng-template #noDataFound>\n                <mat-option disabled>\n                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                </mat-option>\n            </ng-template>\n        </mat-select>\n\n        <mat-error *ngIf=\"!selectedParameterID\">\n            Please select parameter first\n        </mat-error>\n        <mat-error *ngIf=\"selectedUnitFC.hasError('required') && selectedParameterID\">\n            {{ FormErrorEnum.REQUIRED }}\n        </mat-error>\n    </mat-form-field>\n</div>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-unit',
                        templateUrl: './unit.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: UnitService }]; }, propDecorators: { selectedParameterID: [{
                    type: i0.Input
                }], emitFilter: [{
                    type: i0.Output
                }] } });

    var UnitModule = /** @class */ (function () {
        function UnitModule() {
        }
        return UnitModule;
    }());
    UnitModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitModule, declarations: [UnitComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [UnitComponent] });
    UnitModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UnitModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            UnitComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            UnitComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var HomeComponent = /** @class */ (function () {
        function HomeComponent(storageService, dateService, aggregateDataService, entityController, deviceController) {
            this.storageService = storageService;
            this.dateService = dateService;
            this.aggregateDataService = aggregateDataService;
            this.entityController = entityController;
            this.deviceController = deviceController;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.entityConsumption = [new EntityLevelConsumption()];
            this.deviceInfoM = new StatusInfo();
        }
        HomeComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.label = "Energy";
                this.icon = "bolt";
                this.paramKey = "engEnergyUsed";
                this.outerStrokeColor = "#fa9200";
                this.outerStrokeGradientStopColor = "#fdd130";
                this.innerStrokeColor = "#fbe2a6";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.label = "Water";
                this.icon = "water_drop";
                this.paramKey = "gwFlowTotalizer";
                this.outerStrokeColor = "#4882c2";
                this.outerStrokeGradientStopColor = "#53a9ff";
                this.innerStrokeColor = "#dbe7ff";
            }
            this.getTotalConsumption(i2.DateTimeIntervalEnum.CURRENT_DAY)
                .then(function (app) {
                _this.todayConsumption = app;
            });
            this.getTotalConsumption(i2.DateTimeIntervalEnum.CURRENT_MONTH)
                .then(function (app) {
                var _a, _b, _c, _d, _e, _f;
                _this.currentMonthConsumption = app;
                var totalConsumptionValue = (_d = (_c = (_b = (_a = _this.currentMonthConsumption) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b['data']) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d['value'];
                _this.totalConsumptionCircleData = {
                    percent: totalConsumptionValue,
                    maxPercent: 999999999,
                    units: (_f = (_e = _this.currentMonthConsumption) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.unit,
                    showUnits: true,
                    radius: 75,
                    space: 4,
                    outerStrokeGradient: true,
                    outerStrokeWidth: 10,
                    outerStrokeColor: _this.outerStrokeColor,
                    outerStrokeGradientStopColor: _this.outerStrokeGradientStopColor,
                    innerStrokeColor: _this.innerStrokeColor,
                    showBackground: false,
                    innerStrokeWidth: 5,
                    showSubtitle: false,
                    subtitleFormat: false,
                    startFromZero: false,
                    animationDuration: 500,
                    backgroundColor: '#ffffff',
                };
            });
            this.getTotalConsumption(i2.DateTimeIntervalEnum.CURRENT_YEAR)
                .then(function (app) {
                _this.currentYearConsumption = app;
            });
            this.getTotalEntitiesConsumption();
            this.getEntityLevelConsumption();
            this.getDeviceStatusInfo();
        };
        HomeComponent.prototype.getTotalConsumption = function (selectedRange) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, result, error_1;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            _g.trys.push([0, 2, , 3]);
                            requestData = new AggregateDataRequest();
                            if (selectedRange == i2.DateTimeIntervalEnum.CURRENT_DAY) {
                                requestData.startTime = this.dateService.getStartDateTime(i2.DateTimeIntervalEnum.CURRENT_DAY);
                                requestData.interval = 'day_1';
                            }
                            else if (selectedRange == i2.DateTimeIntervalEnum.CURRENT_MONTH) {
                                requestData.startTime = this.dateService.getStartDateTime(i2.DateTimeIntervalEnum.CURRENT_MONTH);
                                requestData.interval = 'month_1';
                            }
                            else if (selectedRange == i2.DateTimeIntervalEnum.CURRENT_YEAR) {
                                requestData.startTime = this.dateService.getStartDateTime(i2.DateTimeIntervalEnum.CURRENT_YEAR);
                                requestData.interval = 'year_1';
                            }
                            requestData.endTime = this.dateService.getEndDateTime(i2.DateTimeIntervalEnum.CURRENT_TIME);
                            requestData.params = [
                                {
                                    name: this.paramKey,
                                    dsAgg: "sum",
                                    agg: "sum",
                                    source_or_load: "source",
                                    sourceLoadType: "all"
                                }
                            ];
                            requestData.nullifyParams();
                            requestData.groupAll = true;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 1:
                            result = _g.sent();
                            return [2 /*return*/, result];
                        case 2:
                            error_1 = _g.sent();
                            console.error("Error in getTotalConsumption for (" + selectedRange + ")", error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        HomeComponent.prototype.getTotalEntitiesConsumption = function () {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, totalEntitiesConsumData, consumptionBreakupValue, error_2;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            _g.trys.push([0, 2, , 3]);
                            requestData = new AggregateDataRequest();
                            requestData.startTime = this.dateService.getStartDateTime(i2.DateTimeIntervalEnum.CURRENT_MONTH);
                            requestData.endTime = this.dateService.getEndDateTime(i2.DateTimeIntervalEnum.CURRENT_TIME);
                            requestData.interval = "month_1";
                            requestData.params = [
                                {
                                    name: this.paramKey,
                                    dsAgg: "sum",
                                    agg: "sum",
                                    source_or_load: "load",
                                    sourceLoadType: "all"
                                }
                            ];
                            requestData.nullifyParams();
                            requestData.groupAll = true;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 1:
                            totalEntitiesConsumData = _g.sent();
                            consumptionBreakupValue = (_c = (_b = (_a = totalEntitiesConsumData === null || totalEntitiesConsumData === void 0 ? void 0 : totalEntitiesConsumData[0]) === null || _a === void 0 ? void 0 : _a['data']) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c['value'];
                            this.consumptionBreakupCircleData = {
                                percent: consumptionBreakupValue,
                                maxPercent: 999999999,
                                units: (_d = totalEntitiesConsumData === null || totalEntitiesConsumData === void 0 ? void 0 : totalEntitiesConsumData[0]) === null || _d === void 0 ? void 0 : _d.unit,
                                showUnits: true,
                                radius: 75,
                                space: 4,
                                outerStrokeGradient: true,
                                outerStrokeWidth: 10,
                                outerStrokeColor: this.outerStrokeColor,
                                outerStrokeGradientStopColor: this.outerStrokeGradientStopColor,
                                innerStrokeColor: this.innerStrokeColor,
                                showBackground: false,
                                innerStrokeWidth: 5,
                                showSubtitle: false,
                                subtitleFormat: false,
                                startFromZero: false,
                                animationDuration: 500,
                                backgroundColor: '#ffffff',
                            };
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _g.sent();
                            console.error("Error in getTotalEntitiesConsumption()", error_2);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        HomeComponent.prototype.getEntityLevelConsumption = function () {
            var _this = this;
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.dateService.getStartDateTime(i2.DateTimeIntervalEnum.CURRENT_MONTH);
            requestData.endTime = this.dateService.getEndDateTime(i2.DateTimeIntervalEnum.CURRENT_TIME);
            requestData.interval = "month_1";
            requestData.params = [
                {
                    name: this.paramKey,
                    dsAgg: "sum",
                    agg: "sum",
                    source_or_load: "load",
                    sourceLoadType: "all"
                }
            ];
            requestData.nullifyParams();
            requestData.groupAll = false;
            this.entityController.getEntityLevelConsumption(this.orgID, requestData)
                .subscribe(function (entityConsumRes) {
                _this.entityConsumption = entityConsumRes;
            }, function (error) {
                console.log('error in getEntityLevelConsumption() -', error);
            });
        };
        HomeComponent.prototype.highestConsumptionEntity = function () {
            var _a, _b, _c;
            if (((_a = this.entityConsumption) === null || _a === void 0 ? void 0 : _a.length) == 0) {
                return null;
            }
            return (_b = this.entityConsumption) === null || _b === void 0 ? void 0 : _b.reduce(function (maxEntity, currentEntity) {
                return currentEntity.value > maxEntity.value ? currentEntity : maxEntity;
            }, (_c = this.entityConsumption) === null || _c === void 0 ? void 0 : _c[0]);
        };
        HomeComponent.prototype.calculateProgress = function (entity) {
            var highestConsumption = this.highestConsumptionEntity();
            if (!highestConsumption) {
                return 0;
            }
            var progress = (entity.value / highestConsumption.value) * 100;
            return progress;
        };
        HomeComponent.prototype.getDeviceStatusInfo = function () {
            var _this = this;
            this.deviceController.getDeviceStatusInfo(this.orgID)
                .subscribe(function (deviceRes) {
                _this.deviceInfoM = deviceRes;
            }, function (error) {
                console.log('error in getDeviceStatusInfo() -', error);
            });
        };
        return HomeComponent;
    }());
    HomeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace.DateService }, { token: AggregateDataService }, { token: EntityController }, { token: DeviceController }], target: i0__namespace.ɵɵFactoryTarget.Component });
    HomeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: HomeComponent, selector: "lib-home", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Home</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor cardHeight\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <span class=\"cardTitle\">\n                                Total {{ label }} Consumption\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"d-flex align-items-center\">\n                            <div class=\"col-sm-6\">\n                                <span class=\"centerAlign\">\n                                    <circle-progress [options]=\"totalConsumptionCircleData\" [renderOnClick]=\"false\"\n                                        class=\"copy\"></circle-progress>\n                                </span>\n                                <span class=\"centerAlign\">\n                                    This Month\n                                </span>\n                            </div>\n                            <div class=\"col-sm-6 ms-4\">\n                                <div class=\"row\">\n                                    <ng-container *ngTemplateOutlet=\"totalConsumption; context: {\n                                        label: 'Today',\n                                        value: todayConsumption?.[0]?.['data']?.[0]?.['value'],\n                                        unit: todayConsumption?.[0]?.['unit'],\n                                        matCardClass: 'today'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\">\n                                    <ng-container *ngTemplateOutlet=\"totalConsumption; context: {\n                                        label: 'This Month',\n                                        value: currentMonthConsumption?.[0]?.['data']?.[0]?.['value'],\n                                        unit: currentMonthConsumption?.[0]?.['unit'],\n                                        matCardClass: 'month'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\">\n                                    <ng-container *ngTemplateOutlet=\"totalConsumption; context: {\n                                        label: 'This Year',\n                                        value: currentYearConsumption?.[0]?.['data']?.[0]?.['value'],\n                                        unit: currentYearConsumption?.[0]?.['unit'],\n                                        matCardClass: 'year'\n                                    }\"></ng-container>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor cardHeight\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <span class=\"cardTitle\">\n                                {{ label }} Consumption Breakup\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"d-flex align-items-center\">\n                            <div class=\"col-sm-6\">\n                                <span class=\"centerAlign\">\n                                    <circle-progress [options]=\"consumptionBreakupCircleData\" [renderOnClick]=\"false\"\n                                        class=\"copy\"></circle-progress>\n                                </span>\n                                <span class=\"centerAlign\">\n                                    This Month\n                                </span>\n                            </div>\n                            <div class=\"col-sm-6\">\n                                <div class=\"row\" *ngIf=\"entityConsumption?.[0]?.id\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[0].name,\n                                        value: entityConsumption[0].value,\n                                        unit: entityConsumption[0].unit,\n                                        entityObj: entityConsumption[0],\n                                        outerProgressBarClass: 'progress1BGColor',\n                                        innerProgressBarClass: 'progress1Color'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\" *ngIf=\"entityConsumption?.[1]\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[1].name,\n                                        value: entityConsumption[1].value,\n                                        unit: entityConsumption[1].unit,\n                                        entityObj: entityConsumption[1],\n                                        outerProgressBarClass: 'progress2BGColor',\n                                        innerProgressBarClass: 'progress2Color'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\" *ngIf=\"entityConsumption?.[2]\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[2].name,\n                                        value: entityConsumption[2].value,\n                                        unit: entityConsumption[2].unit,\n                                        entityObj: entityConsumption[2],\n                                        outerProgressBarClass: 'progress3BGColor',\n                                        innerProgressBarClass: 'progress3Color'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\" *ngIf=\"entityConsumption?.[3]\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[3].name,\n                                        value: entityConsumption[3].value,\n                                        unit: entityConsumption[3].unit,\n                                        entityObj: entityConsumption[3],\n                                        outerProgressBarClass: 'progress4BGColor',\n                                        innerProgressBarClass: 'progress4Color'\n                                    }\"></ng-container>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n\n        <div class=\"row mt-4\">\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-info\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Total devices',\n                        count: deviceInfoM.total\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-success\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Online devices',\n                        count: deviceInfoM.online\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-warning\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Delayed devices',\n                        count: deviceInfoM.delay\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-danger\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Offline devices',\n                        count: deviceInfoM.offline\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #totalConsumption let-label=\"label\" let-value=\"value\" let-unit=\"unit\" let-matCardClass=\"matCardClass\"\n    let-outerProgressBarClass=\"outerProgressBarClass\" let-innerProgressBarClass=\"innerProgressBarClass\">\n    <div class=\"col-sm-12\">\n        <div class=\"d-flex align-items-center\">\n            <mat-card class=\"card main-card square d-flex justify-content-center me-2\" [class]=\"matCardClass\">\n                <span class=\"material-symbols-outlined\">\n                    {{ icon }}\n                </span>\n            </mat-card>\n            <div class=\"row\">\n                <span>{{ label }}</span><br />\n                <span class=\"text-primary fw-bold\">{{ value ? value : commonConstant.HYPHEN }} <span\n                        class=\"unitSize\">{{ value ? unit : '' }}</span></span>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #entityProgress let-name=\"name\" let-value=\"value\" let-unit=\"unit\" let-entityObj=\"entityObj\"\n    let-outerProgressBarClass=\"outerProgressBarClass\" let-innerProgressBarClass=\"innerProgressBarClass\">\n    <div class=\"col-sm-12\">\n        <span>\n            {{ name }}\n        </span>\n        <span class=\"float-end text-primary fw-bold\"> {{ value ? value : commonConstant.HYPHEN }}\n            <span class=\"unitSize\"> {{ value ? unit : '' }} </span>\n        </span>\n        <div class=\"progress progressBarRadius\" [class]=\"outerProgressBarClass\">\n            <div class=\"progress-bar progressBarRadius\" [class]=\"innerProgressBarClass\" role=\"progressbar\"\n                [style.width.%]=\"calculateProgress(entityObj)\"></div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #deviceStatus let-label=\"label\" let-count=\"count\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <span class=\"material-symbols-outlined\">\n                devices\n            </span>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-sm-12 fs-1 fw-bold centerAlign\">\n            {{ count != undefined && count != null ? count : commonConstant.HYPHEN }}\n        </div>\n    </div>\n    <div class=\"row mt-1\">\n        <div class=\"col-sm-12 fs-5 centerAlign\">\n            {{ label }}\n        </div>\n    </div>\n</ng-template>", styles: [".cardHeight{height:280px}.square{box-shadow:none!important;border-radius:6px!important;height:50px;width:50px}.unitSize{font-size:.66rem}.today{background-color:#f9dedc;color:#fa7d74}.month{background-color:#c2e7ff;color:#21a1f7}.year{background-color:#c4eed0;color:#04942d}.progressBarRadius{border-radius:16px!important}.progress1BGColor{background-color:#f9dedc}.progress2BGColor{background-color:#c2e7ff}.progress3BGColor{background-color:#fff0d1}.progress4BGColor{background-color:#c4eed0}.progress1Color{background-color:#fa7d74}.progress2Color{background-color:#21a1f7}.progress3Color{background-color:#ffbb29}.progress4Color{background-color:#04942d}.card-info{background-color:#cfe2ff;color:#084298}.card-success{background-color:#c3f1d9;color:#058844}.card-warning{background-color:#fff3cd;color:#664d03}.card-danger{background-color:#f8d7da;color:#842029}\n"], components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i7__namespace.CircleProgressComponent, selector: "circle-progress", inputs: ["name", "class", "backgroundGradient", "backgroundColor", "backgroundGradientStopColor", "backgroundOpacity", "backgroundStroke", "backgroundStrokeWidth", "backgroundPadding", "radius", "space", "percent", "toFixed", "maxPercent", "renderOnClick", "units", "unitsFontSize", "unitsFontWeight", "unitsColor", "outerStrokeGradient", "outerStrokeWidth", "outerStrokeColor", "outerStrokeGradientStopColor", "outerStrokeLinecap", "innerStrokeColor", "innerStrokeWidth", "titleFormat", "title", "titleColor", "titleFontSize", "titleFontWeight", "subtitleFormat", "subtitle", "subtitleColor", "subtitleFontSize", "subtitleFontWeight", "imageSrc", "imageHeight", "imageWidth", "animation", "animateTitle", "animateSubtitle", "animationDuration", "showTitle", "showSubtitle", "showUnits", "showImage", "showBackground", "showInnerStroke", "clockwise", "responsive", "startFromZero", "showZeroOuterStroke", "lazy", "options"], outputs: ["onClick"] }], directives: [{ type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-home',
                        templateUrl: './home.component.html',
                        styleUrls: ['./home.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace.DateService }, { type: AggregateDataService }, { type: EntityController }, { type: DeviceController }]; } });

    var routes$z = [
        {
            path: '',
            component: HomeComponent
        }
    ];
    var HomeRoutingModule = /** @class */ (function () {
        function HomeRoutingModule() {
        }
        return HomeRoutingModule;
    }());
    HomeRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    HomeRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    HomeRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$z)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$z)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var HomeModule = /** @class */ (function () {
        function HomeModule() {
        }
        return HomeModule;
    }());
    HomeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    HomeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeModule, declarations: [HomeComponent], imports: [i14.CommonModule,
            HomeRoutingModule,
            i9.MatCardModule,
            i11.MatTooltipModule,
            i12$3.PerfectScrollbarModule, i7__namespace.NgCircleProgressModule] });
    HomeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeModule, imports: [[
                i14.CommonModule,
                HomeRoutingModule,
                i9.MatCardModule,
                i11.MatTooltipModule,
                i12$3.PerfectScrollbarModule,
                i7.NgCircleProgressModule.forRoot(),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: HomeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            HomeComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            HomeRoutingModule,
                            i9.MatCardModule,
                            i11.MatTooltipModule,
                            i12$3.PerfectScrollbarModule,
                            i7.NgCircleProgressModule.forRoot(),
                        ]
                    }]
            }] });

    var ShiftController = /** @class */ (function () {
        function ShiftController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        ShiftController.prototype.getShift = function (orgID, skipLoader) {
            var headers = new i1.HttpHeaders().set('skipLoader', skipLoader);
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/shifts", { headers: headers });
        };
        return ShiftController;
    }());
    ShiftController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ShiftController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var ShiftService = /** @class */ (function () {
        function ShiftService(shiftController) {
            this.shiftController = shiftController;
        }
        ShiftService.prototype.getShift = function (orgID, skipLoader) {
            return __awaiter(this, void 0, void 0, function () {
                var shiftM, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.shiftController.getShift(orgID, skipLoader).toPromise()];
                        case 1:
                            shiftM = _a.sent();
                            if (shiftM) {
                                return [2 /*return*/, shiftM];
                            }
                            else {
                                return [2 /*return*/, [new Shift()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, [new Shift()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return ShiftService;
    }());
    ShiftService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftService, deps: [{ token: ShiftController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ShiftService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: ShiftController }]; } });

    // /tsc-library/
    var ShiftComponent = /** @class */ (function () {
        function ShiftComponent(storageService, shiftService) {
            this.storageService = storageService;
            this.shiftService = shiftService;
            this.emitFilter = new i0.EventEmitter();
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.shiftM = [new Shift()];
            this.allShiftID = [];
            this.totalShiftCount = 0;
            this.multiSelectedShiftFC = new i2$1.FormControl([], [i2$1.Validators.required]);
            this.shiftSearchUtil = new i3.MatSelectSearchService(['name']);
        }
        ShiftComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getShift();
        };
        ShiftComponent.prototype.getShift = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.shiftService.getShift(this.orgID, 'NO')];
                        case 1:
                            _a.shiftM = (_b.sent());
                            this.shiftSearchUtil.entityArr = this.shiftM;
                            this.shiftSearchUtil.createSubscription();
                            this.totalShiftCount = this.shiftM.length;
                            this.shiftM.forEach(function (shift) { return _this.allShiftID.push(shift['id']); });
                            this.emitFilter.emit();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ShiftComponent.prototype.selectAllShifts = function () {
            if (!this.multiSelectedShiftFC.value.includes(-1)) {
                this.multiSelectedShiftFC.reset([]);
                return;
            }
            this.multiSelectedShiftFC.setValue(__spreadArray([-1], __read(this.allShiftID)));
            this.emitFilter.emit();
        };
        ShiftComponent.prototype.selectedShift = function () {
            var selected = this.multiSelectedShiftFC.value;
            if (selected.includes(-1)) {
                selected.shift();
                this.multiSelectedShiftFC.patchValue(selected);
            }
            else if (this.multiSelectedShiftFC.value.length == this.totalShiftCount) {
                this.allShiftID.splice(0, 0, -1);
                this.multiSelectedShiftFC.patchValue(this.allShiftID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.multiSelectedShiftFC.patchValue(filteredSelected);
            }
            this.emitFilter.emit();
        };
        return ShiftComponent;
    }());
    ShiftComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: ShiftService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ShiftComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ShiftComponent, selector: "lib-shift", outputs: { emitFilter: "emitFilter" }, ngImport: i0__namespace, template: "<div class=\"row\">\n    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n        <mat-label>Select shift</mat-label>\n\n        <mat-select [formControl]=\"multiSelectedShiftFC\" multiple required>\n            <ng-container *ngIf=\"shiftM && shiftM.length > 0 && shiftM[0]['id']; else noDataOption\">\n                <mat-option>\n                    <ngx-mat-select-search [formControl]=\"shiftSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                        noEntriesFoundLabel=\"No matching name found.\">\n                    </ngx-mat-select-search>\n                </mat-option>\n                <mat-option [value]=\"-1\" (click)=\"selectAllShifts()\">\n                    Select all\n                </mat-option>\n                <mat-option *ngFor=\"let shift of shiftSearchUtil.filteredEntities | async\" [value]=\"shift.id\"\n                    (click)=\"selectedShift()\">\n                    {{ shift.name }}\n                </mat-option>\n            </ng-container>\n            <ng-template #noDataOption>\n                <mat-option disabled>\n                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                </mat-option>\n            </ng-template>\n        </mat-select>\n\n        <mat-error *ngIf=\"multiSelectedShiftFC.hasError('required')\">\n            {{ FormErrorEnum.REQUIRED }}\n        </mat-error>\n    </mat-form-field>\n</div>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-shift',
                        templateUrl: './shift.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: ShiftService }]; }, propDecorators: { emitFilter: [{
                    type: i0.Output
                }] } });

    var ShiftModule = /** @class */ (function () {
        function ShiftModule() {
        }
        return ShiftModule;
    }());
    ShiftModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ShiftModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftModule, declarations: [ShiftComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i3$1.MatFormFieldModule,
            i6$1.NgxMatSelectSearchModule], exports: [ShiftComponent] });
    ShiftModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i3$1.MatFormFieldModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ShiftModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ShiftComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i3$1.MatFormFieldModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            ShiftComponent
                        ]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionComponent = /** @class */ (function () {
        function ConsumptionComponent(storageService, activatedRoute, entityService, entityController, aggregateDataController, dialog) {
            this.storageService = storageService;
            this.activatedRoute = activatedRoute;
            this.entityService = entityService;
            this.entityController = entityController;
            this.aggregateDataController = aggregateDataController;
            this.dialog = dialog;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.frequencyConstant = i3.FREQUENCY_CONSTANT;
            this.frequencyEnum = i2.FrequencyEnum;
            this.frequency = [];
            this.entityM = new Entity();
            this.consumptionEntityM = [new EntityWithChildren()];
            this.viewStateFlag = i10.ChartViewStateEnum.LOADING;
            this.chartTitle = new i10.ChartTitle();
            this.chartData = new i10.StackBarChart();
        }
        ConsumptionComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.layoutID = this.storageService.getStorage('layoutID');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            this.timezone = this.storageService.getStorage('timezone');
            this.activatedRoute.queryParams
                .subscribe(function (queryParam) {
                _this.entityID = queryParam.entityID;
                if (_this.entityID) {
                    _this.getEntityByID(_this.entityID);
                }
            });
            this.frequency = this.frequencyConstant.filter(function (frequency) { return frequency.keyID != 'CUSTOM'; });
            this.defaultFrequency = this.frequencyEnum.MONTHLY;
            this.dateType = i2.DateTypeEnum.EXCLUSIVE;
            this.getConsumptionEntities();
        };
        ConsumptionComponent.prototype.getEntityByID = function (entityID) {
            return __awaiter(this, void 0, void 0, function () {
                var _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = this;
                            return [4 /*yield*/, this.entityService.getEntityByID(this.orgID, this.layoutID, entityID)];
                        case 1:
                            _b.entityM = _c.sent();
                            this.entityName = this.entityM.name;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionComponent.prototype.getConsumptionEntities = function () {
            var _this = this;
            this.entityController.getConsumptionEntities(this.orgID)
                .subscribe(function (res) {
                _this.consumptionEntityM = [res];
            }, function (error) {
                console.log('error in getConsumptionEntities() - ', error);
            });
        };
        ConsumptionComponent.prototype.dateFilterEmitted = function (data) {
            this.startDate = data.startDate;
            this.endDate = data.endDate;
            var selectedFrequency = data.frequency;
            if (selectedFrequency == this.frequencyEnum.DAILY) {
                this.interval = "hour_1";
            }
            else if (selectedFrequency == this.frequencyEnum.MONTHLY) {
                this.interval = "day_1";
            }
            else if (selectedFrequency == this.frequencyEnum.YEARLY) {
                this.interval = "month_1";
            }
            this.getCumulativeConsumption();
        };
        ConsumptionComponent.prototype.getCumulativeConsumption = function () {
            var _this = this;
            this.viewStateFlag = i10.ChartViewStateEnum.LOADING;
            var requestData = this.createDataRequest();
            this.aggregateDataController.getCumulativeConsumption(this.orgID, requestData)
                .subscribe(function (consumptionRes) {
                var _a;
                if (((_a = consumptionRes === null || consumptionRes === void 0 ? void 0 : consumptionRes.records) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    _this.chartData.metaData = consumptionRes.records.map(function (record) { return ({
                        xAxisSeries: moment__namespace(record.date).format("YYYY-MM-DD HH:mm:ss"),
                        totalData: {
                            value: record.totalConsumption.value,
                            unitCode: record.totalConsumption.unit
                        },
                        barData: record.paramData.map(function (param) { return ({
                            name: param.label,
                            value: param.value,
                            unit: {
                                code: param.unit
                            }
                        }); })
                    }); });
                    _this.chartData.totalDataLabel = 'Total consumption';
                    _this.chartData.showDataView = true;
                    _this.chartData.showMagicType = true;
                    _this.chartData.showRestore = true;
                    _this.chartData.showDownloadImage = true;
                    _this.viewStateFlag = i10.ChartViewStateEnum.HAS_DATA;
                }
                else {
                    _this.viewStateFlag = i10.ChartViewStateEnum.NO_DATA;
                }
            }, function (error) {
                _this.viewStateFlag = i10.ChartViewStateEnum.NO_DATA;
                console.log('error in getCumulativeConsumption() -', error);
            });
        };
        ConsumptionComponent.prototype.openEntityDialog = function () {
            var _this = this;
            var dialog = this.dialog.open(EntityDialogComponent, {
                data: {
                    entityID: this.entityID,
                    entityObject: this.consumptionEntityM
                },
                width: '50vw',
                height: '100%',
                position: { right: '-2px', top: '0px' },
            });
            dialog.afterClosed().subscribe(function (dialogRes) {
                if (dialogRes.entityID) {
                    _this.entityID = dialogRes.entityID;
                    _this.getEntityByID(_this.entityID);
                    _this.getCumulativeConsumption();
                }
            });
        };
        ConsumptionComponent.prototype.createDataRequest = function () {
            var requestBody = {};
            requestBody['startTime'] = this.startDate;
            requestBody['endTime'] = this.endDate;
            requestBody['interval'] = this.interval;
            requestBody['entityID'] = this.entityID ? this.entityID : null;
            return requestBody;
        };
        return ConsumptionComponent;
    }());
    ConsumptionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i1__namespace$1.ActivatedRoute }, { token: EntityService }, { token: EntityController }, { token: AggregateDataController }, { token: i1__namespace$3.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsumptionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumptionComponent, selector: "app-consumption", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Consumption Dashboard{{ entityName ? ' - ' + entityName : '' }}</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-8\">\n                <lib-date-filter-two [frequencyInp]=\"frequency\" [defaultFrequencyInp]=\"defaultFrequency\"\n                    [dateTypeInp]=\"dateType\" [showDefaultDurationInp]=\"true\" [timezoneInp]=\"timezone\"\n                    (dateFilterEmitter)=\"dateFilterEmitted($event)\"></lib-date-filter-two>\n            </div>\n            <div class=\"col-sm-4\">\n                <button class=\"btn btn-link selectEntityText mt-2 float-end\" type=\"button\" (click)=\"openEntityDialog()\">\n                    Change entity\n                </button>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <lib-stack-bar [chartTitleInp]=\"chartTitle\" [viewStateInp]=\"viewStateFlag\"\n                                [dataInp]=\"chartData\"></lib-stack-bar>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>", styles: [".selectEntityText{font-size:.88rem}\n"], components: [{ type: i2__namespace.DateFilterTwoComponent, selector: "lib-date-filter-two", inputs: ["materialFormFieldAppearanceInp", "frequencyInp", "defaultFrequencyInp", "dateTypeInp", "timezoneInp", "labelInp", "showDefaultDurationInp", "cdrFormatInp", "rangeInp", "showRangeInp", "showTimeInCDRInp", "showCdrRangeLabelInp"], outputs: ["dateFilterEmitter"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10__namespace$1.StackBarComponent, selector: "lib-stack-bar", inputs: ["viewStateInp", "chartTitleInp", "dataInp"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-consumption',
                        templateUrl: './consumption.component.html',
                        styleUrls: ['./consumption.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i1__namespace$1.ActivatedRoute }, { type: EntityService }, { type: EntityController }, { type: AggregateDataController }, { type: i1__namespace$3.MatDialog }]; } });

    var routes$y = [
        {
            path: '',
            component: ConsumptionComponent
        }
    ];
    var ConsumptionRoutingModule = /** @class */ (function () {
        function ConsumptionRoutingModule() {
        }
        return ConsumptionRoutingModule;
    }());
    ConsumptionRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ConsumptionRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$y)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$y)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionModule = /** @class */ (function () {
        function ConsumptionModule() {
        }
        return ConsumptionModule;
    }());
    ConsumptionModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionModule, declarations: [ConsumptionComponent], imports: [i14.CommonModule,
            ConsumptionRoutingModule,
            EntityDialogModule,
            i2.DateFilterTwoModule,
            i10.StackBarModule,
            i9.MatCardModule] });
    ConsumptionModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionModule, imports: [[
                i14.CommonModule,
                ConsumptionRoutingModule,
                EntityDialogModule,
                i2.DateFilterTwoModule,
                i10.StackBarModule,
                i9.MatCardModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ConsumptionComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ConsumptionRoutingModule,
                            EntityDialogModule,
                            i2.DateFilterTwoModule,
                            i10.StackBarModule,
                            i9.MatCardModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionBreakupDashboardComponent = /** @class */ (function () {
        function ConsumptionBreakupDashboardComponent(storageService, aggregateDataService, tscCommonService) {
            this.storageService = storageService;
            this.aggregateDataService = aggregateDataService;
            this.tscCommonService = tscCommonService;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.frequencyConstant = i3.FREQUENCY_CONSTANT;
            this.frequencyEnum = i2.FrequencyEnum;
            this.frequency = [];
            this.showLoader = true;
            this.viewStateFlagForSource = i10.ChartViewStateEnum.LOADING;
            this.viewStateFlagForLoad = i10.ChartViewStateEnum.LOADING;
            this.chartDataForSource = new i10.DoughnutChart();
            this.chartDataForLoad = new i10.DoughnutChart();
            this.chartTitleForSource = {
                name: 'Sourced',
                color: 'grey',
            };
            this.chartTitleForLoad = {
                name: 'Consumed',
                color: 'grey',
            };
        }
        ConsumptionBreakupDashboardComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            this.timezone = this.storageService.getStorage('timezone');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.paramMetric = "engEnergyUsed";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.paramMetric = "gwFlowTotalizer";
            }
            this.frequency = this.frequencyConstant.filter(function (frequency) { return frequency.keyID != 'CUSTOM'; });
            this.defaultFrequency = this.frequencyEnum.MONTHLY;
            this.dateType = i2.DateTypeEnum.EXCLUSIVE;
        };
        ConsumptionBreakupDashboardComponent.prototype.dateFilterEmitted = function (data) {
            var _this = this;
            this.startDate = data.startDate;
            this.endDate = data.endDate;
            var selectedFrequency = data.frequency;
            if (selectedFrequency == this.frequencyEnum.DAILY) {
                this.interval = "day_1";
            }
            else if (selectedFrequency == this.frequencyEnum.MONTHLY) {
                this.interval = "month_1";
            }
            else if (selectedFrequency == this.frequencyEnum.YEARLY) {
                this.interval = "year_1";
            }
            this.getOrgLevelSourceConsum("source").then(function (app) {
                _this.orgSourceRes = app;
            });
            this.getOrgLevelSourceConsum("load").then(function (app) {
                _this.orgConsumedRes = app;
            });
            this.getEntiyLevelConsumption();
        };
        ConsumptionBreakupDashboardComponent.prototype.getOrgLevelSourceConsum = function (category) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, result, error_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 2, 3, 4]);
                            requestData = this.createDataRequest(category, true);
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 1:
                            result = _c.sent();
                            return [2 /*return*/, result];
                        case 2:
                            error_1 = _c.sent();
                            console.error("Error in getOrgLevelSourceConsum(" + category + ")", error_1);
                            return [3 /*break*/, 4];
                        case 3:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionBreakupDashboardComponent.prototype.getEntiyLevelConsumption = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getEntityLevelSourceConsum("source")];
                        case 1:
                            _c.sent();
                            return [4 /*yield*/, this.getEntityLevelSourceConsum("load")];
                        case 2:
                            _c.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionBreakupDashboardComponent.prototype.getEntityLevelSourceConsum = function (category) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, result, chartData, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (category == 'source') {
                                this.viewStateFlagForSource = i10.ChartViewStateEnum.LOADING;
                            }
                            else {
                                this.viewStateFlagForLoad = i10.ChartViewStateEnum.LOADING;
                            }
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            requestData = this.createDataRequest(category, false);
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            result = _c.sent();
                            if ((result === null || result === void 0 ? void 0 : result.length) > 0) {
                                if (result === null || result === void 0 ? void 0 : result.every(function (item) { return item.data.length == 0; })) {
                                    if (category == 'source') {
                                        this.viewStateFlagForSource = i10.ChartViewStateEnum.NO_DATA;
                                    }
                                    else {
                                        this.viewStateFlagForLoad = i10.ChartViewStateEnum.NO_DATA;
                                    }
                                }
                                else {
                                    chartData = new i10.DoughnutChart();
                                    chartData = {
                                        showDataView: true,
                                        showRestore: true,
                                        showDownloadImage: true,
                                        metaData: result.map(function (item) {
                                            var _a, _b;
                                            return ({
                                                name: item.sourceLoadType,
                                                value: (_b = (_a = item.data) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value,
                                                unit: {
                                                    code: item.unit,
                                                },
                                            });
                                        }),
                                    };
                                    if (category == 'source') {
                                        this.chartDataForSource = chartData;
                                        this.viewStateFlagForSource = i10.ChartViewStateEnum.HAS_DATA;
                                    }
                                    else {
                                        this.chartDataForLoad = chartData;
                                        this.viewStateFlagForLoad = i10.ChartViewStateEnum.HAS_DATA;
                                    }
                                }
                            }
                            else {
                                if (category == 'source') {
                                    this.viewStateFlagForSource = i10.ChartViewStateEnum.NO_DATA;
                                }
                                else {
                                    this.viewStateFlagForLoad = i10.ChartViewStateEnum.NO_DATA;
                                }
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_2 = _c.sent();
                            if (category == 'source') {
                                this.viewStateFlagForSource = i10.ChartViewStateEnum.NO_DATA;
                            }
                            else {
                                this.viewStateFlagForLoad = i10.ChartViewStateEnum.NO_DATA;
                            }
                            console.error("Error in getEntityLevelSourceConsum(" + category + ")", error_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionBreakupDashboardComponent.prototype.createDataRequest = function (category, groupAll) {
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.interval;
            requestData.params = [
                {
                    name: this.paramMetric,
                    dsAgg: "sum",
                    agg: "sum",
                    source_or_load: category,
                    sourceLoadType: "all"
                }
            ];
            requestData.nullifyParams();
            requestData.groupAll = groupAll;
            return requestData;
        };
        return ConsumptionBreakupDashboardComponent;
    }());
    ConsumptionBreakupDashboardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: AggregateDataService }, { token: i3__namespace.TSCCommonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsumptionBreakupDashboardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumptionBreakupDashboardComponent, selector: "lib-consumption-breakup", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Consumption Breakup</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-date-filter-two [frequencyInp]=\"frequency\" [defaultFrequencyInp]=\"defaultFrequency\"\n                    [dateTypeInp]=\"dateType\" [showDefaultDurationInp]=\"true\" [timezoneInp]=\"timezone\"\n                    (dateFilterEmitter)=\"dateFilterEmitted($event)\"></lib-date-filter-two>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor\">\n                    <ng-container *ngTemplateOutlet=\"sourceConsumTemplate; context: {\n                        value: orgSourceRes?.[0]?.['data']?.[0]?.['value'],\n                        unit: orgSourceRes?.[0]?.['unit'],\n                        label: 'Sourced',\n                        loader: showLoader\n                        }\"></ng-container>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor\">\n                    <ng-container *ngTemplateOutlet=\"sourceConsumTemplate; context: {\n                        value: orgConsumedRes?.[0]?.['data']?.[0]?.['value'],\n                        unit: orgConsumedRes?.[0]?.['unit'],\n                        label: 'Consumed',\n                        loader: showLoader\n                        }\"></ng-container>\n                </mat-card>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <lib-doughnut [viewStateInp]=\"viewStateFlagForSource\" [chartTitleInp]=\"chartTitleForSource\" [dataInp]=\"chartDataForSource\"></lib-doughnut>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <lib-doughnut [viewStateInp]=\"viewStateFlagForLoad\" [chartTitleInp]=\"chartTitleForLoad\" [dataInp]=\"chartDataForLoad\"></lib-doughnut>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #sourceConsumTemplate let-label=\"label\" let-value=\"value\" let-unit=\"unit\" let-loader=\"loader\">\n    <ng-container *ngIf=\"loader; else dataTemplate\">\n        <lib-skeleton-loader [count]=\"1\" [appearance]=\"''\"\n            [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n    </ng-container>\n\n    <ng-template #dataTemplate>\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <span class=\"fs-2 fw-bold text-primary\">{{ value ? tscCommonService.formatLargeNumber(value, 'false', 1)\n                    : commonConstant.HYPHEN\n                    }}</span>\n                <span class=\"text-secondary fw-bold\"> {{ value ? unit : '' }} </span>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-sm-12 cardTitle\">\n                {{ label }}\n            </div>\n        </div>\n    </ng-template>\n</ng-template>", components: [{ type: i2__namespace.DateFilterTwoComponent, selector: "lib-date-filter-two", inputs: ["materialFormFieldAppearanceInp", "frequencyInp", "defaultFrequencyInp", "dateTypeInp", "timezoneInp", "labelInp", "showDefaultDurationInp", "cdrFormatInp", "rangeInp", "showRangeInp", "showTimeInCDRInp", "showCdrRangeLabelInp"], outputs: ["dateFilterEmitter"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10__namespace$1.DoughnutComponent, selector: "lib-doughnut", inputs: ["viewStateInp", "chartTitleInp", "dataInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-consumption-breakup',
                        templateUrl: './consumption-breakup.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: AggregateDataService }, { type: i3__namespace.TSCCommonService }]; } });

    var routes$x = [
        {
            path: '',
            component: ConsumptionBreakupDashboardComponent
        }
    ];
    var ConsumptionBreakupDashboardRoutingModule = /** @class */ (function () {
        function ConsumptionBreakupDashboardRoutingModule() {
        }
        return ConsumptionBreakupDashboardRoutingModule;
    }());
    ConsumptionBreakupDashboardRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionBreakupDashboardRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ConsumptionBreakupDashboardRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$x)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$x)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionBreakupDashboardModule = /** @class */ (function () {
        function ConsumptionBreakupDashboardModule() {
        }
        return ConsumptionBreakupDashboardModule;
    }());
    ConsumptionBreakupDashboardModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionBreakupDashboardModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardModule, declarations: [ConsumptionBreakupDashboardComponent], imports: [i14.CommonModule,
            ConsumptionBreakupDashboardRoutingModule,
            i2.DateFilterTwoModule,
            i3.SkeletonModule,
            i10.DoughnutModule,
            i9.MatCardModule] });
    ConsumptionBreakupDashboardModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardModule, imports: [[
                i14.CommonModule,
                ConsumptionBreakupDashboardRoutingModule,
                i2.DateFilterTwoModule,
                i3.SkeletonModule,
                i10.DoughnutModule,
                i9.MatCardModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupDashboardModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ConsumptionBreakupDashboardComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ConsumptionBreakupDashboardRoutingModule,
                            i2.DateFilterTwoModule,
                            i3.SkeletonModule,
                            i10.DoughnutModule,
                            i9.MatCardModule
                        ]
                    }]
            }] });

    var TrendService = /** @class */ (function () {
        function TrendService(dialog) {
            this.dialog = dialog;
        }
        TrendService.prototype.openDialog = function (trendData) {
            var dialogRef;
            dialogRef = this.dialog.open(TrendComponent, {
                data: {
                    trendData: trendData
                },
                minWidth: '620px',
                maxWidth: '620px'
            });
        };
        return TrendService;
    }());
    TrendService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendService, deps: [{ token: i1__namespace$3.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TrendService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TrendService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.MatDialog }]; } });

    var RecentDataController = /** @class */ (function () {
        function RecentDataController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        RecentDataController.prototype.getRecentDataWithParam = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/data/recent", requestBody, { headers: headers });
        };
        RecentDataController.prototype.getOrgRecentData = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/recent-data", requestBody, { headers: headers });
        };
        RecentDataController.prototype.getDeviceRecentData = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/devices/data/recent", requestBody, { headers: headers });
        };
        return RecentDataController;
    }());
    RecentDataController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RecentDataController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RecentDataController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RecentDataController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RecentDataController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var RecentDataService = /** @class */ (function () {
        function RecentDataService(recentDataController) {
            this.recentDataController = recentDataController;
        }
        RecentDataService.prototype.getRecentDataWithParam = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var recentDataWithParam, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.recentDataController.getRecentDataWithParam(orgID, requestBody).toPromise()];
                        case 1:
                            recentDataWithParam = _a.sent();
                            if (recentDataWithParam) {
                                return [2 /*return*/, recentDataWithParam];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            throw error_1;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        RecentDataService.prototype.getOrgRecentData = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var orgRes, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.recentDataController.getOrgRecentData(orgID, requestBody).toPromise()];
                        case 1:
                            orgRes = _a.sent();
                            if (orgRes) {
                                return [2 /*return*/, orgRes];
                            }
                            else {
                                return [2 /*return*/, [new OrgRecentData()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _a.sent();
                            console.error('Error -', error_2);
                            throw error_2;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        RecentDataService.prototype.getDeviceRecentData = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var deviceRes, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.recentDataController.getDeviceRecentData(orgID, requestBody).toPromise()];
                        case 1:
                            deviceRes = _a.sent();
                            if (deviceRes) {
                                return [2 /*return*/, deviceRes];
                            }
                            else {
                                return [2 /*return*/, [new DeviceRecentData()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_3 = _a.sent();
                            console.error('Error -', error_3);
                            throw error_3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return RecentDataService;
    }());
    RecentDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RecentDataService, deps: [{ token: RecentDataController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RecentDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RecentDataService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RecentDataService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: RecentDataController }]; } });

    // /tsc-library/
    var EntityDashboardComponent = /** @class */ (function () {
        function EntityDashboardComponent(storageService, entityService, recentDataService, dateService, trendService) {
            this.storageService = storageService;
            this.entityService = entityService;
            this.recentDataService = recentDataService;
            this.dateService = dateService;
            this.trendService = trendService;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.isAccordionOpen = true;
            //loader variable declaration
            this.entityTypeLoader = true;
            this.entityDeviceLoader = false;
            this.realTimeDeviceDataLoader = false;
            this.entityTypeM = [new EntityType()];
            this.entityDeviceM = new ParameterEntity();
            this.filteredEntityDeviceM = [];
            this.orgRecentDataM = [new OrgRecentData()];
            this.entityTypeFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.entityFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.entityTypeSearchUtil = new i3.MatSelectSearchService(['type']);
        }
        EntityDashboardComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.layoutID = this.storageService.getStorage('layoutID');
            this.timezone = this.storageService.getStorage('timezone');
            this.getEntityTypeByLayoutID();
        };
        EntityDashboardComponent.prototype.getEntityTypeByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, defaultEntityType, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, 3, 4]);
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntityTypeByLayoutID(this.orgID, 'YES')];
                        case 1:
                            _a.entityTypeM = (_b.sent());
                            this.entityTypeSearchUtil.entityArr = this.entityTypeM;
                            this.entityTypeSearchUtil.createSubscription();
                            if (this.entityTypeM && this.entityTypeM.length > 0) {
                                defaultEntityType = this.entityTypeM[0].type;
                                if (defaultEntityType) {
                                    this.entityTypeFC.patchValue(defaultEntityType);
                                    this.getEntitiesWithDevicesByLayoutID(this.entityTypeFC.value);
                                }
                            }
                            return [3 /*break*/, 4];
                        case 2:
                            error_1 = _b.sent();
                            console.error("Error in getEntityTypeByLayoutID()", error_1);
                            return [3 /*break*/, 4];
                        case 3:
                            this.entityTypeLoader = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        EntityDashboardComponent.prototype.entityTypeChange = function (selectedType) {
            this.entityFC.setValue('');
            this.entityTypeFC.patchValue(selectedType);
            this.orgRecentDataM = [new OrgRecentData()];
            this.getEntitiesWithDevicesByLayoutID(selectedType);
        };
        EntityDashboardComponent.prototype.getEntitiesWithDevicesByLayoutID = function (entityType) {
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _a, error_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, 3, 4]);
                            this.entityDeviceLoader = true;
                            requestBody = {
                                'entityType': [entityType]
                            };
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntitiesWithDevicesByLayoutID(this.orgID, this.layoutID, requestBody, 'YES')];
                        case 1:
                            _a.entityDeviceM = _b.sent();
                            this.filteredEntityDeviceM = [this.entityDeviceM];
                            return [3 /*break*/, 4];
                        case 2:
                            error_2 = _b.sent();
                            console.error("Error in getEntitiesWithDevicesByLayoutID()", error_2);
                            return [3 /*break*/, 4];
                        case 3:
                            this.entityDeviceLoader = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        EntityDashboardComponent.prototype.searchFn = function (value) {
            var searchTerm = value.trim().toLowerCase();
            if (searchTerm.length > 0) {
                this.filteredEntityDeviceM = this.searchEntities([this.entityDeviceM], searchTerm);
            }
            else {
                this.searchBar.searchClear();
                this.filteredEntityDeviceM = [this.entityDeviceM];
            }
        };
        EntityDashboardComponent.prototype.searchEntities = function (entities, searchTerm) {
            var _this = this;
            var results = [];
            entities.forEach(function (entity) {
                if (entity.name.toLowerCase().includes(searchTerm)) {
                    results.push(entity);
                }
                else if (entity.children && entity.children.length > 0) {
                    var matchingChildren = _this.searchEntities(entity.children, searchTerm);
                    if (matchingChildren.length > 0) {
                        var parentCopy = Object.assign({}, entity);
                        parentCopy.children = matchingChildren;
                        results.push(parentCopy);
                    }
                }
            });
            return results;
        };
        EntityDashboardComponent.prototype.openAccordion = function () {
            this.isAccordionOpen = true;
        };
        EntityDashboardComponent.prototype.closeAccordion = function () {
            this.isAccordionOpen = false;
        };
        EntityDashboardComponent.prototype.isDeviceAttached = function (entity) {
            return (entity.type == 'FACILITY' || entity.type == 'ENTITY') && entity.children && entity.children.some(function (child) { return child.type == 'DEVICE'; });
        };
        EntityDashboardComponent.prototype.onEntityDeviceSelection = function () {
            var selectedValue = this.entityFC.value;
            this.realTimeDeviceDataLoader = true;
            this.getOrgRecentData(selectedValue);
        };
        EntityDashboardComponent.prototype.getTooltipLabel = function (entity) {
            if (entity.type == 'FACILITY') {
                return 'Facility';
            }
            else if (entity.type == 'ENTITY') {
                return 'Entity';
            }
            else if (entity.type == 'DEVICE') {
                return 'Device';
            }
        };
        EntityDashboardComponent.prototype.getOrgRecentData = function (selectedValue) {
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _a, error_3;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, 3, 4]);
                            requestBody = new RecentDataRequestWithoutParam();
                            requestBody.entityID = selectedValue;
                            requestBody.timezone = this.timezone;
                            requestBody.backscan = 1;
                            _a = this;
                            return [4 /*yield*/, this.recentDataService.getOrgRecentData(this.orgID, requestBody)];
                        case 1:
                            _a.orgRecentDataM = (_b.sent());
                            return [3 /*break*/, 4];
                        case 2:
                            error_3 = _b.sent();
                            console.error("Error in getOrgRecentData()", error_3);
                            return [3 /*break*/, 4];
                        case 3:
                            this.realTimeDeviceDataLoader = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        EntityDashboardComponent.prototype.showTrend = function (paramMetric, entityID, deviceID) {
            var requestBody = {
                paramMetric: paramMetric,
                entityID: entityID,
                deviceID: deviceID
            };
            this.trendService.openDialog(requestBody);
        };
        return EntityDashboardComponent;
    }());
    EntityDashboardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: EntityService }, { token: RecentDataService }, { token: i2__namespace.DateService }, { token: TrendService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    EntityDashboardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: EntityDashboardComponent, selector: "lib-entity", viewQueries: [{ propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "scrollContainer", first: true, predicate: ["scrollContainer"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Entity Dashboard</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <ng-container *ngIf=\"entityTypeLoader; else showEntityType\">\n                <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 1 }\"></ng-container>\n            </ng-container>\n\n            <ng-template #showEntityType>\n                <div class=\"col-sm-3\">\n                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select entity type</mat-label>\n                        <mat-select (selectionChange)=\"entityTypeChange($event.value)\" [formControl]=\"entityTypeFC\" required>\n                            <ng-container *ngIf=\"entityTypeM && entityTypeM.length > 0 && entityTypeM?.[0]?.type; else noDataFound\">\n                                <mat-option>\n                                    <ngx-mat-select-search [formControl]=\"entityTypeSearchUtil.filterFC\"\n                                        placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                                    </ngx-mat-select-search>\n                                </mat-option>\n                                <mat-option *ngFor=\"let type of entityTypeSearchUtil.filteredEntities | async\"\n                                    [value]=\"type.type\">\n                                    {{ type.type | titlecase }}\n                                </mat-option>\n                            </ng-container>\n                            <ng-template #noDataFound>\n                                <mat-option disabled>\n                                    {{ commonConstant.NO_DATA_FOUND }}\n                                </mat-option>\n                            </ng-template>\n                        </mat-select>\n                        <mat-error *ngIf=\"entityTypeFC.touched && entityTypeFC.hasError('required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </ng-template>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"col-sm-6\">\n                <mat-accordion>\n                    <mat-expansion-panel class=\"matAccordion\" [expanded]=\"isAccordionOpen\" (opened)=\"openAccordion()\"\n                        (closed)=\"closeAccordion()\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                <div class=\"cardTitle\">\n                                    Select entity\n                                </div>\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <lib-search-bar-two class=\"float-end me-3\" #searchBar searchBy=\"name\"\n                                    (emitSearch)=\"searchFn($event)\">\n                                </lib-search-bar-two>\n                            </div>\n                        </div>\n                        \n                        <perfect-scrollbar class=\"scrollHeight\" [config]=\"{useBothWheelAxes: true, suppressScrollX: false, suppressScrollY: false}\" #scrollContainer>\n                            <ng-container *ngIf=\"entityDeviceLoader; else entityDeviceView\">\n                                <div class=\"mt-2\">\n                                    <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 3 }\"></ng-container>\n                                </div>\n                            </ng-container>\n                            <ng-template #entityDeviceView>\n                                <mat-radio-group [formControl]=\"entityFC\" (change)=\"onEntityDeviceSelection()\">\n                                    <div *ngFor=\"let entity of filteredEntityDeviceM\">\n                                        <ng-container *ngTemplateOutlet=\"entityTemplate; context:{ $implicit: entity }\"></ng-container>\n                                    </div>\n\n                                    <ng-template #entityTemplate let-entity>\n                                        <div class=\"ms-3 mt-2\">\n                                            <ng-container *ngIf=\"isDeviceAttached(entity); else entityView\">\n                                                <mat-radio-button class=\"radioBtnLabel me-2\" [value]=\"entity.id\">\n                                                    <span class=\"badge rounded-pill\" [ngClass]=\"{'facility': entity.type == 'FACILITY', 'entity': entity.type == 'ENTITY', 'device': entity.type == 'DEVICE'}\"\n                                                        [matTooltip]=\"getTooltipLabel(entity)\" matTooltipPosition=\"above\">\n                                                        <div class=\"d-flex align-items-center\">\n                                                            <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'FACILITY'\">factory</span>\n                                                            <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'ENTITY'\">domain</span>\n                                                            <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'DEVICE'\">devices</span>\n                                                            {{ entity.name }}\n                                                        </div>\n                                                    </span>\n                                                </mat-radio-button>\n                                            </ng-container>\n\n                                            <ng-template #entityView>\n                                                <span class=\"badge rounded-pill\" [ngClass]=\"{'facility': entity.type == 'FACILITY', 'entity': entity.type == 'ENTITY', 'device': entity.type == 'DEVICE'}\"\n                                                    [matTooltip]=\"getTooltipLabel(entity)\" matTooltipPosition=\"above\">\n                                                    <div class=\"d-flex align-items-center\">\n                                                        <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'FACILITY'\">factory</span>\n                                                        <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'ENTITY'\">domain</span>\n                                                        <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'DEVICE'\">devices</span>\n                                                        {{ entity.name }}\n                                                    </div>\n                                                </span>\n                                            </ng-template>\n                                        </div>\n\n                                        <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-3 mt-2\">\n                                            <ng-container *ngFor=\"let child of entity.children\">\n                                                <ng-container\n                                                    *ngTemplateOutlet=\"entityTemplate; context:{ $implicit: child }\"></ng-container>\n                                            </ng-container>\n                                        </div>\n                                    </ng-template>\n                                </mat-radio-group>\n                                \n                            </ng-template>\n                        </perfect-scrollbar>\n                    </mat-expansion-panel>\n                </mat-accordion>\n            </div>\n\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor cardHeight2\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"d-flex align-items-center\">\n                                <span class=\"material-symbols-outlined me-3\">\n                                    devices\n                                </span>\n                                <span class=\"cardTitle mt-1\">\n                                    Real time data\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <hr>\n                    <perfect-scrollbar class=\"scrollHeight\">\n                        <ng-container *ngIf=\"realTimeDeviceDataLoader; else realTimeDeviceDataView\">\n                            <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 3 }\"></ng-container>\n                        </ng-container>\n\n                        <ng-template #realTimeDeviceDataView>\n                            <ng-container *ngFor=\"let realTimeData of orgRecentDataM;\">\n                                <ng-container *ngTemplateOutlet=\"parameterSummary; context: {\n                                    device: realTimeData?.deviceData,\n                                    entityID: realTimeData?.entityID\n                                }\"></ng-container>\n                            </ng-container>\n                        </ng-template>\n                    </perfect-scrollbar>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #parameterSummary let-device=\"device\" let-entityID=\"entityID\">\n    <ng-container *ngFor=\"let deviceData of device;\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"d-flex align-items-center fw-bold\">\n                    <span class=\"material-symbols-outlined me-1\"\n                        [ngClass]=\"{'text-success': deviceData.status == 'LIVE', 'text-secondary': deviceData.status == 'OFFLINE' || deviceData.status == 'NO_DATA'}\">\n                        devices\n                    </span>\n                    {{ deviceData.name ? deviceData.name : commonConstant.HYPHEN }}\n                </div>\n            </div>\n        </div>\n        <div class=\"row mt-2\" *ngFor=\"let parameterData of deviceData.paramData;\">\n            <div class=\"col-sm-4 text-start text-secondary\">\n                {{ parameterData.label ? parameterData.label : commonConstant.HYPHEN }}\n            </div>\n            <div class=\"col-sm-4 text-center\">\n                <a class=\"text-primary cursorPointer fw-bold\" matTooltip=\"Trend\" matTooltipPosition=\"above\"\n                    (click)=\"showTrend(parameterData?.name, entityID, deviceData?.id)\">\n                    <span> {{ parameterData?.data?.value ? parameterData?.data?.value : commonConstant.HYPHEN }} </span>\n                    <span> {{ parameterData?.data?.value ? parameterData?.unit : '' }} </span>\n                </a>\n            </div>\n            <div class=\"col-sm-4 text-start text-secondary\">\n                {{ dateService.getRelativeTimeAgoLabel(parameterData?.data?.date, timezone) }}\n            </div>\n        </div>\n        <hr>\n    </ng-container>\n</ng-template>\n\n<ng-template #showLoader let-count=\"count\">\n    <lib-skeleton-loader [count]=\"count\" [appearance]=\"''\"\n        [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n</ng-template>", styles: [".labelColor{color:#0009}.matAccordion{box-shadow:none!important;background:whitesmoke;border-radius:16px!important}.badge{font-weight:normal;font-size:1em;padding:1.4px 15px;text-transform:none}.facility{background-color:#e3e2e2;color:#000}.entity{background-color:#e7effc;color:#084298}.device{background-color:#e0f7eb;color:#1c8a51}.cardHeight1{height:490px}.cardHeight2{height:520px}.scrollHeight{height:410px}\n"], components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i5__namespace$1.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i5__namespace$1.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { type: i3__namespace.SearchBarTwoComponent, selector: "lib-search-bar-two", inputs: ["type", "searchBy", "clear"], outputs: ["emitSearch"] }, { type: i12__namespace$1.PerfectScrollbarComponent, selector: "perfect-scrollbar", inputs: ["disabled", "usePSClass", "autoPropagation", "scrollIndicators", "config"], outputs: ["psScrollY", "psScrollX", "psScrollUp", "psScrollDown", "psScrollLeft", "psScrollRight", "psYReachEnd", "psYReachStart", "psXReachEnd", "psXReachStart"], exportAs: ["ngxPerfectScrollbar"] }, { type: i13__namespace.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i5__namespace$1.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i5__namespace$1.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i13__namespace.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }], pipes: { "async": i14__namespace.AsyncPipe, "titlecase": i14__namespace.TitleCasePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-entity',
                        templateUrl: './entity.component.html',
                        styleUrls: ['./entity.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: EntityService }, { type: RecentDataService }, { type: i2__namespace.DateService }, { type: TrendService }]; }, propDecorators: { searchBar: [{
                    type: i0.ViewChild,
                    args: ['searchBar']
                }], scrollContainer: [{
                    type: i0.ViewChild,
                    args: ['scrollContainer']
                }] } });

    var routes$w = [
        {
            path: '',
            component: EntityDashboardComponent
        }
    ];
    var EntityDashboardRoutingModule = /** @class */ (function () {
        function EntityDashboardRoutingModule() {
        }
        return EntityDashboardRoutingModule;
    }());
    EntityDashboardRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EntityDashboardRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    EntityDashboardRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$w)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$w)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var EntityDashboardModule = /** @class */ (function () {
        function EntityDashboardModule() {
        }
        return EntityDashboardModule;
    }());
    EntityDashboardModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EntityDashboardModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardModule, declarations: [EntityDashboardComponent], imports: [i14.CommonModule,
            EntityDashboardRoutingModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i3$1.MatFormFieldModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i1$4.MatButtonToggleModule,
            i5$1.MatExpansionModule,
            i10$1.MatOptionModule,
            i13.MatRadioModule,
            i11.MatTooltipModule,
            i6$1.NgxMatSelectSearchModule,
            i12$3.PerfectScrollbarModule,
            TrendModule,
            i3.SkeletonModule,
            i3.SearchBarTwoModule] });
    EntityDashboardModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardModule, providers: [TrendService], imports: [[
                i14.CommonModule,
                EntityDashboardRoutingModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i3$1.MatFormFieldModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i1$4.MatButtonToggleModule,
                i5$1.MatExpansionModule,
                i10$1.MatOptionModule,
                i13.MatRadioModule,
                i11.MatTooltipModule,
                i6$1.NgxMatSelectSearchModule,
                i12$3.PerfectScrollbarModule,
                TrendModule,
                i3.SkeletonModule,
                i3.SearchBarTwoModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDashboardModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            EntityDashboardComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            EntityDashboardRoutingModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i3$1.MatFormFieldModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i1$4.MatButtonToggleModule,
                            i5$1.MatExpansionModule,
                            i10$1.MatOptionModule,
                            i13.MatRadioModule,
                            i11.MatTooltipModule,
                            i6$1.NgxMatSelectSearchModule,
                            i12$3.PerfectScrollbarModule,
                            TrendModule,
                            i3.SkeletonModule,
                            i3.SearchBarTwoModule
                        ],
                        providers: [TrendService]
                    }]
            }] });

    var AlertService = /** @class */ (function () {
        function AlertService() {
        }
        AlertService.prototype.setAlertProperties = function (alertObject, label, content, type, icon) {
            alertObject.showAlert = true;
            alertObject.alertLabel = label;
            alertObject.alertContent = content;
            alertObject.messageAlertType = type;
            alertObject.messageAlertIcon = icon;
            return alertObject;
        };
        AlertService.prototype.resetAlertProperties = function (alertObject) {
            alertObject.showAlert = false;
            alertObject.alertLabel = '';
            alertObject.alertContent = '';
            alertObject.messageAlertType = '';
            alertObject.messageAlertIcon = '';
            return alertObject;
        };
        return AlertService;
    }());
    AlertService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AlertService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AlertService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AlertService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AlertService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }] });

    // /tsc-library/
    var FacilityComponent = /** @class */ (function () {
        function FacilityComponent(router, storageService, dateService, entityService, trendService, recentDataService, alertService) {
            this.router = router;
            this.storageService = storageService;
            this.dateService = dateService;
            this.entityService = entityService;
            this.trendService = trendService;
            this.recentDataService = recentDataService;
            this.alertService = alertService;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.entityTypeLoader = true;
            this.facilityDataLoader = false;
            this.entityTypeM = [new EntityType()];
            this.orgRecentDataM = [new OrgRecentData()];
            this.alertObj = new Alert();
            this.last48HrsMeterData = {};
            this.entityTypeFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.entityTypeSearchUtil = new i3.MatSelectSearchService(['type']);
        }
        FacilityComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.getEntityTypeByLayoutID();
        };
        FacilityComponent.prototype.getEntityTypeByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, defaultEntityType, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, 3, 4]);
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntityTypeByLayoutID(this.orgID, 'YES')];
                        case 1:
                            _a.entityTypeM = (_b.sent());
                            this.entityTypeSearchUtil.entityArr = this.entityTypeM;
                            this.entityTypeSearchUtil.createSubscription();
                            if (this.entityTypeM && this.entityTypeM.length > 0) {
                                defaultEntityType = this.entityTypeM[0].type;
                                if (defaultEntityType) {
                                    this.entityTypeFC.patchValue(defaultEntityType);
                                    this.getOrgRecentData(this.entityTypeFC.value);
                                }
                            }
                            return [3 /*break*/, 4];
                        case 2:
                            error_1 = _b.sent();
                            console.error("Error in getEntityTypeByLayoutID()", error_1);
                            return [3 /*break*/, 4];
                        case 3:
                            this.entityTypeLoader = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        FacilityComponent.prototype.entityTypeChange = function (selectedType) {
            // Clear the timer when changing the device
            clearTimeout(this.apiTimer);
            this.entityTypeFC.patchValue(selectedType);
            this.orgRecentDataM = [new OrgRecentData()];
            this.getOrgRecentData(selectedType);
        };
        FacilityComponent.prototype.getOrgRecentData = function (entityType) {
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _a, error_2;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.facilityDataLoader = true;
                            this.alertService.resetAlertProperties(this.alertObj);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            requestBody = new RecentDataRequestWithoutParam();
                            requestBody.timezone = this.timezone;
                            requestBody.entityType = entityType;
                            requestBody.backscan = 1;
                            _a = this;
                            return [4 /*yield*/, this.recentDataService.getOrgRecentData(this.orgID, requestBody)];
                        case 2:
                            _a.orgRecentDataM = (_b.sent());
                            if (this.orgRecentDataM && this.orgRecentDataM.length == 0) {
                                this.alertService.setAlertProperties(this.alertObj, exports.DashboardErrorEnum.DATA_NOT_FOUND_LABEL, exports.DashboardErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _b.sent();
                            console.error("Error in getOrgRecentData()", error_2);
                            this.alertService.setAlertProperties(this.alertObj, exports.DashboardErrorEnum.INVALID_ERROR_LABEL, exports.DashboardErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.apiTimer = setTimeout(function () {
                                _this.getOrgRecentData(entityType);
                            }, 300000);
                            this.facilityDataLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        FacilityComponent.prototype.getLast48HrsMeterData = function (deviceID, paramName) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, result, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            requestData = new RecentDataRequestWithParam();
                            requestData.params = [{ name: paramName }];
                            requestData.deviceID = [deviceID];
                            requestData.backscan = 48;
                            requestData.timezone = this.timezone;
                            return [4 /*yield*/, this.recentDataService.getRecentDataWithParam(this.orgID, requestData)];
                        case 1:
                            result = _a.sent();
                            if (result.length > 0) {
                                if (!this.last48HrsMeterData[deviceID]) {
                                    this.last48HrsMeterData[deviceID] = {};
                                }
                                this.last48HrsMeterData[deviceID][paramName] = result[0];
                            }
                            else {
                                if (!this.last48HrsMeterData[deviceID]) {
                                    this.last48HrsMeterData[deviceID] = {};
                                }
                                this.last48HrsMeterData[deviceID][paramName] = null;
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_3 = _a.sent();
                            console.error("Error in getLast48HrsMeterData()", error_3);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        FacilityComponent.prototype.showEntityConsumption = function (id) {
            this.router.navigate(['/analytics-insights/consumption'], { queryParams: { entityID: id } });
        };
        FacilityComponent.prototype.showTrend = function (paramMetric, deviceID, entityID) {
            var requestBody = {
                paramMetric: paramMetric,
                deviceID: deviceID,
                entityID: entityID
            };
            this.trendService.openDialog(requestBody);
        };
        FacilityComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.apiTimer);
        };
        return FacilityComponent;
    }());
    FacilityComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityComponent, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$2.StorageService }, { token: i2__namespace.DateService }, { token: EntityService }, { token: TrendService }, { token: RecentDataService }, { token: AlertService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FacilityComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: FacilityComponent, selector: "app-facility", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Facility Dashboard</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <ng-container *ngIf=\"entityTypeLoader; else showEntityType\">\n                <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 1 }\"></ng-container>\n            </ng-container>\n\n            <ng-template #showEntityType>\n                <div class=\"col-sm-3\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select entity type</mat-label>\n                        <mat-select (selectionChange)=\"entityTypeChange($event.value)\" [formControl]=\"entityTypeFC\"\n                            required>\n                            <ng-container *ngIf=\"entityTypeM && entityTypeM.length > 0 && entityTypeM?.[0]?.type; else noDataFound\">\n                                <mat-option>\n                                    <ngx-mat-select-search [formControl]=\"entityTypeSearchUtil.filterFC\"\n                                        placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                                    </ngx-mat-select-search>\n                                </mat-option>\n                                <mat-option *ngFor=\"let type of entityTypeSearchUtil.filteredEntities | async\"\n                                    [value]=\"type.type\">\n                                    {{ type.type | titlecase }}\n                                </mat-option>\n                            </ng-container>\n                            <ng-template #noDataFound>\n                                <mat-option disabled>\n                                    {{ commonConstant.NO_DATA_FOUND }}\n                                </mat-option>\n                            </ng-template>\n                        </mat-select>\n                        <mat-error *ngIf=\"entityTypeFC.touched && entityTypeFC.hasError('required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </ng-template>\n        </div>\n\n        <div class=\"row mt-2\" *ngIf=\"facilityDataLoader\">\n            <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 3 }\"></ng-container>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"alertObj.showAlert\" [labelInp]=\"alertObj.alertLabel\"\n                    [contentInp]=\"alertObj.alertContent\" [messageAlertTypeInp]=\"alertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"alertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\" *ngIf=\"orgRecentDataM.length > 0 && orgRecentDataM[0].orgID != null\">\n            <div class=\"col-sm-12 mb-3\" *ngFor=\"let recentRes of orgRecentDataM\">\n                <mat-card class=\"cardOverwrite border\">\n                    <div class=\"row mb-2\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"d-flex align-items-center\">\n                                <span class=\"cardTitle me-2\">{{ recentRes.entityName }}</span>\n                                <span class=\"badge rounded-pill info\">\n                                    {{ recentRes.entityType }}\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6 text-end\" *ngIf=\"recentRes.entityStatusFlag\">\n                            <a class=\"text-primary cursorPointer\" matTooltip=\"Entity consumption\"\n                                matTooltipPosition=\"below\"\n                                (click)=\"showEntityConsumption(recentRes.entityID)\">\n                                <span class=\"material-symbols-outlined fs-4 fw-bold\">monitoring</span>\n                            </a>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\" *ngFor=\"let deviceRes of recentRes.deviceData\">\n                            <div class=\"d-flex align-items-center\">\n                                <span class=\"material-symbols-outlined me-1\"\n                                    [ngClass]=\"{'text-success': deviceRes.status == 'LIVE', 'text-secondary': deviceRes.status == 'OFFLINE' || deviceRes.status == 'NO_DATA'}\">\n                                    devices\n                                </span>\n                                {{ deviceRes.name }}\n                            </div>\n\n                            <div class=\"row mt-2\">\n                                <div class=\"col-sm-4 mb-3\" *ngFor=\"let paramRes of deviceRes.paramData\">\n                                    <mat-card class=\"cardOverwrite cardBackgroundColor\">\n                                            <ng-container *ngTemplateOutlet=\"parameterData; context: {\n                                                duration: last48HrsMeterData[deviceRes.id]?.[paramRes.name]?.data?.date ? dateService.getRelativeTimeAgoLabel(last48HrsMeterData[deviceRes.id][paramRes.name]?.data?.date, timezone) : dateService.getRelativeTimeAgoLabel(paramRes?.data?.date, timezone),\n                                                value: last48HrsMeterData[deviceRes.id]?.[paramRes.name]?.data?.value != null ? last48HrsMeterData[deviceRes.id][paramRes.name]?.data?.value : paramRes?.data?.value,\n                                                unit: paramRes?.unit,\n                                                label: paramRes?.label,\n                                                entityID: recentRes?.entityID,\n                                                deviceID: deviceRes?.id,\n                                                paramName: paramRes?.name,\n                                                paramStatus: paramRes?.status\n                                            }\"></ng-container>\n                                    </mat-card>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #parameterData let-duration=\"duration\" let-label=\"label\" let-value=\"value\" let-unit=\"unit\"\n    let-entityID=\"entityID\" let-deviceID=\"deviceID\" let-paramName=\"paramName\" let-paramStatus=\"paramStatus\">\n    <div class=\"row\">\n        <div class=\"col-sm-6 textDurationWithAgoTime\">\n            {{ duration }}\n        </div>\n        <div class=\"col-sm-6 text-end\">\n            <a *ngIf=\"paramStatus == 'OFFLINE'\" class=\"text-secondary cursorPointer me-2\"\n                matTooltip=\"Currently parameter is offline, click here to see data of last 48 hrs.\" matTooltipPosition=\"below\"\n                (click)=\"getLast48HrsMeterData(deviceID, paramName)\">\n                <span class=\"material-symbols-outlined fs-5 fw-bold\">devices</span>\n            </a>\n\n            <a class=\"text-primary cursorPointer\" matTooltip=\"Trend\" matTooltipPosition=\"below\"\n                (click)=\"showTrend(paramName, deviceID, entityID)\">\n                <span class=\"material-symbols-outlined fs-5 fw-bold\">trending_up</span>\n            </a>\n        </div>\n    </div>\n    <div class=\"row mt-3\">\n        <div class=\"col-sm-12 text-center\">\n            <span class=\"fs-1 fw-bold text-primary\">{{ value ? value : commonConstant.HYPHEN }}</span>\n            <span class=\"text-secondary fw-bold\"> {{ value ? unit : '' }} </span>\n        </div>\n    </div>\n    <div class=\"row mt-4 mb-4\">\n        <div class=\"col-sm-12 fs-5 text-center\">\n            {{ label }}\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #showLoader let-count=\"count\">\n    <lib-skeleton-loader [count]=\"count\" [appearance]=\"''\"\n        [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n</ng-template>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i14__namespace.AsyncPipe, "titlecase": i14__namespace.TitleCasePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-facility',
                        templateUrl: './facility.component.html',
                        styleUrls: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$2.StorageService }, { type: i2__namespace.DateService }, { type: EntityService }, { type: TrendService }, { type: RecentDataService }, { type: AlertService }]; } });

    var routes$v = [
        {
            path: '',
            component: FacilityComponent
        }
    ];
    var FacilityRoutingModule = /** @class */ (function () {
        function FacilityRoutingModule() {
        }
        return FacilityRoutingModule;
    }());
    FacilityRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FacilityRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    FacilityRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$v)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$v)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var FacilityModule = /** @class */ (function () {
        function FacilityModule() {
        }
        return FacilityModule;
    }());
    FacilityModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FacilityModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityModule, declarations: [FacilityComponent], imports: [i14.CommonModule,
            FacilityRoutingModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i11.MatTooltipModule,
            i3$1.MatFormFieldModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i10$1.MatOptionModule,
            i6$1.NgxMatSelectSearchModule,
            TrendModule,
            i3.SkeletonModule,
            i3.SearchBarTwoModule,
            i3.MessageAlertModule] });
    FacilityModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityModule, providers: [TrendService], imports: [[
                i14.CommonModule,
                FacilityRoutingModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i11.MatTooltipModule,
                i3$1.MatFormFieldModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i10$1.MatOptionModule,
                i6$1.NgxMatSelectSearchModule,
                TrendModule,
                i3.SkeletonModule,
                i3.SearchBarTwoModule,
                i3.MessageAlertModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: FacilityModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            FacilityComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            FacilityRoutingModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i11.MatTooltipModule,
                            i3$1.MatFormFieldModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i10$1.MatOptionModule,
                            i6$1.NgxMatSelectSearchModule,
                            TrendModule,
                            i3.SkeletonModule,
                            i3.SearchBarTwoModule,
                            i3.MessageAlertModule
                        ],
                        providers: [TrendService]
                    }]
            }] });

    var EntityDeviceController = /** @class */ (function () {
        function EntityDeviceController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        EntityDeviceController.prototype.getDevicesWithEntities = function (orgID, requestBody) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/layouts/entities/devices", requestBody);
        };
        EntityDeviceController.prototype.getDevicesWithEntitiesByParameter = function (orgID, paramName) {
            var params = new i1.HttpParams();
            params = params.append('paramName', paramName);
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/entities-devices", { params: params });
        };
        return EntityDeviceController;
    }());
    EntityDeviceController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDeviceController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EntityDeviceController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDeviceController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDeviceController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var EntityDeviceService = /** @class */ (function () {
        function EntityDeviceService(entityDeviceController) {
            this.entityDeviceController = entityDeviceController;
        }
        EntityDeviceService.prototype.getDevicesWithEntities = function (orgID, requestBody) {
            return __awaiter(this, void 0, void 0, function () {
                var devicesWithEntitiesM, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityDeviceController.getDevicesWithEntities(orgID, requestBody).toPromise()];
                        case 1:
                            devicesWithEntitiesM = _a.sent();
                            if (devicesWithEntitiesM) {
                                return [2 /*return*/, devicesWithEntitiesM];
                            }
                            else {
                                return [2 /*return*/, [new DevicesWithEntities()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, [new DevicesWithEntities()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        EntityDeviceService.prototype.getDevicesWithEntitiesByParameter = function (orgID, paramMetric) {
            return __awaiter(this, void 0, void 0, function () {
                var devicesWithEntitiesM, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.entityDeviceController.getDevicesWithEntitiesByParameter(orgID, paramMetric).toPromise()];
                        case 1:
                            devicesWithEntitiesM = _a.sent();
                            if (devicesWithEntitiesM) {
                                return [2 /*return*/, devicesWithEntitiesM];
                            }
                            else {
                                return [2 /*return*/, [new DevicesWithEntities()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _a.sent();
                            console.error('Error -', error_2);
                            return [2 /*return*/, [new DevicesWithEntities()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return EntityDeviceService;
    }());
    EntityDeviceService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDeviceService, deps: [{ token: EntityDeviceController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EntityDeviceService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDeviceService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EntityDeviceService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: EntityDeviceController }]; } });

    // /tsc-library/
    var MeterDataDashboardComponent = /** @class */ (function () {
        function MeterDataDashboardComponent(storageService, recentDataService, entityDeviceService, parameterService, alertService, dateService, trendService) {
            this.storageService = storageService;
            this.recentDataService = recentDataService;
            this.entityDeviceService = entityDeviceService;
            this.parameterService = parameterService;
            this.alertService = alertService;
            this.dateService = dateService;
            this.trendService = trendService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.last48HrsMeterData = {};
            this.showAlert = false;
            this.showLoader = false;
            this.entityDeviceM = [new DevicesWithEntities()];
            this.parameterM = [new Parameter()];
            this.alertObj = new Alert();
            this.meterFC = new i2$1.FormControl();
            this.meterSearchUtil = new i3.MatSelectSearchService(['name']);
        }
        MeterDataDashboardComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.paramMetric = "engEnergyUsed";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.paramMetric = "gwFlowTotalizer";
            }
            this.getDevicesWithEntitiesByParameter();
        };
        MeterDataDashboardComponent.prototype.getDevicesWithEntitiesByParameter = function () {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter(this, void 0, void 0, function () {
                var _g, deviceID;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            _g = this;
                            return [4 /*yield*/, this.entityDeviceService.getDevicesWithEntitiesByParameter(this.orgID, this.paramMetric)];
                        case 1:
                            _g.entityDeviceM = (_h.sent());
                            this.meterSearchUtil.entityArr = this.entityDeviceM;
                            this.meterSearchUtil.createSubscription();
                            if (this.entityDeviceM.length > 0 && ((_b = (_a = this.entityDeviceM) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id)) {
                                deviceID = (_f = (_e = (_d = (_c = this.entityDeviceM) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d['devices']) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f['id'];
                                this.meterFC.patchValue(deviceID);
                                this.getParameterList();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        MeterDataDashboardComponent.prototype.meterChange = function (selectedMeter) {
            clearTimeout(this.apiTimer);
            this.showLoader = true;
            this.meterFC.patchValue(selectedMeter);
            this.getParameterList();
        };
        MeterDataDashboardComponent.prototype.getParameterList = function () {
            var selectedMeter = this.meterFC.value;
            this.getParameterByDeviceID(selectedMeter);
        };
        MeterDataDashboardComponent.prototype.getParameterByDeviceID = function (deviceID) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _g;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            requestBody = {};
                            requestBody['deviceID'] = [deviceID];
                            _g = this;
                            return [4 /*yield*/, this.parameterService.getParameterByDeviceID(this.orgID, requestBody)];
                        case 1:
                            _g.parameterM = (_h.sent());
                            if (this.parameterM.length > 0 && ((_b = (_a = this.parameterM) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id)) {
                                this.getRecentMeterData(deviceID);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        MeterDataDashboardComponent.prototype.getRecentMeterData = function (deviceID) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _g, error_1;
                var _this = this;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.alertObj);
                            _h.label = 1;
                        case 1:
                            _h.trys.push([1, 3, 4, 5]);
                            requestData = new RecentDataRequestWithParam();
                            requestData.params = this.parameterM.map(function (param) { return ({ name: param.paramMetric }); });
                            requestData.deviceID = [deviceID];
                            requestData.backscan = 1;
                            requestData.timezone = this.timezone;
                            _g = this;
                            return [4 /*yield*/, this.recentDataService.getRecentDataWithParam(this.orgID, requestData)];
                        case 2:
                            _g.meterDataRes = _h.sent();
                            if (((_a = this.meterDataRes) === null || _a === void 0 ? void 0 : _a.length) == 0) {
                                this.alertService.setAlertProperties(this.alertObj, exports.DashboardErrorEnum.DATA_NOT_FOUND_LABEL, exports.DashboardErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _h.sent();
                            console.error("Error in getRecentMeterData()", error_1);
                            this.alertService.setAlertProperties(this.alertObj, exports.DashboardErrorEnum.INVALID_ERROR_LABEL, exports.DashboardErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.apiTimer = setTimeout(function () {
                                _this.getRecentMeterData(deviceID);
                            }, 300000);
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        MeterDataDashboardComponent.prototype.getLast48HrsMeterData = function (paramName) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, result, error_2;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            _g.trys.push([0, 2, , 3]);
                            requestData = new RecentDataRequestWithParam();
                            requestData.params = [{ name: paramName }];
                            requestData.deviceID = [this.meterFC.value];
                            requestData.backscan = 48;
                            requestData.timezone = this.timezone;
                            return [4 /*yield*/, this.recentDataService.getRecentDataWithParam(this.orgID, requestData)];
                        case 1:
                            result = _g.sent();
                            if (result.length > 0) {
                                this.last48HrsMeterData[paramName] = result[0];
                            }
                            else {
                                this.last48HrsMeterData[paramName] = null;
                            }
                            this.currentParamName = paramName;
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _g.sent();
                            console.error("Error in getLast48HrsMeterData()", error_2);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        MeterDataDashboardComponent.prototype.showTrend = function (paramMetric, entityID) {
            var requestBody = {
                paramMetric: paramMetric,
                entityID: entityID,
                deviceID: this.meterFC.value
            };
            this.trendService.openDialog(requestBody);
        };
        MeterDataDashboardComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.apiTimer);
        };
        return MeterDataDashboardComponent;
    }());
    MeterDataDashboardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataDashboardComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: RecentDataService }, { token: EntityDeviceService }, { token: ParameterService }, { token: AlertService }, { token: i2__namespace.DateService }, { token: TrendService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MeterDataDashboardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MeterDataDashboardComponent, selector: "lib-meter-data", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Meter Data Dashboard</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\"\n                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select meter</mat-label>\n                    <mat-select (selectionChange)=\"meterChange($event.value)\" [formControl]=\"meterFC\" required>\n                        <ng-container\n                            *ngIf=\"entityDeviceM && entityDeviceM.length > 0 && entityDeviceM?.[0]?.id; else noDataFound\">\n                            <mat-option>\n                                <ngx-mat-select-search [formControl]=\"meterSearchUtil.filterFC\"\n                                    placeholderLabel=\"Search by entity name\"\n                                    noEntriesFoundLabel=\"No matching name found.\">\n                                </ngx-mat-select-search>\n                            </mat-option>\n                            <mat-optgroup *ngFor=\"let entity of meterSearchUtil.filteredEntities | async\"\n                                [label]=\"entity.name\" [disabled]=\"entity.disabled\">\n                                <mat-option *ngFor=\"let device of entity.devices\" [value]=\"device.id\">\n                                    {{ device.name }}\n                                </mat-option>\n                            </mat-optgroup>\n                        </ng-container>\n                        <ng-template #noDataFound>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n                    <mat-error *ngIf=\"meterFC.touched && meterFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"alertObj.showAlert\" [labelInp]=\"alertObj.alertLabel\"\n                    [contentInp]=\"alertObj.alertContent\" [messageAlertTypeInp]=\"alertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"alertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <ng-container *ngIf=\"showLoader; else dataTemplate\">\n                <lib-skeleton-loader [count]=\"3\" [appearance]=\"''\"\n                    [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n            </ng-container>\n            <ng-template #dataTemplate>\n                <div class=\"col-sm-4 mb-3\" *ngFor=\"let meterData of meterDataRes\">\n                    <mat-card class=\"cardOverwrite cardBackgroundColor\">\n                        <ng-container *ngTemplateOutlet=\"parameterData; context: {\n                            duration: last48HrsMeterData && last48HrsMeterData[meterData.paramName]?.data?.date ? dateService.getRelativeTimeAgoLabel(last48HrsMeterData[meterData.paramName]?.data?.date, timezone) : dateService.getRelativeTimeAgoLabel(meterData?.data?.date, timezone),\n                            value: last48HrsMeterData && last48HrsMeterData[meterData.paramName]?.data?.value != null ? last48HrsMeterData[meterData.paramName]?.data?.value : meterData?.data?.value,\n                            unit: meterData?.unit,\n                            label: meterData?.paramLabel,\n                            entityID: meterData?.entityID,\n                            paramName: meterData?.paramName,\n                            status: meterData?.status\n                        }\"></ng-container>\n                    </mat-card>\n                </div>\n            </ng-template>\n        </div>\n\n    </div>\n</div>\n\n<ng-template #parameterData let-duration=\"duration\" let-label=\"label\" let-value=\"value\" let-unit=\"unit\"\n    let-entityID=\"entityID\" let-paramName=\"paramName\" let-status=\"status\">\n    <div class=\"row\">\n        <div class=\"col-sm-6 textDurationWithAgoTime\">\n            {{ duration }}\n        </div>\n        <div class=\"col-sm-6 text-end\">\n            <a *ngIf=\"status == 'OFFLINE'\" class=\"text-secondary cursorPointer me-2\"\n                matTooltip=\"Currently parameter is offline, click here to see data of last 48 hrs.\"\n                matTooltipPosition=\"below\" (click)=\"getLast48HrsMeterData(paramName)\">\n                <span class=\"material-symbols-outlined fs-5 fw-bold\">devices</span>\n            </a>\n            <a class=\"text-primary cursorPointer\" matTooltip=\"Trend\" matTooltipPosition=\"below\"\n                (click)=\"showTrend(paramName, entityID)\">\n                <span class=\"material-symbols-outlined fs-5 fw-bold\">trending_up</span>\n            </a>\n        </div>\n    </div>\n    <div class=\"row mt-3\">\n        <div class=\"col-sm-12 text-center\">\n            <span class=\"fs-1 fw-bold text-primary\">{{ value != null && value != undefined ? (value | number: '1.2-2' ||\n                COMMON_CONSTANT.HYPHEN) : COMMON_CONSTANT.HYPHEN }}</span>\n            <span class=\"text-secondary fw-bold\"> {{ value ? unit : '' }} </span>\n        </div>\n    </div>\n    <div class=\"row mt-4 mb-4\">\n        <div class=\"col-sm-12 fs-5 text-center\">\n            {{ label }}\n        </div>\n    </div>\n</ng-template>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i10__namespace.MatOptgroup, selector: "mat-optgroup", inputs: ["disabled"], exportAs: ["matOptgroup"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }], pipes: { "async": i14__namespace.AsyncPipe, "number": i14__namespace.DecimalPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataDashboardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-meter-data',
                        templateUrl: './meter-data.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: RecentDataService }, { type: EntityDeviceService }, { type: ParameterService }, { type: AlertService }, { type: i2__namespace.DateService }, { type: TrendService }]; } });

    var routes$u = [
        {
            path: '',
            component: MeterDataDashboardComponent
        }
    ];
    var MeterDataRoutingModule = /** @class */ (function () {
        function MeterDataRoutingModule() {
        }
        return MeterDataRoutingModule;
    }());
    MeterDataRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MeterDataRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    MeterDataRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$u)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$u)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var MeterDataDashboardModule = /** @class */ (function () {
        function MeterDataDashboardModule() {
        }
        return MeterDataDashboardModule;
    }());
    MeterDataDashboardModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataDashboardModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MeterDataDashboardModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataDashboardModule, declarations: [MeterDataDashboardComponent], imports: [i14.CommonModule,
            MeterDataRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i11.MatTooltipModule,
            i12.MatInputModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i6$1.NgxMatSelectSearchModule,
            TrendModule,
            i3.MessageAlertModule,
            i3.SkeletonModule] });
    MeterDataDashboardModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataDashboardModule, providers: [TrendService], imports: [[
                i14.CommonModule,
                MeterDataRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i11.MatTooltipModule,
                i12.MatInputModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i6$1.NgxMatSelectSearchModule,
                TrendModule,
                i3.MessageAlertModule,
                i3.SkeletonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterDataDashboardModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            MeterDataDashboardComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            MeterDataRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i11.MatTooltipModule,
                            i12.MatInputModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i6$1.NgxMatSelectSearchModule,
                            TrendModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule
                        ],
                        providers: [TrendService]
                    }]
            }] });

    var routes$t = [];
    var ParameterTabRoutingModule = /** @class */ (function () {
        function ParameterTabRoutingModule() {
        }
        return ParameterTabRoutingModule;
    }());
    ParameterTabRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ParameterTabRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ParameterTabRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$t)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$t)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ParameterTabComponent = /** @class */ (function () {
        function ParameterTabComponent(router) {
            this.router = router;
            this.tab = [];
        }
        ParameterTabComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.tab = [
                {
                    icon: 'stacked_line_chart',
                    label: 'By Entity',
                    routerLink: '/dashboard/all-parameters',
                },
                {
                    icon: 'show_chart',
                    label: 'By parameter',
                    routerLink: '/dashboard/single-parameter',
                }
            ];
            this.setActiveLink();
            this.router.events.subscribe(function (val) {
                if (val instanceof i1$1.NavigationEnd) {
                    _this.setActiveLink();
                }
            });
        };
        ParameterTabComponent.prototype.setActiveLink = function () {
            var currentPath = window.location.pathname;
            for (var i = 0; i < this.tab.length; i++) {
                if (currentPath.includes(this.tab[i].routerLink)) {
                    this.activeLink = this.tab[i].routerLink;
                    break;
                }
            }
        };
        return ParameterTabComponent;
    }());
    ParameterTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabComponent, deps: [{ token: i1__namespace$1.Router }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ParameterTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ParameterTabComponent, selector: "lib-tab", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Parameter Dashboard</div>\n        </div>\n    </div>\n\n    <nav mat-tab-nav-bar>\n        <ng-container *ngFor=\"let tabs of tab; let i = index;\">\n            <a mat-tab-link [routerLink]=\"tabs.routerLink\" (click)=\"activeLink = tabs.routerLink\"\n                [active]=\"activeLink == tabs.routerLink\">\n                <div class=\"d-flex align-items-center\">\n                    <span class=\"material-symbols-outlined me-2\">\n                        {{ tabs.icon }}\n                    </span>\n                    {{ tabs.label }}\n                </div>\n            </a>\n        </ng-container>\n    </nav>\n    <router-outlet></router-outlet>\n\n</div>", components: [{ type: i2__namespace$2.MatTabNav, selector: "[mat-tab-nav-bar]", inputs: ["color"], exportAs: ["matTabNavBar", "matTabNav"] }], directives: [{ type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2__namespace$2.MatTabLink, selector: "[mat-tab-link], [matTabLink]", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matTabLink"] }, { type: i1__namespace$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-tab',
                        templateUrl: './tab.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }]; } });

    var ParameterTabModule = /** @class */ (function () {
        function ParameterTabModule() {
        }
        return ParameterTabModule;
    }());
    ParameterTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ParameterTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabModule, declarations: [ParameterTabComponent], imports: [i14.CommonModule,
            ParameterTabRoutingModule,
            i2$2.MatTabsModule,
            i12$2.NgbModule] });
    ParameterTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabModule, imports: [[
                i14.CommonModule,
                ParameterTabRoutingModule,
                i2$2.MatTabsModule,
                i12$2.NgbModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ParameterTabComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ParameterTabRoutingModule,
                            i2$2.MatTabsModule,
                            i12$2.NgbModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ByEntityComponent = /** @class */ (function () {
        function ByEntityComponent(storageService, alertService, toastService, entityController, aggregateDataController, dialog) {
            this.storageService = storageService;
            this.alertService = alertService;
            this.toastService = toastService;
            this.entityController = entityController;
            this.aggregateDataController = aggregateDataController;
            this.dialog = dialog;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.customRangeConstant = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.selectEntityType = false;
            this.isViewData = false;
            this.showAlert = false;
            this.showLoader = false;
            this.entityByEntityTypeM = [new EntityWithChildren()];
            this.alertObj = new Alert();
            this.entityFC = new i2$1.FormControl([], [i2$1.Validators.required]);
            this.chartType = i10.ChartTypeEnum.BASIC_LINE_CHART;
            this.viewStateFlag = i10.ChartViewStateEnum.LOADING;
            this.chartTitle = new i10.ChartTitle();
            this.chartData = [];
        }
        ByEntityComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
        };
        ByEntityComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
        };
        ByEntityComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
        };
        ByEntityComponent.prototype.entityTypeInpChange = function () {
            this.entityType = this.entityTypeInput.entityTypeFC.value;
            this.entityFC.reset([]);
            this.getEntitiesByEntityType(this.entityType);
        };
        ByEntityComponent.prototype.getEntitiesByEntityType = function (entityType) {
            var _this = this;
            var requestBody = {};
            requestBody['entityType'] = [entityType];
            this.entityController.getEntitiesByEntityType(this.orgID, requestBody)
                .subscribe(function (res) {
                _this.entityByEntityTypeM = [res];
            }, function (error) {
                console.log('error in getEntitiesByEntityType() - ', error);
            });
        };
        ByEntityComponent.prototype.openEntityDialog = function () {
            var _this = this;
            if (this.entityType) {
                var dialog = this.dialog.open(EntityDialogComponent, {
                    data: {
                        entityType: this.entityTypeInput.entityTypeFC.value,
                        entityObject: this.entityByEntityTypeM
                    },
                    width: '50vw',
                    height: '100%',
                    position: { right: '-2px', top: '0px' },
                });
                dialog.afterClosed().subscribe(function (dialogRes) {
                    if (dialogRes.entityID) {
                        _this.entityID = dialogRes.entityID;
                        _this.entityFC.patchValue(_this.entityID);
                    }
                });
            }
            else {
                this.selectEntityType = true;
            }
        };
        ByEntityComponent.prototype.viewEntityParameterData = function () {
            var _this = this;
            this.chartData = [];
            this.isViewData = true;
            this.alertService.resetAlertProperties(this.alertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.alertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                var requestData = this.createDataRequest();
                this.aggregateDataController.getEntityParameterData(this.orgID, requestData)
                    .subscribe(function (entityParamRes) {
                    var entityParameterData = entityParamRes === null || entityParamRes === void 0 ? void 0 : entityParamRes.paramData;
                    _this.showLoader = false;
                    if (entityParameterData && entityParameterData.every(function (item) { return item.data.length == 0; })) {
                        _this.alertService.setAlertProperties(_this.alertObj, exports.DashboardErrorEnum.DATA_NOT_FOUND_LABEL, exports.DashboardErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                    }
                    else {
                        _this.viewStateFlag = i10.ChartViewStateEnum.HAS_DATA;
                        _this.chartData = [];
                        entityParameterData.forEach(function (res) {
                            if (res.data.length > 0) {
                                var newChartdata = new i10.BasicAreaLineBarChart();
                                newChartdata.metaData = res.data.map(function (item) { return ({
                                    name: moment__namespace(new Date(item.date)).format("YYYY-MM-DD HH:mm:ss"),
                                    value: item.value
                                }); });
                                newChartdata.unit = {
                                    name: '',
                                    code: res.unit,
                                };
                                newChartdata.markLine = [
                                    {
                                        label: 'Avg',
                                        value: res.avgValue,
                                        color: '#e83e8c'
                                    },
                                    {
                                        label: 'Max',
                                        value: res.maxValue,
                                        color: '#e83e8c'
                                    }
                                ];
                                newChartdata.yAxisLabel = res.label + ' (' + res.unit + ')';
                                newChartdata.yAxisNameGap = 25;
                                newChartdata.showDataView = true;
                                newChartdata.showMagicType = true;
                                newChartdata.showRestore = true;
                                newChartdata.showDownloadImage = true;
                                newChartdata.chartTitle = {
                                    name: res.label,
                                    color: 'gray'
                                };
                                _this.chartData.push(newChartdata);
                            }
                        });
                    }
                }, function (error) {
                    console.log('error in viewParameterData() - ', error);
                    _this.alertService.setAlertProperties(_this.alertObj, exports.DashboardErrorEnum.INVALID_ERROR_LABEL, exports.DashboardErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                    throw error;
                });
            }
            catch (error) {
                console.error("Error in viewEntityParameterData()", error);
                this.alertService.setAlertProperties(this.alertObj, exports.DashboardErrorEnum.INVALID_ERROR_LABEL, exports.DashboardErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        };
        ByEntityComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC,
                this.entityTypeInput.entityTypeFC,
                this.entityFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        ByEntityComponent.prototype.createDataRequest = function () {
            var requestData = {};
            requestData['startTime'] = this.startDate;
            requestData['endTime'] = this.endDate;
            requestData['interval'] = this.aggDuration;
            requestData['entityID'] = [this.entityID];
            requestData['entityType'] = [this.entityTypeInput.entityTypeFC.value];
            return requestData;
        };
        return ByEntityComponent;
    }());
    ByEntityComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: AlertService }, { token: i2__namespace$3.ToastrService }, { token: EntityController }, { token: AggregateDataController }, { token: i1__namespace$3.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ByEntityComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ByEntityComponent, selector: "lib-by-entity", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityTypeInput", first: true, predicate: ["entityTypeInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">By Entity</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\" [isMandatoryFieldInp]=\"true\"\n                    [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\" [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\"\n                    [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\" [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\"\n                    [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\" [showRangeInp]=\"true\"\n                    [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n            \n            <div class=\"col-sm-3\">\n                <lib-entity-type #entityTypeInput (emitFilter)=\"entityTypeInpChange()\"></lib-entity-type>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <button class=\"btn btn-link selectEntityText\" [ngClass]=\"{'mt-2': !selectEntityType || (isViewData && entityFC.value.length == 0)}\" type=\"button\"\n                    (click)=\"openEntityDialog()\">\n                    Select entity *\n                </button>\n                <span class=\"textMatError\" *ngIf=\"selectEntityType\">\n                    <br />\n                    Please select entity type first\n                </span>\n                <span class=\"ms-2 textMatError\" *ngIf=\"!selectEntityType && isViewData && entityFC.value.length == 0\">\n                    <br />\n                    Select entity\n                </span>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewEntityParameterData()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"alertObj.showAlert\" [labelInp]=\"alertObj.alertLabel\"\n                    [contentInp]=\"alertObj.alertContent\" [messageAlertTypeInp]=\"alertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"alertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <ng-container *ngIf=\"showLoader; else dataTemplate\">\n                <lib-skeleton-loader [count]=\"3\" [appearance]=\"''\"\n                    [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n            </ng-container>\n\n            <ng-template #dataTemplate>\n                <div class=\"row\" *ngIf=\"chartData.length > 0\">\n                    <div class=\"col-sm-6\" *ngFor=\"let data of chartData\">\n                        <mat-card class=\"cardOverwrite cardBackgroundColor mb-3\">\n                            <lib-basic-area-line-bar [chartTypeInp]=\"chartType\" [chartTitleInp]=\"data.chartTitle\"\n                                [viewStateInp]=\"viewStateFlag\" [dataInp]=\"data\">\n                            </lib-basic-area-line-bar>\n                        </mat-card>\n                    </div>\n                </div>\n            </ng-template>\n        </div>\n    </div>\n</div>", styles: [".selectEntityText{font-size:.88rem}\n"], components: [{ type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: EntityTypeComponent, selector: "lib-entity-type", outputs: ["emitFilter"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10__namespace$1.BasicAreaLineBarComponent, selector: "lib-basic-area-line-bar", inputs: ["chartTypeInp", "viewStateInp", "chartTitleInp", "dataInp"] }], directives: [{ type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-by-entity',
                        templateUrl: './by-entity.component.html',
                        styleUrls: ['./by-entity.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: AlertService }, { type: i2__namespace$3.ToastrService }, { type: EntityController }, { type: AggregateDataController }, { type: i1__namespace$3.MatDialog }]; }, propDecorators: { customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }], entityTypeInput: [{
                    type: i0.ViewChild,
                    args: ['entityTypeInput']
                }] } });

    var routes$s = [
        {
            path: '',
            component: ByEntityComponent
        }
    ];
    var ByEntityRoutingModule = /** @class */ (function () {
        function ByEntityRoutingModule() {
        }
        return ByEntityRoutingModule;
    }());
    ByEntityRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ByEntityRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ByEntityRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$s)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$s)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ByEntityModule = /** @class */ (function () {
        function ByEntityModule() {
        }
        return ByEntityModule;
    }());
    ByEntityModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ByEntityModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityModule, declarations: [ByEntityComponent], imports: [i14.CommonModule,
            ByEntityRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i2.DateInputModule,
            AggregationDurationModule,
            EntityTypeModule,
            EntityDialogModule,
            i3.MessageAlertModule,
            i3.SkeletonModule,
            i10.BasicAreaLineBarModule,
            i9.MatCardModule,
            i10$1.MatRippleModule] });
    ByEntityModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityModule, imports: [[
                i14.CommonModule,
                ByEntityRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i2.DateInputModule,
                AggregationDurationModule,
                EntityTypeModule,
                EntityDialogModule,
                i3.MessageAlertModule,
                i3.SkeletonModule,
                i10.BasicAreaLineBarModule,
                i9.MatCardModule,
                i10$1.MatRippleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByEntityModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ByEntityComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ByEntityRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i2.DateInputModule,
                            AggregationDurationModule,
                            EntityTypeModule,
                            EntityDialogModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule,
                            i10.BasicAreaLineBarModule,
                            i9.MatCardModule,
                            i10$1.MatRippleModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ByParameterComponent = /** @class */ (function () {
        function ByParameterComponent(storageService, alertService, toastService, parameterController, parameterService, aggregateDataService, tscCommonService) {
            this.storageService = storageService;
            this.alertService = alertService;
            this.toastService = toastService;
            this.parameterController = parameterController;
            this.parameterService = parameterService;
            this.aggregateDataService = aggregateDataService;
            this.tscCommonService = tscCommonService;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.customRangeConstant = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.showAlert = false;
            this.showLoader = false;
            this.parameterM = [new Parameter()];
            this.parameterByEntityTypeM = [new Parameter()];
            this.alertObj = new Alert();
            this.parameterFC = new i2$1.FormControl('', [i2$1.Validators.required]);
            this.parameterSearchUtil = new i3.MatSelectSearchService(['label']);
            this.chartType = i10.ChartTypeEnum.BASIC_LINE_CHART;
            this.viewStateFlag = i10.ChartViewStateEnum.LOADING;
            this.chartTitle = new i10.ChartTitle();
            this.chartData = [];
        }
        ByParameterComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
        };
        ByParameterComponent.prototype.getParameterByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.parameterService.getParameterByLayoutID(this.orgID)];
                        case 1:
                            _a.parameterM = (_b.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        ByParameterComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
        };
        ByParameterComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
        };
        ByParameterComponent.prototype.entityTypeInpChange = function () {
            this.entityType = this.entityTypeInput.entityTypeFC.value;
            this.getParameterByEntityType(this.entityType);
        };
        ByParameterComponent.prototype.getParameterByEntityType = function (entityType) {
            var _this = this;
            var requestBody = {};
            requestBody['entityType'] = [entityType];
            this.parameterController.getParameterByEntityType(this.orgID, requestBody)
                .subscribe(function (res) {
                _this.parameterByEntityTypeM = res;
                _this.parameterSearchUtil.entityArr = _this.parameterByEntityTypeM;
                _this.parameterSearchUtil.createSubscription();
            }, function (error) {
                console.log('error in getParameterByEntityType() - ', error);
            });
        };
        ByParameterComponent.prototype.onParameterChange = function (selectedParameter) {
            this.parameterFC.patchValue(selectedParameter);
        };
        ByParameterComponent.prototype.viewParameterData = function () {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, aggregateRes, error_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.chartData = [];
                            this.alertService.resetAlertProperties(this.alertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.alertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            requestData = this.createDataRequest();
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            aggregateRes = _a.sent();
                            this.showLoader = false;
                            if (aggregateRes && aggregateRes.every(function (item) { return item.data.length == 0; })) {
                                this.alertService.setAlertProperties(this.alertObj, exports.DashboardErrorEnum.DATA_NOT_FOUND_LABEL, exports.DashboardErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            else {
                                this.viewStateFlag = i10.ChartViewStateEnum.HAS_DATA;
                                this.chartData = [];
                                aggregateRes.forEach(function (res) {
                                    if (res.data.length > 0) {
                                        var newChartdata = new i10.BasicAreaLineBarChart();
                                        newChartdata.metaData = res.data.map(function (item) { return ({
                                            name: moment__namespace(new Date(item.date)).format("YYYY-MM-DD HH:mm:ss"),
                                            value: item.value
                                        }); });
                                        newChartdata.unit = {
                                            name: '',
                                            code: res.unit,
                                        };
                                        newChartdata.yAxisLabel = res.paramLabel + ' (' + res.unit + ')';
                                        newChartdata.showDataView = true;
                                        newChartdata.showMagicType = true;
                                        newChartdata.showRestore = true;
                                        newChartdata.showDownloadImage = true;
                                        newChartdata.chartTitle = {
                                            name: res.entityName,
                                            color: 'gray'
                                        };
                                        _this.chartData.push(newChartdata);
                                    }
                                });
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _a.sent();
                            console.error("Error in getAggregateData()", error_1);
                            this.alertService.setAlertProperties(this.alertObj, exports.DashboardErrorEnum.INVALID_ERROR_LABEL, exports.DashboardErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ByParameterComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC,
                this.entityTypeInput.entityTypeFC,
                this.parameterFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        ByParameterComponent.prototype.createDataRequest = function () {
            var requestData = new AggregateDataRequest();
            var isCounterParameter = this.getCounterParameter(this.parameterFC.value);
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.aggDuration;
            requestData.entityType = this.entityTypeInput.entityTypeFC.value;
            requestData.params = [
                {
                    name: this.parameterFC.value,
                    dsAgg: "avg",
                    agg: "avg",
                    sourceLoadType: isCounterParameter ? "all" : null,
                    source_or_load: isCounterParameter ? "source" : null,
                }
            ];
            requestData.nullifyParams();
            return requestData;
        };
        ByParameterComponent.prototype.getCounterParameter = function (paramMetricValue) {
            var parameter = this.tscCommonService.getUniqueObject(this.parameterM, 'isCounter', paramMetricValue);
            return parameter ? parameter.isCounter : false;
        };
        return ByParameterComponent;
    }());
    ByParameterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: AlertService }, { token: i2__namespace$3.ToastrService }, { token: ParameterController }, { token: ParameterService }, { token: AggregateDataService }, { token: i3__namespace.TSCCommonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ByParameterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ByParameterComponent, selector: "lib-by-parameter", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityTypeInput", first: true, predicate: ["entityTypeInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">By Parameter</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\"\n                    [showTimeInCDRInp]=\"true\" [showRangeInp]=\"true\"\n                    [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity-type #entityTypeInput (emitFilter)=\"entityTypeInpChange()\"></lib-entity-type>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\"\n                    [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select parameter</mat-label>\n                    <mat-select (selectionChange)=\"onParameterChange($event.value)\" [formControl]=\"parameterFC\"\n                        required>\n                        <ng-container\n                            *ngIf=\"parameterByEntityTypeM && parameterByEntityTypeM.length > 0 && parameterByEntityTypeM[0]['id']; else noDataFound\">\n                            <mat-option>\n                                <ngx-mat-select-search [formControl]=\"parameterSearchUtil.filterFC\"\n                                    placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                                </ngx-mat-select-search>\n                            </mat-option>\n                            <mat-option *ngFor=\"let parameter of parameterSearchUtil.filteredEntities | async\"\n                                [value]=\"parameter.paramMetric\">\n                                {{ parameter.label }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noDataFound>\n                            <mat-option disabled>\n                                {{ commonConstant.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n                    <mat-error *ngIf=\"!entityType\">\n                        Please select entity type first\n                    </mat-error>\n                    <mat-error *ngIf=\"parameterFC.touched && parameterFC.hasError('required') && entityType\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewParameterData()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"alertObj.showAlert\" [labelInp]=\"alertObj.alertLabel\"\n                    [contentInp]=\"alertObj.alertContent\" [messageAlertTypeInp]=\"alertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"alertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <ng-container *ngIf=\"showLoader; else dataTemplate\">\n                <lib-skeleton-loader [count]=\"3\" [appearance]=\"''\"\n                    [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n            </ng-container>\n\n            <ng-template #dataTemplate>\n                <div class=\"row\" *ngIf=\"chartData.length > 0\">\n                    <div class=\"col-sm-6\" *ngFor=\"let data of chartData\">\n                        <mat-card class=\"cardOverwrite cardBackgroundColor mb-3\">\n                            <lib-basic-area-line-bar [chartTypeInp]=\"chartType\" [chartTitleInp]=\"data.chartTitle\"\n                                [viewStateInp]=\"viewStateFlag\" [dataInp]=\"data\">\n                            </lib-basic-area-line-bar>\n                        </mat-card>\n                    </div>\n                </div>\n            </ng-template>\n        </div>\n\n    </div>\n</div>", components: [{ type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: EntityTypeComponent, selector: "lib-entity-type", outputs: ["emitFilter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10__namespace$1.BasicAreaLineBarComponent, selector: "lib-basic-area-line-bar", inputs: ["chartTypeInp", "viewStateInp", "chartTitleInp", "dataInp"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-by-parameter',
                        templateUrl: './by-parameter.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: AlertService }, { type: i2__namespace$3.ToastrService }, { type: ParameterController }, { type: ParameterService }, { type: AggregateDataService }, { type: i3__namespace.TSCCommonService }]; }, propDecorators: { customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }], entityTypeInput: [{
                    type: i0.ViewChild,
                    args: ['entityTypeInput']
                }] } });

    var routes$r = [
        {
            path: '',
            component: ByParameterComponent
        }
    ];
    var ByParameterRoutingModule = /** @class */ (function () {
        function ByParameterRoutingModule() {
        }
        return ByParameterRoutingModule;
    }());
    ByParameterRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ByParameterRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ByParameterRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$r)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$r)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ByParameterModule = /** @class */ (function () {
        function ByParameterModule() {
        }
        return ByParameterModule;
    }());
    ByParameterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ByParameterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterModule, declarations: [ByParameterComponent], imports: [i14.CommonModule,
            ByParameterRoutingModule,
            i2.DateInputModule,
            AggregationDurationModule,
            EntityTypeModule,
            i3.MessageAlertModule,
            i3.SkeletonModule,
            i10.BasicAreaLineBarModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i12.MatInputModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i10$1.MatRippleModule,
            i6$1.NgxMatSelectSearchModule] });
    ByParameterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterModule, imports: [[
                i14.CommonModule,
                ByParameterRoutingModule,
                i2.DateInputModule,
                AggregationDurationModule,
                EntityTypeModule,
                i3.MessageAlertModule,
                i3.SkeletonModule,
                i10.BasicAreaLineBarModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i12.MatInputModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i10$1.MatRippleModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ByParameterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ByParameterComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ByParameterRoutingModule,
                            i2.DateInputModule,
                            AggregationDurationModule,
                            EntityTypeModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule,
                            i10.BasicAreaLineBarModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i12.MatInputModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i10$1.MatRippleModule,
                            i6$1.NgxMatSelectSearchModule
                        ]
                    }]
            }] });

    var SourceLoadComponent$1 = /** @class */ (function () {
        function SourceLoadComponent() {
            this.listConstant = LIST_CONSTANT;
            this.categoryFC = new i2$1.FormControl("source");
            this.emitFilter = new i0.EventEmitter();
        }
        SourceLoadComponent.prototype.ngOnInit = function () {
        };
        SourceLoadComponent.prototype.ngOnChanges = function (changes) {
            if (changes.defaultCategoryInp && this.defaultCategoryInp) {
                this.categoryFC.patchValue(this.defaultCategoryInp);
            }
        };
        SourceLoadComponent.prototype.ngAfterViewInit = function () {
            this.emitFilter.emit();
        };
        SourceLoadComponent.prototype.categoryChange = function (selectedCategory) {
            this.categoryFC.patchValue(selectedCategory);
            this.emitFilter.emit();
        };
        return SourceLoadComponent;
    }());
    SourceLoadComponent$1.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadComponent$1, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    SourceLoadComponent$1.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourceLoadComponent$1, selector: "lib-source-load", inputs: { defaultCategoryInp: "defaultCategoryInp" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0__namespace, template: "<mat-button-toggle-group class=\"matBtnFilter\" [formControl]=\"categoryFC\" (change)=\"categoryChange(categoryFC.value)\">\n    <mat-button-toggle *ngFor=\"let category of listConstant.SOURCE_LOAD\" value=\"{{ category.value }}\">\n        {{ category.label }}\n    </mat-button-toggle>\n</mat-button-toggle-group>", components: [{ type: i1__namespace$4.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-labelledby", "tabIndex", "appearance", "checked", "disabled", "id", "name", "aria-label", "value"], outputs: ["change"], exportAs: ["matButtonToggle"] }], directives: [{ type: i1__namespace$4.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadComponent$1, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-source-load',
                        templateUrl: './source-load.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { defaultCategoryInp: [{
                    type: i0.Input
                }], emitFilter: [{
                    type: i0.Output
                }] } });

    var SourceLoadModule$1 = /** @class */ (function () {
        function SourceLoadModule() {
        }
        return SourceLoadModule;
    }());
    SourceLoadModule$1.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule$1, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourceLoadModule$1.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule$1, declarations: [SourceLoadComponent$1], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12.MatInputModule,
            i1$4.MatButtonToggleModule], exports: [SourceLoadComponent$1] });
    SourceLoadModule$1.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule$1, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12.MatInputModule,
                i1$4.MatButtonToggleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule$1, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            SourceLoadComponent$1
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12.MatInputModule,
                            i1$4.MatButtonToggleModule
                        ],
                        exports: [
                            SourceLoadComponent$1
                        ]
                    }]
            }] });

    // /tsc-library/
    var ReportService = /** @class */ (function () {
        function ReportService(http, dateService, alertService, environment) {
            this.http = http;
            this.dateService = dateService;
            this.alertService = alertService;
            this.environment = environment;
            this.reportAlertObj = new Alert();
        }
        ReportService.prototype.extractTimestamp = function (dataInp) {
            if (!dataInp) {
                return [];
            }
            var allTimestamp = dataInp.reduce(function (timestamps, dataValues) {
                if (dataValues && dataValues.data) {
                    dataValues.data.forEach(function (entry) {
                        if (entry && entry.date) {
                            timestamps.add(entry.date);
                        }
                    });
                }
                return timestamps;
            }, new Set());
            return Array.from(allTimestamp).sort();
        };
        ReportService.prototype.populateTable = function (timestamp, dataInp, format) {
            var _this = this;
            return timestamp.map(function (time, index) { return ({
                index: index + 1,
                time: _this.dateService.formatDate(time, format),
                data: dataInp.map(function (aggregation) {
                    var matchingEntry = aggregation.data.find(function (entry) { return entry.date == time; });
                    return matchingEntry ? matchingEntry.value : i3.COMMON_CONSTANT.HYPHEN;
                })
            }); });
        };
        ReportService.prototype.downloadReport = function (orgID, requestData) {
            return __awaiter(this, void 0, void 0, function () {
                var url, response, blob, downloadLink, currentDate, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            url = this.environment.TSC_COMMON_API_URL + "public/organizations/" + orgID + "/report";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.http.post(url, requestData, { observe: 'response', responseType: 'blob' }).toPromise()];
                        case 2:
                            response = _a.sent();
                            if (response && response.body) {
                                blob = new Blob([response.body], { type: response.headers.get('Content-Type') });
                                downloadLink = document.createElement('a');
                                currentDate = moment__namespace().format('DD MMM YYYY HH:mm');
                                downloadLink.href = window.URL.createObjectURL(blob);
                                downloadLink.download = requestData.reportName + "_" + currentDate + "." + requestData.reportFormat;
                                document.body.appendChild(downloadLink);
                                downloadLink.click();
                                document.body.removeChild(downloadLink);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _a.sent();
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ReportService.prototype.downloadConsumptionReport = function (orgID, requestData) {
            return __awaiter(this, void 0, void 0, function () {
                var url, response, blob, downloadLink, currentDate, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            url = this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/meter-report";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.http.post(url, requestData, { observe: 'response', responseType: 'blob' }).toPromise()];
                        case 2:
                            response = _a.sent();
                            if (response && response.body) {
                                blob = new Blob([response.body], { type: response.headers.get('Content-Type') });
                                downloadLink = document.createElement('a');
                                currentDate = moment__namespace().format('DD MMM YYYY HH:mm');
                                downloadLink.href = window.URL.createObjectURL(blob);
                                downloadLink.download = requestData.reportName + "_" + currentDate + "." + requestData.reportFormat;
                                document.body.appendChild(downloadLink);
                                downloadLink.click();
                                document.body.removeChild(downloadLink);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_2 = _a.sent();
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return ReportService;
    }());
    ReportService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ReportService, deps: [{ token: i1__namespace.HttpClient }, { token: i2__namespace.DateService }, { token: AlertService }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ReportService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ReportService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ReportService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: i2__namespace.DateService }, { type: AlertService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    // /tsc-library/
    var BreakupReportComponent = /** @class */ (function () {
        function BreakupReportComponent(router, storageService, toastService, parameterService, aggregateDataService, reportService, alertService, tscCommonService) {
            this.router = router;
            this.storageService = storageService;
            this.toastService = toastService;
            this.parameterService = parameterService;
            this.aggregateDataService = aggregateDataService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.tscCommonService = tscCommonService;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.CUSTOM_RANGE_CONSTANT = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.DropdownTypeEnum = DropdownTypeEnum;
            this.DateFormatEnum = i2.DateFormatEnum;
            this.DateInputTypeEnum = i2.DateInputTypeEnum;
            this.DateTypeEnum = i2.DateTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.showAlert = false;
            this.showLoader = false;
            this.reportAlertObj = new Alert();
            this.parameterFC = new i2$1.FormControl('', [i2$1.Validators.required]);
        }
        BreakupReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.pageTitle = "Energy Breakup Report";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.pageTitle = "Water Breakup Report";
            }
            this.getConsumptionParameter();
        };
        BreakupReportComponent.prototype.getConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consumptionParamM;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.parameterService.getConsumptionParameter(this.orgID)];
                        case 1:
                            consumptionParamM = _c.sent();
                            this.consumptionParamM = consumptionParamM.consumptionParameter;
                            return [2 /*return*/];
                    }
                });
            });
        };
        BreakupReportComponent.prototype.sourceLoadInpChange = function () {
            this.category = this.sourceLoadInput.categoryFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        BreakupReportComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        BreakupReportComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        BreakupReportComponent.prototype.entityInpChange = function () {
            this.entityID = this.entityInput.multipleEntityFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        BreakupReportComponent.prototype.viewReport = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _c, error_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            requestData = this.createDataRequest();
                            _c = this;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            _c.reportData = _d.sent();
                            if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(function (item) { return item.data.length == 0; }))) {
                                this.timestamp = this.reportService.extractTimestamp(this.reportData);
                                this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.DateFormatEnum.DATE_TIME);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _d.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        BreakupReportComponent.prototype.createDataRequest = function () {
            var _a;
            if (((_a = this.entityID) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                this.entityID = this.tscCommonService.removeSelectAllID(this.entityID);
            }
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.aggDuration;
            requestData.entityID = this.entityID;
            requestData.params = [
                {
                    name: this.parameterFC.value,
                    dsAgg: "sum",
                    agg: "sum",
                    source_or_load: this.category,
                    sourceLoadType: 'all'
                }
            ];
            requestData.nullifyParams();
            return requestData;
        };
        BreakupReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = this.pageTitle;
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _c.sent();
                            console.error("Error in downloadReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        BreakupReportComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC,
                this.entityInput.multipleEntityFC,
                this.parameterFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        BreakupReportComponent.prototype.scheduleReport = function (value) {
            if (value) {
                var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'water' : 'energy';
                this.router.navigate(["schedule-report/" + applicationName + "-breakup"]);
            }
        };
        return BreakupReportComponent;
    }());
    BreakupReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportComponent, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: ParameterService }, { token: AggregateDataService }, { token: ReportService }, { token: AlertService }, { token: i3__namespace.TSCCommonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BreakupReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: BreakupReportComponent, selector: "lib-breakup", viewQueries: [{ propertyName: "sourceLoadInput", first: true, predicate: ["sourceLoadInput"], descendants: true }, { propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <mat-slide-toggle (change)=\"scheduleReport($event.checked)\">Schedule report</mat-slide-toggle>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\">\n                <lib-source-load #sourceLoadInput (emitFilter)=\"sourceLoadInpChange()\"></lib-source-load>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"DateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"CUSTOM_RANGE_CONSTANT\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity #entityInput [dropdownTypeInp]=\"DropdownTypeEnum.MULTIPLE_DROPDOWN\"\n                    (emitFilter)=\"entityInpChange()\"></lib-entity>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select consumption parameter</mat-label>\n\n                    <mat-select [formControl]=\"parameterFC\" required>\n                        <ng-container\n                            *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                            <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\" (click)=\"selectedParameters()\">\n                                {{ param.label }}\n                            </mat-option>\n                        </ng-container>\n\n                        <ng-template #noConsumptionParamM>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"parameterFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                        {{ ButtonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.entityName }}<br />\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i9__namespace$1.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: SourceLoadComponent$1, selector: "lib-source-load", inputs: ["defaultCategoryInp"], outputs: ["emitFilter"] }, { type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-breakup',
                        templateUrl: './breakup.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: ParameterService }, { type: AggregateDataService }, { type: ReportService }, { type: AlertService }, { type: i3__namespace.TSCCommonService }]; }, propDecorators: { sourceLoadInput: [{
                    type: i0.ViewChild,
                    args: ['sourceLoadInput']
                }], customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }], entityInput: [{
                    type: i0.ViewChild,
                    args: ['entityInput']
                }] } });

    var routes$q = [
        {
            path: '',
            component: BreakupReportComponent
        }
    ];
    var BreakupReportRoutingModule = /** @class */ (function () {
        function BreakupReportRoutingModule() {
        }
        return BreakupReportRoutingModule;
    }());
    BreakupReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BreakupReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    BreakupReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$q)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$q)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var BreakupReportModule = /** @class */ (function () {
        function BreakupReportModule() {
        }
        return BreakupReportModule;
    }());
    BreakupReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BreakupReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportModule, declarations: [BreakupReportComponent], imports: [i14.CommonModule,
            BreakupReportRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule,
            i9$1.MatSlideToggleModule,
            SourceLoadModule$1,
            AggregationDurationModule,
            EntityModule,
            DownloadReportModule,
            i2.DateInputModule,
            i3.MessageAlertModule,
            i3.SkeletonModule] });
    BreakupReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportModule, imports: [[
                i14.CommonModule,
                BreakupReportRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule,
                i9$1.MatSlideToggleModule,
                SourceLoadModule$1,
                AggregationDurationModule,
                EntityModule,
                DownloadReportModule,
                i2.DateInputModule,
                i3.MessageAlertModule,
                i3.SkeletonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: BreakupReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            BreakupReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            BreakupReportRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule,
                            i9$1.MatSlideToggleModule,
                            SourceLoadModule$1,
                            AggregationDurationModule,
                            EntityModule,
                            DownloadReportModule,
                            i2.DateInputModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var CgwaReportComponent = /** @class */ (function () {
        function CgwaReportComponent(router, formBuilder, storageService, toastService, alertService, aggregateDataService, reportService) {
            this.router = router;
            this.formBuilder = formBuilder;
            this.storageService = storageService;
            this.toastService = toastService;
            this.alertService = alertService;
            this.aggregateDataService = aggregateDataService;
            this.reportService = reportService;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.DateFormatEnum = i2.DateFormatEnum;
            this.DateInputTypeEnum = i2.DateInputTypeEnum;
            this.DateTypeEnum = i2.DateTypeEnum;
            this.FileTypeEnum = i3.FileTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.reportData = [new MeterData()];
            this.showAlert = false;
            this.showLoader = false;
            this.reportAlertObj = new Alert();
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        CgwaReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.reportFGInit();
        };
        CgwaReportComponent.prototype.reportFGInit = function () {
            this.reportFG = this.formBuilder.group({
                startDate: [, i2$1.Validators.required],
                endDate: [, i2$1.Validators.required],
                sourceConsumer: this.formBuilder.group({
                    type: ['SOURCE', i2$1.Validators.required],
                    keyID: ['BOREWELL', i2$1.Validators.required]
                }),
                params: this.formBuilder.array([this.createParamsGroup()]),
                interval: [, i2$1.Validators.required]
            });
        };
        CgwaReportComponent.prototype.createParamsGroup = function () {
            return this.formBuilder.group({
                name: ['gwFlowTotalizer', i2$1.Validators.required],
                dsAgg: ['sum', i2$1.Validators.required],
                agg: ['sum', i2$1.Validators.required]
            });
        };
        CgwaReportComponent.prototype.dateInpChange = function () {
            var startDate = this.monthDateInput.startDateFC.value;
            var endDate = this.monthDateInput.endDateFC.value;
            this.reportFG.get('startDate').patchValue(startDate);
            this.reportFG.get('endDate').patchValue(endDate);
        };
        CgwaReportComponent.prototype.reportSubmit = function () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.reportFG.invalid) {
                console.log('Invalid form:', this.reportFG.value);
                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                this.showLoader = true;
                this.alertService.resetAlertProperties(this.reportAlertObj);
                this.viewReport();
            }
        };
        CgwaReportComponent.prototype.viewReport = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            return [4 /*yield*/, this.aggregateDataService.getMeterAggregateDataForReport(this.orgID, this.reportFG.value)];
                        case 1:
                            result = _a.sent();
                            if (result && result.length > 0 && result[0]['date']) {
                                this.reportData = result;
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 4];
                        case 2:
                            error_1 = _a.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 4];
                        case 3:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        CgwaReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.reportFG.invalid) {
                                console.log('Invalid form:', this.reportFG.value);
                                this.reportFG.markAllAsTouched();
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            requestData = {};
                            requestData['request'] = this.reportFG.value;
                            requestData['reportName'] = 'CGWA Report';
                            requestData['reportFormat'] = format;
                            return [4 /*yield*/, this.reportService.downloadConsumptionReport(this.orgID, requestData)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _a.sent();
                            console.error("Error in downloadConsumptionReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        CgwaReportComponent.prototype.scheduleReport = function (value) {
            if (value) {
                this.router.navigate(["schedule-report/cgwa"]);
            }
        };
        return CgwaReportComponent;
    }());
    CgwaReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportComponent, deps: [{ token: i1__namespace$1.Router }, { token: i2__namespace$1.FormBuilder }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: AlertService }, { token: AggregateDataService }, { token: ReportService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CgwaReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CgwaReportComponent, selector: "lib-cgwa", viewQueries: [{ propertyName: "monthDateInput", first: true, predicate: ["monthDateInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">CGWA Report</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <mat-slide-toggle (change)=\"scheduleReport($event.checked)\">Schedule report</mat-slide-toggle>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"reportFG\" (ngSubmit)=\"reportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-3\">\n                    <lib-date-input #monthDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                        [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                        [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.MONTH_INPUT\"\n                        [dateTypeInp]=\"DateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\"\n                        [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\"></lib-date-input>\n                </div>\n\n                <div class=\"col-sm-3\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select aggregation duration</mat-label>\n                        <mat-select formControlName=\"interval\" required>\n                            <mat-option [value]=\"'DAILY'\">Daily</mat-option>\n                            <mat-option [value]=\"'MONTHLY'\">Monthly</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling(reportFG, 'interval', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n        </form>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"formSubmitBtn.click()\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                        {{ ButtonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report [excludeFileTypeInp]=\"FileTypeEnum.CSV\" (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"reportData && reportData.length > 0 && reportData[0].date\">\n            <table class=\"table\">\n                <tbody>\n                    <tr class=\"tableHeader\">\n                        <td align=\"center\" class=\"fw-bold\"> Date </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter name </td>\n                        <td align=\"center\" class=\"fw-bold\"> Parameter name </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter start reading </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter end reading </td>\n                        <td align=\"center\" class=\"fw-bold\"> Consumption </td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr *ngFor=\"let data of reportData; let i = index\">\n                        <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row?.date | date: 'dd-MMM-yyyy\n                            HH:mm:ss' }}</td>\n                        <td align=\"center\">{{ row?.meterName }}</td>\n                        <td align=\"center\">{{ row?.parameterName }}</td>\n                        <td align=\"center\">{{ row?.meterStartReading }}</td>\n                        <td align=\"center\">{{ row?.meterEndReading }}</td>\n                        <td align=\"center\">{{ row?.meterConsumption }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>", components: [{ type: i9__namespace$1.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i14__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-cgwa',
                        templateUrl: './cgwa.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i2__namespace$1.FormBuilder }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: AlertService }, { type: AggregateDataService }, { type: ReportService }]; }, propDecorators: { monthDateInput: [{
                    type: i0.ViewChild,
                    args: ['monthDateInput']
                }] } });

    var routes$p = [
        {
            path: '',
            component: CgwaReportComponent
        }
    ];
    var CgwaReportRoutingModule = /** @class */ (function () {
        function CgwaReportRoutingModule() {
        }
        return CgwaReportRoutingModule;
    }());
    CgwaReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CgwaReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    CgwaReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$p)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$p)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var CgwaReportModule = /** @class */ (function () {
        function CgwaReportModule() {
        }
        return CgwaReportModule;
    }());
    CgwaReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CgwaReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportModule, declarations: [CgwaReportComponent], imports: [i14.CommonModule,
            CgwaReportRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule,
            i9$1.MatSlideToggleModule,
            DownloadReportModule,
            i2.DateInputModule,
            i3.MessageAlertModule,
            i3.SkeletonModule] });
    CgwaReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportModule, imports: [[
                i14.CommonModule,
                CgwaReportRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule,
                i9$1.MatSlideToggleModule,
                DownloadReportModule,
                i2.DateInputModule,
                i3.MessageAlertModule,
                i3.SkeletonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CgwaReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            CgwaReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            CgwaReportRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule,
                            i9$1.MatSlideToggleModule,
                            DownloadReportModule,
                            i2.DateInputModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionBreakupComponent = /** @class */ (function () {
        function ConsumptionBreakupComponent(storageService, toastService, tscCommonService, aggregateDataService, reportService, alertService) {
            this.storageService = storageService;
            this.toastService = toastService;
            this.tscCommonService = tscCommonService;
            this.aggregateDataService = aggregateDataService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.customRangeConstant = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.dropdownTypeEnum = DropdownTypeEnum;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.showAlert = false;
            this.showLoader = false;
            this.reportAlertObj = new Alert();
        }
        ConsumptionBreakupComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.paramMetric = "engEnergyUsed";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.paramMetric = "gwFlowTotalizer";
            }
        };
        ConsumptionBreakupComponent.prototype.sourceLoadInpChange = function () {
            this.category = this.sourceLoadInput.categoryFC.value;
        };
        ConsumptionBreakupComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ConsumptionBreakupComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ConsumptionBreakupComponent.prototype.entityInpChange = function () {
            this.entityID = this.entityInput.multipleEntityFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ConsumptionBreakupComponent.prototype.viewReport = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _c, error_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            requestData = this.createDataRequest();
                            _c = this;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            _c.reportData = _d.sent();
                            if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(function (item) { return item.data.length == 0; }))) {
                                this.timestamp = this.reportService.extractTimestamp(this.reportData);
                                this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _d.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionBreakupComponent.prototype.createDataRequest = function () {
            var _a;
            if (((_a = this.entityID) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                this.entityID = this.tscCommonService.removeSelectAllID(this.entityID);
            }
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.aggDuration;
            requestData.entityID = this.entityID;
            requestData.params = [
                {
                    name: this.paramMetric,
                    dsAgg: "sum",
                    agg: "sum",
                    source_or_load: this.category,
                    sourceLoadType: 'all'
                }
            ];
            requestData.nullifyParams();
            return requestData;
        };
        ConsumptionBreakupComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = 'Consumption Breakup Report';
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _c.sent();
                            console.error("Error in downloadReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionBreakupComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC,
                this.entityInput.multipleEntityFC,
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        return ConsumptionBreakupComponent;
    }());
    ConsumptionBreakupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: i3__namespace.TSCCommonService }, { token: AggregateDataService }, { token: ReportService }, { token: AlertService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsumptionBreakupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumptionBreakupComponent, selector: "lib-consumption-breakup", viewQueries: [{ propertyName: "sourceLoadInput", first: true, predicate: ["sourceLoadInput"], descendants: true }, { propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Consumption Breakup Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\">\n                <lib-source-load #sourceLoadInput (emitFilter)=\"sourceLoadInpChange()\"></lib-source-load>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity #entityInput [dropdownTypeInp]=\"dropdownTypeEnum.MULTIPLE_DROPDOWN\"\n                    (emitFilter)=\"entityInpChange()\"></lib-entity>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.entityName }}<br />\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: SourceLoadComponent$1, selector: "lib-source-load", inputs: ["defaultCategoryInp"], outputs: ["emitFilter"] }, { type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-consumption-breakup',
                        templateUrl: './consumption-breakup.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: i3__namespace.TSCCommonService }, { type: AggregateDataService }, { type: ReportService }, { type: AlertService }]; }, propDecorators: { sourceLoadInput: [{
                    type: i0.ViewChild,
                    args: ['sourceLoadInput']
                }], customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }], entityInput: [{
                    type: i0.ViewChild,
                    args: ['entityInput']
                }] } });

    var routes$o = [
        {
            path: '',
            component: ConsumptionBreakupComponent
        }
    ];
    var ConsumptionBreakupRoutingModule = /** @class */ (function () {
        function ConsumptionBreakupRoutingModule() {
        }
        return ConsumptionBreakupRoutingModule;
    }());
    ConsumptionBreakupRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionBreakupRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ConsumptionBreakupRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$o)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$o)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionBreakupModule = /** @class */ (function () {
        function ConsumptionBreakupModule() {
        }
        return ConsumptionBreakupModule;
    }());
    ConsumptionBreakupModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionBreakupModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupModule, declarations: [ConsumptionBreakupComponent], imports: [i14.CommonModule,
            ConsumptionBreakupRoutingModule,
            SourceLoadModule$1,
            i2.DateInputModule,
            AggregationDurationModule,
            EntityModule,
            DownloadReportModule,
            i3.SkeletonModule,
            i3.MessageAlertModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule] });
    ConsumptionBreakupModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupModule, imports: [[
                i14.CommonModule,
                ConsumptionBreakupRoutingModule,
                SourceLoadModule$1,
                i2.DateInputModule,
                AggregationDurationModule,
                EntityModule,
                DownloadReportModule,
                i3.SkeletonModule,
                i3.MessageAlertModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionBreakupModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ConsumptionBreakupComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ConsumptionBreakupRoutingModule,
                            SourceLoadModule$1,
                            i2.DateInputModule,
                            AggregationDurationModule,
                            EntityModule,
                            DownloadReportModule,
                            i3.SkeletonModule,
                            i3.MessageAlertModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule
                        ]
                    }]
            }] });

    var SourceConsumerPage = /** @class */ (function () {
        function SourceConsumerPage() {
        }
        return SourceConsumerPage;
    }());
    var Source = /** @class */ (function () {
        function Source() {
        }
        return Source;
    }());
    var Consumer = /** @class */ (function () {
        function Consumer() {
        }
        return Consumer;
    }());
    var UtilitySourceType = /** @class */ (function () {
        function UtilitySourceType() {
        }
        return UtilitySourceType;
    }());
    var SourceConsumerConfigure = /** @class */ (function () {
        function SourceConsumerConfigure() {
        }
        return SourceConsumerConfigure;
    }());

    // /tsc-library/
    var SourceController = /** @class */ (function () {
        function SourceController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        SourceController.prototype.createSourceType = function (orgID, source) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/sources-types", source);
        };
        SourceController.prototype.getSourceTypeByID = function (orgID, sourceID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/sources-types/" + sourceID);
        };
        SourceController.prototype.updateSourceType = function (orgID, sourceID, source) {
            return this.http.patch(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/sources-types/" + sourceID, source);
        };
        SourceController.prototype.deleteSourceType = function (orgID, sourceID) {
            return this.http.delete(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/sources-types/" + sourceID);
        };
        SourceController.prototype.getSourceTypeByPage = function (pageNo, pageSize, sortBy, orderBy, searchValue, filterArr, orgID) {
            var params = new i1.HttpParams();
            params = params.append('pageNo', pageNo);
            params = params.append('pageSize', pageSize);
            params = params.append('sortBy', sortBy);
            params = params.append('orderBy', orderBy);
            if (searchValue) {
                params = params.append('searchBy', searchValue);
            }
            filterArr.forEach(function (filter) { return params = params.append('filter', filter); });
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/sources-types/page", { params: params });
        };
        SourceController.prototype.getUtilitySourceAndType = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/utility-sources-types");
        };
        SourceController.prototype.getSourceConsumerType = function (orgID, type) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/sources-consumers-type", type);
        };
        SourceController.prototype.getSourceConsumerConfig = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/sources-consumers-configure");
        };
        return SourceController;
    }());
    SourceController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SourceController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    // /tsc-library/
    var SourceService = /** @class */ (function () {
        function SourceService(sourceController) {
            this.sourceController = sourceController;
        }
        SourceService.prototype.getUtilitySourceAndType = function (orgID) {
            return __awaiter(this, void 0, void 0, function () {
                var utlitySourceType, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.sourceController.getUtilitySourceAndType(orgID).toPromise()];
                        case 1:
                            utlitySourceType = _a.sent();
                            if (utlitySourceType) {
                                return [2 /*return*/, utlitySourceType];
                            }
                            else {
                                return [2 /*return*/, new UtilitySourceType()];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, new UtilitySourceType()];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SourceService.prototype.getSourceConsumerType = function (orgID, type) {
            return __awaiter(this, void 0, void 0, function () {
                var sourceLoadType, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.sourceController.getSourceConsumerType(orgID, type).toPromise()];
                        case 1:
                            sourceLoadType = _a.sent();
                            if (sourceLoadType) {
                                return [2 /*return*/, sourceLoadType];
                            }
                            else {
                                return [2 /*return*/, [new i3.Static()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _a.sent();
                            console.error('Error -', error_2);
                            return [2 /*return*/, [new i3.Static()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return SourceService;
    }());
    SourceService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceService, deps: [{ token: SourceController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SourceService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: SourceController }]; } });

    // /tsc-library/
    var ConsumptionReportComponent = /** @class */ (function () {
        function ConsumptionReportComponent(router, formBuilder, storageService, toastService, alertService, sourceService, parameterService, aggregateDataService, reportService) {
            this.router = router;
            this.formBuilder = formBuilder;
            this.storageService = storageService;
            this.toastService = toastService;
            this.alertService = alertService;
            this.sourceService = sourceService;
            this.parameterService = parameterService;
            this.aggregateDataService = aggregateDataService;
            this.reportService = reportService;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.DateFormatEnum = i2.DateFormatEnum;
            this.DateInputTypeEnum = i2.DateInputTypeEnum;
            this.DateTypeEnum = i2.DateTypeEnum;
            this.FileTypeEnum = i3.FileTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.reportData = [new MeterData()];
            this.showAlert = false;
            this.showLoader = false;
            this.sourceConsumerType = [new i3.Static()];
            this.reportAlertObj = new Alert();
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        ConsumptionReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.pageTitle = "Energy Consumption Report";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.pageTitle = "Water Consumption Report";
            }
            this.reportFGInit();
            if (this.reportFG.get('sourceConsumer.type').value == 'SOURCE') {
                this.getSourceConsumerType('source');
            }
            else {
                this.getSourceConsumerType('load');
            }
            this.getConsumptionParameter();
        };
        ConsumptionReportComponent.prototype.reportFGInit = function () {
            var _this = this;
            this.reportFG = this.formBuilder.group({
                startDate: [, i2$1.Validators.required],
                endDate: [, i2$1.Validators.required],
                sourceConsumer: this.formBuilder.group({
                    type: ['SOURCE', i2$1.Validators.required],
                    keyID: [, i2$1.Validators.required]
                }),
                params: this.formBuilder.group({
                    name: ['', i2$1.Validators.required],
                    dsAgg: ['sum', i2$1.Validators.required],
                    agg: ['sum', i2$1.Validators.required]
                }),
                interval: [, i2$1.Validators.required]
            });
            this.reportFG.get('sourceConsumer.type').valueChanges.subscribe(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (value == 'SOURCE') {
                        this.getSourceConsumerType('source');
                    }
                    else if (value == 'CONSUMER') {
                        this.getSourceConsumerType('load');
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        ConsumptionReportComponent.prototype.getSourceConsumerType = function (sourceConsumerType) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            requestData = {
                                type: sourceConsumerType
                            };
                            _a = this;
                            return [4 /*yield*/, this.sourceService.getSourceConsumerType(this.orgID, requestData)];
                        case 1:
                            _a.sourceConsumerType = (_b.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionReportComponent.prototype.dateInpChange = function () {
            var startDate = this.monthDateInput.startDateFC.value;
            var endDate = this.monthDateInput.endDateFC.value;
            this.reportFG.get('startDate').patchValue(startDate);
            this.reportFG.get('endDate').patchValue(endDate);
        };
        ConsumptionReportComponent.prototype.getConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consumptionParamM;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.parameterService.getConsumptionParameter(this.orgID)];
                        case 1:
                            consumptionParamM = _a.sent();
                            this.consumptionParamM = consumptionParamM.consumptionParameter;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionReportComponent.prototype.reportSubmit = function () {
            var formValue = this.reportFG.value;
            var modifiedValue = Object.assign(Object.assign({}, formValue), { params: [formValue.params] });
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.reportFG.invalid) {
                console.log('Invalid form:', this.reportFG.value);
                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                this.showLoader = true;
                this.alertService.resetAlertProperties(this.reportAlertObj);
                this.viewReport(modifiedValue);
            }
        };
        ConsumptionReportComponent.prototype.viewReport = function (modifiedValue) {
            return __awaiter(this, void 0, void 0, function () {
                var result, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            return [4 /*yield*/, this.aggregateDataService.getMeterAggregateDataForReport(this.orgID, modifiedValue)];
                        case 1:
                            result = _a.sent();
                            if (result && result.length > 0 && result[0]['date']) {
                                this.reportData = result;
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 4];
                        case 2:
                            error_1 = _a.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 4];
                        case 3:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var formValue, modifiedValue, requestData, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            formValue = this.reportFG.value;
                            modifiedValue = Object.assign(Object.assign({}, formValue), { params: [formValue.params] });
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.reportFG.invalid) {
                                console.log('Invalid form:', this.reportFG.value);
                                this.reportFG.markAllAsTouched();
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            requestData = {};
                            requestData['request'] = modifiedValue;
                            requestData['reportName'] = 'Consumption Report';
                            requestData['reportFormat'] = format;
                            return [4 /*yield*/, this.reportService.downloadConsumptionReport(this.orgID, requestData)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _a.sent();
                            console.error("Error in downloadConsumptionReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionReportComponent.prototype.scheduleReport = function (value) {
            if (value) {
                var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'water' : 'energy';
                this.router.navigate(["schedule-report/" + applicationName + "-consumption"]);
            }
        };
        return ConsumptionReportComponent;
    }());
    ConsumptionReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportComponent, deps: [{ token: i1__namespace$1.Router }, { token: i2__namespace$1.FormBuilder }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: AlertService }, { token: SourceService }, { token: ParameterService }, { token: AggregateDataService }, { token: ReportService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsumptionReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumptionReportComponent, selector: "lib-consumption", viewQueries: [{ propertyName: "monthDateInput", first: true, predicate: ["monthDateInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <mat-slide-toggle (change)=\"scheduleReport($event.checked)\">Schedule report</mat-slide-toggle>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"reportFG\" (ngSubmit)=\"reportSubmit()\">\n            <div class=\"row\">\n                <div formGroupName=\"sourceConsumer\">\n                    <div class=\"col-sm-3\">\n                        <mat-button-toggle-group class=\"matBtnFilter\" formControlName=\"type\">\n                            <mat-button-toggle [value]=\"'SOURCE'\">Source</mat-button-toggle>\n                            <mat-button-toggle [value]=\"'CONSUMER'\">Consumer</mat-button-toggle>\n                        </mat-button-toggle-group>\n                        <mat-error class=\"textMatError ms-1\"\n                            *ngIf=\"errorHandling(reportFG, 'sourceConsumer.type', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-3\">\n                    <lib-date-input #monthDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                        [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                        [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.MONTH_INPUT\"\n                        [dateTypeInp]=\"DateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\"\n                        [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\"></lib-date-input>\n                </div>\n\n                <div class=\"col-sm-3\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select aggregation</mat-label>\n                        <mat-select formControlName=\"interval\" required>\n                            <mat-option [value]=\"'DAILY'\">Daily</mat-option>\n                            <mat-option [value]=\"'MONTHLY'\">Monthly</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling(reportFG, 'interval', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n\n\n                <div class=\"col-sm-3\">\n                    <div formGroupName=\"sourceConsumer\">\n                        <mat-form-field class=\"matFieldWidth100\"\n                            [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                            <mat-label> Select {{ reportFG.get('sourceConsumer.type').value == 'SOURCE' ? 'source' :\n                                'consumer' }} type</mat-label>\n\n                            <mat-select formControlName=\"keyID\" required>\n                                <ng-container\n                                    *ngIf=\"sourceConsumerType && sourceConsumerType.length > 0 && sourceConsumerType[0]['id']; else noSourceConsumerType\">\n                                    <mat-option *ngFor=\"let type of sourceConsumerType\" [value]=\"type.keyID\">\n                                        {{ type.name }}\n                                    </mat-option>\n                                </ng-container>\n\n                                <ng-template #noSourceConsumerType>\n                                    <mat-option disabled>\n                                        {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                    </mat-option>\n                                </ng-template>\n                            </mat-select>\n\n                            <mat-error *ngIf=\"errorHandling(reportFG, 'sourceConsumer.keyID', 'required')\">\n                                {{ FormErrorEnum.REQUIRED }}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n\n                <div class=\"col-sm-3\">\n                    <div formGroupName=\"params\">\n                        <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                            <mat-label>Select consumption parameter</mat-label>\n\n                            <mat-select formControlName=\"name\" required>\n                                <ng-container\n                                    *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                                    <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\">\n                                        {{ param.label }}\n                                    </mat-option>\n                                </ng-container>\n\n                                <ng-template #noConsumptionParamM>\n                                    <mat-option disabled>\n                                        {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                    </mat-option>\n                                </ng-template>\n                            </mat-select>\n\n                            <mat-error *ngIf=\"errorHandling(reportFG, 'params.name', 'required')\">\n                                {{ FormErrorEnum.REQUIRED }}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n\n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n        </form>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"formSubmitBtn.click()\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                        {{ ButtonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report [excludeFileTypeInp]=\"FileTypeEnum.CSV\" (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"reportData && reportData.length > 0 && reportData[0].date\">\n            <table class=\"table\">\n                <tbody>\n                    <tr class=\"tableHeader\">\n                        <td align=\"center\" class=\"fw-bold\"> Date </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter name </td>\n                        <td align=\"center\" class=\"fw-bold\"> Parameter name </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter start reading </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter end reading </td>\n                        <td align=\"center\" class=\"fw-bold\"> Consumption </td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr *ngFor=\"let data of reportData; let i = index\">\n                        <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row?.date | date: 'dd-MMM-yyyy\n                            HH:mm:ss' }}</td>\n                        <td align=\"center\">{{ row?.meterName }}</td>\n                        <td align=\"center\">{{ row?.parameterName }}</td>\n                        <td align=\"center\">{{ row?.meterStartReading }}</td>\n                        <td align=\"center\">{{ row?.meterEndReading }}</td>\n                        <td align=\"center\">{{ row?.meterConsumption }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>", components: [{ type: i9__namespace$1.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i1__namespace$4.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-labelledby", "tabIndex", "appearance", "checked", "disabled", "id", "name", "aria-label", "value"], outputs: ["change"], exportAs: ["matButtonToggle"] }, { type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1__namespace$4.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }], pipes: { "date": i14__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-consumption',
                        templateUrl: './consumption.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i2__namespace$1.FormBuilder }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: AlertService }, { type: SourceService }, { type: ParameterService }, { type: AggregateDataService }, { type: ReportService }]; }, propDecorators: { monthDateInput: [{
                    type: i0.ViewChild,
                    args: ['monthDateInput']
                }] } });

    var routes$n = [
        {
            path: '',
            component: ConsumptionReportComponent
        }
    ];
    var ConsumptionReportRoutingModule = /** @class */ (function () {
        function ConsumptionReportRoutingModule() {
        }
        return ConsumptionReportRoutingModule;
    }());
    ConsumptionReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ConsumptionReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$n)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$n)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionReportModule = /** @class */ (function () {
        function ConsumptionReportModule() {
        }
        return ConsumptionReportModule;
    }());
    ConsumptionReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportModule, declarations: [ConsumptionReportComponent], imports: [i14.CommonModule,
            ConsumptionReportRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule,
            i1$4.MatButtonToggleModule,
            i9$1.MatSlideToggleModule,
            i6$1.NgxMatSelectSearchModule,
            DownloadReportModule,
            i2.DateInputModule,
            i3.MessageAlertModule,
            i3.SkeletonModule] });
    ConsumptionReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportModule, imports: [[
                i14.CommonModule,
                ConsumptionReportRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule,
                i1$4.MatButtonToggleModule,
                i9$1.MatSlideToggleModule,
                i6$1.NgxMatSelectSearchModule,
                DownloadReportModule,
                i2.DateInputModule,
                i3.MessageAlertModule,
                i3.SkeletonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ConsumptionReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ConsumptionReportRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule,
                            i1$4.MatButtonToggleModule,
                            i9$1.MatSlideToggleModule,
                            i6$1.NgxMatSelectSearchModule,
                            DownloadReportModule,
                            i2.DateInputModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule
                        ]
                    }]
            }] });

    var DataAvailability = /** @class */ (function () {
        function DataAvailability() {
        }
        return DataAvailability;
    }());

    var DataAvailabilityController = /** @class */ (function () {
        function DataAvailabilityController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        DataAvailabilityController.prototype.getDataAvailability = function (orgID, requestBody) {
            var headers = new i1.HttpHeaders().set('skipLoader', 'YES');
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/data-availability", requestBody, { headers: headers });
        };
        return DataAvailabilityController;
    }());
    DataAvailabilityController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DataAvailabilityController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    // /tsc-library/
    var DataAvailabilityReportComponent = /** @class */ (function () {
        function DataAvailabilityReportComponent(storageService, toastService, tscCommonService, dataAvailabilityController, dateService, reportService, alertService) {
            this.storageService = storageService;
            this.toastService = toastService;
            this.tscCommonService = tscCommonService;
            this.dataAvailabilityController = dataAvailabilityController;
            this.dateService = dateService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.frequencyConstant = i3.FREQUENCY_CONSTANT;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.dropdownTypeEnum = DropdownTypeEnum;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.frequencyEnum = i2.FrequencyEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.parameterList = [];
            this.showAlert = false;
            this.showLoader = false;
            this.format = i2.DateFormatEnum.DATE_TIME;
            this.frequency = [];
            this.dataAvailabilityM = [new DataAvailability()];
            this.reportAlertObj = new Alert();
            this.aggDurationFC = new i2$1.FormControl('day_1', [i2$1.Validators.required]);
        }
        DataAvailabilityReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.frequency = this.frequencyConstant.filter(function (frequency) { return frequency.keyID != 'CUSTOM' && frequency.keyID != 'YEARLY'; });
            this.defaultFrequency = this.frequencyEnum.DAILY;
            this.dateType = i2.DateTypeEnum.EXCLUSIVE;
        };
        DataAvailabilityReportComponent.prototype.dateFilterEmitted = function (data) {
            this.startDate = data.startDate;
            this.endDate = data.endDate;
            this.selectedFrequency = data.frequency;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        DataAvailabilityReportComponent.prototype.aggDurationChange = function (selectedAD) {
            this.aggDurationFC.patchValue(selectedAD);
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        DataAvailabilityReportComponent.prototype.entityInpChange = function () {
            var _a, _b;
            this.entityID = this.entityInput.entityFC.value;
            (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.reset();
            (_b = this.paramInput) === null || _b === void 0 ? void 0 : _b.parameterFC.updateValueAndValidity();
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        DataAvailabilityReportComponent.prototype.deviceInpChange = function () {
            var _a, _b;
            this.deviceID = this.deviceInput.deviceFC.value;
            (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.reset();
            (_b = this.paramInput) === null || _b === void 0 ? void 0 : _b.parameterFC.updateValueAndValidity();
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        DataAvailabilityReportComponent.prototype.paramInpChange = function () {
            var _a;
            var paramMetric = (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.value;
            if (paramMetric.length > 0) {
                this.parameterList = this.tscCommonService.removeSelectAllID(paramMetric);
            }
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        DataAvailabilityReportComponent.prototype.viewReport = function () {
            return __awaiter(this, void 0, void 0, function () {
                var requestData;
                var _this = this;
                return __generator(this, function (_c) {
                    this.alertService.resetAlertProperties(this.reportAlertObj);
                    if (this.isValidInputField()) {
                        this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                        return [2 /*return*/];
                    }
                    if (this.startDate == this.endDate) {
                        this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                        return [2 /*return*/];
                    }
                    try {
                        this.showLoader = true;
                        requestData = this.createDataRequest();
                        this.dataAvailabilityController.getDataAvailability(this.orgID, requestData)
                            .subscribe(function (res) {
                            if ((res === null || res === void 0 ? void 0 : res.length) > 0) {
                                _this.dataAvailabilityM = res;
                            }
                            else {
                                _this.alertService.setAlertProperties(_this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                        }, function (error) {
                            console.log('error in getDataAvailability() - ', error);
                            throw error;
                        });
                    }
                    catch (error) {
                        console.error("Error in viewReport()", error);
                        this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                    }
                    finally {
                        this.showLoader = false;
                    }
                    return [2 /*return*/];
                });
            });
        };
        DataAvailabilityReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            this.showLoader = true;
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = 'Data Availability Report';
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _c.sent();
                            console.error("Error in downloadReport()", error_1);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        DataAvailabilityReportComponent.prototype.createDataRequest = function () {
            var _a;
            var parameter;
            if (((_a = this.paramInput.parameterFC.value) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                parameter = this.tscCommonService.removeSelectAllID(this.paramInput.parameterFC.value);
            }
            var requestData = {};
            requestData['startTime'] = this.startDate;
            requestData['endTime'] = this.endDate;
            requestData['interval'] = this.aggDurationFC.value;
            requestData['entityID'] = this.entityInput.entityFC.value;
            requestData['deviceID'] = this.deviceInput.deviceFC.value;
            requestData['parameters'] = parameter;
            return requestData;
        };
        DataAvailabilityReportComponent.prototype.isValidInputField = function () {
            var controls = [
                this.entityInput.entityFC,
                this.deviceInput.deviceFC,
                this.paramInput.parameterFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        return DataAvailabilityReportComponent;
    }());
    DataAvailabilityReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: i3__namespace.TSCCommonService }, { token: DataAvailabilityController }, { token: i2__namespace.DateService }, { token: ReportService }, { token: AlertService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DataAvailabilityReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DataAvailabilityReportComponent, selector: "lib-data-availability", viewQueries: [{ propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }, { propertyName: "deviceInput", first: true, predicate: ["deviceInput"], descendants: true }, { propertyName: "paramInput", first: true, predicate: ["paramInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Data Availability Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-date-filter-two [frequencyInp]=\"frequency\" [defaultFrequencyInp]=\"defaultFrequency\"\n                    [dateTypeInp]=\"dateType\" [showDefaultDurationInp]=\"true\" [timezoneInp]=\"timezone\"\n                    (dateFilterEmitter)=\"dateFilterEmitted($event)\"></lib-date-filter-two>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\"\n                    [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select aggregation duration</mat-label>\n                    <mat-select (selectionChange)=\"aggDurationChange($event.value)\" [formControl]=\"aggDurationFC\"\n                        required>\n                        <mat-option [value]=\"'day_1'\">\n                            Daily\n                        </mat-option>\n                        <mat-option [value]=\"'month_1'\" *ngIf=\"selectedFrequency == 'MONTHLY'\">\n                            Monthly\n                        </mat-option>\n                    </mat-select>\n                    <mat-error *ngIf=\"aggDurationFC.touched && aggDurationFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity #entityInput (emitFilter)=\"entityInpChange()\"></lib-entity>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-device #deviceInput [dropdownTypeInp]=\"dropdownTypeEnum.SINGLE_DROPDOWN\" [entityInp]=\"entityID\"\n                    (emitFilter)=\"deviceInpChange()\"></lib-device>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-param-metric #paramInput [deviceInp]=\"deviceID\" (emitFilter)=\"paramInpChange()\"></lib-param-metric>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"dataAvailabilityM && dataAvailabilityM?.length > 0 && dataAvailabilityM[0]?.deviceName\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <td align=\"center\" class=\"fw-bold\"> Entity </td>\n                            <td align=\"center\" class=\"fw-bold\"> Device </td>\n                            <td align=\"center\" class=\"fw-bold\"> Parameter </td>\n                            <td align=\"center\" class=\"fw-bold\"> Min value </td>\n                            <td align=\"center\" class=\"fw-bold\"> Max value </td>\n                            <td align=\"center\" class=\"fw-bold\"> Avg value </td>\n                            <td align=\"center\" class=\"fw-bold\"> Data availability (%) </td>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let data of dataAvailabilityM; let i = index\">\n                            <td>{{ i + 1 }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ dateService.formatDate(data.date, this.format) }}</td>\n                            <td align=\"center\">{{ data.entityName }}</td>\n                            <td align=\"center\">{{ data.deviceName }}</td>\n                            <td align=\"center\">{{ data.parameterName }}</td>\n                            <td align=\"center\">{{ data.minValue }}</td>\n                            <td align=\"center\">{{ data.maxValue }}</td>\n                            <td align=\"center\">{{ data.avgValue }}</td>\n                            <td align=\"center\">{{ data.dataAvailability }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i2__namespace.DateFilterTwoComponent, selector: "lib-date-filter-two", inputs: ["materialFormFieldAppearanceInp", "frequencyInp", "defaultFrequencyInp", "dateTypeInp", "timezoneInp", "labelInp", "showDefaultDurationInp", "cdrFormatInp", "rangeInp", "showRangeInp", "showTimeInCDRInp", "showCdrRangeLabelInp"], outputs: ["dateFilterEmitter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: DeviceComponent, selector: "lib-device", inputs: ["dropdownTypeInp", "entityInp"], outputs: ["emitFilter"] }, { type: ParamMetricComponent, selector: "lib-param-metric", inputs: ["deviceInp"], outputs: ["emitFilter"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-data-availability',
                        templateUrl: './data-availability.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: i3__namespace.TSCCommonService }, { type: DataAvailabilityController }, { type: i2__namespace.DateService }, { type: ReportService }, { type: AlertService }]; }, propDecorators: { entityInput: [{
                    type: i0.ViewChild,
                    args: ['entityInput']
                }], deviceInput: [{
                    type: i0.ViewChild,
                    args: ['deviceInput']
                }], paramInput: [{
                    type: i0.ViewChild,
                    args: ['paramInput']
                }] } });

    var routes$m = [
        {
            path: '',
            component: DataAvailabilityReportComponent
        }
    ];
    var DataAvailabilityReportRoutingModule = /** @class */ (function () {
        function DataAvailabilityReportRoutingModule() {
        }
        return DataAvailabilityReportRoutingModule;
    }());
    DataAvailabilityReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DataAvailabilityReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    DataAvailabilityReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$m)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$m)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var DataAvailabilityReportModule = /** @class */ (function () {
        function DataAvailabilityReportModule() {
        }
        return DataAvailabilityReportModule;
    }());
    DataAvailabilityReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DataAvailabilityReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportModule, declarations: [DataAvailabilityReportComponent], imports: [i14.CommonModule,
            DataAvailabilityReportRoutingModule,
            i2.DateFilterTwoModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            EntityModule,
            DeviceModule,
            ParamMetricModule,
            DownloadReportModule,
            i3.SkeletonModule,
            i3.MessageAlertModule,
            i7$1.MatTableModule,
            i12.MatInputModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i10$1.MatRippleModule] });
    DataAvailabilityReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportModule, imports: [[
                i14.CommonModule,
                DataAvailabilityReportRoutingModule,
                i2.DateFilterTwoModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                EntityModule,
                DeviceModule,
                ParamMetricModule,
                DownloadReportModule,
                i3.SkeletonModule,
                i3.MessageAlertModule,
                i7$1.MatTableModule,
                i12.MatInputModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i10$1.MatRippleModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DataAvailabilityReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            DataAvailabilityReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            DataAvailabilityReportRoutingModule,
                            i2.DateFilterTwoModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            EntityModule,
                            DeviceModule,
                            ParamMetricModule,
                            DownloadReportModule,
                            i3.SkeletonModule,
                            i3.MessageAlertModule,
                            i7$1.MatTableModule,
                            i12.MatInputModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i10$1.MatRippleModule,
                        ]
                    }]
            }] });

    // /tsc-library/
    var MeterReportComponent = /** @class */ (function () {
        function MeterReportComponent(storageService, toastService, tscCommonService, entityDeviceService, aggregateDataService, reportService, alertService) {
            this.storageService = storageService;
            this.toastService = toastService;
            this.tscCommonService = tscCommonService;
            this.entityDeviceService = entityDeviceService;
            this.aggregateDataService = aggregateDataService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.customRangeConstant = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.parameterList = [];
            this.showAlert = false;
            this.showLoader = false;
            this.entityDeviceM = [new DevicesWithEntities()];
            this.reportAlertObj = new Alert();
            this.meterFC = new i2$1.FormControl();
            this.meterSearchUtil = new i3.MatSelectSearchService(['name']);
        }
        MeterReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.paramMetric = "engEnergyUsed";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.paramMetric = "gwFlowTotalizer";
            }
            this.getDevicesWithEntitiesByParameter();
        };
        MeterReportComponent.prototype.getDevicesWithEntitiesByParameter = function () {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter(this, void 0, void 0, function () {
                var _g, deviceID;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            _g = this;
                            return [4 /*yield*/, this.entityDeviceService.getDevicesWithEntitiesByParameter(this.orgID, this.paramMetric)];
                        case 1:
                            _g.entityDeviceM = (_h.sent());
                            this.meterSearchUtil.entityArr = this.entityDeviceM;
                            this.meterSearchUtil.createSubscription();
                            if (this.entityDeviceM.length > 0 && ((_b = (_a = this.entityDeviceM) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id)) {
                                deviceID = (_f = (_e = (_d = (_c = this.entityDeviceM) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d['devices']) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f['id'];
                                this.meterFC.patchValue(deviceID);
                                this.entityID = this.getEntityIDByDeviceID(deviceID);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        MeterReportComponent.prototype.meterChange = function (selectedMeter) {
            var _a, _b;
            (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.reset();
            (_b = this.paramInput) === null || _b === void 0 ? void 0 : _b.parameterFC.updateValueAndValidity();
            this.meterFC.patchValue(selectedMeter);
            this.entityID = this.getEntityIDByDeviceID(selectedMeter);
        };
        MeterReportComponent.prototype.getEntityIDByDeviceID = function (deviceID) {
            var e_1, _g, e_2, _h;
            try {
                for (var _j = __values(this.entityDeviceM), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var entity = _k.value;
                    try {
                        for (var _l = (e_2 = void 0, __values(entity.devices)), _m = _l.next(); !_m.done; _m = _l.next()) {
                            var device = _m.value;
                            if (device.id == deviceID) {
                                return entity.id;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_m && !_m.done && (_h = _l.return)) _h.call(_l);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_g = _j.return)) _g.call(_j);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return null;
        };
        MeterReportComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        MeterReportComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        MeterReportComponent.prototype.paramInpChange = function () {
            var _a;
            var paramMetric = (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.value;
            if (paramMetric.length > 0) {
                this.parameterList = this.tscCommonService.removeSelectAllID(paramMetric);
            }
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        MeterReportComponent.prototype.viewReport = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _g, error_1;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _h.label = 1;
                        case 1:
                            _h.trys.push([1, 3, 4, 5]);
                            requestData = this.createDataRequest();
                            _g = this;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            _g.reportData = _h.sent();
                            if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(function (item) { return item.data.length == 0; }))) {
                                this.timestamp = this.reportService.extractTimestamp(this.reportData);
                                this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _h.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        MeterReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _g.label = 1;
                        case 1:
                            _g.trys.push([1, 3, 4, 5]);
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = 'Meter Report';
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 2:
                            _g.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _g.sent();
                            console.error("Error in downloadReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        MeterReportComponent.prototype.createDataRequest = function () {
            var e_3, _g;
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.aggDuration;
            requestData.entityID = [this.entityID];
            requestData.deviceID = [this.meterFC.value];
            requestData.params = [];
            try {
                for (var _h = __values(this.parameterList), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var paramMetric = _j.value;
                    requestData.params.push({
                        name: paramMetric,
                        dsAgg: "avg",
                        agg: "avg"
                    });
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_g = _h.return)) _g.call(_h);
                }
                finally { if (e_3) throw e_3.error; }
            }
            requestData.nullifyParams();
            return requestData;
        };
        MeterReportComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC,
                this.meterFC,
                this.paramInput.parameterFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        return MeterReportComponent;
    }());
    MeterReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: i3__namespace.TSCCommonService }, { token: EntityDeviceService }, { token: AggregateDataService }, { token: ReportService }, { token: AlertService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MeterReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MeterReportComponent, selector: "lib-meter", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "paramInput", first: true, predicate: ["paramInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Meter Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select meter</mat-label>\n                    <mat-select (selectionChange)=\"meterChange($event.value)\" [formControl]=\"meterFC\" required>\n                        <ng-container *ngIf=\"entityDeviceM && entityDeviceM.length > 0 && entityDeviceM?.[0]?.id; else noDataFound\">\n                            <mat-option>\n                                <ngx-mat-select-search [formControl]=\"meterSearchUtil.filterFC\" placeholderLabel=\"Search by entity name\"\n                                    noEntriesFoundLabel=\"No matching name found.\">\n                                </ngx-mat-select-search>\n                            </mat-option>\n                            <mat-optgroup *ngFor=\"let entity of meterSearchUtil.filteredEntities | async\" [label]=\"entity.name\"\n                                [disabled]=\"entity.disabled\">\n                                <mat-option *ngFor=\"let device of entity.devices\" [value]=\"device.id\">\n                                    {{ device.name }}\n                                </mat-option>\n                            </mat-optgroup>\n                        </ng-container>\n                        <ng-template #noDataFound>\n                            <mat-option disabled>\n                                {{ commonConstant.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n                    <mat-error *ngIf=\"meterFC.touched && meterFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-param-metric #paramInput [deviceInp]=\"meterFC.value\" (emitFilter)=\"paramInpChange()\"></lib-param-metric>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i10__namespace.MatOptgroup, selector: "mat-optgroup", inputs: ["disabled"], exportAs: ["matOptgroup"] }, { type: ParamMetricComponent, selector: "lib-param-metric", inputs: ["deviceInp"], outputs: ["emitFilter"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-meter',
                        templateUrl: './meter.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: i3__namespace.TSCCommonService }, { type: EntityDeviceService }, { type: AggregateDataService }, { type: ReportService }, { type: AlertService }]; }, propDecorators: { customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }], paramInput: [{
                    type: i0.ViewChild,
                    args: ['paramInput']
                }] } });

    var routes$l = [
        {
            path: '',
            component: MeterReportComponent
        }
    ];
    var MeterReportRoutingModule = /** @class */ (function () {
        function MeterReportRoutingModule() {
        }
        return MeterReportRoutingModule;
    }());
    MeterReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MeterReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    MeterReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$l)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$l)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var MeterReportModule = /** @class */ (function () {
        function MeterReportModule() {
        }
        return MeterReportModule;
    }());
    MeterReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MeterReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportModule, declarations: [MeterReportComponent], imports: [i14.CommonModule,
            MeterReportRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i2.DateInputModule,
            AggregationDurationModule,
            ParamMetricModule,
            DownloadReportModule,
            i3.MessageAlertModule,
            i3.SkeletonModule,
            i6$1.NgxMatSelectSearchModule,
            i12.MatInputModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule] });
    MeterReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportModule, imports: [[
                i14.CommonModule,
                MeterReportRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i2.DateInputModule,
                AggregationDurationModule,
                ParamMetricModule,
                DownloadReportModule,
                i3.MessageAlertModule,
                i3.SkeletonModule,
                i6$1.NgxMatSelectSearchModule,
                i12.MatInputModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MeterReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            MeterReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            MeterReportRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i2.DateInputModule,
                            AggregationDurationModule,
                            ParamMetricModule,
                            DownloadReportModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule,
                            i6$1.NgxMatSelectSearchModule,
                            i12.MatInputModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ParameterReportComponent = /** @class */ (function () {
        function ParameterReportComponent(storageService, toastService, tscCommonService, aggregateDataService, parameterService, reportService, alertService) {
            this.storageService = storageService;
            this.toastService = toastService;
            this.tscCommonService = tscCommonService;
            this.aggregateDataService = aggregateDataService;
            this.parameterService = parameterService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.customRangeConstant = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.dropdownTypeEnum = DropdownTypeEnum;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.paramMetric = [];
            this.metricListArray = [];
            this.showAlert = false;
            this.showLoader = false;
            this.parameterM = [new Parameter()];
            this.reportAlertObj = new Alert();
        }
        ParameterReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.getParameterByLayoutID();
        };
        ParameterReportComponent.prototype.getParameterByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _c = this;
                            return [4 /*yield*/, this.parameterService.getParameterByLayoutID(this.orgID)];
                        case 1:
                            _c.parameterM = (_d.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        ParameterReportComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ParameterReportComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ParameterReportComponent.prototype.entityInpChange = function () {
            this.entityID = this.entityInput.entityFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ParameterReportComponent.prototype.deviceInpChange = function () {
            this.deviceID = this.deviceInput.deviceFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ParameterReportComponent.prototype.paramInpChange = function () {
            var _a, _b;
            this.paramMetric = (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.value;
            if (((_b = this.paramMetric) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                this.parameterList = this.tscCommonService.removeSelectAllID(this.paramMetric);
            }
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        ParameterReportComponent.prototype.aggInpChange = function (dsAgg, metric) {
            var _c;
            var metricList = [];
            if (dsAgg) {
                dsAgg.forEach(function (aggregation) {
                    var metricObject = {
                        name: metric,
                        dsAgg: aggregation,
                        agg: "avg"
                    };
                    metricList.push(metricObject);
                });
            }
            this.metricListArray = this.metricListArray.filter(function (entry) { return entry.name != metric; });
            (_c = this.metricListArray).push.apply(_c, __spreadArray([], __read(metricList)));
        };
        ParameterReportComponent.prototype.viewReport = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _c, error_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            requestData = this.createDataRequest();
                            _c = this;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            _c.reportData = _d.sent();
                            if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(function (item) { return item.data.length == 0; }))) {
                                this.timestamp = this.reportService.extractTimestamp(this.reportData);
                                this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _d.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ParameterReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = 'Parameter Report';
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _c.sent();
                            console.error("Error in downloadReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ParameterReportComponent.prototype.createDataRequest = function () {
            var _c;
            var _this = this;
            var filteredMetricListArray = this.metricListArray.filter(function (metric) { return _this.parameterList.includes(metric.name); });
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.aggDuration;
            requestData.entityID = [this.entityID];
            requestData.deviceID = [this.deviceID];
            requestData.params = [];
            (_c = requestData.params).push.apply(_c, __spreadArray([], __read(filteredMetricListArray.map(function (metric) { return ({
                name: metric.name,
                dsAgg: metric.dsAgg,
                agg: metric.agg,
            }); }))));
            requestData.nullifyParams();
            return requestData;
        };
        ParameterReportComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC,
                this.entityInput.entityFC,
                this.deviceInput.deviceFC,
                this.paramInput.parameterFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        ParameterReportComponent.prototype.getParameterLabel = function (paramMetricValue) {
            var parameter = this.tscCommonService.getUniqueObject(this.parameterM, 'paramMetric', paramMetricValue);
            return parameter ? parameter.label : '';
        };
        return ParameterReportComponent;
    }());
    ParameterReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: i3__namespace.TSCCommonService }, { token: AggregateDataService }, { token: ParameterService }, { token: ReportService }, { token: AlertService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ParameterReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ParameterReportComponent, selector: "lib-parameter", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }, { propertyName: "deviceInput", first: true, predicate: ["deviceInput"], descendants: true }, { propertyName: "paramInput", first: true, predicate: ["paramInput"], descendants: true }, { propertyName: "aggInput", first: true, predicate: ["aggInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Parameter Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\"\n                    [showTimeInCDRInp]=\"true\" [showRangeInp]=\"true\"\n                    [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity #entityInput (emitFilter)=\"entityInpChange()\"></lib-entity>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-device #deviceInput [dropdownTypeInp]=\"dropdownTypeEnum.SINGLE_DROPDOWN\" [entityInp]=\"entityID\"\n                    (emitFilter)=\"deviceInpChange()\"></lib-device>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-param-metric #paramInput [deviceInp]=\"deviceID\" (emitFilter)=\"paramInpChange()\"></lib-param-metric>\n            </div>\n            <div class=\"col-sm-9 mt-4\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\" *ngIf=\"paramMetric && paramMetric.length > 0\">\n            <table class=\"table\">\n                <tbody>\n                    <tr class=\"tableHeader\">\n                        <td align=\"center\" class=\"fw-bold\"> Metric </td>\n                        <td align=\"center\" class=\"fw-bold\"> Aggregation </td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr *ngFor=\"let metric of parameterList; let i = index\">\n                        <td align=\"center\">\n                            <div class=\"mt-4\">\n                                {{ getParameterLabel(metric) }}\n                            </div>\n                        </td>\n                        <td align=\"center\">\n                            <div class=\"col-sm-6 mt-3\">\n                                <lib-aggregation #aggInput\n                                    (emitFilter)=\"aggInpChange(aggInput.aggregationFC.value, metric)\"></lib-aggregation>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: DeviceComponent, selector: "lib-device", inputs: ["dropdownTypeInp", "entityInp"], outputs: ["emitFilter"] }, { type: ParamMetricComponent, selector: "lib-param-metric", inputs: ["deviceInp"], outputs: ["emitFilter"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: AggregationComponent, selector: "lib-aggregation", outputs: ["emitFilter"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-parameter',
                        templateUrl: './parameter.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: i3__namespace.TSCCommonService }, { type: AggregateDataService }, { type: ParameterService }, { type: ReportService }, { type: AlertService }]; }, propDecorators: { customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }], entityInput: [{
                    type: i0.ViewChild,
                    args: ['entityInput']
                }], deviceInput: [{
                    type: i0.ViewChild,
                    args: ['deviceInput']
                }], paramInput: [{
                    type: i0.ViewChild,
                    args: ['paramInput']
                }], aggInput: [{
                    type: i0.ViewChild,
                    args: ['aggInput']
                }] } });

    var routes$k = [
        {
            path: '',
            component: ParameterReportComponent
        }
    ];
    var ParameterReportRoutingModule = /** @class */ (function () {
        function ParameterReportRoutingModule() {
        }
        return ParameterReportRoutingModule;
    }());
    ParameterReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ParameterReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ParameterReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$k)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$k)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ParameterReportModule = /** @class */ (function () {
        function ParameterReportModule() {
        }
        return ParameterReportModule;
    }());
    ParameterReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ParameterReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportModule, declarations: [ParameterReportComponent], imports: [i14.CommonModule,
            ParameterReportRoutingModule,
            i2.DateInputModule,
            AggregationDurationModule,
            EntityModule,
            DeviceModule,
            ParamMetricModule,
            AggregationModule,
            i3.SkeletonModule,
            i3.MessageAlertModule,
            DownloadReportModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule] });
    ParameterReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportModule, imports: [[
                i14.CommonModule,
                ParameterReportRoutingModule,
                i2.DateInputModule,
                AggregationDurationModule,
                EntityModule,
                DeviceModule,
                ParamMetricModule,
                AggregationModule,
                i3.SkeletonModule,
                i3.MessageAlertModule,
                DownloadReportModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ParameterReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ParameterReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ParameterReportRoutingModule,
                            i2.DateInputModule,
                            AggregationDurationModule,
                            EntityModule,
                            DeviceModule,
                            ParamMetricModule,
                            AggregationModule,
                            i3.SkeletonModule,
                            i3.MessageAlertModule,
                            DownloadReportModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var RawDataReportComponent = /** @class */ (function () {
        function RawDataReportComponent(storageService, toastService, aggregateDataService, parameterService, reportService, alertService) {
            this.storageService = storageService;
            this.toastService = toastService;
            this.aggregateDataService = aggregateDataService;
            this.parameterService = parameterService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.customRangeConstant = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.dropdownTypeEnum = DropdownTypeEnum;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.showAlert = false;
            this.showLoader = false;
            this.parameterM = [new Parameter()];
            this.reportAlertObj = new Alert();
        }
        RawDataReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
        };
        RawDataReportComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        RawDataReportComponent.prototype.entityInpChange = function () {
            this.entityID = this.entityInput.entityFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        RawDataReportComponent.prototype.deviceInpChange = function () {
            this.deviceID = this.deviceInput.deviceFC.value;
            if (this.deviceID) {
                this.getParameterByDeviceID(this.deviceID);
            }
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        RawDataReportComponent.prototype.getParameterByDeviceID = function (deviceID) {
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            requestBody = {};
                            requestBody['deviceID'] = [deviceID];
                            _c = this;
                            return [4 /*yield*/, this.parameterService.getParameterByDeviceID(this.orgID, requestBody)];
                        case 1:
                            _c.parameterM = (_d.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        RawDataReportComponent.prototype.viewReport = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _c, error_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (!(!this.parameterM || this.parameterM.length == 0 || !this.parameterM[0]['id'])) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getParameterByDeviceID(this.deviceID)];
                        case 1:
                            _d.sent();
                            _d.label = 2;
                        case 2:
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.dayDifference = this.getTimeDifference(this.startDate, this.endDate);
                            if (!(this.dayDifference <= 1)) return [3 /*break*/, 8];
                            _d.label = 3;
                        case 3:
                            _d.trys.push([3, 5, 6, 7]);
                            this.showLoader = true;
                            requestData = this.createDataRequest();
                            _c = this;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 4:
                            _c.reportData = _d.sent();
                            if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(function (item) { return item.data.length == 0; }))) {
                                this.timestamp = this.reportService.extractTimestamp(this.reportData);
                                this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 7];
                        case 5:
                            error_1 = _d.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 7];
                        case 6:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 7: return [3 /*break*/, 9];
                        case 8:
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.TIME_EXCEEDED_LABEL, exports.ReportErrorEnum.HOUR_24_TIME_EXCEEDED_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                            _d.label = 9;
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        RawDataReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (!(!this.parameterM || this.parameterM.length == 0 || !this.parameterM[0]['id'])) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getParameterByDeviceID(this.deviceID)];
                        case 1:
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.dayDifference = this.getTimeDifference(this.startDate, this.endDate);
                            if (!(this.dayDifference <= 1)) return [3 /*break*/, 8];
                            _c.label = 3;
                        case 3:
                            _c.trys.push([3, 5, 6, 7]);
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = 'Parameter Report';
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 4:
                            _c.sent();
                            return [3 /*break*/, 7];
                        case 5:
                            error_2 = _c.sent();
                            console.error("Error in downloadReport()", error_2);
                            return [3 /*break*/, 7];
                        case 6:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 7: return [3 /*break*/, 9];
                        case 8:
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.TIME_EXCEEDED_LABEL, exports.ReportErrorEnum.HOUR_24_TIME_EXCEEDED_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                            _c.label = 9;
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        RawDataReportComponent.prototype.createDataRequest = function () {
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = "raw";
            requestData.entityID = [this.entityID];
            requestData.deviceID = [this.deviceID];
            requestData.params = this.parameterM.map(function (param) { return ({
                name: param.paramMetric,
                dsAgg: 'avg',
                agg: 'avg'
            }); });
            requestData.nullifyParams();
            return requestData;
        };
        RawDataReportComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.entityInput.entityFC,
                this.deviceInput.deviceFC,
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        RawDataReportComponent.prototype.getTimeDifference = function (startTime, endTime) {
            var date1 = new Date(startTime).getTime();
            var date2 = new Date(endTime).getTime();
            var diffTime = Math.abs(date2 - date1);
            var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        };
        return RawDataReportComponent;
    }());
    RawDataReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: AggregateDataService }, { token: ParameterService }, { token: ReportService }, { token: AlertService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RawDataReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: RawDataReportComponent, selector: "lib-raw-data", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }, { propertyName: "deviceInput", first: true, predicate: ["deviceInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Raw Data Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\"\n                    [showTimeInCDRInp]=\"true\" [showRangeInp]=\"true\"\n                    [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity #entityInput (emitFilter)=\"entityInpChange()\"></lib-entity>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-device #deviceInput [dropdownTypeInp]=\"dropdownTypeEnum.SINGLE_DROPDOWN\" [entityInp]=\"entityID\"\n                    (emitFilter)=\"deviceInpChange()\"></lib-device>\n            </div>\n            <div class=\"col-sm-3 mt-3\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: DeviceComponent, selector: "lib-device", inputs: ["dropdownTypeInp", "entityInp"], outputs: ["emitFilter"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-raw-data',
                        templateUrl: './raw-data.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: AggregateDataService }, { type: ParameterService }, { type: ReportService }, { type: AlertService }]; }, propDecorators: { customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], entityInput: [{
                    type: i0.ViewChild,
                    args: ['entityInput']
                }], deviceInput: [{
                    type: i0.ViewChild,
                    args: ['deviceInput']
                }] } });

    var routes$j = [
        {
            path: '',
            component: RawDataReportComponent
        }
    ];
    var RawDataReportRoutingModule = /** @class */ (function () {
        function RawDataReportRoutingModule() {
        }
        return RawDataReportRoutingModule;
    }());
    RawDataReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RawDataReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    RawDataReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$j)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$j)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var RawDataReportModule = /** @class */ (function () {
        function RawDataReportModule() {
        }
        return RawDataReportModule;
    }());
    RawDataReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RawDataReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportModule, declarations: [RawDataReportComponent], imports: [i14.CommonModule,
            RawDataReportRoutingModule,
            i2.DateInputModule,
            EntityModule,
            DeviceModule,
            DownloadReportModule,
            i3.SkeletonModule,
            i3.MessageAlertModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule] });
    RawDataReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportModule, imports: [[
                i14.CommonModule,
                RawDataReportRoutingModule,
                i2.DateInputModule,
                EntityModule,
                DeviceModule,
                DownloadReportModule,
                i3.SkeletonModule,
                i3.MessageAlertModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RawDataReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            RawDataReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            RawDataReportRoutingModule,
                            i2.DateInputModule,
                            EntityModule,
                            DeviceModule,
                            DownloadReportModule,
                            i3.SkeletonModule,
                            i3.MessageAlertModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var SourcingReportComponent = /** @class */ (function () {
        function SourcingReportComponent(router, storageService, toastService, aggregateDataService, parameterService, reportService, alertService, tscCommonService) {
            this.router = router;
            this.storageService = storageService;
            this.toastService = toastService;
            this.aggregateDataService = aggregateDataService;
            this.parameterService = parameterService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.tscCommonService = tscCommonService;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.CUSTOM_RANGE_CONSTANT = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.DateFormatEnum = i2.DateFormatEnum;
            this.DateInputTypeEnum = i2.DateInputTypeEnum;
            this.DateTypeEnum = i2.DateTypeEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.allParameterID = [];
            this.parameterList = [];
            this.totalParameterCount = 0;
            this.showAlert = false;
            this.showLoader = false;
            this.reportAlertObj = new Alert();
            this.parameterFC = new i2$1.FormControl([], [i2$1.Validators.required]);
        }
        SourcingReportComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
            this.pageTitle = applicationName + " Sourcing Report";
            this.getConsumptionParameter();
        };
        SourcingReportComponent.prototype.getConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consumptionParamM;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.parameterService.getConsumptionParameter(this.orgID)];
                        case 1:
                            consumptionParamM = _c.sent();
                            this.consumptionParamM = consumptionParamM.consumptionParameter;
                            this.totalParameterCount = this.consumptionParamM.length;
                            this.consumptionParamM.forEach(function (parameter) { return _this.allParameterID.push(parameter['paramMetric']); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        SourcingReportComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        SourcingReportComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        SourcingReportComponent.prototype.selectAllParameters = function () {
            if (!this.parameterFC.value.includes(-1)) {
                this.parameterFC.reset([]);
                return;
            }
            this.parameterFC.setValue(__spreadArray([-1], __read(this.allParameterID)));
            this.paramInpChange();
        };
        SourcingReportComponent.prototype.selectedParameters = function () {
            var selected = this.parameterFC.value;
            if (selected.includes(-1)) {
                selected.shift();
                this.parameterFC.patchValue(selected);
            }
            else if (this.parameterFC.value.length == this.totalParameterCount) {
                this.allParameterID.splice(0, 0, -1);
                this.parameterFC.patchValue(this.allParameterID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.parameterFC.patchValue(filteredSelected);
            }
            this.paramInpChange();
        };
        SourcingReportComponent.prototype.paramInpChange = function () {
            var paramMetric = this.parameterFC.value;
            if (paramMetric.length > 0) {
                this.parameterList = this.tscCommonService.removeSelectAllID(paramMetric);
            }
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        SourcingReportComponent.prototype.viewReport = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _c, error_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            requestData = this.createDataRequest();
                            _c = this;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            _c.reportData = _d.sent();
                            if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(function (item) { return item.data.length == 0; }))) {
                                this.timestamp = this.reportService.extractTimestamp(this.reportData);
                                this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.DateFormatEnum.DATE_TIME);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _d.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SourcingReportComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = this.pageTitle;
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _c.sent();
                            console.error("Error in downloadReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SourcingReportComponent.prototype.createDataRequest = function () {
            var _a;
            var parameter;
            if (((_a = this.parameterFC.value) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                parameter = this.tscCommonService.removeSelectAllID(this.parameterFC.value);
            }
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.aggDuration;
            requestData.params = parameter.map(function (param) { return ({
                name: param,
                dsAgg: "sum",
                agg: "sum",
                source_or_load: "source",
                sourceLoadType: 'all'
            }); });
            requestData.nullifyParams();
            return requestData;
        };
        SourcingReportComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC,
                this.parameterFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        SourcingReportComponent.prototype.scheduleReport = function (value) {
            if (value) {
                var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'water' : 'energy';
                this.router.navigate(["schedule-report/" + applicationName + "-sourcing"]);
            }
        };
        return SourcingReportComponent;
    }());
    SourcingReportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportComponent, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: AggregateDataService }, { token: ParameterService }, { token: ReportService }, { token: AlertService }, { token: i3__namespace.TSCCommonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SourcingReportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourcingReportComponent, selector: "lib-sourcing", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <mat-slide-toggle (change)=\"scheduleReport($event.checked)\">Schedule report</mat-slide-toggle>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"DateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"CUSTOM_RANGE_CONSTANT\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select consumption parameter</mat-label>\n\n                    <mat-select [formControl]=\"parameterFC\" multiple required>\n                        <ng-container\n                            *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                            <mat-option [value]=\"-1\" (click)=\"selectAllParameters()\">\n                                Select all\n                            </mat-option>\n                            <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\" (click)=\"selectedParameters()\">\n                                {{ param.label }}\n                            </mat-option>\n                        </ng-container>\n\n                        <ng-template #noConsumptionParamM>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"parameterFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                        {{ ButtonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.entityName }}<br />\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : COMMON_CONSTANT.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i9__namespace$1.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-sourcing',
                        templateUrl: './sourcing.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: AggregateDataService }, { type: ParameterService }, { type: ReportService }, { type: AlertService }, { type: i3__namespace.TSCCommonService }]; }, propDecorators: { customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }] } });

    var routes$i = [
        {
            path: '',
            component: SourcingReportComponent
        }
    ];
    var SourcingReportRoutingModule = /** @class */ (function () {
        function SourcingReportRoutingModule() {
        }
        return SourcingReportRoutingModule;
    }());
    SourcingReportRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourcingReportRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    SourcingReportRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$i)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$i)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var SourcingReportModule = /** @class */ (function () {
        function SourcingReportModule() {
        }
        return SourcingReportModule;
    }());
    SourcingReportModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourcingReportModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportModule, declarations: [SourcingReportComponent], imports: [i14.CommonModule,
            SourcingReportRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule,
            i9$1.MatSlideToggleModule,
            AggregationDurationModule,
            DownloadReportModule,
            i2.DateInputModule,
            i3.MessageAlertModule,
            i3.SkeletonModule] });
    SourcingReportModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportModule, imports: [[
                i14.CommonModule,
                SourcingReportRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule,
                i9$1.MatSlideToggleModule,
                AggregationDurationModule,
                DownloadReportModule,
                i2.DateInputModule,
                i3.MessageAlertModule,
                i3.SkeletonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcingReportModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            SourcingReportComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            SourcingReportRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule,
                            i9$1.MatSlideToggleModule,
                            AggregationDurationModule,
                            DownloadReportModule,
                            i2.DateInputModule,
                            i3.MessageAlertModule,
                            i3.SkeletonModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var UsageAcrossFacilityComponent = /** @class */ (function () {
        function UsageAcrossFacilityComponent(storageService, toastService, aggregateDataService, reportService, alertService) {
            this.storageService = storageService;
            this.toastService = toastService;
            this.aggregateDataService = aggregateDataService;
            this.reportService = reportService;
            this.alertService = alertService;
            this.materialConstant = i3.MATERIAL_CONSTANT;
            this.commonConstant = i3.COMMON_CONSTANT;
            this.customRangeConstant = i2.CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
            this.materialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.buttonLabelEnum = i3.ButtonLabelEnum;
            this.dateFormatEnum = i2.DateFormatEnum;
            this.dateInputTypeEnum = i2.DateInputTypeEnum;
            this.dateTypeEnum = i2.DateTypeEnum;
            this.showAlert = false;
            this.showLoader = false;
            this.reportAlertObj = new Alert();
        }
        UsageAcrossFacilityComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.timezone = this.storageService.getStorage('timezone');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.paramMetric = "engEnergyUsed";
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.paramMetric = "gwFlowTotalizer";
            }
        };
        UsageAcrossFacilityComponent.prototype.sourceLoadInpChange = function () {
            this.category = this.sourceLoadInput.categoryFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        UsageAcrossFacilityComponent.prototype.dateInpChange = function () {
            this.startDate = this.customDateInput.startDateFC.value;
            this.endDate = this.customDateInput.endDateFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        UsageAcrossFacilityComponent.prototype.aggDurationInpChange = function () {
            this.aggDuration = this.aggDurationInput.aggDurationFC.value;
            this.alertService.resetAlertProperties(this.reportAlertObj);
        };
        UsageAcrossFacilityComponent.prototype.viewReport = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _c, error_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            requestData = this.createDataRequest();
                            _c = this;
                            return [4 /*yield*/, this.aggregateDataService.getAggregateData(this.orgID, requestData)];
                        case 2:
                            _c.reportData = _d.sent();
                            if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(function (item) { return item.data.length == 0; }))) {
                                this.timestamp = this.reportService.extractTimestamp(this.reportData);
                                this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                            }
                            else {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.DATA_NOT_FOUND_LABEL, exports.ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, i3.MessageAlertTypeEnum.WARNING, i3.MessageAlertIconEnum.WARNING_ICON);
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            error_1 = _d.sent();
                            console.error("Error in viewReport()", error_1);
                            this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_ERROR_LABEL, exports.ReportErrorEnum.INVALID_ERROR_MESSAGE, i3.MessageAlertTypeEnum.DANGER, i3.MessageAlertIconEnum.DANGER_ICON);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        UsageAcrossFacilityComponent.prototype.downloadReport = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.alertService.resetAlertProperties(this.reportAlertObj);
                            if (this.isValidInputField()) {
                                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                                return [2 /*return*/];
                            }
                            if (this.startDate == this.endDate) {
                                this.alertService.setAlertProperties(this.reportAlertObj, exports.ReportErrorEnum.INVALID_DATE_LABEL, exports.ReportErrorEnum.INVALID_DATE_MESSAGE, i3.MessageAlertTypeEnum.INFO, i3.MessageAlertIconEnum.INFO_ICON);
                                return [2 /*return*/];
                            }
                            this.showLoader = true;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            requestData = new DownloadReportRequest();
                            requestData.request = this.createDataRequest();
                            requestData.reportName = 'Usage Across Facility Report';
                            requestData.reportFormat = format;
                            return [4 /*yield*/, this.reportService.downloadReport(this.orgID, requestData)];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            error_2 = _c.sent();
                            console.error("Error in downloadReport()", error_2);
                            return [3 /*break*/, 5];
                        case 4:
                            this.showLoader = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        UsageAcrossFacilityComponent.prototype.createDataRequest = function () {
            var requestData = new AggregateDataRequest();
            requestData.startTime = this.startDate;
            requestData.endTime = this.endDate;
            requestData.interval = this.aggDuration;
            requestData.params = [
                {
                    name: this.paramMetric,
                    dsAgg: "sum",
                    agg: "sum",
                    source_or_load: this.category,
                    sourceLoadType: 'all'
                }
            ];
            requestData.nullifyParams();
            return requestData;
        };
        UsageAcrossFacilityComponent.prototype.isValidInputField = function () {
            var controls = [
                this.customDateInput.startDateFC,
                this.aggDurationInput.aggDurationFC
            ];
            controls.forEach(function (control) { return control.markAsTouched(); });
            return controls.some(function (control) { return control.invalid; });
        };
        return UsageAcrossFacilityComponent;
    }());
    UsageAcrossFacilityComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: AggregateDataService }, { token: ReportService }, { token: AlertService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UsageAcrossFacilityComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: UsageAcrossFacilityComponent, selector: "lib-usage-across-facility", viewQueries: [{ propertyName: "sourceLoadInput", first: true, predicate: ["sourceLoadInput"], descendants: true }, { propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Usage Across Facility Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\">\n                <lib-source-load #sourceLoadInput (emitFilter)=\"sourceLoadInpChange()\"></lib-source-load>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.entityName }}<br />\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: SourceLoadComponent$1, selector: "lib-source-load", inputs: ["defaultCategoryInp"], outputs: ["emitFilter"] }, { type: i2__namespace.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3__namespace.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-usage-across-facility',
                        templateUrl: './usage-across-facility.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: AggregateDataService }, { type: ReportService }, { type: AlertService }]; }, propDecorators: { sourceLoadInput: [{
                    type: i0.ViewChild,
                    args: ['sourceLoadInput']
                }], customDateInput: [{
                    type: i0.ViewChild,
                    args: ['customDateInput']
                }], aggDurationInput: [{
                    type: i0.ViewChild,
                    args: ['aggDurationInput']
                }] } });

    var routes$h = [
        {
            path: '',
            component: UsageAcrossFacilityComponent
        }
    ];
    var UsageAcrossFacilityRoutingModule = /** @class */ (function () {
        function UsageAcrossFacilityRoutingModule() {
        }
        return UsageAcrossFacilityRoutingModule;
    }());
    UsageAcrossFacilityRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UsageAcrossFacilityRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    UsageAcrossFacilityRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$h)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$h)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var UsageAcrossFacilityModule = /** @class */ (function () {
        function UsageAcrossFacilityModule() {
        }
        return UsageAcrossFacilityModule;
    }());
    UsageAcrossFacilityModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UsageAcrossFacilityModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityModule, declarations: [UsageAcrossFacilityComponent], imports: [i14.CommonModule,
            UsageAcrossFacilityRoutingModule,
            SourceLoadModule$1,
            i2.DateInputModule,
            AggregationDurationModule,
            DownloadReportModule,
            i3.SkeletonModule,
            i3.MessageAlertModule,
            i7$1.MatTableModule,
            i10$1.MatRippleModule] });
    UsageAcrossFacilityModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityModule, imports: [[
                i14.CommonModule,
                UsageAcrossFacilityRoutingModule,
                SourceLoadModule$1,
                i2.DateInputModule,
                AggregationDurationModule,
                DownloadReportModule,
                i3.SkeletonModule,
                i3.MessageAlertModule,
                i7$1.MatTableModule,
                i10$1.MatRippleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: UsageAcrossFacilityModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            UsageAcrossFacilityComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            UsageAcrossFacilityRoutingModule,
                            SourceLoadModule$1,
                            i2.DateInputModule,
                            AggregationDurationModule,
                            DownloadReportModule,
                            i3.SkeletonModule,
                            i3.MessageAlertModule,
                            i7$1.MatTableModule,
                            i10$1.MatRippleModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ScheduleReportConfigurationComponent = /** @class */ (function () {
        function ScheduleReportConfigurationComponent(formBuilder, 
        // tsc-library
        storageService, tscCommonService, userService) {
            this.formBuilder = formBuilder;
            this.storageService = storageService;
            this.tscCommonService = tscCommonService;
            this.userService = userService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.userContext = i4$1.UserContext.ROOT_ORG_USER;
            this.userM = [new i4$1.User()];
            this.rootOrgUserM = [new i4$1.User()];
            this.currentOrgUserM = [new i4$1.User()];
            this.allUserID = [];
            this.totalUserCount = 0;
            this.intervalList = [
                { label: 'Daily', value: 'DAILY' },
                { label: 'Weekly', value: 'WEEKLY' },
                { label: 'Monthly', value: 'MONTHLY' }
            ];
            this.frequencyList = [
                { label: 'Daily', value: 'DAILY' },
                { label: 'Weekly', value: 'WEEKLY' },
                { label: 'Monthly', value: 'MONTHLY' }
            ];
            this.frequencyInfoLabel = 'Report will be sent at 6:00 a.m.';
            this.userFC = new i2$1.FormControl(true, i2$1.Validators.required);
            this.userSearchUtil = new i3.MatSelectSearchService(['firstName', 'lastName', 'email']);
            this.selectable = true;
            this.removable = true;
            this.addOnBlur = true;
            this.separatorKeysCodes = [keycodes.ENTER, keycodes.COMMA];
            this.inputPlaceholder = "email1@domain.com, email2@domain.com";
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        ScheduleReportConfigurationComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.initializeUsers();
            this.scheduleReportFGInit();
        };
        ScheduleReportConfigurationComponent.prototype.scheduleReportFGInit = function () {
            var _this = this;
            this.scheduleReportFG = this.formBuilder.group({
                name: [, i2$1.Validators.required],
                dataInterval: [, i2$1.Validators.required],
                frequency: [, i2$1.Validators.required],
                userChoice: [i4$1.UserContext.ROOT_ORG_USER],
                userID: [[], i2$1.Validators.required],
                otherUserEmail: [[]],
                status: ['ACTIVE', i2$1.Validators.required],
                reportFormat: [, i2$1.Validators.required],
            });
            this.scheduleReportFG.get('dataInterval').valueChanges.subscribe(function (value) {
                switch (value) {
                    case 'DAILY':
                        _this.frequencyList = [{ label: "Daily", value: "DAILY" }];
                        _this.frequencyInfoLabel = 'Report will be sent on daily basis at 6:00 a.m.';
                        break;
                    case 'WEEKLY':
                        _this.frequencyList = [
                            { label: "Daily", value: "DAILY" },
                            { label: "Weekly", value: "WEEKLY" }
                        ];
                        _this.frequencyInfoLabel = 'Report will be sent on weekly basis at 6:00 a.m. on Monday';
                        break;
                    case 'MONTHLY':
                        _this.frequencyList = [
                            { label: "Daily", value: "DAILY" },
                            { label: "Weekly", value: "WEEKLY" },
                            { label: "Monthly", value: "MONTHLY" }
                        ];
                        _this.frequencyInfoLabel = 'Report will be sent on monthly basis at 6:00 a.m. on first day of month';
                        break;
                    default:
                        break;
                }
            });
        };
        ScheduleReportConfigurationComponent.prototype.initializeUsers = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getUsersByOrgID()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.getCurrentOrgUserAccess()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportConfigurationComponent.prototype.getUsersByOrgID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.userService.getUsersByOrgID(this.orgID)];
                        case 1:
                            _a.rootOrgUserM = (_b.sent());
                            this.userM = this.rootOrgUserM;
                            this.userSearchUtil.entityArr = this.userM;
                            this.userSearchUtil.createSubscription();
                            this.totalUserCount = this.userM.length;
                            this.userM.forEach(function (user) { return _this.allUserID.push(user['id']); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportConfigurationComponent.prototype.getCurrentOrgUserAccess = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.userService.getCurrentOrgUserAccess(this.orgID)];
                        case 1:
                            _a.currentOrgUserM = (_b.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportConfigurationComponent.prototype.userContextChange = function () {
            var _this = this;
            if (this.userFC.value) {
                this.userContext = i4$1.UserContext.ROOT_ORG_USER;
                this.userM = this.rootOrgUserM;
                this.scheduleReportFG.get('userChoice').setValue(this.userContext);
            }
            else {
                this.userContext = i4$1.UserContext.CURRENT_ORG_USER;
                this.userM = this.currentOrgUserM;
                this.scheduleReportFG.get('userChoice').setValue(this.userContext);
            }
            this.allUserID = [];
            this.userSearchUtil.entityArr = this.userM;
            this.userSearchUtil.createSubscription();
            this.totalUserCount = this.userM.length;
            this.userM.forEach(function (user) { return _this.allUserID.push(user['id']); });
            this.scheduleReportFG.get('userID').setValue([]);
        };
        ScheduleReportConfigurationComponent.prototype.selectUser = function () {
            var selected = this.scheduleReportFG.get('userID').value;
            if (selected.includes(-1)) {
                selected.shift();
                this.scheduleReportFG.get('userID').patchValue(selected);
            }
            else if (this.scheduleReportFG.get('userID').value.length == this.totalUserCount) {
                this.allUserID.splice(0, 0, -1);
                this.scheduleReportFG.get('userID').patchValue(this.allUserID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.scheduleReportFG.get('userID').patchValue(filteredSelected);
            }
        };
        ScheduleReportConfigurationComponent.prototype.selectAllUsers = function () {
            if (!this.scheduleReportFG.get('userID').value.includes(-1)) {
                this.scheduleReportFG.get('userID').reset([]);
                return;
            }
            this.scheduleReportFG.get('userID').setValue(__spreadArray([-1], __read(this.allUserID)));
        };
        ScheduleReportConfigurationComponent.prototype.onInput = function () {
            this.inputPlaceholder = '';
        };
        Object.defineProperty(ScheduleReportConfigurationComponent.prototype, "otherUserEmail", {
            get: function () {
                return this.scheduleReportFG.get('otherUserEmail');
            },
            enumerable: false,
            configurable: true
        });
        ScheduleReportConfigurationComponent.prototype.add = function (event) {
            var _this = this;
            var value = (event.value || '').trim();
            if (value) {
                var emails = value.split(',').map(function (email) { return email.trim(); });
                var validEmails = emails.filter(function (email) { return _this.tscCommonService.isValidEmail(email); });
                if (validEmails.length > 0) {
                    this.otherUserEmail.patchValue(this.otherUserEmail.value.concat(validEmails));
                }
            }
            event.chipInput.clear();
        };
        ScheduleReportConfigurationComponent.prototype.removeEmail = function (email) {
            var index = this.otherUserEmail.value.indexOf(email);
            if (index >= 0) {
                var emails = __spreadArray([], __read(this.otherUserEmail.value));
                emails.splice(index, 1);
                this.otherUserEmail.setValue(emails);
            }
        };
        ScheduleReportConfigurationComponent.prototype.onStatusChange = function (event) {
            var newStatus = event.checked ? 'ACTIVE' : 'INACTIVE';
            this.scheduleReportFG.get('status').setValue(newStatus);
        };
        return ScheduleReportConfigurationComponent;
    }());
    ScheduleReportConfigurationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConfigurationComponent, deps: [{ token: i2__namespace$1.FormBuilder }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.TSCCommonService }, { token: i4__namespace$1.UserService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReportConfigurationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportConfigurationComponent, selector: "lib-configuration", ngImport: i0__namespace, template: "<mat-card class=\"border cardOverwrite\">\n    <form [formGroup]=\"scheduleReportFG\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <span class=\"cardTitle\">\n                    Scheduler configuration\n                </span>\n            </div>\n            <div class=\"col-sm-6 centerAlignVertical justify-content-end\">\n                <span class=\"me-2\"> Inactive </span>\n                <mat-slide-toggle [checked]=\"scheduleReportFG.get('status').value == 'ACTIVE'\"\n                    (change)=\"onStatusChange($event)\"></mat-slide-toggle>\n                <span class=\"ms-2\"> Active </span>\n            </div>\n            <div class=\"col-sm-12 centerAlignVertical justify-content-end\">\n                <mat-error class=\"textMatError\" *ngIf=\"errorHandling(scheduleReportFG, 'status', 'required')\">\n                    {{ FormErrorEnum.REQUIRED }}\n                </mat-error>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label class=\"formLabel\">Schedule report name</mat-label>\n                        <input class=\"formPlaceholder\" type=\"text\" placeholder=\"Schedule report name\" matInput\n                            formControlName=\"name\" required />\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'name', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select data interval</mat-label>\n                        <mat-select formControlName=\"dataInterval\" required>\n                            <mat-option *ngFor=\"let interval of intervalList\" [value]=\"interval.value\">\n                                {{ interval.label }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'dataInterval', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select frequency</mat-label>\n                        <mat-select formControlName=\"frequency\" required>\n                            <mat-option *ngFor=\"let frequency of frequencyList\" [value]=\"frequency.value\">\n                                {{ frequency.label }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-hint>{{ frequencyInfoLabel }}</mat-hint>\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'frequency', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <div class=\"row enabledToggle\">\n                <div class=\"col-sm-4 d-flex justify-content-start centerAlignVertical\">\n                    <span class=\"me-2\"> Current org users </span>\n                    <mat-slide-toggle [formControl]=\"userFC\" (change)=\"userContextChange()\"></mat-slide-toggle>\n                    <span class=\"ms-2\"> All users </span>\n                </div>\n            </div>\n\n            <div class=\"row mt-2\">\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select user</mat-label>\n                        <mat-select formControlName=\"userID\" multiple required>\n\n                            <ng-container *ngIf=\"userM && userM.length > 0 && userM[0]['id']; else noUserFound\">\n                                <mat-option>\n                                    <ngx-mat-select-search [formControl]=\"userSearchUtil.filterFC\"\n                                        placeholderLabel=\"Search by name/email\"\n                                        noEntriesFoundLabel=\"No matching name/email found.\">\n                                    </ngx-mat-select-search>\n                                </mat-option>\n                                <mat-option [value]=\"-1\" (click)=\"selectAllUsers()\"\n                                    [hidden]=\"userSearchUtil.filterFC.value\">\n                                    Select all\n                                </mat-option>\n                                <mat-option *ngFor=\"let user of userSearchUtil.filteredEntities | async\"\n                                    [value]=\"user.id\" (click)=\"selectUser()\">\n                                    {{ user?.email }}\n                                </mat-option>\n                            </ng-container>\n\n                            <ng-template #noUserFound>\n                                <mat-option disabled>\n                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                </mat-option>\n                            </ng-template>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'userID', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Enter other user email</mat-label>\n                        <mat-chip-list #chipList>\n                            <mat-chip *ngFor=\"let email of otherUserEmail.value\" [removable]=\"removable\"\n                                (removed)=\"removeEmail(email)\">\n                                {{ email }}\n                                <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n                            </mat-chip>\n                            <input [placeholder]=\"inputPlaceholder\" [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"addOnBlur\"\n                                (matChipInputTokenEnd)=\"add($event)\" (input)=\"onInput()\">\n                        </mat-chip-list>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <div class=\"radioBtnField\">\n                        <div class=\"radioBtnGroupLabel\"> Select report format * </div>\n                        <mat-radio-group formControlName=\"reportFormat\">\n                            <div class=\"row my-1\">\n                                <div class=\"col-sm-6\">\n                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"'PDF'\">\n                                        pdf\n                                    </mat-radio-button>\n                                </div>\n                                <div class=\"col-sm-6\">\n                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"'XLSX'\">\n                                        xlsx\n                                    </mat-radio-button>\n                                </div>\n                                <mat-error class=\"textMatError ms-1 mt-1\"\n                                    *ngIf=\"errorHandling(scheduleReportFG, 'reportFormat', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </div>\n                        </mat-radio-group>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</mat-card>", styles: ["::ng-deep .enabledToggle .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .enabledToggle .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#5c80de}::ng-deep .enabledToggle .mat-slide-toggle .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .enabledToggle .mat-slide-toggle .mat-slide-toggle-thumb{background-color:#5c80de}\n"], components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i9__namespace$1.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i11__namespace$1.MatChipList, selector: "mat-chip-list", inputs: ["aria-orientation", "multiple", "compareWith", "value", "required", "placeholder", "disabled", "selectable", "tabIndex", "errorStateMatcher"], outputs: ["change", "valueChange"], exportAs: ["matChipList"] }, { type: i12__namespace$2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i13__namespace.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i12__namespace$3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i11__namespace$1.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disableRipple", "tabIndex", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"], exportAs: ["matChip"] }, { type: i11__namespace$1.MatChipRemove, selector: "[matChipRemove]" }, { type: i11__namespace$1.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputSeparatorKeyCodes", "placeholder", "id", "matChipInputFor", "matChipInputAddOnBlur", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { type: i13__namespace.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConfigurationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-configuration',
                        templateUrl: './configuration.component.html',
                        styleUrls: ['./configuration.component.scss'],
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.FormBuilder }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.TSCCommonService }, { type: i4__namespace$1.UserService }]; } });

    var ScheduleReportConfigurationModule = /** @class */ (function () {
        function ScheduleReportConfigurationModule() {
        }
        return ScheduleReportConfigurationModule;
    }());
    ScheduleReportConfigurationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConfigurationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportConfigurationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConfigurationModule, declarations: [ScheduleReportConfigurationComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i6.MatButtonModule,
            i3$1.MatFormFieldModule,
            i12$1.MatIconModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i11.MatTooltipModule,
            i10$1.MatOptionModule,
            i13.MatRadioModule,
            i9$1.MatSlideToggleModule,
            i11$1.MatChipsModule,
            i6$1.NgxMatSelectSearchModule], exports: [ScheduleReportConfigurationComponent] });
    ScheduleReportConfigurationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConfigurationModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i6.MatButtonModule,
                i3$1.MatFormFieldModule,
                i12$1.MatIconModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i11.MatTooltipModule,
                i10$1.MatOptionModule,
                i13.MatRadioModule,
                i9$1.MatSlideToggleModule,
                i11$1.MatChipsModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConfigurationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ScheduleReportConfigurationComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i6.MatButtonModule,
                            i3$1.MatFormFieldModule,
                            i12$1.MatIconModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i11.MatTooltipModule,
                            i10$1.MatOptionModule,
                            i13.MatRadioModule,
                            i9$1.MatSlideToggleModule,
                            i11$1.MatChipsModule,
                            i6$1.NgxMatSelectSearchModule
                        ],
                        exports: [
                            ScheduleReportConfigurationComponent
                        ]
                    }]
            }] });

    var ScheduleReport = /** @class */ (function () {
        function ScheduleReport() {
            this.reportConfig = {
                reportType: '',
                deviceID: [],
                entityType: '',
                entityID: [],
                sourceConsumer: {
                    type: '',
                    keyID: '',
                },
                paramMetric: [],
            };
            this.schedulerConfig = {
                name: '',
                dataInterval: '',
                frequency: '',
                userChoice: '',
                userID: [],
                otherUserEmail: [],
                status: '',
                reportFormat: '',
            };
        }
        return ScheduleReport;
    }());
    var ScheduleReportPage = /** @class */ (function () {
        function ScheduleReportPage() {
            this.id = null;
            this.name = '';
            this.type = '';
            this.recipients = [];
            this.frequency = '';
            this.scheduledBy = {
                id: null,
                firstName: '',
                lastName: '',
                email: '',
                profileImgUrl: ''
            };
            this.status = '';
        }
        return ScheduleReportPage;
    }());

    // /tsc-library/
    var ScheduleReportController = /** @class */ (function () {
        function ScheduleReportController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        ScheduleReportController.prototype.createScheduleReport = function (orgID, scheduleReport) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/schedule-reports", scheduleReport);
        };
        ScheduleReportController.prototype.getScheduleReportByID = function (orgID, scheduleReportID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/schedule-reports/" + scheduleReportID);
        };
        ScheduleReportController.prototype.updateScheduleReport = function (orgID, scheduleReportID, scheduleReport) {
            return this.http.patch(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/schedule-reports/" + scheduleReportID, scheduleReport);
        };
        ScheduleReportController.prototype.getScheduleReportByPage = function (pageNo, pageSize, sortBy, orderBy, searchValue, filterArr, orgID) {
            var params = new i1.HttpParams();
            params = params.append('pageNo', pageNo);
            params = params.append('pageSize', pageSize);
            params = params.append('sortBy', sortBy);
            params = params.append('orderBy', orderBy);
            if (searchValue) {
                params = params.append('searchBy', searchValue);
            }
            filterArr.forEach(function (filter) { return params = params.append('filter', filter); });
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/schedule-reports/page", { params: params });
        };
        ScheduleReportController.prototype.deleteScheduledReport = function (orgID, scheduleReportID) {
            return this.http.delete(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/schedule-reports/" + scheduleReportID);
        };
        ScheduleReportController.prototype.updateReportStatusByID = function (orgID, scheduleReportID, status) {
            return this.http.patch(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/schedule-reports/" + scheduleReportID + "/status", status);
        };
        return ScheduleReportController;
    }());
    ScheduleReportController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ScheduleReportController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    // /tsc-library/
    var ScheduleReportPageComponent = /** @class */ (function () {
        function ScheduleReportPageComponent(dialog, router, scheduleReportController, 
        // tsc-library
        storageService, statusService, userService, imageService
        // /tsc-library/
        ) {
            this.dialog = dialog;
            this.router = router;
            this.scheduleReportController = scheduleReportController;
            this.storageService = storageService;
            this.statusService = statusService;
            this.userService = userService;
            this.imageService = imageService;
            this.faPlus = freeSolidSvgIcons.faPlus;
            this.faCaretDown = freeSolidSvgIcons.faCaretDown;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.TABLE_CONSTANT = i3.TABLE_CONSTANT;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.DialogResponseEnum = i3.DialogResponseEnum;
            this.FormAction = i3.FormAction;
            this.ProfileImg = i4$1.ProfileImg;
            this.searchByPlaceHolder = 'report name';
            this.reportType = [];
            this.dataSource = [new ScheduleReportPage()];
            this.dataSourceLength = 0;
            this.displayedColumn = ['id', 'name', 'type', 'recipients', 'frequency', 'scheduledBy', 'status', 'option'];
            this.searchFlag = false;
            this.searchFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.reportTypeFlag = false;
            this.reportTypeFC = new i2$1.FormControl(['all']);
            this.filterArr = [];
            this.totalReportTypeCount = 0;
            this.recipientUserList = [];
        }
        ScheduleReportPageComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            this.applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'water' : 'energy';
            if (this.applicationKeyID == applicationService.ApplicationKeyID.ENERGY_KEY_ID) {
                this.reportType = LIST_CONSTANT.ENERGY_APP_SCHEDULE_REPORT_TYPE;
                this.totalReportTypeCount = this.reportType.length;
            }
            else if (this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID) {
                this.reportType = LIST_CONSTANT.WATER_APP_SCHEDULE_REPORT_TYPE;
                this.totalReportTypeCount = this.reportType.length;
            }
        };
        ScheduleReportPageComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            rxjs.merge(this.sort.sortChange, this.typeSelect.multi, rxjs.fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(operators.startWith({}), operators.switchMap(function () {
                _this.filterArr = [];
                if (_this.searchFlag) {
                    var searchValue = 'name:' + _this.searchValue;
                }
                if (_this.reportTypeFlag) {
                    var selectedReportType = _this.reportTypeFC.value.length - 1;
                    if (selectedReportType == _this.totalReportTypeCount) {
                        _this.reportTypeFlag = false;
                    }
                    else {
                        _this.filterArr.push('reportType:' + _this.reportTypeFC.value);
                    }
                }
                return _this.scheduleReportController.getScheduleReportByPage(_this.paginator.pageIndex, _this.paginator.pageSize, _this.sort.active, _this.sort.direction, searchValue, _this.filterArr, _this.orgID).pipe(operators.catchError(function () { return rxjs.of(null); }));
            }), operators.map(function (response) {
                if (response == null) {
                    _this.dataSourceLength = 0;
                    return [];
                }
                _this.dataSourceLength = response.totalCount;
                return response.records;
            })).subscribe(function (dataSource) {
                _this.dataSource = dataSource;
            });
        };
        ScheduleReportPageComponent.prototype.searchFn = function (value) {
            this.searchFlag = true;
            this.searchValue = value;
            if (value.length == 0) {
                this.resetSearch();
            }
            this.refreshBtn.nativeElement.click();
        };
        ScheduleReportPageComponent.prototype.resetSearch = function () {
            this.searchFlag = false;
            this.searchBar.searchClear();
        };
        ScheduleReportPageComponent.prototype.showAllRecipient = function (userList) {
            var _this = this;
            this.recipientUserList = [];
            userList.forEach(function (user) {
                var metric = {
                    profileImg: user.profileImgUrl || _this.userService.defaultImage((user.firstName ? user.firstName + ' ' : '') + (user.lastName ? user.lastName : ''), i4$1.ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW),
                    name: (user.firstName ? user.firstName + ' ' + (user.lastName ? user.lastName : '') : ''),
                };
                _this.recipientUserList.push(metric);
            });
        };
        ScheduleReportPageComponent.prototype.openDeleteDialog = function (scheduleReport) {
            var _this = this;
            var dialog = this.dialog.open(i3.DialogOneComponent, {
                minWidth: '450px',
                maxWidth: '450px',
                data: {
                    type: i3.DialogOneEnum.DELETE,
                    icon: 'dangerous',
                    header: 'Delete schedule report?',
                    body: '<b>' + scheduleReport.name + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                    buttonOne: i3.ButtonLabelEnum.CANCEL_BTN_LABEL,
                    buttonTwo: i3.ButtonLabelEnum.DELETE_BTN_LABEL
                }
            });
            dialog.afterClosed().subscribe(function (res) {
                if (res) {
                    _this.deleteScheduledReport(scheduleReport.id);
                }
            });
        };
        ScheduleReportPageComponent.prototype.deleteScheduledReport = function (scheduleReportID) {
            var _this = this;
            this.scheduleReportController.deleteScheduledReport(this.orgID, scheduleReportID).subscribe(function (deleteRes) {
                if (deleteRes) {
                    _this.refreshBtn.nativeElement.click();
                }
            });
        };
        ScheduleReportPageComponent.prototype.updateReportStatusByID = function (scheduleReport) {
            var _this = this;
            var newStatus = scheduleReport.status == 'ACTIVE' ? 'INACTIVE' : 'ACTIVE';
            var requestBody = {
                status: newStatus
            };
            this.scheduleReportController.updateReportStatusByID(this.orgID, scheduleReport.id, requestBody)
                .subscribe(function (response) {
                if (response) {
                    _this.refreshBtn.nativeElement.click();
                }
            }, function (error) {
                console.log('error in updateReportStatusByID -', error);
            });
        };
        ScheduleReportPageComponent.prototype.goToReportPage = function (reportType) {
            switch (reportType) {
                case exports.ScheduleReportTypeEnum.SOURCING_REPORT:
                    this.router.navigate(["schedule-report/" + this.applicationName + "-sourcing"]);
                    break;
                case exports.ScheduleReportTypeEnum.CONSUMPTION_REPORT:
                    this.router.navigate(["schedule-report/" + this.applicationName + "-consumption"]);
                    break;
                case exports.ScheduleReportTypeEnum.BREAKUP_REPORT:
                    this.router.navigate(["schedule-report/" + this.applicationName + "-breakup"]);
                    break;
                case exports.ScheduleReportTypeEnum.CGWA_REPORT:
                    this.router.navigate(["schedule-report/cgwa"]);
                    break;
                case exports.ScheduleReportTypeEnum.TEMPERATURE_REPORT:
                    this.router.navigate(["schedule-report/temperature"]);
                    break;
            }
        };
        ScheduleReportPageComponent.prototype.updateScheduledReport = function (scheduleReport) {
            switch (scheduleReport.type) {
                case exports.ScheduleReportTypeEnum.SOURCING_REPORT:
                    this.router.navigate(["schedule-report/" + scheduleReport.id + "/" + this.applicationName + "-sourcing/update"]);
                    break;
                case exports.ScheduleReportTypeEnum.CONSUMPTION_REPORT:
                    this.router.navigate(["schedule-report/" + scheduleReport.id + "/" + this.applicationName + "-consumption/update"]);
                    break;
                case exports.ScheduleReportTypeEnum.BREAKUP_REPORT:
                    this.router.navigate(["schedule-report/" + scheduleReport.id + "/" + this.applicationName + "-breakup/update"]);
                    break;
                case exports.ScheduleReportTypeEnum.CGWA_REPORT:
                    this.router.navigate(["schedule-report/" + scheduleReport.id + "/cgwa/update"]);
                    break;
                case exports.ScheduleReportTypeEnum.TEMPERATURE_REPORT:
                    this.router.navigate(["schedule-report/" + scheduleReport.id + "/temperature/update"]);
                    break;
            }
        };
        ScheduleReportPageComponent.prototype.getReportTypeLabel = function (type) {
            var reportLabel;
            var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
            switch (type) {
                case exports.ScheduleReportTypeEnum.SOURCING_REPORT:
                    reportLabel = applicationName + " Sourcing Report";
                    break;
                case exports.ScheduleReportTypeEnum.CONSUMPTION_REPORT:
                    reportLabel = applicationName + " Consumption Report";
                    break;
                case exports.ScheduleReportTypeEnum.BREAKUP_REPORT:
                    reportLabel = applicationName + " Breakup Report";
                    break;
                case exports.ScheduleReportTypeEnum.CGWA_REPORT:
                    reportLabel = "CGWA Report";
                    break;
                case exports.ScheduleReportTypeEnum.TEMPERATURE_REPORT:
                    reportLabel = "Temperature Report";
                    break;
            }
            return reportLabel;
        };
        ScheduleReportPageComponent.prototype.getFrequencyLabel = function (type) {
            var frequencyLabel;
            switch (type) {
                case 'DAILY':
                    frequencyLabel = 'Daily';
                    break;
                case 'WEEKLY':
                    frequencyLabel = 'Weekly';
                    break;
                case 'MONTHLY':
                    frequencyLabel = 'Monthly';
                    break;
            }
            return frequencyLabel;
        };
        return ScheduleReportPageComponent;
    }());
    ScheduleReportPageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageComponent, deps: [{ token: i1__namespace$3.MatDialog }, { token: i1__namespace$1.Router }, { token: ScheduleReportController }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.StatusService }, { token: i4__namespace$1.UserService }, { token: i3__namespace.ImageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReportPageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportPageComponent, selector: "lib-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "typeSelect", first: true, predicate: ["typeSelect"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Schedule Report</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar [searchBy]=\"searchByPlaceHolder\"\n                    (emitSearch)=\"searchFn($event)\"></lib-search-bar-one>\n\n                <button class=\"btn btn-sm btn-light refreshBtn centerAlign me-3 py-1\" #refreshBtn matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.REFRESH\">\n                    <span class=\"material-symbols-outlined text-secondary\">\n                        refresh\n                    </span>\n                </button>\n\n                <div class=\"btn-group\" ngbDropdown placement=\"bottom-right\">\n                    <button type=\"button\" ngbDropdownToggle class=\"hideDropdownIcon btn btn-sm btn-success\">\n                        <fa-icon [icon]=\"faPlus\" class=\"me-1\"></fa-icon>Schedule report\n                        <fa-icon [icon]=\"faCaretDown\" class=\"ms-2\"></fa-icon>\n                    </button>\n                    <div ngbDropdownMenu>\n                        <a class=\"dropdown-item mt-1\" *ngFor=\"let type of reportType\" (click)=\"goToReportPage(type.value)\">\n                            {{ type.label }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"overflowX customScrollBar\">\n        <table class=\"w-100\" mat-table matSort #sort=\"matSort\" matSortActive=\"name\" matSortDirection=\"asc\"\n            matSortDisableClear [dataSource]=\"dataSource\">\n\n            <ng-container matColumnDef=\"id\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>ID</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"name\">\n                <th class=\"px-4 columnWidth2\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Name</th>\n                <td class=\"px-4 columnWidth2\" mat-cell *matCellDef=\"let row\" matTooltipPosition=\"above\"\n                    [matTooltip]=\"(row?.name.length > 20 ? row?.name : '')\" matTooltipClass=\"nameTooltip\">\n                    {{ (row.name ? row.name : COMMON_CONSTANT.HYPHEN) | dotdotdot:20 }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"type\">\n                <th class=\"px-4 columnWidth2\" mat-header-cell *matHeaderCellDef>\n                    <funnel-filter #typeSelect header=\"Report type\" type=\"multi\" [entityList]=\"reportType\" value=\"value\" view=\"label\"\n                        [selectFC]=\"reportTypeFC\" [active]=\"reportTypeFlag\" selectAllLabel=\"All report type\"\n                        (multi)=\"reportTypeFlag = true;\">\n                    </funnel-filter>\n                </th>\n                <td class=\"px-4 columnWidth2\" mat-cell *matCellDef=\"let row\">\n                    {{ getReportTypeLabel(row.type) }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"recipients\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Recipients</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <ng-container *ngFor=\"let user of row.recipients.slice(0,3); let i = index\">\n                        <img class=\"multipleProfileImg rounded-circle border\"\n                            [src]=\"imageService.getProfileImageUrl(user, ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\" alt=\"profile-image\"\n                            #tooltip=\"matTooltip\" matTooltipPosition=\"above\"\n                            [matTooltip]=\"row.recipients.length != 1 ? (user?.firstName ? user?.firstName + ' ' + (user?.lastName ? user?.lastName : '') : '') : ''\"\n                            matTooltipClass=\"nameTooltip\" />\n\n                        <span *ngIf=\"row.recipients.length == 1\">\n                            {{ user.firstName }} {{user.lastName }}\n                        </span>\n                    </ng-container>\n                    <button *ngIf=\"imageService.getCountForCircleDisplay(row.recipients) >= 1\" [matMenuTriggerFor]=\"menu\"\n                        class=\"btn btn-sm rounded-circle countCircleBtn\" (click)=\"showAllRecipient(row.recipients)\">\n                        {{ imageService.getCountForCircleDisplay(row.recipients) }}\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let recipient of recipientUserList\">\n                            <img class=\"multipleProfileImg rounded-circle border me-1\" [src]=\"recipient.profileImg\">\n                            {{ recipient.name }}\n                        </button>\n                    </mat-menu>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"frequency\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Frequency</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    {{ getFrequencyLabel(row.frequency) }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"scheduledBy\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Scheduled by</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <img class=\"rounded-circle border profileImageDropdownView\"\n                        [src]=\"row?.scheduledBy?.profileImgUrl || userService.defaultImage(row?.scheduledBy?.firstName + ' ', ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\"\n                        alt=\"profile img\">\n                    <span matTooltipPosition=\"above\"\n                        [matTooltip]=\"(row?.scheduledBy?.firstName + ' ' + row?.scheduledBy?.lastName).length > 12 ? row?.scheduledBy?.firstName + ' ' + row?.scheduledBy?.lastName : ''\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ (row?.scheduledBy?.firstName ? row?.scheduledBy?.firstName + ' ' + row?.scheduledBy?.lastName :\n                        COMMON_CONSTANT.HYPHEN)| dotdotdot:12 }}\n                    </span>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"status\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Status</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\"\n                    [ngClass]=\"statusService.getStatusClass(row.status)\">{{\n                    row.status ? statusService.getStatusValue(row.status) : COMMON_CONSTANT.HYPHEN }}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"option\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef></th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <div class=\"centerAlignVertical\">\n\n                        <button type=\"button\" class=\"iconBtn centerAlign text-primary updateIconHover\"\n                            (click)=\"updateScheduledReport(row)\" matRipple\n                            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                            [matTooltip]=\"ButtonTooltipEnum.UPDATE\">\n                            <span class=\"material-symbols-outlined icon\">\n                                edit\n                            </span>\n                        </button>\n\n                        <button type=\"button\" class=\"iconBtn centerAlign text-danger deleteIconHover cursorPointer\"\n                            matTooltipPosition=\"below\" [matTooltip]=\"ButtonTooltipEnum.DELETE\" matRipple\n                            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" (click)=\"openDeleteDialog(row)\">\n                            <span class=\"material-symbols-outlined icon\">\n                                delete\n                            </span>\n                        </button>\n\n                        <mat-slide-toggle class=\"ms-3\" [checked]=\"row.status == 'ACTIVE'\"\n                            (change)=\"updateReportStatusByID(row)\"></mat-slide-toggle>\n                    </div>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\" class=\"dataRow\"></tr>\n\n            <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                    {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <mat-paginator class=\"roundedBorder\" showFirstLastButtons #paginator [length]=\"dataSourceLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", styles: ["::ng-deep .mat-menu-content{max-height:250px;overflow-x:auto}.columnWidth1{min-width:120px}.columnWidth2{min-width:200px}\n"], components: [{ type: i3__namespace.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i6__namespace$2.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i7__namespace$1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i8__namespace.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i3__namespace.FunnelFilterComponent, selector: "funnel-filter", inputs: ["header", "active", "showSearchBar", "searchByPlaceholder", "searchBy", "selectAllLabel", "entityList", "view", "value", "type", "selectFC", "resetFlag"], outputs: ["mono", "multi", "selected"] }, { type: i10__namespace$2.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { type: i10__namespace$2.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { type: i9__namespace$1.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i7__namespace$1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7__namespace$1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i9__namespace$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i12__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i12__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i12__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i7__namespace$1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7__namespace$1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7__namespace$1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7__namespace$1.MatCellDef, selector: "[matCellDef]" }, { type: i7__namespace$1.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10__namespace$2.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7__namespace$1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7__namespace$1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7__namespace$1.MatNoDataRow, selector: "ng-template[matNoDataRow]" }], pipes: { "dotdotdot": i3__namespace.EllipsisPipeService } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-page',
                        templateUrl: './page.component.html',
                        styleUrls: ['./page.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.MatDialog }, { type: i1__namespace$1.Router }, { type: ScheduleReportController }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.StatusService }, { type: i4__namespace$1.UserService }, { type: i3__namespace.ImageService }]; }, propDecorators: { sort: [{
                    type: i0.ViewChild,
                    args: ['sort']
                }], paginator: [{
                    type: i0.ViewChild,
                    args: ['paginator']
                }], refreshBtn: [{
                    type: i0.ViewChild,
                    args: ['refreshBtn']
                }], searchBar: [{
                    type: i0.ViewChild,
                    args: ['searchBar']
                }], typeSelect: [{
                    type: i0.ViewChild,
                    args: ['typeSelect']
                }] } });

    var routes$g = [
        {
            path: '',
            component: ScheduleReportPageComponent
        }
    ];
    var ScheduleReportPageRoutingModule = /** @class */ (function () {
        function ScheduleReportPageRoutingModule() {
        }
        return ScheduleReportPageRoutingModule;
    }());
    ScheduleReportPageRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportPageRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ScheduleReportPageRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$g)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$g)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ScheduleReportPageModule = /** @class */ (function () {
        function ScheduleReportPageModule() {
        }
        return ScheduleReportPageModule;
    }());
    ScheduleReportPageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportPageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageModule, declarations: [ScheduleReportPageComponent], imports: [i14.CommonModule,
            ScheduleReportPageRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i10$1.MatRippleModule,
            i7$1.MatTableModule,
            i8.MatSortModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule,
            i9$2.MatPaginatorModule,
            i9$1.MatSlideToggleModule,
            i10$2.MatMenuModule,
            i12$2.NgbModule,
            i6$2.FontAwesomeModule,
            i3.SearchBarOneModule,
            i3.FunnelFilterModule,
            i3.EllipsisPipeModule] });
    ScheduleReportPageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageModule, imports: [[
                i14.CommonModule,
                ScheduleReportPageRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i10$1.MatRippleModule,
                i7$1.MatTableModule,
                i8.MatSortModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule,
                i9$2.MatPaginatorModule,
                i9$1.MatSlideToggleModule,
                i10$2.MatMenuModule,
                i12$2.NgbModule,
                i6$2.FontAwesomeModule,
                i3.SearchBarOneModule,
                i3.FunnelFilterModule,
                i3.EllipsisPipeModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportPageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ScheduleReportPageComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ScheduleReportPageRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i10$1.MatRippleModule,
                            i7$1.MatTableModule,
                            i8.MatSortModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule,
                            i9$2.MatPaginatorModule,
                            i9$1.MatSlideToggleModule,
                            i10$2.MatMenuModule,
                            i12$2.NgbModule,
                            i6$2.FontAwesomeModule,
                            i3.SearchBarOneModule,
                            i3.FunnelFilterModule,
                            i3.EllipsisPipeModule
                        ]
                    }]
            }] });

    var ScheduleReportService = /** @class */ (function () {
        function ScheduleReportService(scheduleReportController) {
            this.scheduleReportController = scheduleReportController;
        }
        ScheduleReportService.prototype.getScheduleReportByID = function (orgID, scheduleReportID) {
            return __awaiter(this, void 0, void 0, function () {
                var scheduleReportI, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.scheduleReportController.getScheduleReportByID(orgID, scheduleReportID).toPromise()];
                        case 1:
                            scheduleReportI = _a.sent();
                            if (scheduleReportI) {
                                return [2 /*return*/, scheduleReportI];
                            }
                            else {
                                return [2 /*return*/, new ScheduleReport()];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, new ScheduleReport()];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return ScheduleReportService;
    }());
    ScheduleReportService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportService, deps: [{ token: ScheduleReportController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ScheduleReportService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: ScheduleReportController }]; } });

    // /tsc-library/
    var ScheduleReportBreakupComponent = /** @class */ (function () {
        function ScheduleReportBreakupComponent(activatedRoute, router, formBuilder, scheduleReportController, parameterService, scheduleReportService, 
        // tsc-library
        storageService, tscCommonService, toastrService) {
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.formBuilder = formBuilder;
            this.scheduleReportController = scheduleReportController;
            this.parameterService = parameterService;
            this.scheduleReportService = scheduleReportService;
            this.storageService = storageService;
            this.tscCommonService = tscCommonService;
            this.toastrService = toastrService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.DropdownTypeEnum = DropdownTypeEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ApplicationKeyID = applicationService.ApplicationKeyID;
            this.isEqual = true;
            this.scheduleReportI = new ScheduleReport();
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        ScheduleReportBreakupComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            this.scheduleBreakupReportFGInit();
            this.getConsumptionParameter();
            this.activatedRoute.data.subscribe(function (data) {
                _this.action = data.action;
                _this.setPageTitle();
            });
            this.activatedRoute.params.subscribe(function (params) {
                if (_this.action == i3.FormAction.UPDATE) {
                    _this.scheduleReportID = params.scheduleReportID;
                    _this.getScheduleReportByID(_this.scheduleReportID);
                }
            });
        };
        ScheduleReportBreakupComponent.prototype.setPageTitle = function () {
            var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
            if (this.action == i3.FormAction.CREATE) {
                this.pageTitle = "Schedule " + applicationName + " Breakup Report";
            }
            else if (this.action == i3.FormAction.UPDATE) {
                this.pageTitle = "Update Scheduled " + applicationName + " Breakup Report";
            }
        };
        ScheduleReportBreakupComponent.prototype.scheduleBreakupReportFGInit = function () {
            this.scheduleBreakupReportFG = this.formBuilder.group({
                reportConfig: this.formBuilder.group({
                    reportType: [exports.ScheduleReportTypeEnum.BREAKUP_REPORT, i2$1.Validators.required],
                    deviceID: [[]],
                    entityType: [],
                    entityID: [[], i2$1.Validators.required],
                    sourceConsumer: this.formBuilder.group({
                        type: ['SOURCE', i2$1.Validators.required],
                        keyID: []
                    }),
                    paramMetric: [, i2$1.Validators.required],
                }),
                schedulerConfig: this.formBuilder.group({
                    name: [, i2$1.Validators.required],
                    dataInterval: [, i2$1.Validators.required],
                    frequency: [, i2$1.Validators.required],
                    userChoice: [, i2$1.Validators.required],
                    userID: [[], i2$1.Validators.required],
                    otherUserEmail: [[]],
                    status: [, i2$1.Validators.required],
                    reportFormat: [, i2$1.Validators.required],
                })
            });
        };
        ScheduleReportBreakupComponent.prototype.getConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consumptionParamM;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.parameterService.getConsumptionParameter(this.orgID)];
                        case 1:
                            consumptionParamM = _a.sent();
                            this.consumptionParamM = consumptionParamM.consumptionParameter;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportBreakupComponent.prototype.entityInpChange = function () {
            var entityID = this.entityInput.multipleEntityFC.value;
            this.scheduleBreakupReportFG.get('reportConfig').get('entityID').patchValue(entityID);
        };
        ScheduleReportBreakupComponent.prototype.patchSchedulerConfigInput = function () {
            this.scheduleBreakupReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
        };
        ScheduleReportBreakupComponent.prototype.getValidFormData = function () {
            this.patchSchedulerConfigInput();
            var entityID = this.tscCommonService.removeSelectAllID(this.scheduleBreakupReportFG.get('reportConfig').get('entityID').value);
            this.scheduleBreakupReportFG.get('reportConfig').get('entityID').patchValue(entityID);
            var userID = this.tscCommonService.removeSelectAllID(this.scheduleBreakupReportFG.get('schedulerConfig').get('userID').value);
            this.scheduleBreakupReportFG.get('schedulerConfig').get('userID').patchValue(userID);
            var paramsArray = [
                {
                    name: this.scheduleBreakupReportFG.get('reportConfig').get('paramMetric').value,
                    dsAgg: 'sum',
                    agg: 'sum'
                }
            ];
            var reportConfigFG = this.scheduleBreakupReportFG.get('reportConfig').value;
            var schedulerConfigFG = this.scheduleBreakupReportFG.get('schedulerConfig').value;
            var paramMetric = reportConfigFG.paramMetric, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
            this.modifiedFG = {
                reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
                schedulerConfig: Object.assign({}, schedulerConfigFG)
            };
        };
        ScheduleReportBreakupComponent.prototype.scheduleReportSubmit = function () {
            this.patchSchedulerConfigInput();
            if (this.schedulerConfigInput.scheduleReportFG.invalid) {
                this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
            }
            if (this.scheduleBreakupReportFG.invalid) {
                console.log('Invalid form:', this.scheduleBreakupReportFG.value);
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                this.getValidFormData();
                if (this.action == i3.FormAction.CREATE) {
                    this.createScheduleReport();
                }
                else if (this.action == i3.FormAction.UPDATE) {
                    this.updateScheduleReport();
                }
            }
        };
        ScheduleReportBreakupComponent.prototype.createScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe(function (res) {
                _this.router.navigate(["schedule-report/page"]);
            }, function (error) {
                console.log('error in createScheduleReport -', error);
            });
        };
        ScheduleReportBreakupComponent.prototype.getScheduleReportByID = function (scheduleReportID) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID)];
                        case 1:
                            _a.scheduleReportI = (_b.sent());
                            this.patchScheduleReport(this.scheduleReportI);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportBreakupComponent.prototype.patchScheduleReport = function (scheduleReportI) {
            this.scheduleBreakupReportFG.patchValue({
                reportConfig: scheduleReportI.reportConfig,
                schedulerConfig: scheduleReportI.schedulerConfig
            });
            this.entityInput.multipleEntityFC.patchValue(scheduleReportI.reportConfig.entityID);
            this.scheduleBreakupReportFG.get('reportConfig').get('paramMetric').patchValue(scheduleReportI.reportConfig.paramMetric[0]);
            this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
            this.initialObject = {
                breakupReportConfig: this.scheduleBreakupReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isValidUpdateForm();
        };
        ScheduleReportBreakupComponent.prototype.isValidUpdateForm = function () {
            var _this = this;
            this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
            this.scheduleBreakupReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
        };
        ScheduleReportBreakupComponent.prototype.checkEquality = function () {
            var currentValues = {
                breakupReportConfig: this.scheduleBreakupReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isEqual = lodash.isEqual(this.initialObject, currentValues);
        };
        ScheduleReportBreakupComponent.prototype.updateScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe(function (res) {
                _this.tscCommonService.back();
            }, function (error) {
                console.log('error in updateScheduleReport -', error);
            });
        };
        return ScheduleReportBreakupComponent;
    }());
    ScheduleReportBreakupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$1.Router }, { token: i2__namespace$1.FormBuilder }, { token: ScheduleReportController }, { token: ParameterService }, { token: ScheduleReportService }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.TSCCommonService }, { token: i2__namespace$3.ToastrService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReportBreakupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportBreakupComponent, selector: "lib-breakup", viewQueries: [{ propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }, { propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleBreakupReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div formGroupName=\"reportConfig\">\n                                <div formGroupName=\"sourceConsumer\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"radioBtnField\">\n                                            <div class=\"radioBtnGroupLabel\"> You want to schedule {{ applicationKeyID == ApplicationKeyID.WATER_KEY_ID ?\n                                                'water' : 'energy'}} breakup report for? * </div>\n                                            <mat-radio-group formControlName=\"type\">\n                                                <div class=\"row my-1\">\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'SOURCE'\">\n                                                            Source\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'CONSUMER'\">\n                                                            Consumer\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <mat-error class=\"textMatError ms-1 mt-1\"\n                                                        *ngIf=\"errorHandling(scheduleBreakupReportFG, 'reportConfig.sourceConsumer.type', 'required')\">\n                                                        {{ FormErrorEnum.REQUIRED }}\n                                                    </mat-error>\n                                                </div>\n                                            </mat-radio-group>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"row mt-3\">\n                            <div class=\"col-sm-3\">\n                                <lib-entity #entityInput [dropdownTypeInp]=\"DropdownTypeEnum.MULTIPLE_DROPDOWN\"\n                                    (emitFilter)=\"entityInpChange()\"></lib-entity>\n                            </div>\n                        \n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select consumption parameter</mat-label>\n                                        <mat-select formControlName=\"paramMetric\" required>\n                                            <ng-container\n                                                *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                                                <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\">\n                                                    {{ param.label }}\n                                                </mat-option>\n                                            </ng-container>\n\n                                            <ng-template #noConsumptionParamM>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling(scheduleBreakupReportFG, 'reportConfig.paramMetric', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n            \n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i13__namespace.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i13__namespace.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-breakup',
                        templateUrl: './breakup.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$1.Router }, { type: i2__namespace$1.FormBuilder }, { type: ScheduleReportController }, { type: ParameterService }, { type: ScheduleReportService }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.TSCCommonService }, { type: i2__namespace$3.ToastrService }]; }, propDecorators: { entityInput: [{
                    type: i0.ViewChild,
                    args: ['entityInput']
                }], schedulerConfigInput: [{
                    type: i0.ViewChild,
                    args: ['schedulerConfigInput']
                }] } });

    var routes$f = [
        {
            path: '',
            component: ScheduleReportBreakupComponent
        }
    ];
    var ScheduleReportBreakupRoutingModule = /** @class */ (function () {
        function ScheduleReportBreakupRoutingModule() {
        }
        return ScheduleReportBreakupRoutingModule;
    }());
    ScheduleReportBreakupRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportBreakupRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ScheduleReportBreakupRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$f)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$f)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ScheduleReportBreakupModule = /** @class */ (function () {
        function ScheduleReportBreakupModule() {
        }
        return ScheduleReportBreakupModule;
    }());
    ScheduleReportBreakupModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportBreakupModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupModule, declarations: [ScheduleReportBreakupComponent], imports: [i14.CommonModule,
            ScheduleReportBreakupRoutingModule,
            EntityModule,
            ScheduleReportConfigurationModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i13.MatRadioModule] });
    ScheduleReportBreakupModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupModule, imports: [[
                i14.CommonModule,
                ScheduleReportBreakupRoutingModule,
                EntityModule,
                ScheduleReportConfigurationModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i13.MatRadioModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportBreakupModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ScheduleReportBreakupComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ScheduleReportBreakupRoutingModule,
                            EntityModule,
                            ScheduleReportConfigurationModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i13.MatRadioModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ScheduleReportCgwaComponent = /** @class */ (function () {
        function ScheduleReportCgwaComponent(activatedRoute, router, formBuilder, scheduleReportController, scheduleReportService, 
        // tsc-library
        storageService, tscCommonService, toastrService) {
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.formBuilder = formBuilder;
            this.scheduleReportController = scheduleReportController;
            this.scheduleReportService = scheduleReportService;
            this.storageService = storageService;
            this.tscCommonService = tscCommonService;
            this.toastrService = toastrService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.isEqual = true;
            this.scheduleReportI = new ScheduleReport();
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        ScheduleReportCgwaComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.scheduleCgwaReportFGInit();
            this.activatedRoute.data.subscribe(function (data) {
                _this.action = data.action;
                _this.setPageTitle();
            });
            this.activatedRoute.params.subscribe(function (params) {
                if (_this.action == i3.FormAction.UPDATE) {
                    _this.scheduleReportID = params.scheduleReportID;
                    _this.getScheduleReportByID(_this.scheduleReportID);
                }
            });
        };
        ScheduleReportCgwaComponent.prototype.setPageTitle = function () {
            if (this.action == i3.FormAction.CREATE) {
                this.pageTitle = "Schedule CGWA Report";
            }
            else if (this.action == i3.FormAction.UPDATE) {
                this.pageTitle = "Update Scheduled CGWA Report";
            }
        };
        ScheduleReportCgwaComponent.prototype.scheduleCgwaReportFGInit = function () {
            this.scheduleCgwaReportFG = this.formBuilder.group({
                reportConfig: this.formBuilder.group({
                    reportType: [exports.ScheduleReportTypeEnum.CGWA_REPORT, i2$1.Validators.required],
                    deviceID: [[]],
                    entityType: [],
                    entityID: [[]],
                    sourceConsumer: this.formBuilder.group({
                        type: ['SOURCE', i2$1.Validators.required],
                        keyID: ['BOREWELL', i2$1.Validators.required]
                    }),
                    paramMetric: ['gwFlowTotalizer', i2$1.Validators.required],
                }),
                schedulerConfig: this.formBuilder.group({
                    name: [, i2$1.Validators.required],
                    dataInterval: [, i2$1.Validators.required],
                    frequency: [, i2$1.Validators.required],
                    userChoice: [, i2$1.Validators.required],
                    userID: [[], i2$1.Validators.required],
                    otherUserEmail: [[]],
                    status: [, i2$1.Validators.required],
                    reportFormat: [, i2$1.Validators.required],
                })
            });
        };
        ScheduleReportCgwaComponent.prototype.patchSchedulerConfigInput = function () {
            this.scheduleCgwaReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
        };
        ScheduleReportCgwaComponent.prototype.getValidFormData = function () {
            this.patchSchedulerConfigInput();
            var userID = this.tscCommonService.removeSelectAllID(this.scheduleCgwaReportFG.get('schedulerConfig').get('userID').value);
            this.scheduleCgwaReportFG.get('schedulerConfig').get('userID').patchValue(userID);
            var paramsArray = [
                {
                    name: this.scheduleCgwaReportFG.get('reportConfig').get('paramMetric').value,
                    dsAgg: 'sum',
                    agg: 'sum'
                }
            ];
            var reportConfigFG = this.scheduleCgwaReportFG.get('reportConfig').value;
            var schedulerConfigFG = this.scheduleCgwaReportFG.get('schedulerConfig').value;
            var paramMetric = reportConfigFG.paramMetric, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
            this.modifiedFG = {
                reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
                schedulerConfig: Object.assign({}, schedulerConfigFG)
            };
        };
        ScheduleReportCgwaComponent.prototype.scheduleReportSubmit = function () {
            this.patchSchedulerConfigInput();
            if (this.schedulerConfigInput.scheduleReportFG.invalid) {
                this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
            }
            if (this.scheduleCgwaReportFG.invalid) {
                console.log('Invalid form:', this.scheduleCgwaReportFG.value);
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                this.getValidFormData();
                if (this.action == i3.FormAction.CREATE) {
                    this.createScheduleReport();
                }
                else if (this.action == i3.FormAction.UPDATE) {
                    this.updateScheduleReport();
                }
            }
        };
        ScheduleReportCgwaComponent.prototype.createScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe(function (res) {
                _this.router.navigate(["schedule-report/page"]);
            }, function (error) {
                console.log('error in createScheduleReport -', error);
            });
        };
        ScheduleReportCgwaComponent.prototype.getScheduleReportByID = function (scheduleReportID) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID)];
                        case 1:
                            _a.scheduleReportI = (_b.sent());
                            this.patchScheduleReport(this.scheduleReportI);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportCgwaComponent.prototype.patchScheduleReport = function (scheduleReportI) {
            this.scheduleCgwaReportFG.patchValue({
                reportConfig: scheduleReportI.reportConfig,
                schedulerConfig: scheduleReportI.schedulerConfig
            });
            this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
            this.initialObject = {
                cgwaReportConfig: this.scheduleCgwaReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isValidUpdateForm();
        };
        ScheduleReportCgwaComponent.prototype.isValidUpdateForm = function () {
            var _this = this;
            this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
            this.scheduleCgwaReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
        };
        ScheduleReportCgwaComponent.prototype.checkEquality = function () {
            var currentValues = {
                cgwaReportConfig: this.scheduleCgwaReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isEqual = lodash.isEqual(this.initialObject, currentValues);
        };
        ScheduleReportCgwaComponent.prototype.updateScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe(function (res) {
                _this.tscCommonService.back();
            }, function (error) {
                console.log('error in updateScheduleReport -', error);
            });
        };
        return ScheduleReportCgwaComponent;
    }());
    ScheduleReportCgwaComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$1.Router }, { token: i2__namespace$1.FormBuilder }, { token: ScheduleReportController }, { token: ScheduleReportService }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.TSCCommonService }, { token: i2__namespace$3.ToastrService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReportCgwaComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportCgwaComponent, selector: "lib-cgwa", viewQueries: [{ propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleCgwaReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-6\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-4\">\n                                        Source type\n                                    </div>\n                                    <div class=\"col-sm-6 fw-bold\">\n                                        Borewell\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-6\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-4\">\n                                        Consumption parameter\n                                    </div>\n                                    <div class=\"col-sm-6 fw-bold\">\n                                        Water consumption\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n\n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-cgwa',
                        templateUrl: './cgwa.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$1.Router }, { type: i2__namespace$1.FormBuilder }, { type: ScheduleReportController }, { type: ScheduleReportService }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.TSCCommonService }, { type: i2__namespace$3.ToastrService }]; }, propDecorators: { schedulerConfigInput: [{
                    type: i0.ViewChild,
                    args: ['schedulerConfigInput']
                }] } });

    var routes$e = [
        {
            path: '',
            component: ScheduleReportCgwaComponent
        }
    ];
    var ScheduleReportCgwaRoutingModule = /** @class */ (function () {
        function ScheduleReportCgwaRoutingModule() {
        }
        return ScheduleReportCgwaRoutingModule;
    }());
    ScheduleReportCgwaRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportCgwaRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ScheduleReportCgwaRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$e)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$e)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ScheduleReportCgwaModule = /** @class */ (function () {
        function ScheduleReportCgwaModule() {
        }
        return ScheduleReportCgwaModule;
    }());
    ScheduleReportCgwaModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportCgwaModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaModule, declarations: [ScheduleReportCgwaComponent], imports: [i14.CommonModule,
            ScheduleReportCgwaRoutingModule,
            ScheduleReportConfigurationModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule] });
    ScheduleReportCgwaModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaModule, imports: [[
                i14.CommonModule,
                ScheduleReportCgwaRoutingModule,
                ScheduleReportConfigurationModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportCgwaModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ScheduleReportCgwaComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ScheduleReportCgwaRoutingModule,
                            ScheduleReportConfigurationModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ScheduleReportConsumptionComponent = /** @class */ (function () {
        function ScheduleReportConsumptionComponent(activatedRoute, router, formBuilder, scheduleReportController, sourceService, parameterService, scheduleReportService, 
        // tsc-library
        storageService, tscCommonService, toastrService) {
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.formBuilder = formBuilder;
            this.scheduleReportController = scheduleReportController;
            this.sourceService = sourceService;
            this.parameterService = parameterService;
            this.scheduleReportService = scheduleReportService;
            this.storageService = storageService;
            this.tscCommonService = tscCommonService;
            this.toastrService = toastrService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ApplicationKeyID = applicationService.ApplicationKeyID;
            this.sourceConsumerType = [new i3.Static()];
            this.isEqual = true;
            this.scheduleReportI = new ScheduleReport();
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        ScheduleReportConsumptionComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            this.scheduleConsumptionReportFGInit();
            this.getConsumptionParameter();
            this.activatedRoute.data.subscribe(function (data) {
                _this.action = data.action;
                _this.setPageTitle();
            });
            this.activatedRoute.params.subscribe(function (params) {
                if (_this.action == i3.FormAction.UPDATE) {
                    _this.scheduleReportID = params.scheduleReportID;
                    _this.getScheduleReportByID(_this.scheduleReportID);
                }
            });
            if (this.scheduleConsumptionReportFG.get('reportConfig').get('sourceConsumer.type').value == 'SOURCE') {
                this.getSourceConsumerType('source');
            }
            else {
                this.getSourceConsumerType('load');
            }
        };
        ScheduleReportConsumptionComponent.prototype.setPageTitle = function () {
            var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
            if (this.action == i3.FormAction.CREATE) {
                this.pageTitle = "Schedule " + applicationName + " Consumption Report";
            }
            else if (this.action == i3.FormAction.UPDATE) {
                this.pageTitle = "Update Scheduled " + applicationName + " Consumption Report";
            }
        };
        ScheduleReportConsumptionComponent.prototype.scheduleConsumptionReportFGInit = function () {
            var _this = this;
            this.scheduleConsumptionReportFG = this.formBuilder.group({
                reportConfig: this.formBuilder.group({
                    reportType: [exports.ScheduleReportTypeEnum.CONSUMPTION_REPORT, i2$1.Validators.required],
                    deviceID: [[]],
                    entityType: [],
                    entityID: [[]],
                    sourceConsumer: this.formBuilder.group({
                        type: ['SOURCE', i2$1.Validators.required],
                        keyID: [, i2$1.Validators.required]
                    }),
                    paramMetric: [, i2$1.Validators.required],
                }),
                schedulerConfig: this.formBuilder.group({
                    name: [, i2$1.Validators.required],
                    dataInterval: [, i2$1.Validators.required],
                    frequency: [, i2$1.Validators.required],
                    userChoice: [, i2$1.Validators.required],
                    userID: [[], i2$1.Validators.required],
                    otherUserEmail: [[]],
                    status: [, i2$1.Validators.required],
                    reportFormat: [, i2$1.Validators.required],
                })
            });
            this.scheduleConsumptionReportFG.get('reportConfig').get('sourceConsumer.type').valueChanges.subscribe(function (value) {
                if (value == 'SOURCE') {
                    _this.getSourceConsumerType('source');
                }
                else if (value == 'CONSUMER') {
                    _this.getSourceConsumerType('load');
                }
            });
        };
        ScheduleReportConsumptionComponent.prototype.getSourceConsumerType = function (sourceConsumerType) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            requestData = {
                                type: sourceConsumerType
                            };
                            _a = this;
                            return [4 /*yield*/, this.sourceService.getSourceConsumerType(this.orgID, requestData)];
                        case 1:
                            _a.sourceConsumerType = (_b.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportConsumptionComponent.prototype.getConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consumptionParamM;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.parameterService.getConsumptionParameter(this.orgID)];
                        case 1:
                            consumptionParamM = _a.sent();
                            this.consumptionParamM = consumptionParamM.consumptionParameter;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportConsumptionComponent.prototype.patchSchedulerConfigInput = function () {
            this.scheduleConsumptionReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
        };
        ScheduleReportConsumptionComponent.prototype.getValidFormData = function () {
            this.patchSchedulerConfigInput();
            var userID = this.tscCommonService.removeSelectAllID(this.scheduleConsumptionReportFG.get('schedulerConfig').get('userID').value);
            this.scheduleConsumptionReportFG.get('schedulerConfig').get('userID').patchValue(userID);
            var paramsArray = [
                {
                    name: this.scheduleConsumptionReportFG.get('reportConfig').get('paramMetric').value,
                    dsAgg: 'sum',
                    agg: 'sum'
                }
            ];
            var reportConfigFG = this.scheduleConsumptionReportFG.get('reportConfig').value;
            var schedulerConfigFG = this.scheduleConsumptionReportFG.get('schedulerConfig').value;
            var paramMetric = reportConfigFG.paramMetric, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
            this.modifiedFG = {
                reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
                schedulerConfig: Object.assign({}, schedulerConfigFG)
            };
        };
        ScheduleReportConsumptionComponent.prototype.scheduleReportSubmit = function () {
            this.patchSchedulerConfigInput();
            if (this.schedulerConfigInput.scheduleReportFG.invalid) {
                this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
            }
            if (this.scheduleConsumptionReportFG.invalid) {
                console.log('Invalid form:', this.scheduleConsumptionReportFG.value);
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                this.getValidFormData();
                if (this.action == i3.FormAction.CREATE) {
                    this.createScheduleReport();
                }
                else if (this.action == i3.FormAction.UPDATE) {
                    this.updateScheduleReport();
                }
            }
        };
        ScheduleReportConsumptionComponent.prototype.createScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe(function (res) {
                _this.router.navigate(["schedule-report/page"]);
            }, function (error) {
                console.log('error in createScheduleReport -', error);
            });
        };
        ScheduleReportConsumptionComponent.prototype.getScheduleReportByID = function (scheduleReportID) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID)];
                        case 1:
                            _a.scheduleReportI = (_b.sent());
                            this.patchScheduleReport(this.scheduleReportI);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportConsumptionComponent.prototype.patchScheduleReport = function (scheduleReportI) {
            this.scheduleConsumptionReportFG.patchValue({
                reportConfig: scheduleReportI.reportConfig,
                schedulerConfig: scheduleReportI.schedulerConfig
            });
            this.scheduleConsumptionReportFG.get('reportConfig').get('paramMetric').patchValue(scheduleReportI.reportConfig.paramMetric[0]);
            this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
            this.initialObject = {
                consumptionReportConfig: this.scheduleConsumptionReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isValidUpdateForm();
        };
        ScheduleReportConsumptionComponent.prototype.isValidUpdateForm = function () {
            var _this = this;
            this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
            this.scheduleConsumptionReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
        };
        ScheduleReportConsumptionComponent.prototype.checkEquality = function () {
            var currentValues = {
                consumptionReportConfig: this.scheduleConsumptionReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isEqual = lodash.isEqual(this.initialObject, currentValues);
        };
        ScheduleReportConsumptionComponent.prototype.updateScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe(function (res) {
                _this.tscCommonService.back();
            }, function (error) {
                console.log('error in updateScheduleReport -', error);
            });
        };
        return ScheduleReportConsumptionComponent;
    }());
    ScheduleReportConsumptionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$1.Router }, { token: i2__namespace$1.FormBuilder }, { token: ScheduleReportController }, { token: SourceService }, { token: ParameterService }, { token: ScheduleReportService }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.TSCCommonService }, { token: i2__namespace$3.ToastrService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReportConsumptionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportConsumptionComponent, selector: "lib-consumption", viewQueries: [{ propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleConsumptionReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div formGroupName=\"reportConfig\">\n                                <div formGroupName=\"sourceConsumer\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"radioBtnField\">\n                                            <div class=\"radioBtnGroupLabel\"> You want to schedule {{ applicationKeyID == ApplicationKeyID.WATER_KEY_ID ?\n                                                'water' : 'energy'}} consumption report for? * </div>\n                                            <mat-radio-group formControlName=\"type\">\n                                                <div class=\"row my-1\">\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'SOURCE'\">\n                                                            Source\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'CONSUMER'\">\n                                                            Consumer\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <mat-error class=\"textMatError ms-1 mt-1\"\n                                                        *ngIf=\"errorHandling(scheduleConsumptionReportFG, 'reportConfig.sourceConsumer.type', 'required')\">\n                                                        {{ FormErrorEnum.REQUIRED }}\n                                                    </mat-error>\n                                                </div>\n                                            </mat-radio-group>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"row mt-3\">\n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <div formGroupName=\"sourceConsumer\">\n                                        <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                            <mat-label> Select {{\n                                                scheduleConsumptionReportFG.get('reportConfig').get('sourceConsumer.type').value\n                                                == 'SOURCE' ? 'source' :\n                                                'consumer' }} type</mat-label>\n\n                                            <mat-select formControlName=\"keyID\" required>\n                                                <ng-container\n                                                    *ngIf=\"sourceConsumerType && sourceConsumerType.length > 0 && sourceConsumerType[0]['id']; else noSourceConsumerType\">\n                                                    <mat-option *ngFor=\"let type of sourceConsumerType\" [value]=\"type.keyID\">\n                                                        {{ type.name }}\n                                                    </mat-option>\n                                                </ng-container>\n\n                                                <ng-template #noSourceConsumerType>\n                                                    <mat-option disabled>\n                                                        {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                    </mat-option>\n                                                </ng-template>\n                                            </mat-select>\n\n                                            <mat-error\n                                                *ngIf=\"errorHandling(scheduleConsumptionReportFG, 'reportConfig.sourceConsumer.keyID', 'required')\">\n                                                {{ FormErrorEnum.REQUIRED }}\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"matFieldWidth100\"\n                                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select consumption parameter</mat-label>\n                                        <mat-select formControlName=\"paramMetric\" required>\n                                            <ng-container\n                                                *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                                                <mat-option *ngFor=\"let param of consumptionParamM\"\n                                                    [value]=\"param.paramMetric\">\n                                                    {{ param.label }}\n                                                </mat-option>\n                                            </ng-container>\n\n                                            <ng-template #noConsumptionParamM>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error\n                                            *ngIf=\"errorHandling(scheduleConsumptionReportFG, 'reportConfig.paramMetric', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n\n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i13__namespace.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i13__namespace.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-consumption',
                        templateUrl: './consumption.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$1.Router }, { type: i2__namespace$1.FormBuilder }, { type: ScheduleReportController }, { type: SourceService }, { type: ParameterService }, { type: ScheduleReportService }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.TSCCommonService }, { type: i2__namespace$3.ToastrService }]; }, propDecorators: { schedulerConfigInput: [{
                    type: i0.ViewChild,
                    args: ['schedulerConfigInput']
                }] } });

    var routes$d = [
        {
            path: '',
            component: ScheduleReportConsumptionComponent
        }
    ];
    var ScheduleReportConsumptionRoutingModule = /** @class */ (function () {
        function ScheduleReportConsumptionRoutingModule() {
        }
        return ScheduleReportConsumptionRoutingModule;
    }());
    ScheduleReportConsumptionRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportConsumptionRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ScheduleReportConsumptionRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$d)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$d)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ScheduleReportConsumptionModule = /** @class */ (function () {
        function ScheduleReportConsumptionModule() {
        }
        return ScheduleReportConsumptionModule;
    }());
    ScheduleReportConsumptionModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportConsumptionModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionModule, declarations: [ScheduleReportConsumptionComponent], imports: [i14.CommonModule,
            ScheduleReportConsumptionRoutingModule,
            ScheduleReportConfigurationModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i13.MatRadioModule] });
    ScheduleReportConsumptionModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionModule, imports: [[
                i14.CommonModule,
                ScheduleReportConsumptionRoutingModule,
                ScheduleReportConfigurationModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i13.MatRadioModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportConsumptionModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ScheduleReportConsumptionComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ScheduleReportConsumptionRoutingModule,
                            ScheduleReportConfigurationModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i13.MatRadioModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ScheduleReportSourcingComponent = /** @class */ (function () {
        function ScheduleReportSourcingComponent(activatedRoute, router, formBuilder, scheduleReportController, parameterService, scheduleReportService, 
        // tsc-library
        storageService, tscCommonService, toastrService) {
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.formBuilder = formBuilder;
            this.scheduleReportController = scheduleReportController;
            this.parameterService = parameterService;
            this.scheduleReportService = scheduleReportService;
            this.storageService = storageService;
            this.tscCommonService = tscCommonService;
            this.toastrService = toastrService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.allParameterID = [];
            this.totalParameterCount = 0;
            this.isEqual = true;
            this.scheduleReportI = new ScheduleReport();
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        ScheduleReportSourcingComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
            this.scheduleSourcingReportFGInit();
            this.getConsumptionParameter();
            this.activatedRoute.data.subscribe(function (data) {
                _this.action = data.action;
                _this.setPageTitle();
            });
            this.activatedRoute.params.subscribe(function (params) {
                if (_this.action == i3.FormAction.UPDATE) {
                    _this.scheduleReportID = params.scheduleReportID;
                    _this.getScheduleReportByID(_this.scheduleReportID);
                }
            });
        };
        ScheduleReportSourcingComponent.prototype.setPageTitle = function () {
            var applicationName = this.applicationKeyID == applicationService.ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
            if (this.action == i3.FormAction.CREATE) {
                this.pageTitle = "Schedule " + applicationName + " Sourcing Report";
            }
            else if (this.action == i3.FormAction.UPDATE) {
                this.pageTitle = "Update Scheduled " + applicationName + " Sourcing  Report";
            }
        };
        ScheduleReportSourcingComponent.prototype.scheduleSourcingReportFGInit = function () {
            this.scheduleSourcingReportFG = this.formBuilder.group({
                reportConfig: this.formBuilder.group({
                    reportType: [exports.ScheduleReportTypeEnum.SOURCING_REPORT, i2$1.Validators.required],
                    deviceID: [[]],
                    entityType: [],
                    entityID: [[]],
                    sourceConsumer: this.formBuilder.group({
                        type: ['SOURCE'],
                        keyID: []
                    }),
                    paramMetric: [[], i2$1.Validators.required],
                }),
                schedulerConfig: this.formBuilder.group({
                    name: [, i2$1.Validators.required],
                    dataInterval: [, i2$1.Validators.required],
                    frequency: [, i2$1.Validators.required],
                    userChoice: [, i2$1.Validators.required],
                    userID: [[], i2$1.Validators.required],
                    otherUserEmail: [[]],
                    status: [, i2$1.Validators.required],
                    reportFormat: [, i2$1.Validators.required],
                })
            });
        };
        ScheduleReportSourcingComponent.prototype.getConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var consumptionParamM;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.parameterService.getConsumptionParameter(this.orgID)];
                        case 1:
                            consumptionParamM = _a.sent();
                            this.consumptionParamM = consumptionParamM.consumptionParameter;
                            this.totalParameterCount = this.consumptionParamM.length;
                            this.consumptionParamM.forEach(function (parameter) { return _this.allParameterID.push(parameter['paramMetric']); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportSourcingComponent.prototype.selectAllParameters = function () {
            if (!this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').value.includes(-1)) {
                this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').reset([]);
                return;
            }
            this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').setValue(__spreadArray([-1], __read(this.allParameterID)));
        };
        ScheduleReportSourcingComponent.prototype.selectedParameters = function () {
            var selected = this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').value;
            if (selected.includes(-1)) {
                selected.shift();
                this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').patchValue(selected);
            }
            else if (this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').value.length == this.totalParameterCount) {
                this.allParameterID.splice(0, 0, -1);
                this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').patchValue(this.allParameterID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.scheduleSourcingReportFG.get('paramMetric').patchValue(filteredSelected);
            }
        };
        ScheduleReportSourcingComponent.prototype.patchSchedulerConfigInput = function () {
            this.scheduleSourcingReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
        };
        ScheduleReportSourcingComponent.prototype.getValidFormData = function () {
            this.patchSchedulerConfigInput();
            var userID = this.tscCommonService.removeSelectAllID(this.scheduleSourcingReportFG.get('schedulerConfig').get('userID').value);
            this.scheduleSourcingReportFG.get('schedulerConfig').get('userID').patchValue(userID);
            var paramMetrics = this.tscCommonService.removeSelectAllID(this.scheduleSourcingReportFG.get('reportConfig').get('paramMetric').value);
            var paramsArray = paramMetrics.map(function (paramName) { return ({
                name: paramName,
                dsAgg: 'sum',
                agg: 'sum'
            }); });
            var reportConfigFG = this.scheduleSourcingReportFG.get('reportConfig').value;
            var schedulerConfigFG = this.scheduleSourcingReportFG.get('schedulerConfig').value;
            var paramMetric = reportConfigFG.paramMetric, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
            this.modifiedFG = {
                reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
                schedulerConfig: Object.assign({}, schedulerConfigFG)
            };
        };
        ScheduleReportSourcingComponent.prototype.scheduleReportSubmit = function () {
            this.patchSchedulerConfigInput();
            if (this.schedulerConfigInput.scheduleReportFG.invalid) {
                this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
            }
            if (this.scheduleSourcingReportFG.invalid) {
                console.log('Invalid form:', this.scheduleSourcingReportFG.value);
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                this.getValidFormData();
                if (this.action == i3.FormAction.CREATE) {
                    this.createScheduleReport();
                }
                else if (this.action == i3.FormAction.UPDATE) {
                    this.updateScheduleReport();
                }
            }
        };
        ScheduleReportSourcingComponent.prototype.createScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe(function (res) {
                _this.router.navigate(["schedule-report/page"]);
            }, function (error) {
                console.log('error in createScheduleReport -', error);
            });
        };
        ScheduleReportSourcingComponent.prototype.getScheduleReportByID = function (scheduleReportID) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID)];
                        case 1:
                            _a.scheduleReportI = (_b.sent());
                            this.patchScheduleReport(this.scheduleReportI);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportSourcingComponent.prototype.patchScheduleReport = function (scheduleReportI) {
            this.scheduleSourcingReportFG.patchValue({
                reportConfig: scheduleReportI.reportConfig,
                schedulerConfig: scheduleReportI.schedulerConfig
            });
            this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
            this.initialObject = {
                sourcingReportConfig: this.scheduleSourcingReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isValidUpdateForm();
        };
        ScheduleReportSourcingComponent.prototype.isValidUpdateForm = function () {
            var _this = this;
            this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
            this.scheduleSourcingReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
        };
        ScheduleReportSourcingComponent.prototype.checkEquality = function () {
            var currentValues = {
                sourcingReportConfig: this.scheduleSourcingReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isEqual = lodash.isEqual(this.initialObject, currentValues);
        };
        ScheduleReportSourcingComponent.prototype.updateScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe(function (res) {
                _this.tscCommonService.back();
            }, function (error) {
                console.log('error in updateScheduleReport -', error);
            });
        };
        return ScheduleReportSourcingComponent;
    }());
    ScheduleReportSourcingComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$1.Router }, { token: i2__namespace$1.FormBuilder }, { token: ScheduleReportController }, { token: ParameterService }, { token: ScheduleReportService }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.TSCCommonService }, { token: i2__namespace$3.ToastrService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReportSourcingComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportSourcingComponent, selector: "lib-sourcing", viewQueries: [{ propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleSourcingReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select consumption parameter</mat-label>\n                                        <mat-select formControlName=\"paramMetric\" multiple required>\n                                            <ng-container\n                                                *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                                                <mat-option [value]=\"-1\" (click)=\"selectAllParameters()\">\n                                                    Select all\n                                                </mat-option>\n                                                <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\"\n                                                    (click)=\"selectedParameters()\">\n                                                    {{ param.label }}\n                                                </mat-option>\n                                            </ng-container>\n                                            <ng-template #noConsumptionParamM>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling(scheduleSourcingReportFG, 'reportConfig.paramMetric', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n            \n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-sourcing',
                        templateUrl: './sourcing.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$1.Router }, { type: i2__namespace$1.FormBuilder }, { type: ScheduleReportController }, { type: ParameterService }, { type: ScheduleReportService }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.TSCCommonService }, { type: i2__namespace$3.ToastrService }]; }, propDecorators: { schedulerConfigInput: [{
                    type: i0.ViewChild,
                    args: ['schedulerConfigInput']
                }] } });

    var routes$c = [
        {
            path: '',
            component: ScheduleReportSourcingComponent
        }
    ];
    var ScheduleReportSourcingRoutingModule = /** @class */ (function () {
        function ScheduleReportSourcingRoutingModule() {
        }
        return ScheduleReportSourcingRoutingModule;
    }());
    ScheduleReportSourcingRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportSourcingRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ScheduleReportSourcingRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$c)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$c)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ScheduleReportSourcingModule = /** @class */ (function () {
        function ScheduleReportSourcingModule() {
        }
        return ScheduleReportSourcingModule;
    }());
    ScheduleReportSourcingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportSourcingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingModule, declarations: [ScheduleReportSourcingComponent], imports: [i14.CommonModule,
            ScheduleReportSourcingRoutingModule,
            ScheduleReportConfigurationModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule] });
    ScheduleReportSourcingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingModule, imports: [[
                i14.CommonModule,
                ScheduleReportSourcingRoutingModule,
                ScheduleReportConfigurationModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportSourcingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ScheduleReportSourcingComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ScheduleReportSourcingRoutingModule,
                            ScheduleReportConfigurationModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ScheduleReportTemperatureComponent = /** @class */ (function () {
        function ScheduleReportTemperatureComponent(activatedRoute, router, formBuilder, scheduleReportController, entityService, scheduleReportService, 
        // tsc-library
        storageService, tscCommonService, toastrService) {
            this.activatedRoute = activatedRoute;
            this.router = router;
            this.formBuilder = formBuilder;
            this.scheduleReportController = scheduleReportController;
            this.entityService = entityService;
            this.scheduleReportService = scheduleReportService;
            this.storageService = storageService;
            this.tscCommonService = tscCommonService;
            this.toastrService = toastrService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.entityM = [new Entity()];
            this.entityType = [];
            this.allEntityID = [];
            this.totalEntityCount = 0;
            this.entities = [];
            this.isEqual = true;
            this.scheduleReportI = new ScheduleReport();
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
        }
        ScheduleReportTemperatureComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getEntitiesByParamMetric();
            this.scheduleTemperatureReportFGInit();
            this.activatedRoute.data.subscribe(function (data) {
                _this.action = data.action;
                _this.setPageTitle();
            });
            this.activatedRoute.params.subscribe(function (params) {
                if (_this.action == i3.FormAction.UPDATE) {
                    _this.scheduleReportID = params.scheduleReportID;
                    _this.getScheduleReportByID(_this.scheduleReportID);
                }
            });
        };
        ScheduleReportTemperatureComponent.prototype.setPageTitle = function () {
            if (this.action == i3.FormAction.CREATE) {
                this.pageTitle = "Schedule Temperature Report";
            }
            else if (this.action == i3.FormAction.UPDATE) {
                this.pageTitle = "Update Scheduled Temperature Report";
            }
        };
        ScheduleReportTemperatureComponent.prototype.scheduleTemperatureReportFGInit = function () {
            this.scheduleTemperatureReportFG = this.formBuilder.group({
                reportConfig: this.formBuilder.group({
                    reportType: [exports.ScheduleReportTypeEnum.TEMPERATURE_REPORT, i2$1.Validators.required],
                    deviceID: [[]],
                    entityType: [, i2$1.Validators.required],
                    entityID: [[], i2$1.Validators.required],
                    sourceConsumer: this.formBuilder.group({
                        type: [],
                        keyID: []
                    }),
                    paramMetric: [['engTemperature'], i2$1.Validators.required],
                }),
                schedulerConfig: this.formBuilder.group({
                    name: [, i2$1.Validators.required],
                    dataInterval: [, i2$1.Validators.required],
                    frequency: [, i2$1.Validators.required],
                    userChoice: [, i2$1.Validators.required],
                    userID: [[], i2$1.Validators.required],
                    otherUserEmail: [[]],
                    status: [, i2$1.Validators.required],
                    reportFormat: [, i2$1.Validators.required],
                })
            });
        };
        ScheduleReportTemperatureComponent.prototype.getEntitiesByParamMetric = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntitiesByParamMetric(this.orgID, "engTemperature")];
                        case 1:
                            _a.entityM = (_b.sent());
                            this.getDistictEntityType();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportTemperatureComponent.prototype.getDistictEntityType = function () {
            var distinctTypes = Array.from(new Set(this.entityM.map(function (item) { return item.type; })));
            this.entityType = distinctTypes.map(function (value) { return ({ value: value }); });
        };
        ScheduleReportTemperatureComponent.prototype.entityTypeChange = function (entityType) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').reset();
                            this.allEntityID = [];
                            _a = this;
                            return [4 /*yield*/, this.getEntitiesByType(entityType)];
                        case 1:
                            _a.entities = _b.sent();
                            this.totalEntityCount = this.entities.length;
                            this.entities.forEach(function (entity) { return _this.allEntityID.push(entity['id']); });
                            if (this.action == i3.FormAction.UPDATE && this.scheduleTemperatureReportFG) {
                                this.scheduleTemperatureReportFG.patchValue({
                                    'reportConfig.entityID': this.allEntityID
                                });
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportTemperatureComponent.prototype.getEntitiesByType = function (type) {
            return __awaiter(this, void 0, void 0, function () {
                var filteredEntities;
                return __generator(this, function (_a) {
                    filteredEntities = this.entityM.filter(function (entity) { return entity.type == type; });
                    return [2 /*return*/, filteredEntities];
                });
            });
        };
        ScheduleReportTemperatureComponent.prototype.selectAllEntities = function () {
            if (!this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value.includes(-1)) {
                this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').reset([]);
                return;
            }
            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').setValue(__spreadArray([-1], __read(this.allEntityID)));
        };
        ScheduleReportTemperatureComponent.prototype.selectedEntity = function () {
            var selected = this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value;
            if (selected.includes(-1)) {
                selected.shift();
                this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(selected);
            }
            else if (this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value.length == this.totalEntityCount) {
                this.allEntityID.splice(0, 0, -1);
                this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(this.allEntityID);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(filteredSelected);
            }
        };
        ScheduleReportTemperatureComponent.prototype.patchSchedulerConfigInput = function () {
            this.scheduleTemperatureReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
        };
        ScheduleReportTemperatureComponent.prototype.getValidFormData = function () {
            this.patchSchedulerConfigInput();
            var entityID = this.tscCommonService.removeSelectAllID(this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value);
            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(entityID);
            var userID = this.tscCommonService.removeSelectAllID(this.scheduleTemperatureReportFG.get('schedulerConfig').get('userID').value);
            this.scheduleTemperatureReportFG.get('schedulerConfig').get('userID').patchValue(userID);
            var paramMetrics = this.scheduleTemperatureReportFG.get('reportConfig').get('paramMetric').value;
            var paramsArray = paramMetrics.map(function (paramName) { return ({
                name: paramName,
                dsAgg: 'avg',
                agg: 'avg'
            }); });
            var reportConfigFG = this.scheduleTemperatureReportFG.get('reportConfig').value;
            var schedulerConfigFG = this.scheduleTemperatureReportFG.get('schedulerConfig').value;
            var paramMetric = reportConfigFG.paramMetric, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
            this.modifiedFG = {
                reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
                schedulerConfig: Object.assign({}, schedulerConfigFG)
            };
        };
        ScheduleReportTemperatureComponent.prototype.scheduleReportSubmit = function () {
            this.patchSchedulerConfigInput();
            if (this.schedulerConfigInput.scheduleReportFG.invalid) {
                this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
            }
            if (this.scheduleTemperatureReportFG.invalid) {
                console.log('Invalid form:', this.scheduleTemperatureReportFG.value);
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                this.getValidFormData();
                if (this.action == i3.FormAction.CREATE) {
                    this.createScheduleReport();
                }
                else if (this.action == i3.FormAction.UPDATE) {
                    this.updateScheduleReport();
                }
            }
        };
        ScheduleReportTemperatureComponent.prototype.createScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe(function (res) {
                _this.router.navigate(["schedule-report/page"]);
            }, function (error) {
                console.log('error in createScheduleReport -', error);
            });
        };
        ScheduleReportTemperatureComponent.prototype.getScheduleReportByID = function (scheduleReportID) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID)];
                        case 1:
                            _a.scheduleReportI = (_b.sent());
                            this.patchScheduleReport(this.scheduleReportI);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportTemperatureComponent.prototype.patchScheduleReport = function (scheduleReportI) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getEntitiesByParamMetric()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.entityTypeChange(this.scheduleReportI.reportConfig.entityType)];
                        case 2:
                            _a.sent();
                            this.scheduleTemperatureReportFG.patchValue({
                                reportConfig: scheduleReportI.reportConfig,
                                schedulerConfig: scheduleReportI.schedulerConfig
                            });
                            this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
                            this.initialObject = {
                                temperatureReportConfig: this.scheduleTemperatureReportFG.value,
                                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
                            };
                            this.isValidUpdateForm();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleReportTemperatureComponent.prototype.isValidUpdateForm = function () {
            var _this = this;
            this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
            this.scheduleTemperatureReportFG.valueChanges.subscribe(function () {
                _this.checkEquality();
            });
        };
        ScheduleReportTemperatureComponent.prototype.checkEquality = function () {
            var currentValues = {
                temperatureReportConfig: this.scheduleTemperatureReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isEqual = lodash.isEqual(this.initialObject, currentValues);
        };
        ScheduleReportTemperatureComponent.prototype.updateScheduleReport = function () {
            var _this = this;
            this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe(function (res) {
                _this.tscCommonService.back();
            }, function (error) {
                console.log('error in updateScheduleReport -', error);
            });
        };
        return ScheduleReportTemperatureComponent;
    }());
    ScheduleReportTemperatureComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$1.Router }, { token: i2__namespace$1.FormBuilder }, { token: ScheduleReportController }, { token: EntityService }, { token: ScheduleReportService }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.TSCCommonService }, { token: i2__namespace$3.ToastrService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReportTemperatureComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportTemperatureComponent, selector: "lib-temperature", viewQueries: [{ propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleTemperatureReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label> Select entity type </mat-label>\n                                        <mat-select formControlName=\"entityType\" (selectionChange)=\"entityTypeChange($event.value)\" required>\n                                            <ng-container *ngIf=\"entityType && entityType.length > 0 && entityType?.[0]?.['value']; else noEntityType\">\n                                                <mat-option *ngFor=\"let type of entityType\" [value]=\"type.value\">\n                                                    {{ type.value }}\n                                                </mat-option>\n                                            </ng-container>\n                                            <ng-template #noEntityType>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling(scheduleTemperatureReportFG, 'reportConfig.entityType', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                    \n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"mat-field-width-100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select entity</mat-label>\n                                        <mat-select formControlName=\"entityID\" multiple required>\n                                            <ng-container *ngIf=\"entities && entities.length > 0 && entities[0]['id']; else noEntityFound\">\n                                                <mat-option [value]=\"-1\" (click)=\"selectAllEntities()\">\n                                                    Select all\n                                                </mat-option>\n                                                <mat-option *ngFor=\"let entity of entities\" [value]=\"entity.id\" (click)=\"selectedEntity()\">\n                                                    {{ entity.name }}\n                                                </mat-option>\n                                            </ng-container>\n                                            <ng-template #noEntityFound>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling(scheduleTemperatureReportFG, 'reportConfig.entityID', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n            \n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", styles: [".labelColor{font-size:12px;color:#0009}\n"], components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-temperature',
                        templateUrl: './temperature.component.html',
                        styleUrls: ['./temperature.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$1.Router }, { type: i2__namespace$1.FormBuilder }, { type: ScheduleReportController }, { type: EntityService }, { type: ScheduleReportService }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.TSCCommonService }, { type: i2__namespace$3.ToastrService }]; }, propDecorators: { schedulerConfigInput: [{
                    type: i0.ViewChild,
                    args: ['schedulerConfigInput']
                }] } });

    var routes$b = [
        {
            path: '',
            component: ScheduleReportTemperatureComponent
        }
    ];
    var ScheduleReportTemperatureRoutingModule = /** @class */ (function () {
        function ScheduleReportTemperatureRoutingModule() {
        }
        return ScheduleReportTemperatureRoutingModule;
    }());
    ScheduleReportTemperatureRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportTemperatureRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ScheduleReportTemperatureRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$b)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$b)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ScheduleReportTemperatureModule = /** @class */ (function () {
        function ScheduleReportTemperatureModule() {
        }
        return ScheduleReportTemperatureModule;
    }());
    ScheduleReportTemperatureModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReportTemperatureModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureModule, declarations: [ScheduleReportTemperatureComponent], imports: [i14.CommonModule,
            ScheduleReportTemperatureRoutingModule,
            ScheduleReportConfigurationModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i3$1.MatFormFieldModule,
            i4.MatSelectModule,
            i1$4.MatButtonToggleModule] });
    ScheduleReportTemperatureModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureModule, imports: [[
                i14.CommonModule,
                ScheduleReportTemperatureRoutingModule,
                ScheduleReportConfigurationModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i3$1.MatFormFieldModule,
                i4.MatSelectModule,
                i1$4.MatButtonToggleModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ScheduleReportTemperatureModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ScheduleReportTemperatureComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ScheduleReportTemperatureRoutingModule,
                            ScheduleReportConfigurationModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i3$1.MatFormFieldModule,
                            i4.MatSelectModule,
                            i1$4.MatButtonToggleModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var CreateUpdateEntityComponent = /** @class */ (function () {
        function CreateUpdateEntityComponent(storageService, toastService, entityService, entityController, entityFB, dialogRef, data) {
            var _this = this;
            this.storageService = storageService;
            this.toastService = toastService;
            this.entityService = entityService;
            this.entityController = entityController;
            this.entityFB = entityFB;
            this.dialogRef = dialogRef;
            this.data = data;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.DialogEnum = i3.DialogEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.title = 'Create';
            this.action = 'create';
            this.isNewEntityTypeSelected = false;
            this.isEqual = false;
            this.entityTypeM = [new EntityType()];
            this.entityTypeSearchUtil = new i3.MatSelectSearchService(['type']);
            this.errorHandling = function (control, error) {
                return _this.entityFG.controls[control].hasError(error);
            };
            this.action = data['action'];
            this.entityID = data['entityID'];
            this.layoutID = data['layoutID'];
            this.dialogRef.disableClose = true;
        }
        CreateUpdateEntityComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getEntityType();
            this.entityFGInit();
            if (this.action == 'update') {
                this.title = 'Update';
                this.getEntityByID();
            }
            this.entityFG.valueChanges.subscribe(function () { _this.isEqual = lodash.isEqual(_this.initialObject, _this.entityFG.getRawValue()); });
        };
        CreateUpdateEntityComponent.prototype.getEntityType = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntityTypeByLayoutID(this.orgID, 'NO')];
                        case 1:
                            _a.entityTypeM = (_b.sent());
                            this.entityTypeSearchUtil.entityArr = this.entityTypeM;
                            this.entityTypeSearchUtil.createSubscription();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CreateUpdateEntityComponent.prototype.entityFGInit = function () {
            this.entityFG = this.entityFB.group({
                name: ['', i2$1.Validators.required],
                type: ['', i2$1.Validators.required]
            });
        };
        CreateUpdateEntityComponent.prototype.createNewType = function () {
            this.isNewEntityTypeSelected = true;
            this.entityFG.get('type').reset();
        };
        CreateUpdateEntityComponent.prototype.getEntityByID = function () {
            var _this = this;
            this.entityController.getEntityByID(this.orgID, this.layoutID, this.entityID).subscribe(function (entityRes) {
                _this.entityM = entityRes;
                _this.patchEntity(_this.entityM);
            });
        };
        CreateUpdateEntityComponent.prototype.patchEntity = function (entity) {
            this.entityFG.patchValue({
                name: entity['name'],
                type: entity['type']
            });
            this.isEqual = true;
        };
        CreateUpdateEntityComponent.prototype.addEntity = function () {
            var _this = this;
            if (this.entityFG.invalid) {
                this.entityFG.markAllAsTouched();
                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            this.entityController.createEntity(this.orgID, this.layoutID, this.entityID, this.entityFG.value)
                .subscribe(function (addEntityRes) {
                _this.dialogRef.close(i3.DialogEnum.SUCCESS_DR);
            }, function (error) {
                console.log('error in addEntity - ', error);
            });
        };
        CreateUpdateEntityComponent.prototype.updateEntity = function () {
            var _this = this;
            if (this.entityFG.invalid) {
                this.entityFG.markAllAsTouched();
                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            this.entityController.updateEntity(this.orgID, this.layoutID, this.entityID, this.entityFG.value)
                .subscribe(function (addEntityRes) {
                _this.dialogRef.close(i3.DialogEnum.SUCCESS_DR);
            }, function (error) {
                console.log('error in updateEntity - ', error);
            });
        };
        return CreateUpdateEntityComponent;
    }());
    CreateUpdateEntityComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateEntityComponent, deps: [{ token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: EntityService }, { token: EntityController }, { token: i2__namespace$1.FormBuilder }, { token: i1__namespace$3.MatDialogRef }, { token: i1$3.MAT_DIALOG_DATA }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CreateUpdateEntityComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreateUpdateEntityComponent, selector: "lib-entity", ngImport: i0__namespace, template: "<div mat-dialog-title>\n    <strong class=\"dialogTitle\">\n        {{ title }} Entity\n    </strong>\n    <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\" matTooltip=\"Close\"\n        matTooltipPosition=\"before\">\n        <span class=\"material-symbols-outlined\" [mat-dialog-close]=\"DialogEnum.CLOSE_DR\">\n            close\n        </span>\n    </button>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <form [formGroup]=\"entityFG\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Name</mat-label>\n                    <input matInput placeholder=\"Name\" type=\"text\" formControlName=\"name\" required />\n                    <mat-error *ngIf=\"errorHandling('name', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-6\" *ngIf=\"!isNewEntityTypeSelected\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select type</mat-label>\n                    <mat-select formControlName=\"type\" required>\n                        <mat-option>\n                            <ngx-mat-select-search [formControl]=\"entityTypeSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                                noEntriesFoundLabel=\"No matching type found.\">\n                            </ngx-mat-select-search>\n                        </mat-option>\n                        <mat-option *ngFor=\"let entity of entityTypeSearchUtil.filteredEntities | async\" [value]=\"entity.type\">\n                            {{ entity.type }}\n                        </mat-option>\n\n                        <div class=\"row m-0 stickyDropdownMenuItem\">\n                            <div class=\"col-sm-12 text-primary cursorPointer\" (click)=\"createNewType()\">\n                                Create new type\n                            </div>\n                        </div>\n                    </mat-select>\n                    <mat-error *ngIf=\"errorHandling('type', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-6\" *ngIf=\"isNewEntityTypeSelected\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Type</mat-label>\n                    <input matInput placeholder=\"Type\" type=\"text\" formControlName=\"type\" required />\n                    <mat-error *ngIf=\"errorHandling('type', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n\n                <span class=\"mt-2 text-primary cursorPointer\" (click)=\"isNewEntityTypeSelected = false\">\n                    <small>Select type *</small>\n                </span>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div mat-dialog-footer align=\"end\">\n    <div [ngSwitch]=\"action\" class=\"d-inline\">\n        <button *ngSwitchCase=\"'create'\" type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"addEntity()\">\n            {{ ButtonLabelEnum.CREATE_BTN_LABEL }}\n        </button>\n        <button *ngSwitchCase=\"'update'\" type=\"button\" class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled': isEqual}\"\n            (click)=\"updateEntity()\">\n            {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n        </button>\n        <button *ngSwitchDefault class=\"d-none\"></button>\n    </div>\n</div>", components: [{ type: i6__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i1__namespace$3.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace$3.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1__namespace$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i12__namespace$3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i14__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateEntityComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-entity',
                        templateUrl: './entity.component.html',
                        styleUrls: []
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: EntityService }, { type: EntityController }, { type: i2__namespace$1.FormBuilder }, { type: i1__namespace$3.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.MAT_DIALOG_DATA]
                        }] }];
        } });

    var CreateUpdateEntityModule = /** @class */ (function () {
        function CreateUpdateEntityModule() {
        }
        return CreateUpdateEntityModule;
    }());
    CreateUpdateEntityModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateEntityModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CreateUpdateEntityModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateEntityModule, declarations: [CreateUpdateEntityComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12$1.MatIconModule,
            i3$1.MatFormFieldModule,
            i6.MatButtonModule,
            i12.MatInputModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule,
            i4.MatSelectModule,
            i6$1.NgxMatSelectSearchModule] });
    CreateUpdateEntityModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateEntityModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12$1.MatIconModule,
                i3$1.MatFormFieldModule,
                i6.MatButtonModule,
                i12.MatInputModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule,
                i4.MatSelectModule,
                i6$1.NgxMatSelectSearchModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateEntityModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            CreateUpdateEntityComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12$1.MatIconModule,
                            i3$1.MatFormFieldModule,
                            i6.MatButtonModule,
                            i12.MatInputModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule,
                            i4.MatSelectModule,
                            i6$1.NgxMatSelectSearchModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var CreateUpdateLayoutComponent = /** @class */ (function () {
        function CreateUpdateLayoutComponent(dialogRef, data, storageService, layoutFB, toastService, layoutController, layoutService) {
            var _this = this;
            this.dialogRef = dialogRef;
            this.data = data;
            this.storageService = storageService;
            this.layoutFB = layoutFB;
            this.toastService = toastService;
            this.layoutController = layoutController;
            this.layoutService = layoutService;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.DialogEnum = i3.DialogEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.title = 'Create';
            this.action = 'create';
            this.maxLength = 200;
            this.layout = new i5.Layout();
            this.isEqual = false;
            this.errorHandling = function (control, error) {
                return _this.layoutFG.controls[control].hasError(error);
            };
            this.action = data['action'];
            this.layoutID = data['layoutID'];
            this.dialogRef.disableClose = true;
        }
        CreateUpdateLayoutComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.layoutInit();
            if (this.action == 'update') {
                this.title = 'Update';
                this.getLayoutByID();
            }
            this.layoutFG.valueChanges.subscribe(function () { _this.isEqual = lodash.isEqual(_this.initialObject, _this.layoutFG.getRawValue()); });
        };
        CreateUpdateLayoutComponent.prototype.layoutInit = function () {
            this.layoutFG = this.layoutFB.group({
                name: ['', [i2$1.Validators.required]],
                description: []
            });
        };
        CreateUpdateLayoutComponent.prototype.getLayoutByID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.layoutService.getLayoutByID(this.orgID, this.layoutID)];
                        case 1:
                            _a.layout = _b.sent();
                            this.patchLayout(this.layout);
                            return [2 /*return*/];
                    }
                });
            });
        };
        CreateUpdateLayoutComponent.prototype.patchLayout = function (layout) {
            this.layoutFG.patchValue({
                name: layout['name'],
                description: layout['description']
            });
            this.isEqual = true;
        };
        CreateUpdateLayoutComponent.prototype.createLayout = function () {
            var _this = this;
            if (this.layoutFG.invalid) {
                this.layoutFG.markAllAsTouched();
                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            this.layoutController.createLayout(this.orgID, this.layoutFG.value)
                .subscribe(function (layoutCreateRes) {
                _this.dialogRef.close({
                    result: i3.DialogEnum.SUCCESS_DR,
                    layoutID: layoutCreateRes.response.id
                });
            }, function (error) {
                console.log('error in createLayout() - ', error);
            });
        };
        CreateUpdateLayoutComponent.prototype.updateLayout = function () {
            var _this = this;
            if (this.layoutFG.invalid) {
                this.layoutFG.markAllAsTouched();
                this.toastService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            this.layoutController.updateLayout(this.orgID, this.layoutID, this.layoutFG.value)
                .subscribe(function (updateLayoutRes) {
                _this.dialogRef.close({ result: i3.DialogEnum.SUCCESS_DR, layoutID: null });
            }, function (error) {
                console.log('error in updateLayout() - ', error);
            });
        };
        return CreateUpdateLayoutComponent;
    }());
    CreateUpdateLayoutComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateLayoutComponent, deps: [{ token: i1__namespace$3.MatDialogRef }, { token: i1$3.MAT_DIALOG_DATA }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$1.FormBuilder }, { token: i2__namespace$3.ToastrService }, { token: i5__namespace.LayoutController }, { token: i5__namespace.LayoutService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CreateUpdateLayoutComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreateUpdateLayoutComponent, selector: "lib-layout", ngImport: i0__namespace, template: "<div mat-dialog-title>\n    <strong class=\"dialogTitle\">\n        {{ title }} layout\n    </strong>\n    <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\" matTooltip=\"Close\"\n        matTooltipPosition=\"before\">\n        <span class=\"material-symbols-outlined\" [mat-dialog-close]=\"DialogEnum.CLOSE_DR\">\n            close\n        </span>\n    </button>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <form [formGroup]=\"layoutFG\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Name</mat-label>\n                    <input matInput placeholder=\"Layout Name\" type=\"text\" formControlName=\"name\" required/>\n                    <mat-error *ngIf=\"errorHandling('name', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"col-sm-6\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Description</mat-label>\n                    <input class=\"formPlaceholder\" matInput formControlName=\"description\" [maxlength]=\"maxLength\"\n                        #input />\n                    <mat-hint>Total number of character remaining: {{input.value.length}}\n                        /{{ maxLength }}</mat-hint>\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div mat-dialog-footer align=\"end\">\n    <div [ngSwitch]=\"action\" class=\"d-inline\">\n        <button *ngSwitchCase=\"'create'\" type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"createLayout()\">\n            {{ ButtonLabelEnum.CREATE_BTN_LABEL }}\n        </button>\n        <button *ngSwitchCase=\"'update'\" type=\"button\" class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled': isEqual}\"\n            (click)=\"updateLayout()\">\n            {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n        </button>\n        <button *ngSwitchDefault class=\"d-none\"></button>\n    </div>\n</div>", components: [{ type: i6__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }], directives: [{ type: i1__namespace$3.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace$3.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1__namespace$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i12__namespace$3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i2__namespace$1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i3__namespace$1.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i14__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i14__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateLayoutComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-layout',
                        templateUrl: './layout.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$3.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.MAT_DIALOG_DATA]
                        }] }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$1.FormBuilder }, { type: i2__namespace$3.ToastrService }, { type: i5__namespace.LayoutController }, { type: i5__namespace.LayoutService }];
        } });

    var CreateUpdateLayoutModule = /** @class */ (function () {
        function CreateUpdateLayoutModule() {
        }
        return CreateUpdateLayoutModule;
    }());
    CreateUpdateLayoutModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateLayoutModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CreateUpdateLayoutModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateLayoutModule, declarations: [CreateUpdateLayoutComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12$1.MatIconModule,
            i3$1.MatFormFieldModule,
            i6.MatButtonModule,
            i12.MatInputModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule,
            i4.MatSelectModule] });
    CreateUpdateLayoutModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateLayoutModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12$1.MatIconModule,
                i3$1.MatFormFieldModule,
                i6.MatButtonModule,
                i12.MatInputModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule,
                i4.MatSelectModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreateUpdateLayoutModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            CreateUpdateLayoutComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12$1.MatIconModule,
                            i3$1.MatFormFieldModule,
                            i6.MatButtonModule,
                            i12.MatInputModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule,
                            i4.MatSelectModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var SourceLoadComponent = /** @class */ (function () {
        function SourceLoadComponent(dialogRef, data, sourceLoadFB, deviceController, sourceService, storageService, toastrService, parameterService, tscCommonService) {
            this.dialogRef = dialogRef;
            this.data = data;
            this.sourceLoadFB = sourceLoadFB;
            this.deviceController = deviceController;
            this.sourceService = sourceService;
            this.storageService = storageService;
            this.toastrService = toastrService;
            this.parameterService = parameterService;
            this.tscCommonService = tscCommonService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.DialogEnum = i3.DialogEnum;
            this.FormActionEnum = i3.FormAction;
            this.PageTitleEnum = i3.PageTitleEnum;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.isEqual = true;
            this.parameterM = [new Parameter()];
            this.sourceType = [new i3.Static()];
            this.loadType = [new i3.Static()];
            this.infoMessage = 'Include source or load category and their type when mapping devices for type meters!';
            this.warningMessage = 'Please add either source or load type when mapping devices for every parameter!';
            this.layoutID = data['layoutID'];
            this.entityID = data['entityID'];
            this.deviceInfo = data['deviceInfo'];
            this.deviceParameter = data['deviceInfo']['parameter'];
            this.updateFromDialog = data['updateFromDialog'];
            this.dialogRef.disableClose = true;
        }
        SourceLoadComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getParameterByOrgID();
            this.getSourceConsumerType("source")
                .then(function (app) {
                _this.sourceType = app;
            });
            this.getSourceConsumerType("consumer")
                .then(function (app) {
                _this.loadType = app;
            });
            this.sourceLoadFGInit();
            this.deviceParameter.forEach(function (param) {
                _this.addParameterToFormArray(param);
            });
            if (this.deviceInfo && this.deviceInfo.mappingRecords && this.deviceInfo.mappingRecords.length == 0) {
                this.action = i3.FormAction.ADD;
            }
            else {
                this.action = i3.FormAction.UPDATE;
                this.desiredMappingArray = this.makeDesiredMappingArray();
                this.patchSourceLoadFG();
                this.updateFormControlsState();
            }
            this.intialObject = this.sourceLoadFG.value;
            this.sourceLoadFG.valueChanges.subscribe(function () {
                _this.isEqual = lodash.isEqual(_this.intialObject, _this.sourceLoadFG.value);
                if (_this.action == i3.FormAction.UPDATE) {
                    _this.updateDesiredMappingArray();
                }
            });
        };
        SourceLoadComponent.prototype.getParameterByOrgID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _c = this;
                            return [4 /*yield*/, this.parameterService.getParameterByOrgID(this.orgID)];
                        case 1:
                            _c.parameterM = (_d.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        SourceLoadComponent.prototype.getParameterLabel = function (paramID) {
            var parameter = this.tscCommonService.getUniqueObject(this.parameterM, 'id', paramID);
            return parameter ? parameter.label : '';
        };
        SourceLoadComponent.prototype.getSourceConsumerType = function (type) {
            return __awaiter(this, void 0, void 0, function () {
                var requestData, result;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            requestData = {
                                type: type
                            };
                            return [4 /*yield*/, this.sourceService.getSourceConsumerType(this.orgID, requestData)];
                        case 1:
                            result = _c.sent();
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        SourceLoadComponent.prototype.sourceLoadFGInit = function () {
            this.sourceLoadFG = this.sourceLoadFB.group({
                parameterMappingRecord: this.sourceLoadFB.array([])
            });
        };
        SourceLoadComponent.prototype.addParameterToFormArray = function (param) {
            var parameterFG = this.sourceLoadFB.group({
                parameterID: [param.id],
                isSource: [false],
                sourceType: [{ value: '', disabled: true }, i2$1.Validators.required],
                isLoad: [false],
                loadType: [{ value: '', disabled: true }, i2$1.Validators.required]
            });
            this.parameterMappingRecordFA.push(parameterFG);
        };
        Object.defineProperty(SourceLoadComponent.prototype, "parameterMappingRecordFA", {
            get: function () {
                return this.sourceLoadFG.get('parameterMappingRecord');
            },
            enumerable: false,
            configurable: true
        });
        SourceLoadComponent.prototype.addSourceType = function (event, index) {
            var isSource = this.parameterMappingRecordFA.at(index).get('isSource');
            isSource.setValue(event.checked);
            var sourceTypeControl = this.parameterMappingRecordFA.at(index).get('sourceType');
            if (isSource.value) {
                sourceTypeControl.enable();
                sourceTypeControl.setValidators([i2$1.Validators.required]);
            }
            else {
                sourceTypeControl.disable();
                sourceTypeControl.clearValidators();
                sourceTypeControl.reset('');
            }
            sourceTypeControl.updateValueAndValidity();
        };
        SourceLoadComponent.prototype.addLoadType = function (event, index) {
            var isLoad = this.parameterMappingRecordFA.at(index).get('isLoad');
            isLoad.setValue(event.checked);
            var loadTypeControl = this.parameterMappingRecordFA.at(index).get('loadType');
            if (isLoad.value) {
                loadTypeControl.enable();
                loadTypeControl.setValidators([i2$1.Validators.required]);
            }
            else {
                loadTypeControl.disable();
                loadTypeControl.clearValidators();
                loadTypeControl.reset('');
            }
            loadTypeControl.updateValueAndValidity();
        };
        SourceLoadComponent.prototype.makeDesiredMappingArray = function () {
            var mappingArray = [];
            if (this.action == i3.FormAction.ADD) {
                this.parameterMappingRecordFA.controls.forEach(function (parameter, index) {
                    var parameterID = parameter.get('parameterID').value;
                    var mapping = [];
                    var isSource = parameter.get('isSource').value;
                    var sourceType = parameter.get('sourceType').value || '';
                    if (isSource) {
                        mapping.push({
                            mappingID: null,
                            type: 'SOURCE',
                            value: sourceType
                        });
                    }
                    var isLoad = parameter.get('isLoad').value;
                    var loadType = parameter.get('loadType').value || '';
                    if (isLoad) {
                        mapping.push({
                            mappingID: null,
                            type: 'LOAD',
                            value: loadType
                        });
                    }
                    if (mapping.length > 0) {
                        mappingArray.push({
                            parameterID: parameterID,
                            mapping: mapping
                        });
                    }
                });
            }
            else if (this.action == i3.FormAction.UPDATE) {
                if (this.deviceInfo.mappingRecords) {
                    this.deviceInfo.mappingRecords.forEach(function (record) {
                        var _a;
                        var parameterID = record.parameterID;
                        var mapping = ((_a = record.mapping) === null || _a === void 0 ? void 0 : _a.map(function (mapping) {
                            return {
                                mappingID: mapping.mappingID || null,
                                type: mapping.type || '',
                                value: mapping.value || ''
                            };
                        })) || [];
                        mappingArray.push({
                            parameterID: parameterID,
                            mapping: mapping
                        });
                    });
                }
            }
            return mappingArray;
        };
        SourceLoadComponent.prototype.patchSourceLoadFG = function () {
            var _this = this;
            this.desiredMappingArray.forEach(function (mappingObject) {
                var _a, _b;
                var parameterID = mappingObject.parameterID;
                var parameterFormControl = _this.parameterMappingRecordFA.controls.find(function (formControl) { return formControl.get('parameterID').value == parameterID; });
                if (parameterFormControl) {
                    var mapping = mappingObject.mapping;
                    var isSource = mapping.some(function (value) { return value.type == 'SOURCE'; });
                    var isLoad = mapping.some(function (value) { return value.type == 'LOAD'; });
                    var sourceType = ((_a = mapping.find(function (value) { return value.type == 'SOURCE'; })) === null || _a === void 0 ? void 0 : _a.value) || '';
                    var loadType = ((_b = mapping.find(function (value) { return value.type == 'LOAD'; })) === null || _b === void 0 ? void 0 : _b.value) || '';
                    parameterFormControl.patchValue({
                        isSource: isSource,
                        isLoad: isLoad,
                        sourceType: sourceType,
                        loadType: loadType
                    });
                }
            });
        };
        SourceLoadComponent.prototype.updateFormControlsState = function () {
            this.parameterMappingRecordFA.controls.forEach(function (parameter, index) {
                var isSource = parameter.get('isSource').value;
                var sourceTypeControl = parameter.get('sourceType');
                if (isSource) {
                    sourceTypeControl.enable();
                    sourceTypeControl.setValidators([i2$1.Validators.required]);
                }
                else {
                    sourceTypeControl.disable();
                    sourceTypeControl.clearValidators();
                    sourceTypeControl.reset('');
                }
                sourceTypeControl.updateValueAndValidity();
                var isLoad = parameter.get('isLoad').value;
                var loadTypeControl = parameter.get('loadType');
                if (isLoad) {
                    loadTypeControl.enable();
                    loadTypeControl.setValidators([i2$1.Validators.required]);
                }
                else {
                    loadTypeControl.disable();
                    loadTypeControl.clearValidators();
                    loadTypeControl.reset('');
                }
                loadTypeControl.updateValueAndValidity();
            });
        };
        SourceLoadComponent.prototype.updateDesiredMappingArray = function () {
            var mappingArray = [];
            this.parameterMappingRecordFA.controls.forEach(function (parameter) {
                var parameterID = parameter.get('parameterID').value;
                var mapping = [];
                var isSource = parameter.get('isSource').value;
                var sourceType = parameter.get('sourceType').value || '';
                if (isSource) {
                    mapping.push({
                        mappingID: null,
                        type: 'SOURCE',
                        value: sourceType
                    });
                }
                var isLoad = parameter.get('isLoad').value;
                var loadType = parameter.get('loadType').value || '';
                if (isLoad) {
                    mapping.push({
                        mappingID: null,
                        type: 'LOAD',
                        value: loadType
                    });
                }
                if (mapping.length > 0) {
                    mappingArray.push({
                        parameterID: parameterID,
                        mapping: mapping
                    });
                }
            });
            return mappingArray;
        };
        SourceLoadComponent.prototype.validateSourceOrLoad = function () {
            var formControls = this.parameterMappingRecordFA.controls;
            var validFormControls = formControls.filter(function (control) {
                var isSource = control.get('isSource').value;
                var isLoad = control.get('isLoad').value;
                return isSource || isLoad;
            });
            if (validFormControls.length == formControls.length) {
                return true;
            }
            else {
                this.toastrService.openToast(i2$3.ToastrTitle.WARNING, this.warningMessage, i2$3.ToastrColor.WARNING);
                return false;
            }
        };
        SourceLoadComponent.prototype.sourceLoadSubmit = function () {
            var _this = this;
            if (this.validateSourceOrLoad()) {
                if (this.updateFromDialog == true) {
                    this.desiredMappingArray = this.updateDesiredMappingArray();
                    if (this.desiredMappingArray.length == 0) {
                        this.toastrService.openToast(i2$3.ToastrTitle.WARNING, this.warningMessage, i2$3.ToastrColor.WARNING);
                    }
                    else {
                        if (this.sourceLoadFG.invalid) {
                            this.sourceLoadFG.markAllAsTouched();
                            this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                            return;
                        }
                        this.deviceController.updateSourceLoad(this.orgID, this.layoutID, this.entityID, this.deviceInfo.id, this.desiredMappingArray).subscribe(function (updateRes) {
                            _this.dialogRef.close({
                                result: i3.DialogEnum.SUCCESS_DR,
                                action: i3.FormAction.UPDATE
                            });
                        }, function (error) {
                            console.log('error in updateSourceLoad() - ', error);
                        });
                    }
                }
                else {
                    if (this.action == i3.FormAction.ADD) {
                        this.desiredMappingArray = this.makeDesiredMappingArray();
                    }
                    else if (this.action == i3.FormAction.UPDATE) {
                        this.desiredMappingArray = this.updateDesiredMappingArray();
                        if (this.desiredMappingArray.length == 0) {
                            this.toastrService.openToast(i2$3.ToastrTitle.INFO, this.infoMessage, i2$3.ToastrColor.INFO);
                        }
                    }
                    if (this.sourceLoadFG.invalid) {
                        this.sourceLoadFG.markAllAsTouched();
                        this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                        return;
                    }
                    this.dialogRef.close({
                        result: i3.DialogEnum.SUCCESS_DR,
                        sourceLoadMappingRes: this.desiredMappingArray
                    });
                }
            }
        };
        SourceLoadComponent.prototype.cancel = function () {
            if (this.updateFromDialog == true) {
                if (this.updateDesiredMappingArray().length == 0) {
                    this.toastrService.openToast(i2$3.ToastrTitle.WARNING, this.warningMessage, i2$3.ToastrColor.WARNING);
                }
                else {
                    this.dialogRef.close({
                        result: i3.DialogEnum.SUCCESS_DR,
                        action: i3.FormAction.CANCEL
                    });
                }
            }
            else {
                if (this.action == i3.FormAction.ADD) {
                    this.toastrService.openToast(i2$3.ToastrTitle.INFO, this.infoMessage, i2$3.ToastrColor.INFO);
                }
                var sourceLoadMappingRes = this.action == i3.FormAction.ADD ? [] : this.makeDesiredMappingArray();
                this.dialogRef.close({
                    result: i3.DialogEnum.CLOSE_DR,
                    sourceLoadMappingRes: sourceLoadMappingRes
                });
            }
        };
        return SourceLoadComponent;
    }());
    SourceLoadComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadComponent, deps: [{ token: i1__namespace$3.MatDialogRef }, { token: i1$3.MAT_DIALOG_DATA }, { token: i2__namespace$1.FormBuilder }, { token: DeviceController }, { token: SourceService }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: ParameterService }, { token: i3__namespace.TSCCommonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SourceLoadComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourceLoadComponent, selector: "lib-source-load", ngImport: i0__namespace, template: "<div mat-dialog-title>\n    <strong class=\"dialogTitle\">\n        {{ action == FormActionEnum.ADD ? PageTitleEnum.ADD : PageTitleEnum.UPDATE }} Source/Consumer\n    </strong>\n</div>\n<div class=\"matDialogContent\" mat-dialog-content>\n    <form [formGroup]=\"sourceLoadFG\">\n        <ng-container formArrayName=\"parameterMappingRecord\">\n            <div class=\"row\">\n                <div class=\"col-sm-12 mb-3\" *ngFor=\"let param of parameterMappingRecordFA.controls; let i = index\">\n                    <ng-container [formGroupName]=\"i\">\n                        <mat-card class=\"border card cardOverwrite\">\n                            <div class=\"cardTitle\">\n                                {{ getParameterLabel(param.get('parameterID').value) }}\n                            </div>\n                            <div class=\"row mt-2\">\n                                <div class=\"col-sm-4\">\n                                    <mat-checkbox (change)=\"addSourceType($event, i)\" formControlName=\"isSource\">Source</mat-checkbox>\n                                </div>\n                                <div class=\"col-sm-8\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select source type</mat-label>\n\n                                        <mat-select formControlName=\"sourceType\" [disabled]=\"!parameterMappingRecordFA.controls[i].get('isSource').value\"\n                                            required>\n                                            <ng-container *ngIf=\"sourceType && sourceType.length > 0 && sourceType[0]['id']; else noSourceType\">\n                                                <mat-option *ngFor=\"let type of sourceType\" [value]=\"type.id\">\n                                                    {{ type.name }}\n                                                </mat-option>\n                                            </ng-container>\n                                            <ng-template #noSourceType>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n\n                                        <mat-error *ngIf=\"this.parameterMappingRecordFA.controls[i].get('sourceType').hasError('required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                </div>\n                            <div class=\"row mt-2\">\n                                <div class=\"col-sm-4\">\n                                    <mat-checkbox (change)=\"addLoadType($event, i)\" formControlName=\"isLoad\">Load</mat-checkbox>\n                                </div>\n                                <div class=\"col-sm-8\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select consumer type</mat-label>\n\n                                        <mat-select formControlName=\"loadType\" [disabled]=\"!parameterMappingRecordFA.controls[i].get('isLoad').value\"\n                                            required>\n                                            <ng-container *ngIf=\"loadType && loadType.length > 0 && loadType[0]['id']; else noLoadType\">\n                                                <mat-option *ngFor=\"let type of loadType\" [value]=\"type.id\">\n                                                    {{ type.name }}\n                                                </mat-option>\n                                            </ng-container>\n                                            <ng-template #noLoadType>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n\n                                        <mat-error *ngIf=\"this.parameterMappingRecordFA.controls[i].get('loadType').hasError('required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </mat-card>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    </form>\n</div>\n<div mat-dialog-footer align=\"end\">\n    <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"cancel()\">\n        {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n    </button>\n    <button class=\"btn btn-sm btn-success\" type=\"submit\" [ngClass]=\"{'disabled': isEqual}\" (click)=\"sourceLoadSubmit()\">\n        {{ action == FormActionEnum.ADD ? ButtonLabelEnum.ADD_BTN_LABEL : ButtonLabelEnum.UPDATE_BTN_LABEL }}\n    </button>\n</div>", components: [{ type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10__namespace$3.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i1__namespace$3.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-source-load',
                        templateUrl: './source-load.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$3.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.MAT_DIALOG_DATA]
                        }] }, { type: i2__namespace$1.FormBuilder }, { type: DeviceController }, { type: SourceService }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: ParameterService }, { type: i3__namespace.TSCCommonService }];
        } });

    var SourceLoadModule = /** @class */ (function () {
        function SourceLoadModule() {
        }
        return SourceLoadModule;
    }());
    SourceLoadModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourceLoadModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule, declarations: [SourceLoadComponent], imports: [i14.CommonModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i12$1.MatIconModule,
            i3$1.MatFormFieldModule,
            i6.MatButtonModule,
            i12.MatInputModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule,
            i4.MatSelectModule,
            i10$3.MatCheckboxModule] });
    SourceLoadModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule, imports: [[
                i14.CommonModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i12$1.MatIconModule,
                i3$1.MatFormFieldModule,
                i6.MatButtonModule,
                i12.MatInputModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule,
                i4.MatSelectModule,
                i10$3.MatCheckboxModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceLoadModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            SourceLoadComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i12$1.MatIconModule,
                            i3$1.MatFormFieldModule,
                            i6.MatButtonModule,
                            i12.MatInputModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule,
                            i4.MatSelectModule,
                            i10$3.MatCheckboxModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var PageComponent = /** @class */ (function () {
        function PageComponent(router, storageService, layoutController, commonEvent, dialog) {
            this.router = router;
            this.storageService = storageService;
            this.layoutController = layoutController;
            this.commonEvent = commonEvent;
            this.dialog = dialog;
            this.TABLE_CONSTANT = i3.TABLE_CONSTANT;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.faPlus = freeSolidSvgIcons.faPlus;
            this.faEllipsisV = freeSolidSvgIcons.faEllipsisV;
            this.displayedColumn = ['id', 'name', 'description', 'option'];
            this.resultLength = 0;
            this.dataSource = [];
            this.searchFlag = false;
            this.searchArr = [];
        }
        PageComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
        };
        PageComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            rxjs.merge(this.paginator.page, this.sort.sortChange, rxjs.fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(operators.startWith({}), operators.switchMap(function () {
                _this.searchArr = [];
                if (_this.searchFlag) {
                    _this.searchArr.push('name:' + _this.searchValue);
                }
                return _this.layoutController.getLayoutByPage(_this.paginator.pageIndex, _this.paginator.pageSize, _this.sort.active, _this.sort.direction, _this.searchArr, _this.orgID).pipe(operators.catchError(function () { return rxjs.of(null); }));
            }), operators.map(function (response) {
                if (response == null) {
                    _this.resultLength = 0;
                    return [];
                }
                _this.resultLength = response["totalCount"];
                return response["records"];
            })).subscribe(function (dataSource) {
                _this.dataSource = dataSource;
            });
        };
        PageComponent.prototype.searchFn = function (value) {
            this.searchFlag = true;
            this.searchValue = value;
            if (value.length == 0) {
                this.resetSearch();
            }
            else {
                this.paginator.pageIndex = 0;
            }
            this.refreshBtn.nativeElement.click();
        };
        PageComponent.prototype.resetSearch = function () {
            this.searchFlag = false;
            this.searchBar.searchClear();
        };
        PageComponent.prototype.navigateToViewPage = function (id) {
            this.router.navigate(["layout/" + id + "/list"]);
        };
        PageComponent.prototype.openCreateUpdateLayoutDialog = function (action, layoutID) {
            var _this = this;
            var dialogRef;
            if (action == 'create') {
                dialogRef = this.dialog.open(CreateUpdateLayoutComponent, {
                    data: {
                        action: action
                    },
                    minWidth: '550px',
                    maxWidth: '550px'
                });
                dialogRef.afterClosed().subscribe(function (dialogRes) {
                    if (dialogRes.result == i3.DialogEnum.SUCCESS_DR) {
                        // Emit the layoutChange event
                        _this.commonEvent.layoutChange.next('YES');
                        _this.router.navigate(["layout/" + dialogRes.layoutID + "/list"]);
                    }
                });
            }
            else {
                dialogRef = this.dialog.open(CreateUpdateLayoutComponent, {
                    data: {
                        action: action,
                        layoutID: layoutID
                    },
                    minWidth: '550px',
                    maxWidth: '550px'
                });
                dialogRef.afterClosed().subscribe(function (dialogRes) {
                    if (dialogRes.result == i3.DialogEnum.SUCCESS_DR) {
                        // Emit the layoutChange event
                        _this.commonEvent.layoutChange.next('YES');
                        window.location.reload();
                    }
                });
            }
        };
        PageComponent.prototype.openDeleteLayoutDialog = function (layoutID, layoutName) {
            var _this = this;
            var dialog = this.dialog.open(i3.DialogOneComponent, {
                minWidth: '450px',
                maxWidth: '450px',
                data: {
                    type: i3.DialogOneEnum.DELETE,
                    icon: 'dangerous',
                    header: 'Delete layout?',
                    body: '<b>' + layoutName + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                    buttonOne: i3.ButtonLabelEnum.CANCEL_BTN_LABEL,
                    buttonTwo: i3.ButtonLabelEnum.DELETE_BTN_LABEL
                }
            });
            dialog.afterClosed().subscribe(function (res) {
                if (res) {
                    _this.deleteLayout(layoutID);
                }
            });
        };
        PageComponent.prototype.deleteLayout = function (layoutID) {
            var _this = this;
            this.layoutController.deleteLayout(this.orgID, layoutID).subscribe(function (deleteRes) {
                // Emit the layoutChange event
                _this.commonEvent.layoutChange.next('YES');
                _this.refreshBtn.nativeElement.click();
            });
        };
        return PageComponent;
    }());
    PageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageComponent, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$2.StorageService }, { token: i5__namespace.LayoutController }, { token: i3__namespace.CommonEvent }, { token: i1__namespace$3.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageComponent, selector: "app-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Layout</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar searchBy=\"name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n                <a class=\"btn btn-sm btn-success btnBase\" matRipple (click)=\"openCreateUpdateLayoutDialog('create', null)\">\n                    <fa-icon [icon]=\"faPlus\"></fa-icon>&nbsp; Layout\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <table mat-table [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"id\" matSortDirection=\"asc\"\n        matSortDisableClear>\n\n        <ng-container matColumnDef=\"id\">\n            <th class=\"columnWidth1 px-3\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>\n                ID\n            </th>\n            <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\" (click)=\"navigateToViewPage(row['id'])\">\n                {{ row['id'] }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"name\">\n            <th class=\"columnWidth2 px-3\" mat-header-cell *matHeaderCellDef> Name </th>\n            <td class=\"columnWidth2 px-3\" mat-cell *matCellDef=\"let row\"\n                [matTooltip]=\"row?.['name']?.length>24? row['name']: ''\" matTooltipPosition=\"above\"\n                matTooltipClass=\"nameTooltip\" (click)=\"navigateToViewPage(row['id'])\">\n                {{ row?.['name'] | dotdotdot:24 }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"description\">\n            <th class=\"columnWidth2 px-3\" mat-header-cell *matHeaderCellDef> Description </th>\n            <td class=\"columnWidth2 px-3\" mat-cell *matCellDef=\"let row\"\n                [matTooltip]=\"row?.['description']?.length>24? row['description']: ''\" matTooltipPosition=\"above\"\n                matTooltipClass=\"nameTooltip\" (click)=\"navigateToViewPage(row['id'])\">\n                {{ row?.['description'] | dotdotdot:24 }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"option\">\n            <th class=\"columnWidth3\" mat-header-cell *matHeaderCellDef> Action </th>\n            <td class=\"columnWidth3 text-center\" mat-cell *matCellDef=\"let row\">\n                <div class=\"d-flex align-items-center\">\n                    <div class=\"btn-group\" ngbDropdown placement=\"left\">\n                        <button type=\"button\" ngbDropdownToggle class=\"dropdown-after dropdownAfter btn\">\n                            <fa-icon [icon]=\"faEllipsisV\"></fa-icon>\n                        </button>\n                        <div ngbDropdownMenu>\n                            <button class=\"dropdown-item\" (click)=\"openCreateUpdateLayoutDialog('update', row.id)\">\n                                {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                            </button>\n                            <!-- <button class=\"btn btn-outline-danger rounded-0 dropdown-item\" (click)=\"openDeleteLayoutDialog(row.id, row.name)\">\n                                {{ ButtonLabelEnum.DELETE_BTN_LABEL }}\n                            </button> -->\n                        </div>\n                    </div>\n                </div>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\" class=\"data-row\"></tr>\n\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", styles: [".columnWidth1{min-width:120px}.columnWidth2{min-width:200px}.columnWidth3{min-width:140px}\n"], components: [{ type: i3__namespace.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i6__namespace$2.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i7__namespace$1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i8__namespace.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i7__namespace$1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7__namespace$1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i9__namespace$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i8__namespace.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i7__namespace$1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7__namespace$1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7__namespace$1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7__namespace$1.MatCellDef, selector: "[matCellDef]" }, { type: i7__namespace$1.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i12__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i12__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i12__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i7__namespace$1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7__namespace$1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7__namespace$1.MatNoDataRow, selector: "ng-template[matNoDataRow]" }], pipes: { "dotdotdot": i3__namespace.EllipsisPipeService } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-page',
                        templateUrl: './page.component.html',
                        styleUrls: ['./page.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$2.StorageService }, { type: i5__namespace.LayoutController }, { type: i3__namespace.CommonEvent }, { type: i1__namespace$3.MatDialog }]; }, propDecorators: { sort: [{
                    type: i0.ViewChild,
                    args: ['sort']
                }], paginator: [{
                    type: i0.ViewChild,
                    args: ['paginator']
                }], refreshBtn: [{
                    type: i0.ViewChild,
                    args: ['refreshBtn']
                }], searchBar: [{
                    type: i0.ViewChild,
                    args: ['searchBar']
                }] } });

    var routes$a = [
        {
            path: '',
            component: PageComponent
        }
    ];
    var PageRoutingModule = /** @class */ (function () {
        function PageRoutingModule() {
        }
        return PageRoutingModule;
    }());
    PageRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PageRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    PageRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$a)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$a)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var PageModule = /** @class */ (function () {
        function PageModule() {
        }
        return PageModule;
    }());
    PageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageModule, declarations: [PageComponent], imports: [i14.CommonModule,
            PageRoutingModule,
            i3.SearchBarOneModule,
            i3.EllipsisPipeModule,
            i12$2.NgbModule,
            i6$2.FontAwesomeModule,
            i12$1.MatIconModule,
            i6.MatButtonModule,
            i10$1.MatRippleModule,
            i7$1.MatTableModule,
            i9$2.MatPaginatorModule,
            i8.MatSortModule,
            i1$3.MatDialogModule,
            i11.MatTooltipModule] });
    PageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageModule, imports: [[
                i14.CommonModule,
                PageRoutingModule,
                i3.SearchBarOneModule,
                i3.EllipsisPipeModule,
                i12$2.NgbModule,
                i6$2.FontAwesomeModule,
                i12$1.MatIconModule,
                i6.MatButtonModule,
                i10$1.MatRippleModule,
                i7$1.MatTableModule,
                i9$2.MatPaginatorModule,
                i8.MatSortModule,
                i1$3.MatDialogModule,
                i11.MatTooltipModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            PageComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            PageRoutingModule,
                            i3.SearchBarOneModule,
                            i3.EllipsisPipeModule,
                            i12$2.NgbModule,
                            i6$2.FontAwesomeModule,
                            i12$1.MatIconModule,
                            i6.MatButtonModule,
                            i10$1.MatRippleModule,
                            i7$1.MatTableModule,
                            i9$2.MatPaginatorModule,
                            i8.MatSortModule,
                            i1$3.MatDialogModule,
                            i11.MatTooltipModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ChartComponent = /** @class */ (function () {
        function ChartComponent(activatedRoute, storageService, entityService) {
            this.activatedRoute = activatedRoute;
            this.storageService = storageService;
            this.entityService = entityService;
            this.entityDeviceM = new ParameterEntity();
            this.allowUpdateEntityTree = false;
        }
        ChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.activatedRoute.parent.parent.paramMap.subscribe(function (params) {
                _this.layoutID = params.get('layoutID');
                _this.getEntitiesWithDevicesByLayoutID();
            });
        };
        ChartComponent.prototype.getEntitiesWithDevicesByLayoutID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var requestBody, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            requestBody = {
                                'entityType': ['ALL']
                            };
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntitiesWithDevicesByLayoutID(this.orgID, this.layoutID, requestBody, 'NO')];
                        case 1:
                            _a.entityDeviceM = (_b.sent());
                            if (this.entityDeviceM) {
                                this.drawChart();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ChartComponent.prototype.drawChart = function () {
            var convertNode = function (node) { return ({
                name: node.name,
                children: node.children ? node.children.map(convertNode) : [],
                type: node.type
            }); };
            var chartData = convertNode(this.entityDeviceM);
            this.chartDataOption = {
                tooltip: {
                    trigger: 'item',
                    triggerOn: 'mousemove'
                },
                series: [
                    {
                        type: 'tree',
                        id: 0,
                        name: 'Device',
                        data: [chartData],
                        top: '10%',
                        left: '15%',
                        bottom: '2%',
                        right: '15%',
                        symbolSize: 7,
                        edgeShape: 'polyline',
                        edgeForkPosition: '63%',
                        initialTreeDepth: 999999,
                        lineStyle: {
                            width: 2
                        },
                        label: {
                            backgroundColor: '#fff',
                            position: 'left',
                            verticalAlign: 'middle',
                            align: 'right'
                        },
                        leaves: {
                            label: {
                                position: 'right',
                                verticalAlign: 'middle',
                                align: 'left',
                                // color: 'green',
                            }
                        },
                        emphasis: {
                            focus: 'descendant'
                        },
                        expandAndCollapse: true,
                        animationDuration: 550,
                        animationDurationUpdate: 750
                    }
                ]
            };
        };
        return ChartComponent;
    }());
    ChartComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$2.StorageService }, { token: EntityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ChartComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ChartComponent, selector: "app-chart", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div echarts [options]=\"chartDataOption\"></div>\n            </div>\n        </div>\n    </div>\n</div>", directives: [{ type: i4__namespace$2.NgxEchartsDirective, selector: "echarts, [echarts]", inputs: ["options", "theme", "loading", "initOpts", "merge", "autoResize", "loadingType", "loadingOpts"], outputs: ["chartInit", "optionsError", "chartClick", "chartDblClick", "chartMouseDown", "chartMouseMove", "chartMouseUp", "chartMouseOver", "chartMouseOut", "chartGlobalOut", "chartContextMenu", "chartLegendSelectChanged", "chartLegendSelected", "chartLegendUnselected", "chartLegendScroll", "chartDataZoom", "chartDataRangeSelected", "chartTimelineChanged", "chartTimelinePlayChanged", "chartRestore", "chartDataViewChanged", "chartMagicTypeChanged", "chartPieSelectChanged", "chartPieSelected", "chartPieUnselected", "chartMapSelectChanged", "chartMapSelected", "chartMapUnselected", "chartAxisAreaSelected", "chartFocusNodeAdjacency", "chartUnfocusNodeAdjacency", "chartBrush", "chartBrushEnd", "chartBrushSelected", "chartRendered", "chartFinished"], exportAs: ["echarts"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-chart',
                        templateUrl: './chart.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$2.StorageService }, { type: EntityService }]; } });

    var routes$9 = [
        {
            path: '',
            component: ChartComponent
        }
    ];
    var ChartRoutingModule = /** @class */ (function () {
        function ChartRoutingModule() {
        }
        return ChartRoutingModule;
    }());
    ChartRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ChartRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ChartRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$9)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$9)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ChartModule = /** @class */ (function () {
        function ChartModule() {
        }
        return ChartModule;
    }());
    ChartModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ChartModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartModule, declarations: [ChartComponent], imports: [i14.CommonModule,
            ChartRoutingModule, i4__namespace$2.NgxEchartsModule] });
    ChartModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartModule, imports: [[
                i14.CommonModule,
                ChartRoutingModule,
                i4$2.NgxEchartsModule.forRoot({
                    echarts: function () { return import('echarts'); }
                })
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ChartModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ChartComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ChartRoutingModule,
                            i4$2.NgxEchartsModule.forRoot({
                                echarts: function () { return import('echarts'); }
                            })
                        ]
                    }]
            }] });

    // /tsc-library/
    var ListComponent = /** @class */ (function () {
        function ListComponent(router, activatedRoute, storageService, entityController, dialog) {
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.storageService = storageService;
            this.entityController = entityController;
            this.dialog = dialog;
            this.entities = [new ParameterEntity()];
        }
        ListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.activatedRoute.parent.parent.paramMap.subscribe(function (params) {
                _this.layoutID = params.get('layoutID');
                _this.getEntitiesByLayoutID();
            });
        };
        ListComponent.prototype.getEntitiesByLayoutID = function () {
            var _this = this;
            this.entityController.getEntitiesByLayoutID(this.orgID, this.layoutID)
                .subscribe(function (entityTreeRes) {
                _this.entities = entityTreeRes;
            }, function (error) {
                console.log('error in getEntitiesByLayoutID() -', error);
            });
        };
        ListComponent.prototype.hasContent = function (entity) {
            return entity && entity.children && entity.children.length > 0;
        };
        ListComponent.prototype.mapDevice = function (entityID) {
            this.router.navigate(["layout/" + this.layoutID + "/entity/" + entityID + "/map-device/add"]);
        };
        ListComponent.prototype.viewMappedDevice = function (entityID) {
            this.router.navigate(["layout/" + this.layoutID + "/entity/" + entityID + "/map-device/view"]);
        };
        ListComponent.prototype.openEntityDialog = function (entityID, action) {
            var _this = this;
            var dialog = this.dialog.open(CreateUpdateEntityComponent, {
                data: {
                    action: action,
                    entityID: entityID,
                    layoutID: this.layoutID,
                },
                minWidth: '500px',
                maxWidth: '500px',
            });
            dialog.afterClosed()
                .subscribe(function (result) {
                if (result == i3.DialogEnum.SUCCESS_DR) {
                    _this.getEntitiesByLayoutID();
                }
            });
        };
        ListComponent.prototype.openDeleteDialog = function (entityID, entityName) {
            var _this = this;
            var dialog = this.dialog.open(i3.DialogOneComponent, {
                minWidth: '450px',
                maxWidth: '450px',
                data: {
                    type: i3.DialogOneEnum.DELETE,
                    icon: 'dangerous',
                    header: 'Delete entity?',
                    body: 'This will delete the entity <b>' + entityName + '</b> and all its children entities.</br></br>Are you sure you want to continue?',
                    buttonOne: i3.ButtonLabelEnum.CANCEL_BTN_LABEL,
                    buttonTwo: i3.ButtonLabelEnum.DELETE_BTN_LABEL
                }
            });
            dialog.afterClosed().subscribe(function (res) {
                if (res) {
                    _this.deleteEntity(entityID);
                }
            });
        };
        ListComponent.prototype.deleteEntity = function (entityID) {
            var _this = this;
            this.entityController.deleteEntity(this.orgID, this.layoutID, entityID).subscribe(function (deleteRes) {
                _this.getEntitiesByLayoutID();
            });
        };
        return ListComponent;
    }());
    ListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListComponent, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$2.StorageService }, { token: EntityController }, { token: i1__namespace$3.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ListComponent, selector: "app-list", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <!-- template call for entityTemplate -->\n                <mat-accordion>\n                    <ng-container *ngFor=\"let entity of entities\">\n                        <ng-container *ngTemplateOutlet=\"entityTemplate; \n                            context: {\n                                entity: entity,\n                                panelTitleClass: 'fw-bold',\n                                expansionPanelClass : 'cardBackgroundColor',\n                                expanded: hasContent(entity),\n                                allowUpdateDelete: false\n                            }\">\n                        </ng-container>\n                    </ng-container>\n                </mat-accordion>\n                <!-- /template call for entityTemplate/ -->\n\n                <!-- template for recursive entity -->\n                <ng-template #entityTemplate let-entity=\"entity\" let-panelTitleClass=\"panelTitleClass\"\n                    let-expansionPanelClass=\"expansionPanelClass\" let-expanded=\"expanded\" let-allowUpdateDelete=\"allowUpdateDelete\">\n                    <mat-expansion-panel class=\"mt-2 cardOverwrite\" [class]=\"expansionPanelClass\" [expanded]=\"expanded\"\n                        [disabled]=\"!hasContent(entity)\" [hideToggle]=\"!hasContent(entity)\">\n\n                        <mat-expansion-panel-header class=\"matAccRightAlignedHeader\">\n                            <mat-panel-title>\n                                <div class=\"d-flex align-items-center\">\n                                    <span [class]=\"panelTitleClass\">\n                                        {{ entity.name }}\n                                    </span> <span class=\"badge rounded-pill info ms-2\">\n                                        {{ entity.type }}\n                                    </span>\n                                </div>\n                            </mat-panel-title>\n                            <mat-panel-description class=\"float-end\">\n                                <span class=\"material-symbols-outlined text-primary me-3\" #tooltip=\"matTooltip\" matTooltipPosition=\"above\"\n                                    matTooltipClass=\"nameTooltip\" matTooltip=\"Add entity\"\n                                    (click)=\"openEntityDialog(entity.id, 'create'); $event.stopPropagation()\">\n                                    add_circle\n                                </span>\n                                <span class=\"material-symbols-outlined text-primary me-3\" #tooltip=\"matTooltip\" matTooltipPosition=\"above\"\n                                    matTooltipClass=\"nameTooltip\" matTooltip=\"Map device\" (click)=\"mapDevice(entity.id); $event.stopPropagation()\">\n                                    devices\n                                </span>\n                                <span class=\"material-symbols-outlined text-secondary me-3\" #tooltip=\"matTooltip\"\n                                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"View mapped device\"\n                                    (click)=\"viewMappedDevice(entity.id); $event.stopPropagation()\">\n                                    visibility\n                                </span>\n                                <span class=\"material-symbols-outlined text-secondary me-3\" *ngIf=\"allowUpdateDelete\" #tooltip=\"matTooltip\"\n                                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Edit entity\"\n                                    (click)=\"openEntityDialog(entity.id, 'update'); $event.stopPropagation()\">\n                                    edit_square\n                                </span>\n                                <span class=\"material-symbols-outlined text-danger me-3\" *ngIf=\"allowUpdateDelete\" #tooltip=\"matTooltip\"\n                                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Delete entity\"\n                                    (click)=\"openDeleteDialog(entity.id, entity.name); $event.stopPropagation()\">\n                                    delete\n                                </span>\n                            </mat-panel-description>\n                        </mat-expansion-panel-header>\n\n                        <ng-container *ngIf=\"entity.children && entity.children.length > 0\">\n                            <ng-container *ngFor=\"let child of entity.children\">\n                                <ng-container *ngTemplateOutlet=\"entityTemplate; \n                                        context:{ \n                                            entity: child,\n                                            panelTitleClass: 'text-dark',\n                                            expansionPanelClass : 'border',\n                                            expanded: 'false',\n                                            allowUpdateDelete: true\n                                        }\">\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n\n                    </mat-expansion-panel>\n                </ng-template>\n                <!-- /template for recursive entity/ -->\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i5__namespace$1.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i5__namespace$1.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }], directives: [{ type: i5__namespace$1.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5__namespace$1.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i5__namespace$1.MatExpansionPanelDescription, selector: "mat-panel-description" }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-list',
                        templateUrl: './list.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$2.StorageService }, { type: EntityController }, { type: i1__namespace$3.MatDialog }]; } });

    var routes$8 = [
        {
            path: '',
            component: ListComponent
        }
    ];
    var ListRoutingModule = /** @class */ (function () {
        function ListRoutingModule() {
        }
        return ListRoutingModule;
    }());
    ListRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ListRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ListRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$8)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$8)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ListModule = /** @class */ (function () {
        function ListModule() {
        }
        return ListModule;
    }());
    ListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListModule, declarations: [ListComponent], imports: [i14.CommonModule,
            ListRoutingModule,
            CreateUpdateEntityModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i12$1.MatIconModule,
            i3$1.MatFormFieldModule,
            i6.MatButtonModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule,
            i5$1.MatExpansionModule] });
    ListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListModule, imports: [[
                i14.CommonModule,
                ListRoutingModule,
                CreateUpdateEntityModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i12$1.MatIconModule,
                i3$1.MatFormFieldModule,
                i6.MatButtonModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule,
                i5$1.MatExpansionModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ListComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ListRoutingModule,
                            CreateUpdateEntityModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i12$1.MatIconModule,
                            i3$1.MatFormFieldModule,
                            i6.MatButtonModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule,
                            i5$1.MatExpansionModule
                        ]
                    }]
            }] });

    var routes$7 = [];
    var TabRoutingModule = /** @class */ (function () {
        function TabRoutingModule() {
        }
        return TabRoutingModule;
    }());
    TabRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TabRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    TabRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$7)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$7)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var TabComponent = /** @class */ (function () {
        function TabComponent(router, activatedRoute, storageService, layoutService) {
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.storageService = storageService;
            this.layoutService = layoutService;
            this.layoutM = new i5.Layout();
            this.tab = [];
        }
        TabComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.activatedRoute.paramMap.subscribe(function (params) {
                _this.layoutID = params.get('layoutID');
                _this.getLayoutByID();
                _this.tab = [
                    {
                        icon: 'list',
                        label: 'List Representation',
                        routerLink: "/layout/" + _this.layoutID + "/list"
                    },
                    {
                        icon: 'grid_view',
                        label: 'Chart Representation',
                        routerLink: "/layout/" + _this.layoutID + "/chart"
                    }
                ];
                _this.setActiveLink();
            });
            this.router.events.subscribe(function (val) {
                if (val instanceof i1$1.NavigationEnd) {
                    _this.setActiveLink();
                }
            });
        };
        TabComponent.prototype.getLayoutByID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.layoutService.getLayoutByID(this.orgID, this.layoutID)];
                        case 1:
                            _a.layoutM = (_b.sent());
                            return [2 /*return*/];
                    }
                });
            });
        };
        TabComponent.prototype.setActiveLink = function () {
            var currentPath = window.location.pathname;
            for (var i = 0; i < this.tab.length; i++) {
                if (currentPath.includes(this.tab[i].routerLink)) {
                    this.activeLink = this.tab[i].routerLink;
                    break;
                }
            }
        };
        return TabComponent;
    }());
    TabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabComponent, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$2.StorageService }, { token: i5__namespace.LayoutService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TabComponent, selector: "app-tab", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Layout <span *ngIf=\"layoutM\">\n                    - ({{ layoutM?.name }})\n                </span></div>\n        </div>\n    </div>\n\n    <nav mat-tab-nav-bar>\n        <ng-container *ngFor=\"let tabs of tab; let i = index;\">\n            <a mat-tab-link [routerLink]=\"tabs.routerLink\" (click)=\"activeLink = tabs.routerLink\"\n                [active]=\"activeLink == tabs.routerLink\">\n                <div class=\"d-flex align-items-center\">\n                    <span class=\"material-symbols-outlined me-2\">\n                        {{ tabs.icon }}\n                    </span>\n                    {{ tabs.label }}\n                </div>\n            </a>\n        </ng-container>\n    </nav>\n    <router-outlet></router-outlet>\n\n</div>", components: [{ type: i2__namespace$2.MatTabNav, selector: "[mat-tab-nav-bar]", inputs: ["color"], exportAs: ["matTabNavBar", "matTabNav"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2__namespace$2.MatTabLink, selector: "[mat-tab-link], [matTabLink]", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matTabLink"] }, { type: i1__namespace$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-tab',
                        templateUrl: './tab.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$2.StorageService }, { type: i5__namespace.LayoutService }]; } });

    var TabModule = /** @class */ (function () {
        function TabModule() {
        }
        return TabModule;
    }());
    TabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabModule, declarations: [TabComponent], imports: [i14.CommonModule,
            TabRoutingModule,
            i12$2.NgbModule,
            i2$2.MatTabsModule] });
    TabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabModule, imports: [[
                i14.CommonModule,
                TabRoutingModule,
                i12$2.NgbModule,
                i2$2.MatTabsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            TabComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            TabRoutingModule,
                            i12$2.NgbModule,
                            i2$2.MatTabsModule,
                        ]
                    }]
            }] });

    // /tsc-library/
    var AddComponent = /** @class */ (function () {
        function AddComponent(activatedRoute, storageService, tscCommonService, entityService, deviceController, sourceController, deviceMappingFB, dialog) {
            this.activatedRoute = activatedRoute;
            this.storageService = storageService;
            this.tscCommonService = tscCommonService;
            this.entityService = entityService;
            this.deviceController = deviceController;
            this.sourceController = sourceController;
            this.deviceMappingFB = deviceMappingFB;
            this.dialog = dialog;
            this.TABLE_CONSTANT = i3.TABLE_CONSTANT;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.searchArr = [];
            this.dataSource = [];
            this.searchFlag = false;
            this.resultLength = 0;
            this.isEqual = true;
            this.showEdit = false;
            this.allowBackendCall = true;
            this.entityM = new Entity();
            this.sourceConsumerConfiguredM = new SourceConsumerConfigure();
            this.initialMappingRecords = {};
            this.displayedColumn = ['mapDevice', 'id', 'name', 'make', 'model', 'type'];
        }
        AddComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.activatedRoute.params.subscribe(function (param) {
                _this.layoutID = param.layoutID;
                _this.entityID = param.entityID;
                _this.getEntityByID();
            });
            this.getSourceConsumerConfig();
            this.deviceMappingInit();
        };
        AddComponent.prototype.getSourceConsumerConfig = function () {
            var _this = this;
            this.sourceController.getSourceConsumerConfig(this.orgID).subscribe(function (res) {
                _this.sourceConsumerConfiguredM = res;
                _this.redirectUrl = _this.getRedirectUrl();
            }, function (error) { return console.log('Error:', error); });
        };
        AddComponent.prototype.getRedirectUrl = function () {
            if (!this.sourceConsumerConfiguredM.sourceTypeConfigured) {
                return 'preference/source/create';
            }
            if (!this.sourceConsumerConfiguredM.consumerTypeConfigured) {
                return 'preference/consumer/create';
            }
            return 'preference/source/page';
        };
        AddComponent.prototype.getEntityByID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntityByID(this.orgID, this.layoutID, this.entityID)];
                        case 1:
                            _a.entityM = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AddComponent.prototype.deviceMappingInit = function () {
            this.deviceMappingFG = this.deviceMappingFB.group({
                deviceRecords: this.deviceMappingFB.array([])
            });
        };
        Object.defineProperty(AddComponent.prototype, "deviceRecords", {
            get: function () {
                return this.deviceMappingFG.get('deviceRecords');
            },
            enumerable: false,
            configurable: true
        });
        AddComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            rxjs.merge(this.paginator.page, this.sort.sortChange, rxjs.fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(operators.startWith({}), operators.filter(function () { return _this.handleBackendTrigger(); }), operators.switchMap(function () { return _this.getUnmappedDevice(); })).subscribe();
        };
        AddComponent.prototype.getUnmappedDevice = function () {
            var _this = this;
            this.deviceMappingFG.valueChanges.subscribe(function () {
                _this.isEqual = lodash.isEqual(_this.intialObject, _this.deviceMappingFG.value);
            });
            this.searchArr = [];
            if (this.searchFlag) {
                this.searchArr.push('name:' + this.searchValue);
            }
            return this.deviceController.getUnMappedDevices(this.paginator.pageIndex, this.paginator.pageSize, this.sort.active, this.sort.direction, this.searchArr, this.orgID, this.layoutID, this.entityID).pipe(operators.catchError(function () { return rxjs.of(null); }), operators.map(function (response) {
                if (response == null) {
                    _this.resultLength = 0;
                    return [];
                }
                _this.resultLength = response["totalCount"];
                return response["records"];
            }), operators.tap(function (dataSource) {
                _this.dataSource = dataSource;
                _this.deviceMappingFG.reset();
                _this.deviceRecords.clear();
                dataSource.forEach(function (record, index) {
                    _this.deviceRecords.push(_this.deviceMappingFB.group({
                        id: [record.id],
                        isDeviceMapped: [false],
                        type: [record.type],
                        parameter: [record.parameter],
                        mappingRecords: _this.deviceMappingFB.array([])
                    }));
                });
                _this.intialObject = _this.deviceMappingFG.value;
                _this.isEqual = true;
            }));
        };
        AddComponent.prototype.handleBackendTrigger = function () {
            if (this.intialObject != undefined && !lodash.isEqual(this.intialObject, this.deviceMappingFG.value)) {
                this.openConfirmationDialog();
                return false;
            }
            return true;
        };
        AddComponent.prototype.openConfirmationDialog = function () {
            var _this = this;
            var dialog = this.dialog.open(i3.DialogOneComponent, {
                minWidth: '450px',
                maxWidth: '450px',
                data: {
                    type: i3.DialogOneEnum.CONFIRMATION,
                    icon: 'warning',
                    header: 'Confirm?',
                    body: 'Changes made will not be saved. Are you sure you want to proceed?',
                    buttonOne: i3.ButtonLabelEnum.NO_BTN_LABEL,
                    buttonTwo: i3.ButtonLabelEnum.YES_BTN_LABEL
                }
            });
            dialog.afterClosed().subscribe(function (res) {
                _this.allowBackendCall = res;
                if (_this.allowBackendCall == true) {
                    _this.deviceMappingFG.reset();
                    _this.getUnmappedDevice().subscribe();
                }
                else {
                    _this.searchBar.searchClear();
                }
            });
        };
        AddComponent.prototype.searchFn = function (value) {
            this.searchFlag = true;
            this.searchValue = value;
            if (value.length == 0) {
                this.resetSearch();
            }
            else {
                this.paginator.pageIndex = 0;
            }
            this.refreshBtn.nativeElement.click();
        };
        AddComponent.prototype.resetSearch = function () {
            this.searchFlag = false;
            this.searchBar.searchClear();
        };
        AddComponent.prototype.onCheckboxChange = function (index, isChecked) {
            var deviceGroup = this.deviceRecords.at(index);
            deviceGroup.get('isDeviceMapped').setValue(isChecked);
            if (isChecked) {
                if (deviceGroup.get('isDeviceMapped').value && deviceGroup.get('type').value == 'METER' && deviceGroup.get('parameter').value.length > 0) {
                    this.openSourceLoadDialog(deviceGroup.value);
                }
            }
            else {
                var mappingRecordsArray = deviceGroup.get('mappingRecords');
                mappingRecordsArray.clear();
            }
        };
        AddComponent.prototype.openSourceLoadDialog = function (device) {
            var _this = this;
            var dialog = this.dialog.open(SourceLoadComponent, {
                data: {
                    deviceInfo: device,
                    entityID: this.entityID
                },
                minWidth: '40vw',
                maxWidth: '40vw',
                height: '100%',
                position: { right: '-2px', top: '0px' },
            });
            dialog.afterClosed()
                .subscribe(function (dialogRes) {
                var deviceIndex = _this.findIndexByDeviceID(device.id);
                if (dialogRes && dialogRes.sourceLoadMappingRes) {
                    if (deviceIndex != -1) {
                        var deviceRecordsControl = _this.deviceMappingFG.get('deviceRecords');
                        var mappingRecordsControl_1 = deviceRecordsControl.at(deviceIndex).get('mappingRecords');
                        mappingRecordsControl_1.clear();
                        dialogRes.sourceLoadMappingRes.forEach(function (mappingItem) {
                            var parameterID = mappingItem.parameterID;
                            var mappings = mappingItem.mapping.map(function (mapping) {
                                return _this.deviceMappingFB.group(mapping);
                            });
                            var mappingGroup = _this.deviceMappingFB.group({
                                parameterID: parameterID,
                                mapping: _this.deviceMappingFB.array(mappings)
                            });
                            mappingRecordsControl_1.push(mappingGroup);
                        });
                    }
                }
                if (dialogRes && dialogRes.sourceLoadMappingRes.length == 0) {
                    if (deviceIndex != -1) {
                        var isDeviceMappedControl = _this.deviceMappingFG.get('deviceRecords')['controls'][deviceIndex].get('isDeviceMapped');
                        isDeviceMappedControl.setValue(false);
                    }
                }
            });
        };
        AddComponent.prototype.findIndexByDeviceID = function (id) {
            return this.deviceMappingFG.get('deviceRecords')['controls']
                .findIndex(function (d) { return d.value.id == id; });
        };
        AddComponent.prototype.saveDeviceMapping = function () {
            var _this = this;
            var deviceRecordsArray = this.deviceMappingFG.get('deviceRecords');
            deviceRecordsArray.controls.forEach(function (deviceGroup) {
                var isDeviceMapped = deviceGroup.get('isDeviceMapped').value;
                var type = deviceGroup.get('type').value;
                var mappingRecordsControl = deviceGroup.get('mappingRecords');
                if (type == 'METER' && !isDeviceMapped) {
                    mappingRecordsControl.clear();
                }
                deviceGroup.removeControl('parameter');
            });
            this.deviceController.saveDeviceMapping(this.orgID, this.layoutID, this.entityID, this.deviceMappingFG.getRawValue()).subscribe(function (mappedDevicesRes) {
                _this.tscCommonService.back();
            }, function (error) {
                console.log('error in saveDeviceMapping() - ', error);
            });
        };
        return AddComponent;
    }());
    AddComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$2.StorageService }, { token: i3__namespace.TSCCommonService }, { token: EntityService }, { token: DeviceController }, { token: SourceController }, { token: i2__namespace$1.FormBuilder }, { token: i1__namespace$3.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AddComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AddComponent, selector: "app-add", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Map Devices <span *ngIf=\"entityM\">\n                    - ({{ entityM?.name }})\n                </span></div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar searchBy=\"device name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n                <a [routerLink]=\"'/layout/' + layoutID + '/entity/' + entityID + '/map-device/view'\">View mapped devices</a>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <form [formGroup]=\"deviceMappingFG\">\n        <div class=\"overflowX customScrollBar w-100\">\n            <table mat-table class=\"w-100\" [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"name\"\n                matSortDirection=\"asc\" matSortDisableClear>\n\n                <ng-container matColumnDef=\"mapDevice\">\n                    <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef> Map device </th>\n                    <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row; let i = index\">\n                        <div class=\"d-flex align-items-center\">\n                            <mat-checkbox [formControl]=\"deviceRecords?.at(i)?.get('isDeviceMapped')\"\n                                [disabled]=\"row.type == 'METER' && (!sourceConsumerConfiguredM.sourceTypeConfigured || !sourceConsumerConfiguredM.consumerTypeConfigured)\"\n                                (change)=\"onCheckboxChange(i, $event.checked)\"></mat-checkbox>\n\n                            <span\n                                *ngIf=\"row.type == 'METER' && (!sourceConsumerConfiguredM.sourceTypeConfigured || !sourceConsumerConfiguredM.consumerTypeConfigured)\"\n                                [popover]=\"infoPopover\" popoverPlacement=\"right\" [popoverOnHover]=\"false\" [popoverAnimation]=\"true\">\n                                <span class=\"material-symbols-outlined fontSize cursorPointer mt-2 ms-2\">\n                                    info\n                                </span>\n                            </span>\n\n                            <popover-content #infoPopover [animation]=\"true\" [closeOnClickOutside]=\"true\">\n                                <span>Click <a [href]=\"redirectUrl\">here </a>to set preferences</span>\n                            </popover-content>\n\n                            <span *ngIf=\"deviceRecords?.at(i)?.get('mappingRecords').length > 0\"\n                                class=\"material-symbols-outlined text-secondary fontSize cursorPointer ms-5\" #tooltip=\"matTooltip\"\n                                matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Update source/consumer\"\n                                (click)=\"this.openSourceLoadDialog(deviceRecords?.at(i).value)\">\n                                edit_square\n                            </span>\n                        </div>\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"id\">\n                    <th class=\"columnWidth2\" mat-header-cell *matHeaderCellDef>\n                        Device ID\n                    </th>\n                    <td class=\"columnWidth2\" mat-cell *matCellDef=\"let row\">\n                        {{ row['id'] }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"name\">\n                    <th class=\"columnWidth3\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear> Name </th>\n                    <td class=\"columnWidth3\" mat-cell *matCellDef=\"let row\"> <span\n                            [matTooltip]=\"row?.['name']?.length>24? row['name']: ''\" matTooltipPosition=\"above\"\n                            matTooltipClass=\"nameTooltip\">\n                            {{ row.name | dotdotdot:24 }}\n                        </span>\n                        <button [cdkCopyToClipboard]=\"row.name\" matSuffix mat-icon-button type=\"button\">\n                            <span class=\"material-symbols-outlined fs-5\" mat-raised-button matTooltipPosition=\"right\"\n                                matTooltip=\"copy\">\n                                content_copy\n                            </span>\n                        </button>\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"make\">\n                    <th class=\"columnWidth4\" mat-header-cell *matHeaderCellDef> Make </th>\n                    <td class=\"columnWidth4\" mat-cell *matCellDef=\"let row\"\n                        [matTooltip]=\"row?.['make']?.length>15? row['make']: ''\" matTooltipPosition=\"above\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ row?.['make'] | dotdotdot:15 }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"model\">\n                    <th class=\"columnWidth4\" mat-header-cell *matHeaderCellDef> Model </th>\n                    <td class=\"columnWidth4\" mat-cell *matCellDef=\"let row\"\n                        [matTooltip]=\"row?.['model']?.length>15? row['model']: ''\" matTooltipPosition=\"above\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ row?.['model'] | dotdotdot:15 }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"type\">\n                    <th class=\"columnWidth4\" mat-header-cell *matHeaderCellDef> Type </th>\n                    <td class=\"columnWidth4\" mat-cell *matCellDef=\"let row\">\n                        {{ row.type | titlecase }}\n                    </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumn; sticky: true\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\"></tr>\n\n                <tr class=\"mat-row\" *matNoDataRow>\n                    <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                        {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n            [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n        </mat-paginator>\n    </form>\n\n    <div align=\"end\">\n        <button type=\"submit\" class=\"btn btn-sm btn-success me-3 mb-2\" [ngClass]=\"{'disabled': isEqual}\"\n            (click)=\"saveDeviceMapping()\">\n            {{ ButtonLabelEnum.SAVE_BTN_LABEL }}\n        </button>\n    </div>\n\n</div>", styles: [".columnWidth1{min-width:120px}.columnWidth2{min-width:140px}.columnWidth3{min-width:180px}.columnWidth4{min-width:140px}.badge{font-weight:bold;font-size:1em;text-transform:lowercase}.fontSize{font-size:20px}\n"], components: [{ type: i3__namespace.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i7__namespace$1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i10__namespace$3.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i11__namespace$2.PopoverContentComponent, selector: "popover-content", inputs: ["placement", "animation", "closeOnClickOutside", "closeOnMouseOutside", "appendToBody", "size", "content", "title", "parentClass"] }, { type: i8__namespace.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i6__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i7__namespace$1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7__namespace$1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i9__namespace$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i7__namespace$1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7__namespace$1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7__namespace$1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7__namespace$1.MatCellDef, selector: "[matCellDef]" }, { type: i7__namespace$1.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i11__namespace$2.PopoverDirective, selector: "[popover]", inputs: ["popoverOnHover", "popoverDismissTimeout", "popover", "popoverSize", "popoverDisabled", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverCloseOnClickOutside", "popoverCloseOnMouseOutside", "appendToBody"], outputs: ["onShown", "onHidden"], exportAs: ["popover"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i17__namespace.CdkCopyToClipboard, selector: "[cdkCopyToClipboard]", inputs: ["cdkCopyToClipboard", "cdkCopyToClipboardAttempts"], outputs: ["cdkCopyToClipboardCopied"] }, { type: i7__namespace$1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7__namespace$1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7__namespace$1.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "dotdotdot": i3__namespace.EllipsisPipeService, "titlecase": i14__namespace.TitleCasePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-add',
                        templateUrl: './add.component.html',
                        styleUrls: ['./add.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$2.StorageService }, { type: i3__namespace.TSCCommonService }, { type: EntityService }, { type: DeviceController }, { type: SourceController }, { type: i2__namespace$1.FormBuilder }, { type: i1__namespace$3.MatDialog }]; }, propDecorators: { sort: [{
                    type: i0.ViewChild,
                    args: ['sort']
                }], paginator: [{
                    type: i0.ViewChild,
                    args: ['paginator']
                }], refreshBtn: [{
                    type: i0.ViewChild,
                    args: ['refreshBtn']
                }], searchBar: [{
                    type: i0.ViewChild,
                    args: ['searchBar']
                }] } });

    var routes$6 = [
        {
            path: '',
            component: AddComponent
        }
    ];
    var AddRoutingModule = /** @class */ (function () {
        function AddRoutingModule() {
        }
        return AddRoutingModule;
    }());
    AddRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AddRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    AddRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$6)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$6)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var AddModule = /** @class */ (function () {
        function AddModule() {
        }
        return AddModule;
    }());
    AddModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AddModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddModule, declarations: [AddComponent], imports: [i14.CommonModule,
            AddRoutingModule,
            SourceLoadModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i9.MatCardModule,
            i12$1.MatIconModule,
            i6.MatButtonModule,
            i10$1.MatRippleModule,
            i7$1.MatTableModule,
            i8.MatSortModule,
            i9$2.MatPaginatorModule,
            i1$3.MatDialogModule,
            i11.MatTooltipModule,
            i10$3.MatCheckboxModule,
            i3.SearchBarOneModule,
            i3.EllipsisPipeModule,
            i17.ClipboardModule,
            i11$2.PopoverModule] });
    AddModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddModule, imports: [[
                i14.CommonModule,
                AddRoutingModule,
                SourceLoadModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i9.MatCardModule,
                i12$1.MatIconModule,
                i6.MatButtonModule,
                i10$1.MatRippleModule,
                i7$1.MatTableModule,
                i8.MatSortModule,
                i9$2.MatPaginatorModule,
                i1$3.MatDialogModule,
                i11.MatTooltipModule,
                i10$3.MatCheckboxModule,
                i3.SearchBarOneModule,
                i3.EllipsisPipeModule,
                i17.ClipboardModule,
                i11$2.PopoverModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AddModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            AddComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            AddRoutingModule,
                            SourceLoadModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i9.MatCardModule,
                            i12$1.MatIconModule,
                            i6.MatButtonModule,
                            i10$1.MatRippleModule,
                            i7$1.MatTableModule,
                            i8.MatSortModule,
                            i9$2.MatPaginatorModule,
                            i1$3.MatDialogModule,
                            i11.MatTooltipModule,
                            i10$3.MatCheckboxModule,
                            i3.SearchBarOneModule,
                            i3.EllipsisPipeModule,
                            i17.ClipboardModule,
                            i11$2.PopoverModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ViewComponent = /** @class */ (function () {
        function ViewComponent(activatedRoute, storageService, deviceController, entityService, dialog) {
            this.activatedRoute = activatedRoute;
            this.storageService = storageService;
            this.deviceController = deviceController;
            this.entityService = entityService;
            this.dialog = dialog;
            this.TABLE_CONSTANT = i3.TABLE_CONSTANT;
            this.searchArr = [];
            this.dataSource = [];
            this.searchFlag = false;
            this.resultLength = 0;
            this.displayedColumn = ['checkbox', 'body', 'delete'];
            this.allDeviceIDs = [];
            this.selection = new collections.SelectionModel(true, []);
            this.entityM = new Entity();
        }
        ViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.activatedRoute.params.subscribe(function (param) {
                _this.layoutID = param.layoutID;
                _this.entityID = param.entityID;
                _this.getEntityByID();
            });
        };
        ViewComponent.prototype.getEntityByID = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.entityService.getEntityByID(this.orgID, this.layoutID, this.entityID)];
                        case 1:
                            _a.entityM = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        ViewComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.selection.clear();
            rxjs.merge(this.paginator.page, rxjs.fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(operators.startWith({}), operators.switchMap(function () {
                _this.searchArr = [];
                if (_this.searchFlag) {
                    _this.searchArr.push('name:' + _this.searchValue);
                }
                return _this.deviceController.getMappedDevices(_this.paginator.pageIndex, _this.paginator.pageSize, _this.searchArr, _this.orgID, _this.layoutID, _this.entityID).pipe(operators.catchError(function () { return rxjs.of(null); }));
            }), operators.map(function (response) {
                if (response == null) {
                    _this.resultLength = 0;
                    return [];
                }
                _this.resultLength = response["totalCount"];
                return response["records"];
            })).subscribe(function (dataSource) {
                _this.dataSource = dataSource;
                dataSource.forEach(function (record) {
                    _this.allDeviceIDs.push(record.id);
                });
            });
        };
        ViewComponent.prototype.searchFn = function (value) {
            this.searchFlag = true;
            this.searchValue = value;
            if (value.length == 0) {
                this.resetSearch();
            }
            else {
                this.paginator.pageIndex = 0;
            }
            this.refreshBtn.nativeElement.click();
        };
        ViewComponent.prototype.resetSearch = function () {
            this.searchFlag = false;
            this.searchBar.searchClear();
        };
        ViewComponent.prototype.selectAll = function () {
            var _a;
            if (this.isAllSelected()) {
                this.selection.clear();
                return;
            }
            (_a = this.selection).select.apply(_a, __spreadArray([], __read(this.allDeviceIDs)));
        };
        ViewComponent.prototype.isAllSelected = function () {
            var selected = this.selection.selected.length;
            var numRows = this.dataSource.length;
            return selected == numRows;
        };
        ViewComponent.prototype.openSourceLoadDialog = function (device) {
            var _this = this;
            var dialog = this.dialog.open(SourceLoadComponent, {
                data: {
                    deviceInfo: device,
                    layoutID: this.layoutID,
                    entityID: this.entityID,
                    updateFromDialog: true
                },
                minWidth: '600px',
                maxWidth: '600px',
            });
            dialog.afterClosed()
                .subscribe(function (dialogRes) {
                if (dialogRes && dialogRes.result == i3.DialogEnum.SUCCESS_DR && dialogRes.action == i3.FormAction.UPDATE) {
                    _this.refreshBtn.nativeElement.click();
                }
            });
        };
        ViewComponent.prototype.openDeleteDialog = function (actionType, id, name) {
            var _this = this;
            var entityName = this.entityM.name;
            var bodyText;
            if (actionType == 'BULK_DELETE' && !this.isAllSelected()) {
                bodyText = 'From <b>' + entityName + '</b> entity, mapping of devices <b> ' + this.selection.selected.join(', ') + '</b>' + ' will be removed.</br></br>Are you sure you want to continue?';
            }
            else if (actionType == 'BULK_DELETE' && this.isAllSelected()) {
                bodyText = 'From <b>' + entityName + '</b> entity, all mapped devices will be removed.</br></br>Are you sure you want to continue?';
            }
            else {
                bodyText = 'From <b>' + entityName + '</b> entity, mapping of device <b> ' + name + '</b>' + ' will be removed.</br></br>Are you sure you want to continue?';
            }
            var dialog = this.dialog.open(i3.DialogOneComponent, {
                minWidth: '450px',
                maxWidth: '450px',
                data: {
                    type: i3.DialogOneEnum.DELETE,
                    icon: 'dangerous',
                    header: 'Delete device mapping?',
                    body: bodyText,
                    buttonOne: i3.ButtonLabelEnum.CANCEL_BTN_LABEL,
                    buttonTwo: i3.ButtonLabelEnum.DELETE_BTN_LABEL
                }
            });
            dialog.afterClosed().subscribe(function (res) {
                if (res) {
                    if (actionType == 'BULK_DELETE' && !_this.isAllSelected()) {
                        _this.deleteDeviceMapping(_this.selection.selected);
                    }
                    else if (actionType == 'BULK_DELETE' && _this.isAllSelected()) {
                        _this.deleteDeviceMapping(_this.allDeviceIDs);
                    }
                    else {
                        _this.deleteDeviceMapping(id);
                    }
                }
            });
        };
        ViewComponent.prototype.deleteDeviceMapping = function (deviceID) {
            var _this = this;
            this.deviceController.deleteDeviceMapping(this.orgID, this.layoutID, this.entityID, deviceID).subscribe(function (deleteRes) {
                _this.refreshBtn.nativeElement.click();
            });
        };
        return ViewComponent;
    }());
    ViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$2.StorageService }, { token: DeviceController }, { token: EntityService }, { token: i1__namespace$3.MatDialog }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ViewComponent, selector: "app-view", viewQueries: [{ propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">View Mapped Devices <span *ngIf=\"entityM\">\n                    - ({{ entityM?.name }})\n                </span></div>\n        </div>\n\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-2\" #searchBar searchBy=\"device name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n                <div class=\"me-2 btn-group\" ngbDropdown placement=\"bottom-right\">\n                    <button type=\"button\" ngbDropdownToggle class=\"btn btn-sm btn-primary\"\n                        [ngClass]=\"{'disableButton': selection.selected.length == 0}\"\n                        [disabled]=\"selection.selected.length == 0\">\n                        Bulk action\n                    </button>\n                    <div ngbDropdownMenu>\n                        <button class=\"btn btn-outline-danger rounded-0 dropdown-item\"\n                            (click)=\"openDeleteDialog('BULK_DELETE')\">\n                            Delete\n                        </button>\n                    </div>\n                </div>\n                <a [routerLink]=\"'/layout/' + layoutID + '/entity/' + entityID + '/map-device/add'\">Map devices</a>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <table mat-table [dataSource]=\"dataSource\">\n\n        <ng-container matColumnDef=\"checkbox\">\n            <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>\n                <mat-checkbox (change)=\"$event ? selectAll() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\" [disabled]=\"dataSource.length == 0\">\n                    Select all\n                </mat-checkbox>\n            </th>\n            <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row; let i = index;\" class=\"text-start\">\n                <mat-checkbox (change)=\"$event ? selection.toggle(row.id) : null\"\n                    [checked]=\"selection.isSelected(row.id)\"></mat-checkbox>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"body\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td class=\"px-3\" mat-cell *matCellDef=\"let row\">\n                <div class=\"pt-3 pb-3\">\n\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <mat-card class=\"card main-card border cardOverwrite\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-12\">\n                                        <span class=\"card-title sectionTitle\">\n                                            Devices\n                                        </span>\n                                    </div>\n                                </div>\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                ID\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.id }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Name\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\"\n                                                [matTooltip]=\"row?.['name']?.length>20? row['name']: ''\"\n                                                matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                                                {{ row.name | dotdotdot:20 }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Make\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.make }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Model\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.model }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Type\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.type | titlecase }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </mat-card>\n                        </div>\n                    </div>\n\n                    <div class=\"row pt-3\" *ngIf=\"row.mappingRecords && row.mappingRecords.length > 0\">\n                        <div class=\"col-sm-12\">\n                            <mat-card class=\"card main-card border cardOverwrite\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">\n                                        <span class=\"card-title sectionTitle\">\n                                            Device property\n                                        </span>\n                                    </div>\n                                    <div class=\"col-sm-6\">\n                                        <span class=\"material-symbols-outlined text-secondary float-end cursorPointer\"\n                                            matTooltipPosition=\"above\" matTooltip=\"Edit\"\n                                            (click)=\"openSourceLoadDialog(row)\">\n                                            edit_square\n                                        </span>\n                                    </div>\n                                </div>\n\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\" *ngFor=\"let mapping of row.mappingRecords\">\n                                        Parameter Name: <span class=\"fw-bold\">\n                                            {{ mapping?.parameterName }}\n                                        </span>\n\n                                        <div *ngFor=\"let sourceLoad of mapping?.mapping\">\n                                            <div class=\"row mt-2\">\n                                                <div class=\"col-sm-3\" *ngIf=\"sourceLoad?.type == 'SOURCE'\">\n                                                    Source\n                                                </div>\n                                                <div class=\"col-sm-3\" *ngIf=\"sourceLoad?.type == 'LOAD'\">\n                                                    Load\n                                                </div>\n                                                <div class=\"col-sm-6\">\n                                                    <span class=\"fw-bold\">{{ sourceLoad?.name }}</span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </mat-card>\n                        </div>\n                    </div>\n                </div>\n\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"delete\">\n            <th class=\"columnWidth2\" mat-header-cell *matHeaderCellDef></th>\n            <td class=\"columnWidth2\" mat-cell *matCellDef=\"let row\">\n                <span class=\"material-symbols-outlined text-danger float-end\"\n                    [ngClass]=\"{'text-danger cursorPointer': selection.selected.length == 0, 'text-secondary': selection.selected.length > 0}\"\n                    matTooltipPosition=\"above\" [matTooltip]=\"selection.selected.length == 0 ? 'Remove mapping': ''\"\n                    (click)=\"selection.selected.length == 0 && openDeleteDialog('SINGLE_DELETE', row.id, row.name)\">\n                    delete\n                </span>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumn; sticky: true\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\"></tr>\n\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", styles: [".columnWidth1{width:140px}.columnWidth2{width:120px}.badge{font-weight:bold;font-size:1em;text-transform:lowercase}\n"], components: [{ type: i3__namespace.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i7__namespace$1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i10__namespace$3.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i9__namespace.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i7__namespace$1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7__namespace$1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i9__namespace$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i12__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i12__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i7__namespace$1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7__namespace$1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7__namespace$1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7__namespace$1.MatCellDef, selector: "[matCellDef]" }, { type: i7__namespace$1.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7__namespace$1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7__namespace$1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7__namespace$1.MatNoDataRow, selector: "ng-template[matNoDataRow]" }], pipes: { "dotdotdot": i3__namespace.EllipsisPipeService, "titlecase": i14__namespace.TitleCasePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'app-view',
                        templateUrl: './view.component.html',
                        styleUrls: ['./view.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$2.StorageService }, { type: DeviceController }, { type: EntityService }, { type: i1__namespace$3.MatDialog }]; }, propDecorators: { paginator: [{
                    type: i0.ViewChild,
                    args: ['paginator']
                }], refreshBtn: [{
                    type: i0.ViewChild,
                    args: ['refreshBtn']
                }], searchBar: [{
                    type: i0.ViewChild,
                    args: ['searchBar']
                }] } });

    var routes$5 = [
        {
            path: '',
            component: ViewComponent
        }
    ];
    var ViewRoutingModule = /** @class */ (function () {
        function ViewRoutingModule() {
        }
        return ViewRoutingModule;
    }());
    ViewRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ViewRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ViewRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$5)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$5)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ViewModule = /** @class */ (function () {
        function ViewModule() {
        }
        return ViewModule;
    }());
    ViewModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ViewModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewModule, declarations: [ViewComponent], imports: [i12$2.NgbModule,
            i14.CommonModule,
            ViewRoutingModule,
            SourceLoadModule,
            i9.MatCardModule,
            i12$1.MatIconModule,
            i6.MatButtonModule,
            i10$1.MatRippleModule,
            i7$1.MatTableModule,
            i9$2.MatPaginatorModule,
            i1$3.MatDialogModule,
            i11.MatTooltipModule,
            i10$3.MatCheckboxModule,
            i3.SearchBarOneModule,
            i3.EllipsisPipeModule] });
    ViewModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewModule, imports: [[
                i12$2.NgbModule,
                i14.CommonModule,
                ViewRoutingModule,
                SourceLoadModule,
                i9.MatCardModule,
                i12$1.MatIconModule,
                i6.MatButtonModule,
                i10$1.MatRippleModule,
                i7$1.MatTableModule,
                i9$2.MatPaginatorModule,
                i1$3.MatDialogModule,
                i11.MatTooltipModule,
                i10$3.MatCheckboxModule,
                i3.SearchBarOneModule,
                i3.EllipsisPipeModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ViewModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ViewComponent
                        ],
                        imports: [
                            i12$2.NgbModule,
                            i14.CommonModule,
                            ViewRoutingModule,
                            SourceLoadModule,
                            i9.MatCardModule,
                            i12$1.MatIconModule,
                            i6.MatButtonModule,
                            i10$1.MatRippleModule,
                            i7$1.MatTableModule,
                            i9$2.MatPaginatorModule,
                            i1$3.MatDialogModule,
                            i11.MatTooltipModule,
                            i10$3.MatCheckboxModule,
                            i3.SearchBarOneModule,
                            i3.EllipsisPipeModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ConsumerController = /** @class */ (function () {
        function ConsumerController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        ConsumerController.prototype.createConsumerType = function (orgID, consumer) {
            return this.http.post(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumers-types", consumer);
        };
        ConsumerController.prototype.getConsumerTypeByID = function (orgID, consumerID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumers-types/" + consumerID);
        };
        ConsumerController.prototype.updateConsumerType = function (orgID, consumerID, consumer) {
            return this.http.patch(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumers-types/" + consumerID, consumer);
        };
        ConsumerController.prototype.deleteConsumerType = function (orgID, consumerID) {
            return this.http.delete(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumers-types/" + consumerID);
        };
        ConsumerController.prototype.getConsumerTypeByPage = function (pageNo, pageSize, sortBy, orderBy, searchValue, filterArr, orgID) {
            var params = new i1.HttpParams();
            params = params.append('pageNo', pageNo);
            params = params.append('pageSize', pageSize);
            params = params.append('sortBy', sortBy);
            params = params.append('orderBy', orderBy);
            if (searchValue) {
                params = params.append('searchBy', searchValue);
            }
            filterArr.forEach(function (filter) { return params = params.append('filter', filter); });
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/consumers-types/page", { params: params });
        };
        return ConsumerController;
    }());
    ConsumerController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsumerController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    // /tsc-library/
    var ConsumerCreateUpdateComponent = /** @class */ (function () {
        function ConsumerCreateUpdateComponent(data, dialogRef, renderer, formBuilder, storageService, toastrService, tscCommonService, sourceService, consumerController) {
            this.data = data;
            this.dialogRef = dialogRef;
            this.renderer = renderer;
            this.formBuilder = formBuilder;
            this.storageService = storageService;
            this.toastrService = toastrService;
            this.tscCommonService = tscCommonService;
            this.sourceService = sourceService;
            this.consumerController = consumerController;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.PageTitleEnum = i3.PageTitleEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.isEqual = true;
            this.pageTitle = 'Consumer type';
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
            this.action = data.action;
            this.consumerID = data.consumerID;
        }
        ConsumerCreateUpdateComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getUtilitySourceAndType();
            this.consumerFGInit();
            if (this.action == i3.FormAction.UPDATE) {
                this.getConsumerTypeByID(this.consumerID);
            }
        };
        ConsumerCreateUpdateComponent.prototype.ngAfterViewInit = function () {
            this.heightHandler();
        };
        ConsumerCreateUpdateComponent.prototype.heightHandler = function () {
            var headerHeight = this.header.nativeElement.offsetHeight;
            var footerHeight = this.footer.nativeElement.offsetHeight;
            var offsetHeight = 'calc(100vh - ' + (headerHeight + footerHeight + 24) + 'px)';
            this.renderer.setStyle(this.body.nativeElement, 'height', offsetHeight);
            this.renderer.setStyle(this.body.nativeElement, 'max-height', offsetHeight);
        };
        ConsumerCreateUpdateComponent.prototype.getUtilitySourceAndType = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sourceService.getUtilitySourceAndType(this.orgID)];
                        case 1:
                            result = _a.sent();
                            this.utilitySourceTypeM = result.utilitySource;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsumerCreateUpdateComponent.prototype.consumerFGInit = function () {
            this.consumerFG = this.formBuilder.group({
                name: [, [i2$1.Validators.required]],
                utilitySourceID: [, [i2$1.Validators.required]],
                type: [, [i2$1.Validators.required]]
            });
        };
        ConsumerCreateUpdateComponent.prototype.consumerSubmit = function () {
            if (this.consumerFG.invalid) {
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                if (this.action == i3.FormAction.CREATE) {
                    this.createConsumerType();
                }
                else if (this.action == i3.FormAction.UPDATE) {
                    this.updateConsumerType();
                }
            }
        };
        ConsumerCreateUpdateComponent.prototype.createConsumerType = function () {
            var _this = this;
            this.consumerController.createConsumerType(this.orgID, this.consumerFG.value).subscribe(function (res) {
                var result;
                result = {
                    status: i3.DialogResponseEnum.SUCCESS,
                };
                _this.dialogRef.close(result);
            }, function (error) {
                console.log('error in createConsumerType -', error);
            });
        };
        ConsumerCreateUpdateComponent.prototype.getConsumerTypeByID = function (consumerID) {
            var _this = this;
            this.consumerController.getConsumerTypeByID(this.orgID, consumerID).subscribe(function (res) {
                _this.consumerM = res;
                _this.patchConsumer(_this.consumerM);
            }, function (error) {
                console.log('error in getConsumerTypeByID -', error);
            });
        };
        ConsumerCreateUpdateComponent.prototype.patchConsumer = function (consumer) {
            var _this = this;
            this.consumerFG.patchValue(consumer);
            this.intialObject = this.consumerFG.value;
            this.consumerFG.valueChanges.subscribe(function () {
                _this.isEqual = lodash.isEqual(_this.intialObject, _this.consumerFG.value);
            });
        };
        ConsumerCreateUpdateComponent.prototype.updateConsumerType = function () {
            var _this = this;
            this.consumerController.updateConsumerType(this.orgID, this.consumerID, this.consumerFG.value).subscribe(function (res) {
                var result;
                result = {
                    status: i3.DialogResponseEnum.SUCCESS,
                };
                _this.dialogRef.close(result);
            }, function (error) {
                console.log('error in updateConsumerType -', error);
            });
        };
        return ConsumerCreateUpdateComponent;
    }());
    ConsumerCreateUpdateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateComponent, deps: [{ token: i1$3.MAT_DIALOG_DATA }, { token: i1__namespace$3.MatDialogRef }, { token: i0__namespace.Renderer2 }, { token: i2__namespace$1.FormBuilder }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: i3__namespace.TSCCommonService }, { token: SourceService }, { token: ConsumerController }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsumerCreateUpdateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumerCreateUpdateComponent, selector: "lib-create-update", viewQueries: [{ propertyName: "header", first: true, predicate: ["header"], descendants: true }, { propertyName: "footer", first: true, predicate: ["footer"], descendants: true }, { propertyName: "body", first: true, predicate: ["body"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"headerContainer p-0\" #header>\n    <div class=\"headerLeftContainer\">\n        <div class=\"pageTitle\">{{ action == FormAction.CREATE ? PageTitleEnum.CREATE :\n            PageTitleEnum.UPDATE }} {{ pageTitle }}</div>\n    </div>\n\n    <div class=\"headerRightContainer\">\n        <div class=\"headerRightContainerInner\">\n            <button class=\"btn btn-sm centerAlign py-1 iconBtn\" matRipple\n                [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                [matTooltip]=\"ButtonTooltipEnum.CLOSE\" mat-dialog-close>\n                <span class=\"material-symbols-outlined\">\n                    close\n                </span>\n            </button>\n        </div>\n    </div>\n</div>\n\n<mat-dialog-content class=\"mat-typography customScrollBar pt-2\" #body>\n    <form [formGroup]=\"consumerFG\" (ngSubmit)=\"consumerSubmit()\">\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\"\n                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Name</mat-label>\n                    <input class=\"formPlaceholder\" type=\"text\" placeholder=\"Name\" matInput formControlName=\"name\"\n                        required />\n                    <mat-error *ngIf=\"errorHandling(consumerFG, 'name', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select utility source</mat-label>\n                    <mat-select formControlName=\"utilitySourceID\" required>\n                        <ng-container\n                            *ngIf=\"utilitySourceTypeM && utilitySourceTypeM.length > 0 && utilitySourceTypeM[0]['id']; else noUtilitySource\">\n                            <mat-option *ngFor=\"let utilitySource of utilitySourceTypeM\" [value]=\"utilitySource.id\">\n                                {{ utilitySource.name }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noUtilitySource>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n                \n                    <mat-error *ngIf=\"errorHandling(consumerFG, 'utilitySourceID', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Type</mat-label>\n                    <input class=\"formPlaceholder\" type=\"text\" placeholder=\"Type\" matInput formControlName=\"type\" required\n                        pattern=\"{{ COMMON_CONSTANT.SPECIAL_CHARACTERS_PATTERN }}\" />\n                    <mat-error *ngIf=\"errorHandling(consumerFG, 'type', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                    <mat-error *ngIf=\"errorHandling(consumerFG, 'type', 'pattern')\">\n                        {{ FormErrorEnum.PATTERN }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n    </form>\n</mat-dialog-content>\n\n<div class=\"tscDialogFooter\" #footer>\n    <button class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled': isEqual && action == FormAction.UPDATE}\"\n        (click)=\"formSubmitBtn.click()\" matRipple [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\"\n        matTooltipPosition=\"below\" [matTooltip]=\"ButtonTooltipEnum.NO_CHANGE\"> {{\n        tscCommonService.getButtonLabel(action) }}</button>\n    <button class=\"btn btn-sm btn-secondary me-2\" mat-dialog-close matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">Cancel</button>\n</div>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i1__namespace$3.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1__namespace$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i12__namespace$3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-create-update',
                        templateUrl: './create-update.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.MAT_DIALOG_DATA]
                        }] }, { type: i1__namespace$3.MatDialogRef }, { type: i0__namespace.Renderer2 }, { type: i2__namespace$1.FormBuilder }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: i3__namespace.TSCCommonService }, { type: SourceService }, { type: ConsumerController }];
        }, propDecorators: { header: [{
                    type: i0.ViewChild,
                    args: ['header']
                }], footer: [{
                    type: i0.ViewChild,
                    args: ['footer']
                }], body: [{
                    type: i0.ViewChild,
                    args: ['body']
                }] } });

    // /tsc-library/
    var ConsumerPageComponent = /** @class */ (function () {
        function ConsumerPageComponent(dialog, storageService, sourceService, consumerController) {
            var _this = this;
            this.dialog = dialog;
            this.storageService = storageService;
            this.sourceService = sourceService;
            this.consumerController = consumerController;
            this.faPlus = freeSolidSvgIcons.faPlus;
            this.faEllipsisV = freeSolidSvgIcons.faEllipsisV;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.TABLE_CONSTANT = i3.TABLE_CONSTANT;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.FormAction = i3.FormAction;
            this.searchByPlaceHolder = 'consumer name';
            this.dataSource = [new SourceConsumerPage()];
            this.dataSourceLength = 0;
            this.displayedColumn = ['id', 'name', 'utilitySourceName', 'type', 'option'];
            this.searchFlag = false;
            this.searchFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.utilitySource = false;
            this.utilitySourceFC = new i2$1.FormControl();
            this.filterArr = [];
            this.updateConsumer = function (action, row) {
                var dialogRef = _this.dialog.open(ConsumerCreateUpdateComponent, {
                    height: '100vh',
                    width: '600px',
                    position: { right: '-2px', top: '0px' },
                    disableClose: true,
                    panelClass: 'matDialogContainerOverride',
                    data: {
                        action: action,
                        consumerID: row.id
                    }
                });
                dialogRef.afterClosed()
                    .subscribe(function (result) {
                    if (result.status == i3.DialogResponseEnum.SUCCESS) {
                        _this.refreshBtn.nativeElement.click();
                    }
                });
            };
        }
        ConsumerPageComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getUtilitySourceAndType();
        };
        ConsumerPageComponent.prototype.getUtilitySourceAndType = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, allKey;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sourceService.getUtilitySourceAndType(this.orgID)];
                        case 1:
                            result = _a.sent();
                            allKey = {
                                "id": 0,
                                "name": "All",
                                "keyID": "ALL",
                                "type": []
                            };
                            result.utilitySource.unshift(allKey);
                            this.utilitySourceI = result.utilitySource;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsumerPageComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            rxjs.merge(this.sort.sortChange, this.typeSelect.mono, rxjs.fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(operators.startWith({}), operators.switchMap(function () {
                _this.filterArr = [];
                if (_this.searchFlag) {
                    var searchValue = 'name:' + _this.searchValue;
                }
                if (_this.utilitySource) {
                    if (_this.utilitySourceFC.value == 'ALL') {
                        _this.utilitySource = false;
                    }
                    else {
                        _this.filterArr.push('utilitySource:' + _this.utilitySourceFC.value);
                    }
                }
                return _this.consumerController.getConsumerTypeByPage(_this.paginator.pageIndex, _this.paginator.pageSize, _this.sort.active, _this.sort.direction, searchValue, _this.filterArr, _this.orgID).pipe(operators.catchError(function () { return rxjs.of(null); }));
            }), operators.map(function (response) {
                if (response == null) {
                    _this.dataSourceLength = 0;
                    return [];
                }
                _this.dataSourceLength = response.totalCount;
                return response.records;
            })).subscribe(function (dataSource) {
                _this.dataSource = dataSource;
            });
        };
        ConsumerPageComponent.prototype.searchFn = function (value) {
            this.searchFlag = true;
            this.searchValue = value;
            if (value.length == 0) {
                this.resetSearch();
            }
            this.refreshBtn.nativeElement.click();
        };
        ConsumerPageComponent.prototype.resetSearch = function () {
            this.searchFlag = false;
            this.searchBar.searchClear();
        };
        ConsumerPageComponent.prototype.createConsumer = function (action) {
            var _this = this;
            var dialogRef = this.dialog.open(ConsumerCreateUpdateComponent, {
                height: '100vh',
                width: '600px',
                position: { right: '-2px', top: '0px' },
                disableClose: true,
                panelClass: 'matDialogContainerOverride',
                data: {
                    action: action
                }
            });
            dialogRef.afterClosed()
                .subscribe(function (result) {
                if (result.status == i3.DialogResponseEnum.SUCCESS) {
                    _this.refreshBtn.nativeElement.click();
                }
            });
        };
        ConsumerPageComponent.prototype.openDeleteDialog = function (consumer) {
            var _this = this;
            var dialog = this.dialog.open(i3.DialogOneComponent, {
                minWidth: '450px',
                maxWidth: '450px',
                data: {
                    type: i3.DialogOneEnum.DELETE,
                    icon: 'dangerous',
                    header: 'Delete consumer type?',
                    body: '<b>' + consumer.name + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                    buttonOne: i3.ButtonLabelEnum.CANCEL_BTN_LABEL,
                    buttonTwo: i3.ButtonLabelEnum.DELETE_BTN_LABEL
                }
            });
            dialog.afterClosed().subscribe(function (res) {
                if (res) {
                    _this.deleteConsumerType(consumer.id);
                }
            });
        };
        ConsumerPageComponent.prototype.deleteConsumerType = function (consumerID) {
            var _this = this;
            this.consumerController.deleteConsumerType(this.orgID, consumerID).subscribe(function (deleteRes) {
                if (deleteRes) {
                    _this.refreshBtn.nativeElement.click();
                }
            });
        };
        return ConsumerPageComponent;
    }());
    ConsumerPageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageComponent, deps: [{ token: i1__namespace$3.MatDialog }, { token: i1__namespace$2.StorageService }, { token: SourceService }, { token: ConsumerController }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsumerPageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumerPageComponent, selector: "lib-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "typeSelect", first: true, predicate: ["typeSelect"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Consumer type</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar [searchBy]=\"searchByPlaceHolder\"\n                    (emitSearch)=\"searchFn($event)\"></lib-search-bar-one>\n\n                <button class=\"btn btn-sm btn-light refreshBtn centerAlign me-3 py-1\" #refreshBtn matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.REFRESH\">\n                    <span class=\"material-symbols-outlined text-secondary\">\n                        refresh\n                    </span>\n                </button>\n\n                <button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"createConsumer(FormAction.CREATE)\" matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.CREATE\">\n                    <fa-icon [icon]=\"faPlus\" class=\"me-1\"></fa-icon>Consumer type\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <table class=\"w-100\" mat-table matSort #sort=\"matSort\" matSortActive=\"name\" matSortDirection=\"asc\"\n        matSortDisableClear [dataSource]=\"dataSource\">\n\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef>ID</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"name\">\n            <th class=\"px-4\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Name</th>\n            <td class=\"px-4\" mat-cell *matCellDef=\"let row\">\n                {{ row.name ? row.name : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"utilitySourceName\">\n            <th mat-header-cell *matHeaderCellDef>\n                <funnel-filter #typeSelect header=\"Utility source\" type=\"mono\" value=\"keyID\" [entityList]=\"utilitySourceI\"\n                    view=\"name\" [selectFC]=\"utilitySourceFC\" [active]=\"utilitySource\" (mono)=\"utilitySource = true;\">\n                </funnel-filter>\n            </th>\n            <td mat-cell *matCellDef=\"let row\">\n                {{ row.utilitySourceName ? row.utilitySourceName : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"type\">\n            <th mat-header-cell *matHeaderCellDef>Type</th>\n            <td mat-cell *matCellDef=\"let row\">\n                {{ row.type ? row.type : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"option\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let row\">\n                <div class=\"centerAlignVertical\">\n\n                    <button type=\"button\" class=\"iconBtn centerAlign text-primary updateIconHover\"\n                        (click)=\"updateConsumer(FormAction.UPDATE, row)\" matRipple [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\"\n                        matTooltipPosition=\"below\" [matTooltip]=\"ButtonTooltipEnum.UPDATE\">\n                        <span class=\"material-symbols-outlined icon\">\n                            edit\n                        </span>\n                    </button>\n\n                    <a class=\"iconBtn centerAlign text-danger deleteIconHover cursorPointer\" matTooltipPosition=\"below\"\n                        [matTooltip]=\"ButtonTooltipEnum.DELETE\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" (click)=\"openDeleteDialog(row)\">\n                        <span class=\"material-symbols-outlined icon\">\n                            delete\n                        </span>\n                    </a>\n                </div>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\" class=\"dataRow\"></tr>\n\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator class=\"roundedBorder\" showFirstLastButtons #paginator [length]=\"dataSourceLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", components: [{ type: i3__namespace.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i6__namespace$2.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i7__namespace$1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i8__namespace.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i3__namespace.FunnelFilterComponent, selector: "funnel-filter", inputs: ["header", "active", "showSearchBar", "searchByPlaceholder", "searchBy", "selectAllLabel", "entityList", "view", "value", "type", "selectFC", "resetFlag"], outputs: ["mono", "multi", "selected"] }, { type: i7__namespace$1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7__namespace$1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i9__namespace$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i8__namespace.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i7__namespace$1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7__namespace$1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7__namespace$1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7__namespace$1.MatCellDef, selector: "[matCellDef]" }, { type: i7__namespace$1.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i7__namespace$1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7__namespace$1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7__namespace$1.MatNoDataRow, selector: "ng-template[matNoDataRow]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-page',
                        templateUrl: './page.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.MatDialog }, { type: i1__namespace$2.StorageService }, { type: SourceService }, { type: ConsumerController }]; }, propDecorators: { sort: [{
                    type: i0.ViewChild,
                    args: ['sort']
                }], paginator: [{
                    type: i0.ViewChild,
                    args: ['paginator']
                }], refreshBtn: [{
                    type: i0.ViewChild,
                    args: ['refreshBtn']
                }], searchBar: [{
                    type: i0.ViewChild,
                    args: ['searchBar']
                }], typeSelect: [{
                    type: i0.ViewChild,
                    args: ['typeSelect']
                }] } });

    var routes$4 = [
        {
            path: '',
            component: ConsumerPageComponent
        }
    ];
    var ConsumerPageRoutingModule = /** @class */ (function () {
        function ConsumerPageRoutingModule() {
        }
        return ConsumerPageRoutingModule;
    }());
    ConsumerPageRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumerPageRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ConsumerPageRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$4)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$4)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ConsumerPageModule = /** @class */ (function () {
        function ConsumerPageModule() {
        }
        return ConsumerPageModule;
    }());
    ConsumerPageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumerPageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageModule, declarations: [ConsumerPageComponent], imports: [i14.CommonModule,
            ConsumerPageRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i10$1.MatRippleModule,
            i7$1.MatTableModule,
            i8.MatSortModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule,
            i9$2.MatPaginatorModule,
            i12$2.NgbModule,
            i6$2.FontAwesomeModule,
            i3.SearchBarOneModule,
            i3.FunnelFilterModule] });
    ConsumerPageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageModule, imports: [[
                i14.CommonModule,
                ConsumerPageRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i10$1.MatRippleModule,
                i7$1.MatTableModule,
                i8.MatSortModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule,
                i9$2.MatPaginatorModule,
                i12$2.NgbModule,
                i6$2.FontAwesomeModule,
                i3.SearchBarOneModule,
                i3.FunnelFilterModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerPageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ConsumerPageComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ConsumerPageRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i10$1.MatRippleModule,
                            i7$1.MatTableModule,
                            i8.MatSortModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule,
                            i9$2.MatPaginatorModule,
                            i12$2.NgbModule,
                            i6$2.FontAwesomeModule,
                            i3.SearchBarOneModule,
                            i3.FunnelFilterModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var SourceCreateUpdateComponent = /** @class */ (function () {
        function SourceCreateUpdateComponent(data, dialogRef, renderer, formBuilder, storageService, toastrService, tscCommonService, sourceController, sourceService) {
            this.data = data;
            this.dialogRef = dialogRef;
            this.renderer = renderer;
            this.formBuilder = formBuilder;
            this.storageService = storageService;
            this.toastrService = toastrService;
            this.tscCommonService = tscCommonService;
            this.sourceController = sourceController;
            this.sourceService = sourceService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.PageTitleEnum = i3.PageTitleEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.pageTitle = 'Source type';
            this.isEqual = true;
            this.allSourceTypeID = [];
            this.totalSourceTypeCount = 0;
            this.utilitySourceI = [new i3.Static()];
            this.sourceType = [new i3.Static()];
            this.errorHandling = function (formGroup, controlPath, error) {
                return formGroup.get(controlPath).hasError(error);
            };
            this.action = data.action;
            this.sourceID = data.sourceID;
        }
        SourceCreateUpdateComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getUtilitySourceAndType();
            this.sourceFGInit();
            if (this.action == i3.FormAction.UPDATE) {
                this.getSourceTypeByID(this.sourceID);
            }
        };
        SourceCreateUpdateComponent.prototype.ngAfterViewInit = function () {
            this.heightHandler();
        };
        SourceCreateUpdateComponent.prototype.heightHandler = function () {
            var headerHeight = this.header.nativeElement.offsetHeight;
            var footerHeight = this.footer.nativeElement.offsetHeight;
            var offsetHeight = 'calc(100vh - ' + (headerHeight + footerHeight + 24) + 'px)';
            this.renderer.setStyle(this.body.nativeElement, 'height', offsetHeight);
            this.renderer.setStyle(this.body.nativeElement, 'max-height', offsetHeight);
        };
        SourceCreateUpdateComponent.prototype.getUtilitySourceAndType = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sourceService.getUtilitySourceAndType(this.orgID)];
                        case 1:
                            result = _a.sent();
                            this.utilitySourceTypeM = result.utilitySource;
                            return [2 /*return*/];
                    }
                });
            });
        };
        SourceCreateUpdateComponent.prototype.sourceFGInit = function () {
            this.sourceFG = this.formBuilder.group({
                name: [, [i2$1.Validators.required]],
                utilitySourceID: [, [i2$1.Validators.required]],
                typeID: [, [i2$1.Validators.required]]
            });
        };
        SourceCreateUpdateComponent.prototype.onUtilitySourceChange = function (utilitySourceID) {
            var selectedUtilitySource = this.utilitySourceTypeM.find(function (source) { return source.id == utilitySourceID; });
            if (selectedUtilitySource) {
                this.sourceType = selectedUtilitySource.type;
            }
            else {
                this.sourceType = [];
            }
        };
        SourceCreateUpdateComponent.prototype.sourceSubmit = function () {
            if (this.sourceFG.invalid) {
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_MESSAGE, i2$3.ToastrColor.ERROR);
                return;
            }
            else {
                if (this.action == i3.FormAction.CREATE) {
                    this.createSourceType();
                }
                else if (this.action == i3.FormAction.UPDATE) {
                    this.updateSourceType();
                }
            }
        };
        SourceCreateUpdateComponent.prototype.createSourceType = function () {
            var _this = this;
            this.sourceController.createSourceType(this.orgID, this.sourceFG.value).subscribe(function (res) {
                var result;
                result = {
                    status: i3.DialogResponseEnum.SUCCESS,
                };
                _this.dialogRef.close(result);
            }, function (error) {
                console.log('error in createSourceType -', error);
            });
        };
        SourceCreateUpdateComponent.prototype.getSourceTypeByID = function (sourceID) {
            var _this = this;
            this.sourceController.getSourceTypeByID(this.orgID, sourceID).subscribe(function (res) {
                _this.sourceM = res;
                _this.patchSource(_this.sourceM);
            }, function (error) {
                console.log('error in getSourceTypeByID -', error);
            });
        };
        SourceCreateUpdateComponent.prototype.patchSource = function (source) {
            var _this = this;
            this.sourceFG.patchValue(source);
            this.onUtilitySourceChange(source.utilitySourceID);
            this.intialObject = this.sourceFG.value;
            this.sourceFG.valueChanges.subscribe(function () {
                _this.isEqual = lodash.isEqual(_this.intialObject, _this.sourceFG.value);
            });
        };
        SourceCreateUpdateComponent.prototype.updateSourceType = function () {
            var _this = this;
            this.sourceController.updateSourceType(this.orgID, this.sourceID, this.sourceFG.value).subscribe(function (res) {
                var result;
                result = {
                    status: i3.DialogResponseEnum.SUCCESS,
                };
                _this.dialogRef.close(result);
            }, function (error) {
                console.log('error in updateSourceType -', error);
            });
        };
        return SourceCreateUpdateComponent;
    }());
    SourceCreateUpdateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateComponent, deps: [{ token: i1$3.MAT_DIALOG_DATA }, { token: i1__namespace$3.MatDialogRef }, { token: i0__namespace.Renderer2 }, { token: i2__namespace$1.FormBuilder }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: i3__namespace.TSCCommonService }, { token: SourceController }, { token: SourceService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SourceCreateUpdateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourceCreateUpdateComponent, selector: "lib-create-update", viewQueries: [{ propertyName: "header", first: true, predicate: ["header"], descendants: true }, { propertyName: "footer", first: true, predicate: ["footer"], descendants: true }, { propertyName: "body", first: true, predicate: ["body"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"headerContainer p-0\" #header>\n    <div class=\"headerLeftContainer\">\n        <div class=\"pageTitle\">{{ action == FormAction.CREATE ? PageTitleEnum.CREATE :\n            PageTitleEnum.UPDATE }} {{ pageTitle }}</div>\n    </div>\n\n    <div class=\"headerRightContainer\">\n        <div class=\"headerRightContainerInner\">\n            <button class=\"btn btn-sm centerAlign py-1 iconBtn\" matRipple\n                [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                [matTooltip]=\"ButtonTooltipEnum.CLOSE\" mat-dialog-close>\n                <span class=\"material-symbols-outlined\">\n                    close\n                </span>\n            </button>\n        </div>\n    </div>\n</div>\n\n<mat-dialog-content class=\"mat-typography customScrollBar pt-2\" #body>\n    <form [formGroup]=\"sourceFG\" (ngSubmit)=\"sourceSubmit()\">\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\"\n                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Name</mat-label>\n                    <input class=\"formPlaceholder\" type=\"text\" placeholder=\"Source name\" matInput formControlName=\"name\"\n                        required />\n                    <mat-error *ngIf=\"errorHandling(sourceFG, 'name', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select utility source</mat-label>\n\n                    <mat-select formControlName=\"utilitySourceID\" (selectionChange)=\"onUtilitySourceChange($event.value)\" required>\n                        <ng-container\n                            *ngIf=\"utilitySourceTypeM && utilitySourceTypeM.length > 0 && utilitySourceTypeM[0]['id']; else noUtilitySource\">\n                            <mat-option *ngFor=\"let utilitySource of utilitySourceTypeM\" [value]=\"utilitySource.id\">\n                                {{ utilitySource.name }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noUtilitySource>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"errorHandling(sourceFG, 'utilitySourceID', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select utility source type</mat-label>\n\n                    <mat-select formControlName=\"typeID\" required>\n                        <ng-container *ngIf=\"sourceType && sourceType.length > 0 && sourceType[0]['id']; else noSourceType\">\n                            <mat-option *ngFor=\"let type of sourceType\" [value]=\"type.id\">\n                                {{ type.name }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noSourceType>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"errorHandling(sourceFG, 'typeID', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n    </form>\n</mat-dialog-content>\n\n<div class=\"tscDialogFooter\" #footer>\n    <button class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled': isEqual && action == FormAction.UPDATE}\"\n        (click)=\"formSubmitBtn.click()\" matRipple [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\"\n        matTooltipPosition=\"below\" [matTooltip]=\"ButtonTooltipEnum.NO_CHANGE\"> {{\n        tscCommonService.getButtonLabel(action) }}</button>\n    <button class=\"btn btn-sm btn-secondary me-2\" mat-dialog-close matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">Cancel</button>\n</div>", components: [{ type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i1__namespace$3.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1__namespace$3.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i12__namespace$3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-create-update',
                        templateUrl: './create-update.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.MAT_DIALOG_DATA]
                        }] }, { type: i1__namespace$3.MatDialogRef }, { type: i0__namespace.Renderer2 }, { type: i2__namespace$1.FormBuilder }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: i3__namespace.TSCCommonService }, { type: SourceController }, { type: SourceService }];
        }, propDecorators: { header: [{
                    type: i0.ViewChild,
                    args: ['header']
                }], footer: [{
                    type: i0.ViewChild,
                    args: ['footer']
                }], body: [{
                    type: i0.ViewChild,
                    args: ['body']
                }] } });

    var routes$3 = [
        {
            path: '',
            component: SourceCreateUpdateComponent
        }
    ];
    var SourceCreateUpdateRoutingModule = /** @class */ (function () {
        function SourceCreateUpdateRoutingModule() {
        }
        return SourceCreateUpdateRoutingModule;
    }());
    SourceCreateUpdateRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourceCreateUpdateRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    SourceCreateUpdateRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$3)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$3)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var SourceCreateUpdateModule = /** @class */ (function () {
        function SourceCreateUpdateModule() {
        }
        return SourceCreateUpdateModule;
    }());
    SourceCreateUpdateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourceCreateUpdateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateModule, declarations: [SourceCreateUpdateComponent], imports: [i14.CommonModule,
            SourceCreateUpdateRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12$1.MatIconModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i11.MatTooltipModule,
            i10$1.MatOptionModule,
            i3$1.MatFormFieldModule,
            i6.MatButtonModule,
            i10$1.MatRippleModule,
            i1$3.MatDialogModule,
            i12$2.NgbModule] });
    SourceCreateUpdateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateModule, imports: [[
                i14.CommonModule,
                SourceCreateUpdateRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12$1.MatIconModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i11.MatTooltipModule,
                i10$1.MatOptionModule,
                i3$1.MatFormFieldModule,
                i6.MatButtonModule,
                i10$1.MatRippleModule,
                i1$3.MatDialogModule,
                i12$2.NgbModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourceCreateUpdateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            SourceCreateUpdateComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            SourceCreateUpdateRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12$1.MatIconModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i11.MatTooltipModule,
                            i10$1.MatOptionModule,
                            i3$1.MatFormFieldModule,
                            i6.MatButtonModule,
                            i10$1.MatRippleModule,
                            i1$3.MatDialogModule,
                            i12$2.NgbModule
                        ]
                    }]
            }] });

    var routes$2 = [
        {
            path: '',
            component: ConsumerCreateUpdateComponent
        }
    ];
    var ConsumerCreateUpdateRoutingModule = /** @class */ (function () {
        function ConsumerCreateUpdateRoutingModule() {
        }
        return ConsumerCreateUpdateRoutingModule;
    }());
    ConsumerCreateUpdateRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumerCreateUpdateRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ConsumerCreateUpdateRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$2)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$2)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var ConsumerCreateUpdateModule = /** @class */ (function () {
        function ConsumerCreateUpdateModule() {
        }
        return ConsumerCreateUpdateModule;
    }());
    ConsumerCreateUpdateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumerCreateUpdateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateModule, declarations: [ConsumerCreateUpdateComponent], imports: [i14.CommonModule,
            ConsumerCreateUpdateRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12$1.MatIconModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i11.MatTooltipModule,
            i10$1.MatOptionModule,
            i3$1.MatFormFieldModule,
            i6.MatButtonModule,
            i10$1.MatRippleModule,
            i1$3.MatDialogModule,
            i12$2.NgbModule] });
    ConsumerCreateUpdateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateModule, imports: [[
                i14.CommonModule,
                ConsumerCreateUpdateRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12$1.MatIconModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i11.MatTooltipModule,
                i10$1.MatOptionModule,
                i3$1.MatFormFieldModule,
                i6.MatButtonModule,
                i10$1.MatRippleModule,
                i1$3.MatDialogModule,
                i12$2.NgbModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumerCreateUpdateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ConsumerCreateUpdateComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ConsumerCreateUpdateRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12$1.MatIconModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i11.MatTooltipModule,
                            i10$1.MatOptionModule,
                            i3$1.MatFormFieldModule,
                            i6.MatButtonModule,
                            i10$1.MatRippleModule,
                            i1$3.MatDialogModule,
                            i12$2.NgbModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var SourcePageComponent = /** @class */ (function () {
        function SourcePageComponent(dialog, storageService, sourceController, sourceService) {
            var _this = this;
            this.dialog = dialog;
            this.storageService = storageService;
            this.sourceController = sourceController;
            this.sourceService = sourceService;
            this.faPlus = freeSolidSvgIcons.faPlus;
            this.faEllipsisV = freeSolidSvgIcons.faEllipsisV;
            this.MATERIAL_CONSTANT = i3.MATERIAL_CONSTANT;
            this.TABLE_CONSTANT = i3.TABLE_CONSTANT;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.ButtonTooltipEnum = i3.ButtonTooltipEnum;
            this.DialogResponseEnum = i3.DialogResponseEnum;
            this.FormAction = i3.FormAction;
            this.searchByPlaceHolder = 'source name';
            this.dataSource = [new SourceConsumerPage()];
            this.dataSourceLength = 0;
            this.displayedColumn = ['id', 'name', 'utilitySourceName', 'type', 'option'];
            this.searchFlag = false;
            this.searchFC = new i2$1.FormControl('', i2$1.Validators.required);
            this.utilitySource = false;
            this.utilitySourceFC = new i2$1.FormControl();
            this.filterArr = [];
            this.updateSource = function (action, row) {
                var dialogRef = _this.dialog.open(SourceCreateUpdateComponent, {
                    height: '100vh',
                    width: '600px',
                    position: { right: '-2px', top: '0px' },
                    disableClose: true,
                    panelClass: 'matDialogContainerOverride',
                    data: {
                        action: action,
                        sourceID: row.id
                    }
                });
                dialogRef.afterClosed()
                    .subscribe(function (result) {
                    if (result.status == i3.DialogResponseEnum.SUCCESS) {
                        _this.refreshBtn.nativeElement.click();
                    }
                });
            };
        }
        SourcePageComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getUtilitySourceAndType();
        };
        SourcePageComponent.prototype.getUtilitySourceAndType = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, allKey;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sourceService.getUtilitySourceAndType(this.orgID)];
                        case 1:
                            result = _a.sent();
                            allKey = {
                                "id": 0,
                                "name": "All",
                                "keyID": "ALL",
                                "type": []
                            };
                            result.utilitySource.unshift(allKey);
                            this.utilitySourceI = result.utilitySource;
                            return [2 /*return*/];
                    }
                });
            });
        };
        SourcePageComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            rxjs.merge(this.sort.sortChange, this.typeSelect.mono, rxjs.fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(operators.startWith({}), operators.switchMap(function () {
                _this.filterArr = [];
                if (_this.searchFlag) {
                    var searchValue = 'name:' + _this.searchValue;
                }
                if (_this.utilitySource) {
                    if (_this.utilitySourceFC.value == 'ALL') {
                        _this.utilitySource = false;
                    }
                    else {
                        _this.filterArr.push('utilitySource:' + _this.utilitySourceFC.value);
                    }
                }
                return _this.sourceController.getSourceTypeByPage(_this.paginator.pageIndex, _this.paginator.pageSize, _this.sort.active, _this.sort.direction, searchValue, _this.filterArr, _this.orgID).pipe(operators.catchError(function () { return rxjs.of(null); }));
            }), operators.map(function (response) {
                if (response == null) {
                    _this.dataSourceLength = 0;
                    return [];
                }
                _this.dataSourceLength = response.totalCount;
                return response.records;
            })).subscribe(function (dataSource) {
                _this.dataSource = dataSource;
            });
        };
        SourcePageComponent.prototype.searchFn = function (value) {
            this.searchFlag = true;
            this.searchValue = value;
            if (value.length == 0) {
                this.resetSearch();
            }
            this.refreshBtn.nativeElement.click();
        };
        SourcePageComponent.prototype.resetSearch = function () {
            this.searchFlag = false;
            this.searchBar.searchClear();
        };
        SourcePageComponent.prototype.createSource = function (action) {
            var _this = this;
            var dialogRef = this.dialog.open(SourceCreateUpdateComponent, {
                height: '100vh',
                width: '600px',
                position: { right: '-2px', top: '0px' },
                disableClose: true,
                panelClass: 'matDialogContainerOverride',
                data: {
                    action: action
                }
            });
            dialogRef.afterClosed()
                .subscribe(function (result) {
                if (result.status == i3.DialogResponseEnum.SUCCESS) {
                    _this.refreshBtn.nativeElement.click();
                }
            });
        };
        SourcePageComponent.prototype.openDeleteDialog = function (source) {
            var _this = this;
            var dialog = this.dialog.open(i3.DialogOneComponent, {
                minWidth: '450px',
                maxWidth: '450px',
                data: {
                    type: i3.DialogOneEnum.DELETE,
                    icon: 'dangerous',
                    header: 'Delete source type?',
                    body: '<b>' + source.name + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                    buttonOne: i3.ButtonLabelEnum.CANCEL_BTN_LABEL,
                    buttonTwo: i3.ButtonLabelEnum.DELETE_BTN_LABEL
                }
            });
            dialog.afterClosed().subscribe(function (res) {
                if (res) {
                    _this.deleteSourceType(source.id);
                }
            });
        };
        SourcePageComponent.prototype.deleteSourceType = function (sourceID) {
            var _this = this;
            this.sourceController.deleteSourceType(this.orgID, sourceID).subscribe(function (deleteRes) {
                if (deleteRes) {
                    _this.refreshBtn.nativeElement.click();
                }
            });
        };
        return SourcePageComponent;
    }());
    SourcePageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageComponent, deps: [{ token: i1__namespace$3.MatDialog }, { token: i1__namespace$2.StorageService }, { token: SourceController }, { token: SourceService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SourcePageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourcePageComponent, selector: "lib-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "typeSelect", first: true, predicate: ["typeSelect"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Source type</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar [searchBy]=\"searchByPlaceHolder\"\n                    (emitSearch)=\"searchFn($event)\"></lib-search-bar-one>\n\n                <button class=\"btn btn-sm btn-light refreshBtn centerAlign me-3 py-1\" #refreshBtn matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.REFRESH\">\n                    <span class=\"material-symbols-outlined text-secondary\">\n                        refresh\n                    </span>\n                </button>\n\n                <button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"createSource(FormAction.CREATE)\" matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.CREATE\">\n                    <fa-icon [icon]=\"faPlus\" class=\"me-1\"></fa-icon>Source type\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <table class=\"w-100\" mat-table matSort #sort=\"matSort\" matSortActive=\"name\" matSortDirection=\"asc\"\n        matSortDisableClear [dataSource]=\"dataSource\">\n\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef>ID</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"name\">\n            <th class=\"px-4\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Name</th>\n            <td class=\"px-4\" mat-cell *matCellDef=\"let row\">\n                {{ row.name ? row.name : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"utilitySourceName\">\n            <th mat-header-cell *matHeaderCellDef>\n                <funnel-filter #typeSelect header=\"Utility source\" type=\"mono\" value=\"keyID\"\n                    [entityList]=\"utilitySourceI\" view=\"name\" [selectFC]=\"utilitySourceFC\" [active]=\"utilitySource\"\n                    (mono)=\"utilitySource = true;\">\n                </funnel-filter>\n            </th>\n            <td mat-cell *matCellDef=\"let row\">\n                {{ row.utilitySourceName ? row.utilitySourceName : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"type\">\n            <th class=\"px-4\" mat-header-cell *matHeaderCellDef>Utility source type</th>\n            <td class=\"px-4\" mat-cell *matCellDef=\"let row\">\n                {{ row.type ? row.type : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"option\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let row\">\n                <div class=\"centerAlignVertical\">\n\n                    <button type=\"button\" class=\"iconBtn centerAlign text-primary updateIconHover\"\n                        (click)=\"updateSource(FormAction.UPDATE, row)\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                        [matTooltip]=\"ButtonTooltipEnum.UPDATE\">\n                        <span class=\"material-symbols-outlined icon\">\n                            edit\n                        </span>\n                    </button>\n\n                    <a class=\"iconBtn centerAlign text-danger deleteIconHover cursorPointer\" matTooltipPosition=\"below\"\n                        [matTooltip]=\"ButtonTooltipEnum.DELETE\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" (click)=\"openDeleteDialog(row)\">\n                        <span class=\"material-symbols-outlined icon\">\n                            delete\n                        </span>\n                    </a>\n                </div>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\" class=\"dataRow\"></tr>\n\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator class=\"roundedBorder\" showFirstLastButtons #paginator [length]=\"dataSourceLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", components: [{ type: i3__namespace.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i6__namespace$2.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i7__namespace$1.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i8__namespace.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i3__namespace.FunnelFilterComponent, selector: "funnel-filter", inputs: ["header", "active", "showSearchBar", "searchByPlaceholder", "searchBy", "selectAllLabel", "entityList", "view", "value", "type", "selectFC", "resetFlag"], outputs: ["mono", "multi", "selected"] }, { type: i7__namespace$1.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7__namespace$1.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i9__namespace$2.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i10__namespace.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i11__namespace.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i8__namespace.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i7__namespace$1.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7__namespace$1.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7__namespace$1.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7__namespace$1.MatCellDef, selector: "[matCellDef]" }, { type: i7__namespace$1.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i7__namespace$1.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7__namespace$1.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7__namespace$1.MatNoDataRow, selector: "ng-template[matNoDataRow]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-page',
                        templateUrl: './page.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.MatDialog }, { type: i1__namespace$2.StorageService }, { type: SourceController }, { type: SourceService }]; }, propDecorators: { sort: [{
                    type: i0.ViewChild,
                    args: ['sort']
                }], paginator: [{
                    type: i0.ViewChild,
                    args: ['paginator']
                }], refreshBtn: [{
                    type: i0.ViewChild,
                    args: ['refreshBtn']
                }], searchBar: [{
                    type: i0.ViewChild,
                    args: ['searchBar']
                }], typeSelect: [{
                    type: i0.ViewChild,
                    args: ['typeSelect']
                }] } });

    var routes$1 = [
        {
            path: '',
            component: SourcePageComponent
        }
    ];
    var SourcePageRoutingModule = /** @class */ (function () {
        function SourcePageRoutingModule() {
        }
        return SourcePageRoutingModule;
    }());
    SourcePageRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourcePageRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    SourcePageRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageRoutingModule, imports: [[i1$1.RouterModule.forChild(routes$1)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes$1)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var SourcePageModule = /** @class */ (function () {
        function SourcePageModule() {
        }
        return SourcePageModule;
    }());
    SourcePageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SourcePageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageModule, declarations: [SourcePageComponent], imports: [i14.CommonModule,
            SourcePageRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i10$1.MatRippleModule,
            i7$1.MatTableModule,
            i8.MatSortModule,
            i11.MatTooltipModule,
            i1$3.MatDialogModule,
            i9$2.MatPaginatorModule,
            i12$2.NgbModule,
            i6$2.FontAwesomeModule,
            i3.SearchBarOneModule,
            i3.FunnelFilterModule] });
    SourcePageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageModule, imports: [[
                i14.CommonModule,
                SourcePageRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i10$1.MatRippleModule,
                i7$1.MatTableModule,
                i8.MatSortModule,
                i11.MatTooltipModule,
                i1$3.MatDialogModule,
                i9$2.MatPaginatorModule,
                i12$2.NgbModule,
                i6$2.FontAwesomeModule,
                i3.SearchBarOneModule,
                i3.FunnelFilterModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SourcePageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            SourcePageComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            SourcePageRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i10$1.MatRippleModule,
                            i7$1.MatTableModule,
                            i8.MatSortModule,
                            i11.MatTooltipModule,
                            i1$3.MatDialogModule,
                            i9$2.MatPaginatorModule,
                            i12$2.NgbModule,
                            i6$2.FontAwesomeModule,
                            i3.SearchBarOneModule,
                            i3.FunnelFilterModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionParamAddUpdateComponent = /** @class */ (function () {
        function ConsumptionParamAddUpdateComponent(formBuilder, storageService, toastrService, tscCommonService, sourceController, parameterController, parameterService) {
            var _this = this;
            this.formBuilder = formBuilder;
            this.storageService = storageService;
            this.toastrService = toastrService;
            this.tscCommonService = tscCommonService;
            this.sourceController = sourceController;
            this.parameterController = parameterController;
            this.parameterService = parameterService;
            this.COMMON_CONSTANT = i3.COMMON_CONSTANT;
            this.FormAction = i3.FormAction;
            this.FormErrorEnum = i3.FormErrorEnum;
            this.ButtonLabelEnum = i3.ButtonLabelEnum;
            this.PageTitleEnum = i3.PageTitleEnum;
            this.MessageAlertIconEnum = i3.MessageAlertIconEnum;
            this.MessageAlertTypeEnum = i3.MessageAlertTypeEnum;
            this.MaterialFormFieldAppearance = i3.MaterialFormFieldAppearance;
            this.isEqual = true;
            this.sourceConsumerConfiguredM = new SourceConsumerConfigure();
            this.allConsumptionParamID = [];
            this.selection = new collections.SelectionModel(true, []);
            this.dependentConsumParamSearchUtil = [];
            this.hasError = function (control, error) {
                return _this.consumptionParamFG.get(control).hasError(error);
            };
        }
        ConsumptionParamAddUpdateComponent.prototype.ngOnInit = function () {
            this.orgID = this.storageService.getStorage('currentOrgID');
            this.getSourceConsumerConfig();
            this.consumptionParamFGInit();
        };
        ConsumptionParamAddUpdateComponent.prototype.getSourceConsumerConfig = function () {
            var _this = this;
            this.sourceController.getSourceConsumerConfig(this.orgID).subscribe(function (res) {
                _this.sourceConsumerConfiguredM = res;
                _this.getConsumptionParameter();
            }, function (error) { return console.log('Error:', error); });
        };
        ConsumptionParamAddUpdateComponent.prototype.getConsumptionParameter = function () {
            var _this = this;
            this.consumptionParamFG.valueChanges.subscribe(function () { _this.isEqual = lodash.isEqual(_this.initialObject, _this.consumptionParamFG.getRawValue()); });
            this.parameterController.getConsumptionParameter(this.orgID).subscribe(function (response) {
                if (response) {
                    _this.consumptionParamM = response.consumptionParameter;
                    _this.consumptionParamM.forEach(function (parameter) {
                        _this.allConsumptionParamID.push(parameter);
                        _this.consumptionParameterFA.push(_this.newConsumptionParameterFG(parameter.id));
                        var searchUtility = new i3.MatSelectSearchService(['label']);
                        searchUtility.entityArr = parameter.dependentParameter;
                        searchUtility.createSubscription();
                        _this.dependentConsumParamSearchUtil.push(searchUtility);
                        _this.initialObject = _this.consumptionParamFG.value;
                        _this.isEqual = true;
                    });
                    _this.getSavedConsumptionParameter();
                }
            }, function (error) {
                console.log('error in getConsumptionParameter -', error);
            });
        };
        ConsumptionParamAddUpdateComponent.prototype.consumptionParamFGInit = function () {
            this.consumptionParamFG = this.formBuilder.group({
                consumptionParameter: this.formBuilder.array([])
            });
        };
        Object.defineProperty(ConsumptionParamAddUpdateComponent.prototype, "consumptionParameterFA", {
            get: function () {
                return this.consumptionParamFG.get('consumptionParameter');
            },
            enumerable: false,
            configurable: true
        });
        ConsumptionParamAddUpdateComponent.prototype.getSavedConsumptionParameter = function () {
            return __awaiter(this, void 0, void 0, function () {
                var param;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.parameterService.getSavedConsumptionParameter(this.orgID)];
                        case 1:
                            param = _a.sent();
                            this.patchConsumptionParam(param);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConsumptionParamAddUpdateComponent.prototype.patchConsumptionParam = function (param) {
            var _this = this;
            this.consumptionParameterFA.controls.forEach(function (control) {
                param.forEach(function (element) {
                    _this.selection.select(element['aggregateParamID']);
                    if (element['aggregateParamID'] == control.value['aggregateParamID'])
                        control.get('dependentParameterID').patchValue(element['dependentParameterID']);
                });
            });
        };
        ConsumptionParamAddUpdateComponent.prototype.selectAll = function () {
            var _this = this;
            if (this.isAllSelected()) {
                this.consumptionParameterFA.controls.forEach(function (control) {
                    var id = control.get('aggregateParamID').value;
                    _this.selection.deselect(id);
                });
                return;
            }
            this.consumptionParameterFA.controls.forEach(function (control) {
                var id = control.get('aggregateParamID').value;
                _this.selection.select(id);
            });
        };
        ConsumptionParamAddUpdateComponent.prototype.isAllSelected = function () {
            var selected = this.selection.selected.length;
            var numRows = this.consumptionParamM.length;
            return selected == numRows;
        };
        ConsumptionParamAddUpdateComponent.prototype.newConsumptionParameterFG = function (parameterID) {
            return this.formBuilder.group({
                aggregateParamID: [parameterID],
                dependentParameterID: [[], i2$1.Validators.required]
            });
        };
        ConsumptionParamAddUpdateComponent.prototype.selectAllDependentParam = function (index) {
            var dependentParamFG = this.consumptionParameterFA.at(index);
            var dependentParamFC = dependentParamFG.get('dependentParameterID');
            if (!dependentParamFC.value.includes(-1)) {
                dependentParamFC.reset([]);
                return;
            }
            var parameter = this.consumptionParamM[index];
            var parameterDependentIDs = parameter.dependentParameter.map(function (depParam) { return depParam.id; });
            dependentParamFC.setValue(__spreadArray([-1], __read(parameterDependentIDs)));
        };
        ConsumptionParamAddUpdateComponent.prototype.selectDependentParam = function (index) {
            var dependentParamFG = this.consumptionParameterFA.at(index);
            var dependentParamFC = dependentParamFG.get('dependentParameterID');
            var selected = dependentParamFC.value;
            var parameter = this.consumptionParamM[index];
            var parameterDependentIDs = parameter.dependentParameter.map(function (depParam) { return depParam.id; });
            var totalDepParamCount = parameterDependentIDs.length;
            if (selected.includes(-1)) {
                selected.shift();
                dependentParamFC.patchValue(selected);
            }
            else if (dependentParamFC.value.length == totalDepParamCount) {
                parameterDependentIDs.splice(0, 0, -1);
                dependentParamFC.patchValue(parameterDependentIDs);
            }
            else {
                var filteredSelected = selected.filter(function (s) { return s != -1; });
                dependentParamFC.patchValue(filteredSelected);
            }
        };
        ConsumptionParamAddUpdateComponent.prototype.consumptionParameterSubmit = function () {
            var _this = this;
            var consumptionParameter = this.consumptionParamFG.value.consumptionParameter.map(function (param) {
                var dependentParameterID = param.dependentParameterID.includes(-1)
                    ? param.dependentParameterID.filter(function (id) { return id != -1; })
                    : param.dependentParameterID;
                return Object.assign(Object.assign({}, param), { dependentParameterID: dependentParameterID });
            });
            if (this.consumptionParamFG.invalid) {
                this.consumptionParamFG.markAllAsTouched();
                this.toastrService.openToast(i3.InvalidForm.INVALID_FORM_TITLE, i3.InvalidForm.INVALID_FORM_TITLE, i2$3.ToastrColor.ERROR);
                return;
            }
            this.parameterController.saveConsumptionParameter(this.orgID, consumptionParameter).subscribe(function (res) {
                _this.getConsumptionParameter();
            }, function (error) {
                console.log('error in saveConsumptionParameter -', error);
            });
        };
        ConsumptionParamAddUpdateComponent.prototype.toggleField = function (index, parameterID) {
            if (this.selection.isSelected(parameterID)) {
                this.consumptionParameterFA.controls[index].enable();
                return false;
            }
            else {
                this.consumptionParameterFA.controls[index].disable();
                return true;
            }
        };
        return ConsumptionParamAddUpdateComponent;
    }());
    ConsumptionParamAddUpdateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateComponent, deps: [{ token: i2__namespace$1.FormBuilder }, { token: i1__namespace$2.StorageService }, { token: i2__namespace$3.ToastrService }, { token: i3__namespace.TSCCommonService }, { token: SourceController }, { token: ParameterController }, { token: ParameterService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsumptionParamAddUpdateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumptionParamAddUpdateComponent, selector: "lib-add-update", ngImport: i0__namespace, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Add Consumption Parameter</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <ng-container *ngIf=\"sourceConsumerConfiguredM?.sourceTypeConfigured; else notSourceType\">\n            <ng-container\n                *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noComsumptionParamFound\">\n                <div class=\"row\">\n                    <div class=\"col-sm-12 mb-3\">\n                        <lib-message-alert [labelInp]=\"'Info'\"\n                            [contentInp]=\"'Adding consumption parameters will impact your data.'\"\n                            [messageAlertTypeInp]=\"MessageAlertTypeEnum.INFO\"\n                            [messageAlertIconInp]=\"MessageAlertIconEnum.INFO_ICON\">\n                        </lib-message-alert>\n                    </div>\n                </div>\n                <form [formGroup]=\"consumptionParamFG\" (ngSubmit)=\"consumptionParameterSubmit()\">\n                    <ng-container formArrayName=\"consumptionParameter\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <table class=\"table\">\n                                    <tbody>\n                                        <tr class=\"tableHeader\">\n                                            <td><mat-checkbox (change)=\"$event ? selectAll() : null\"\n                                                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                                                    [disabled]=\"consumptionParamM.length == 0 || consumptionParamM[0]['id'] == null\">\n                                                    Select all\n                                                </mat-checkbox></td>\n                                            <td align=\"center\" class=\"fw-bold\"> Consumption Parameter </td>\n                                            <td align=\"center\" class=\"fw-bold\"> Dependent Parameter </td>\n                                        </tr>\n                                    </tbody>\n                                    <tbody>\n                                        <tr *ngFor=\"let parameter of consumptionParamM; let i = index\">\n                                            <ng-container [formGroupName]=\"i\">\n                                                <td>\n                                                    <mat-checkbox\n                                                        (change)=\"$event ? selection.toggle(parameter.id) : null\"\n                                                        [checked]=\"selection.isSelected(parameter.id)\"></mat-checkbox>\n                                                </td>\n                                                <td align=\"center\">\n                                                    <div class=\"mt-4\">\n                                                        {{ parameter.label }}\n                                                    </div>\n                                                </td>\n                                                <td align=\"center\">\n                                                    <div class=\"row pt-2\">\n                                                        <div class=\"col-sm-8\">\n                                                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                                                <mat-label>Select dependent parameter</mat-label>\n\n                                                                <mat-select formControlName=\"dependentParameterID\" [disabled]=\"toggleField(i, parameter.id)\"\n                                                                    (selectionChange)=\"selection.select(parameter.id)\" multiple required>\n                                                                    <ng-container *ngIf=\"dependentConsumParamSearchUtil[i]['filteredEntities']; else noDependentParamFound\">\n                                                                        <ngx-mat-select-search [formControl]=\"dependentConsumParamSearchUtil[i].filterFC\"\n                                                                            placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                                                                        </ngx-mat-select-search>\n                                                                        <mat-option [value]=\"-1\" (click)=\"selectAllDependentParam(i)\"\n                                                                            [hidden]=\"dependentConsumParamSearchUtil[i].filterFC.value\">\n                                                                            Select all\n                                                                        </mat-option>\n                                                                        <mat-option *ngFor=\"let param of dependentConsumParamSearchUtil[i]['filteredEntities'] | async\"\n                                                                            [value]=\"param.id\" (click)=\"selectDependentParam(i)\">\n                                                                            {{ param.label }}\n                                                                        </mat-option>\n                                                                    </ng-container>\n                                                                    <ng-template #noDependentParamFound>\n                                                                        <mat-option disabled>\n                                                                            {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                                        </mat-option>\n                                                                    </ng-template>\n                                                                </mat-select>\n\n                                                                <mat-error *ngIf=\"this.consumptionParameterFA.controls[i].get('dependentParameterID').hasError('required')\">\n                                                                    {{ FormErrorEnum.REQUIRED }}\n                                                                </mat-error>\n                                                            </mat-form-field>\n                                                        </div>\n                                                    </div>\n                                                </td>\n                                            </ng-container>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </ng-container>\n\n                    <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n                    <div class=\"row mt-2\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"float-end\">\n                                <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\"\n                                    (click)=\"tscCommonService.back()\">\n                                    {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                                </button>\n\n                                <button class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled' : isEqual}\"\n                                    type=\"submit\">{{\n                                    ButtonLabelEnum.SAVE_BTN_LABEL }}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </ng-container>\n            <ng-template #noComsumptionParamFound>\n                <lib-message-alert [labelInp]=\"'Not found!'\" [contentInp]=\"'No consumption parameter found.'\"\n                    [messageAlertTypeInp]=\"MessageAlertTypeEnum.DANGER\"\n                    [messageAlertIconInp]=\"MessageAlertIconEnum.DANGER_ICON\">\n                </lib-message-alert>\n            </ng-template>\n        </ng-container>\n        <ng-template #notSourceType>\n            <lib-message-alert [labelInp]=\"'Info'\"\n                [contentInp]=\"'Source type not set. Please set source type first to add consumption parameters'\"\n                [messageAlertTypeInp]=\"MessageAlertTypeEnum.INFO\"\n                [messageAlertIconInp]=\"MessageAlertIconEnum.INFO_ICON\">\n            </lib-message-alert>\n        </ng-template>\n    </div>\n</div>", components: [{ type: i3__namespace.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i10__namespace$3.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i3__namespace$1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4__namespace.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i6__namespace$1.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i10__namespace.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i14__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i14__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i3__namespace$1.MatLabel, selector: "mat-label" }, { type: i2__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i3__namespace$1.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i14__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'lib-add-update',
                        templateUrl: './add-update.component.html',
                        styles: []
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.FormBuilder }, { type: i1__namespace$2.StorageService }, { type: i2__namespace$3.ToastrService }, { type: i3__namespace.TSCCommonService }, { type: SourceController }, { type: ParameterController }, { type: ParameterService }]; } });

    var routes = [
        {
            path: '',
            component: ConsumptionParamAddUpdateComponent
        }
    ];
    var ConsumptionParamAddUpdateRoutingModule = /** @class */ (function () {
        function ConsumptionParamAddUpdateRoutingModule() {
        }
        return ConsumptionParamAddUpdateRoutingModule;
    }());
    ConsumptionParamAddUpdateRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionParamAddUpdateRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    ConsumptionParamAddUpdateRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateRoutingModule, imports: [[i1$1.RouterModule.forChild(routes)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    // /tsc-library/
    var ConsumptionParamAddUpdateModule = /** @class */ (function () {
        function ConsumptionParamAddUpdateModule() {
        }
        return ConsumptionParamAddUpdateModule;
    }());
    ConsumptionParamAddUpdateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsumptionParamAddUpdateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateModule, declarations: [ConsumptionParamAddUpdateComponent], imports: [i14.CommonModule,
            ConsumptionParamAddUpdateRoutingModule,
            i2$1.FormsModule,
            i2$1.ReactiveFormsModule,
            i12$1.MatIconModule,
            i12.MatInputModule,
            i4.MatSelectModule,
            i11.MatTooltipModule,
            i10$1.MatOptionModule,
            i3$1.MatFormFieldModule,
            i6.MatButtonModule,
            i10$1.MatRippleModule,
            i10$3.MatCheckboxModule,
            i7$1.MatTableModule,
            i6$1.NgxMatSelectSearchModule,
            i3.MessageAlertModule] });
    ConsumptionParamAddUpdateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateModule, imports: [[
                i14.CommonModule,
                ConsumptionParamAddUpdateRoutingModule,
                i2$1.FormsModule,
                i2$1.ReactiveFormsModule,
                i12$1.MatIconModule,
                i12.MatInputModule,
                i4.MatSelectModule,
                i11.MatTooltipModule,
                i10$1.MatOptionModule,
                i3$1.MatFormFieldModule,
                i6.MatButtonModule,
                i10$1.MatRippleModule,
                i10$3.MatCheckboxModule,
                i7$1.MatTableModule,
                i6$1.NgxMatSelectSearchModule,
                i3.MessageAlertModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ConsumptionParamAddUpdateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ConsumptionParamAddUpdateComponent
                        ],
                        imports: [
                            i14.CommonModule,
                            ConsumptionParamAddUpdateRoutingModule,
                            i2$1.FormsModule,
                            i2$1.ReactiveFormsModule,
                            i12$1.MatIconModule,
                            i12.MatInputModule,
                            i4.MatSelectModule,
                            i11.MatTooltipModule,
                            i10$1.MatOptionModule,
                            i3$1.MatFormFieldModule,
                            i6.MatButtonModule,
                            i10$1.MatRippleModule,
                            i10$3.MatCheckboxModule,
                            i7$1.MatTableModule,
                            i6$1.NgxMatSelectSearchModule,
                            i3.MessageAlertModule
                        ]
                    }]
            }] });

    // /tsc-library/
    var Interceptor = /** @class */ (function () {
        function Interceptor(storageService) {
            this.storageService = storageService;
        }
        Interceptor.prototype.intercept = function (request, next) {
            var layoutID = this.storageService.getStorage('layoutID');
            request = request.clone({
                setHeaders: { layoutID: "" + layoutID }
            });
            return next.handle(request).pipe();
        };
        return Interceptor;
    }());
    Interceptor.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: Interceptor, deps: [{ token: i1__namespace$2.StorageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    Interceptor.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: Interceptor });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: Interceptor, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.StorageService }]; } });

    var MakeModelController = /** @class */ (function () {
        function MakeModelController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        MakeModelController.prototype.getMake = function (type) {
            var params = new i1.HttpParams();
            params = params.append('type', type);
            return this.http.get(this.environment.TSC_COMMON_API_URL + "make", { params: params });
        };
        MakeModelController.prototype.getModel = function (makeID, type) {
            var params = new i1.HttpParams();
            params = params.append('type', type);
            return this.http.get(this.environment.TSC_COMMON_API_URL + "make/" + makeID + "/model", { params: params });
        };
        return MakeModelController;
    }());
    MakeModelController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MakeModelController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MakeModelController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MakeModelController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MakeModelController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var RegulatorController = /** @class */ (function () {
        function RegulatorController(http, environment) {
            this.http = http;
            this.environment = environment;
        }
        RegulatorController.prototype.getRegulatorStatusInfo = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/regulators/status");
        };
        RegulatorController.prototype.getRegulatorsType = function (orgID) {
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/regulators/type");
        };
        RegulatorController.prototype.getRegulatorsEntities = function (regulatorTypeFilterArr, orgID) {
            var params = new i1.HttpParams();
            regulatorTypeFilterArr.forEach(function (filter) { return params = params.append('filter', filter); });
            return this.http.get(this.environment.TSC_COMMON_API_URL + "organizations/" + orgID + "/dashboard/regulators-entities", { params: params });
        };
        return RegulatorController;
    }());
    RegulatorController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RegulatorController, deps: [{ token: i1__namespace.HttpClient }, { token: 'environment' }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RegulatorController.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RegulatorController, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: RegulatorController, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['environment']
                        }] }];
        } });

    var MakeModelService = /** @class */ (function () {
        function MakeModelService(makeModelController) {
            this.makeModelController = makeModelController;
        }
        MakeModelService.prototype.getMake = function (type) {
            return __awaiter(this, void 0, void 0, function () {
                var makeI, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.makeModelController.getMake(type).toPromise()];
                        case 1:
                            makeI = _a.sent();
                            if (makeI) {
                                return [2 /*return*/, makeI];
                            }
                            else {
                                return [2 /*return*/, [new MakeModel()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            console.error('Error -', error_1);
                            return [2 /*return*/, [new MakeModel()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        MakeModelService.prototype.getModel = function (makeID, type) {
            return __awaiter(this, void 0, void 0, function () {
                var modelI, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.makeModelController.getModel(makeID, type).toPromise()];
                        case 1:
                            modelI = _a.sent();
                            if (modelI) {
                                return [2 /*return*/, modelI];
                            }
                            else {
                                return [2 /*return*/, [new MakeModel()]];
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _a.sent();
                            console.error('Error -', error_2);
                            return [2 /*return*/, [new MakeModel()]];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return MakeModelService;
    }());
    MakeModelService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MakeModelService, deps: [{ token: MakeModelController }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MakeModelService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MakeModelService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MakeModelService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: MakeModelController }]; } });

    /*
     * Public API Surface of tsc-lite
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AddComponent = AddComponent;
    exports.AddModule = AddModule;
    exports.AggregateDataController = AggregateDataController;
    exports.AggregateDataRequest = AggregateDataRequest;
    exports.AggregateDataService = AggregateDataService;
    exports.AggregationComponent = AggregationComponent;
    exports.AggregationDurationComponent = AggregationDurationComponent;
    exports.AggregationDurationModule = AggregationDurationModule;
    exports.AggregationModule = AggregationModule;
    exports.Alert = Alert;
    exports.AlertService = AlertService;
    exports.BreakupReportComponent = BreakupReportComponent;
    exports.BreakupReportModule = BreakupReportModule;
    exports.ByEntityComponent = ByEntityComponent;
    exports.ByEntityModule = ByEntityModule;
    exports.ByParameterComponent = ByParameterComponent;
    exports.ByParameterModule = ByParameterModule;
    exports.CgwaReportComponent = CgwaReportComponent;
    exports.CgwaReportModule = CgwaReportModule;
    exports.ChartComponent = ChartComponent;
    exports.ChartModule = ChartModule;
    exports.ConsumerCreateUpdateComponent = ConsumerCreateUpdateComponent;
    exports.ConsumerCreateUpdateModule = ConsumerCreateUpdateModule;
    exports.ConsumerPageComponent = ConsumerPageComponent;
    exports.ConsumerPageModule = ConsumerPageModule;
    exports.ConsumptionBreakupComponent = ConsumptionBreakupComponent;
    exports.ConsumptionBreakupDashboardComponent = ConsumptionBreakupDashboardComponent;
    exports.ConsumptionBreakupDashboardModule = ConsumptionBreakupDashboardModule;
    exports.ConsumptionBreakupModule = ConsumptionBreakupModule;
    exports.ConsumptionComponent = ConsumptionComponent;
    exports.ConsumptionModule = ConsumptionModule;
    exports.ConsumptionParamAddUpdateComponent = ConsumptionParamAddUpdateComponent;
    exports.ConsumptionParamAddUpdateModule = ConsumptionParamAddUpdateModule;
    exports.ConsumptionParameter = ConsumptionParameter;
    exports.ConsumptionReportComponent = ConsumptionReportComponent;
    exports.ConsumptionReportModule = ConsumptionReportModule;
    exports.CreateUpdateEntityComponent = CreateUpdateEntityComponent;
    exports.CreateUpdateEntityModule = CreateUpdateEntityModule;
    exports.CreateUpdateLayoutComponent = CreateUpdateLayoutComponent;
    exports.CreateUpdateLayoutModule = CreateUpdateLayoutModule;
    exports.DashboardEntities = DashboardEntities;
    exports.DataAvailabilityController = DataAvailabilityController;
    exports.DataAvailabilityReportComponent = DataAvailabilityReportComponent;
    exports.DataAvailabilityReportModule = DataAvailabilityReportModule;
    exports.Device = Device;
    exports.DeviceComponent = DeviceComponent;
    exports.DeviceController = DeviceController;
    exports.DeviceMapping = DeviceMapping;
    exports.DeviceModule = DeviceModule;
    exports.DeviceRecentData = DeviceRecentData;
    exports.DeviceService = DeviceService;
    exports.DevicesWithEntities = DevicesWithEntities;
    exports.DownloadReportComponent = DownloadReportComponent;
    exports.DownloadReportModule = DownloadReportModule;
    exports.DownloadReportRequest = DownloadReportRequest;
    exports.Entity = Entity;
    exports.EntityComponent = EntityComponent;
    exports.EntityController = EntityController;
    exports.EntityDashboardComponent = EntityDashboardComponent;
    exports.EntityDashboardModule = EntityDashboardModule;
    exports.EntityDeviceService = EntityDeviceService;
    exports.EntityDialogComponent = EntityDialogComponent;
    exports.EntityDialogModule = EntityDialogModule;
    exports.EntityLevelConsumption = EntityLevelConsumption;
    exports.EntityModule = EntityModule;
    exports.EntityService = EntityService;
    exports.EntityType = EntityType;
    exports.EntityTypeComponent = EntityTypeComponent;
    exports.EntityTypeModule = EntityTypeModule;
    exports.EntityWithChildren = EntityWithChildren;
    exports.FacilityComponent = FacilityComponent;
    exports.FacilityModule = FacilityModule;
    exports.HomeComponent = HomeComponent;
    exports.HomeModule = HomeModule;
    exports.Interceptor = Interceptor;
    exports.LIST_CONSTANT = LIST_CONSTANT;
    exports.LayoutNotFoundComponent = LayoutNotFoundComponent;
    exports.LayoutNotFoundModule = LayoutNotFoundModule;
    exports.ListComponent = ListComponent;
    exports.ListModule = ListModule;
    exports.MakeModel = MakeModel;
    exports.MakeModelController = MakeModelController;
    exports.MakeModelService = MakeModelService;
    exports.MeterData = MeterData;
    exports.MeterDataDashboardComponent = MeterDataDashboardComponent;
    exports.MeterDataDashboardModule = MeterDataDashboardModule;
    exports.MeterReportComponent = MeterReportComponent;
    exports.MeterReportModule = MeterReportModule;
    exports.OrgRecentData = OrgRecentData;
    exports.PageComponent = PageComponent;
    exports.PageModule = PageModule;
    exports.ParamMetricComponent = ParamMetricComponent;
    exports.ParamMetricModule = ParamMetricModule;
    exports.Parameter = Parameter;
    exports.ParameterComponent = ParameterComponent;
    exports.ParameterController = ParameterController;
    exports.ParameterEntity = ParameterEntity;
    exports.ParameterModule = ParameterModule;
    exports.ParameterReportComponent = ParameterReportComponent;
    exports.ParameterReportModule = ParameterReportModule;
    exports.ParameterService = ParameterService;
    exports.ParameterTabComponent = ParameterTabComponent;
    exports.ParameterTabModule = ParameterTabModule;
    exports.RawDataReportComponent = RawDataReportComponent;
    exports.RawDataReportModule = RawDataReportModule;
    exports.RecentDataController = RecentDataController;
    exports.RecentDataRequestWithParam = RecentDataRequestWithParam;
    exports.RecentDataRequestWithoutParam = RecentDataRequestWithoutParam;
    exports.RecentDataService = RecentDataService;
    exports.RegulatorController = RegulatorController;
    exports.RegulatorType = RegulatorType;
    exports.RegulatorsEntities = RegulatorsEntities;
    exports.ReportService = ReportService;
    exports.ResolveGuard = ResolveGuard;
    exports.SavedConsumptionParameter = SavedConsumptionParameter;
    exports.ScheduleReportBreakupComponent = ScheduleReportBreakupComponent;
    exports.ScheduleReportBreakupModule = ScheduleReportBreakupModule;
    exports.ScheduleReportCgwaComponent = ScheduleReportCgwaComponent;
    exports.ScheduleReportCgwaModule = ScheduleReportCgwaModule;
    exports.ScheduleReportConfigurationComponent = ScheduleReportConfigurationComponent;
    exports.ScheduleReportConfigurationModule = ScheduleReportConfigurationModule;
    exports.ScheduleReportConsumptionComponent = ScheduleReportConsumptionComponent;
    exports.ScheduleReportConsumptionModule = ScheduleReportConsumptionModule;
    exports.ScheduleReportController = ScheduleReportController;
    exports.ScheduleReportPageComponent = ScheduleReportPageComponent;
    exports.ScheduleReportPageModule = ScheduleReportPageModule;
    exports.ScheduleReportService = ScheduleReportService;
    exports.ScheduleReportSourcingComponent = ScheduleReportSourcingComponent;
    exports.ScheduleReportSourcingModule = ScheduleReportSourcingModule;
    exports.ScheduleReportTemperatureComponent = ScheduleReportTemperatureComponent;
    exports.ScheduleReportTemperatureModule = ScheduleReportTemperatureModule;
    exports.Shift = Shift;
    exports.ShiftComponent = ShiftComponent;
    exports.ShiftController = ShiftController;
    exports.ShiftModule = ShiftModule;
    exports.ShiftService = ShiftService;
    exports.SourceCreateUpdateComponent = SourceCreateUpdateComponent;
    exports.SourceCreateUpdateModule = SourceCreateUpdateModule;
    exports.SourceLoadComponent = SourceLoadComponent;
    exports.SourceLoadModule = SourceLoadModule;
    exports.SourcePageComponent = SourcePageComponent;
    exports.SourcePageModule = SourcePageModule;
    exports.SourcingReportComponent = SourcingReportComponent;
    exports.SourcingReportModule = SourcingReportModule;
    exports.StatusInfo = StatusInfo;
    exports.SuccessComponent = SuccessComponent;
    exports.TabComponent = TabComponent;
    exports.TabModule = TabModule;
    exports.TrendComponent = TrendComponent;
    exports.TrendModule = TrendModule;
    exports.TrendService = TrendService;
    exports.TscLiteComponent = TscLiteComponent;
    exports.TscLiteModule = TscLiteModule;
    exports.TscLiteService = TscLiteService;
    exports.TscRestrictComponent = TscRestrictComponent;
    exports.TscRestrictModule = TscRestrictModule;
    exports.Unit = Unit;
    exports.UnitComponent = UnitComponent;
    exports.UnitController = UnitController;
    exports.UnitModule = UnitModule;
    exports.UnitService = UnitService;
    exports.UsageAcrossFacilityComponent = UsageAcrossFacilityComponent;
    exports.UsageAcrossFacilityModule = UsageAcrossFacilityModule;
    exports.ViewComponent = ViewComponent;
    exports.ViewModule = ViewModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=library-tsc-lite.umd.js.map
