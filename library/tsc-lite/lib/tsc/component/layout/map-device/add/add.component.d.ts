import { ElementRef, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatDialog } from '@angular/material/dialog';
import { Entity } from '../../../../model/entity.model';
import { DeviceMappingM } from '../../../../model/device.model';
import { SourceConsumerConfigure } from '../../../../model/source-consumer.model';
import { DeviceController } from '../../../../controller/device.controller';
import { SourceController } from '../../../../controller/source.controller';
import { EntityService } from '../../../../service/entity.service';
import { StorageService } from '@library/storage-service';
import { ButtonLabelEnum, SearchBarOneComponent, TSCCommonService } from '@library/tsc-common';
import * as i0 from "@angular/core";
export declare class AddComponent implements OnInit {
    private activatedRoute;
    private storageService;
    private tscCommonService;
    private entityService;
    private deviceController;
    private sourceController;
    private deviceMappingFB;
    private dialog;
    TABLE_CONSTANT: {
        TABLE_NO_DATA: string;
        DEFAULT_PAGE_SIZE: number;
        PAGE_SIZE_OPTION: number[];
    };
    ButtonLabelEnum: typeof ButtonLabelEnum;
    orgID: any;
    layoutID: any;
    entityID: any;
    searchValue: string;
    intialObject: any;
    redirectUrl: string;
    searchArr: any[];
    dataSource: any[];
    searchFlag: boolean;
    resultLength: number;
    isEqual: boolean;
    showEdit: boolean;
    allowBackendCall: boolean;
    entityM: Entity;
    sourceConsumerConfiguredM: SourceConsumerConfigure;
    initialMappingRecords: {
        [id: number]: any[];
    };
    displayedColumn: string[];
    deviceMappingFG: FormGroup;
    sort: MatSort;
    paginator: MatPaginator;
    refreshBtn: ElementRef;
    searchBar: SearchBarOneComponent;
    constructor(activatedRoute: ActivatedRoute, storageService: StorageService, tscCommonService: TSCCommonService, entityService: EntityService, deviceController: DeviceController, sourceController: SourceController, deviceMappingFB: FormBuilder, dialog: MatDialog);
    ngOnInit(): void;
    getSourceConsumerConfig(): void;
    getRedirectUrl(): "preference/source/create" | "preference/consumer/create" | "preference/source/page";
    getEntityByID(): Promise<void>;
    deviceMappingInit(): void;
    get deviceRecords(): FormArray;
    ngAfterViewInit(): void;
    getUnmappedDevice(): import("rxjs").Observable<DeviceMappingM[]>;
    handleBackendTrigger(): boolean;
    openConfirmationDialog(): void;
    searchFn(value: string): void;
    resetSearch(): void;
    onCheckboxChange(index: number, isChecked: boolean): void;
    openSourceLoadDialog(device: any): void;
    findIndexByDeviceID(id: any): any;
    saveDeviceMapping(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AddComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AddComponent, "app-add", never, {}, {}, never, never>;
}
