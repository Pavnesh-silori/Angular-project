import { OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import * as moment from 'moment';
import { AlertM } from '../../../../model/alert.model';
import { EntityWithChildren } from '../../../../model/entity.model';
import { AggregationDurationComponent } from '../../../dropdown/aggregation-duration/aggregation-duration.component';
import { EntityTypeComponent } from '../../../dropdown/entity-type/entity-type.component';
import { EntityController } from '../../../../controller/entity.controller';
import { AggregateDataController } from '../../../../controller/aggregate-data.controller';
import { AlertService } from '../../../../service/alert.service';
import { StorageService } from '@library/storage-service';
import { ButtonLabelEnum, MaterialFormFieldAppearance } from '@library/tsc-common';
import { DateFormatEnum, DateInputComponent, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrService } from '@library/toastr-service';
import { BasicAreaLineBarChart, ChartTitle } from '@library/echart';
import { FormControl } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class ByEntityComponent implements OnInit {
    private storageService;
    private alertService;
    private toastService;
    private entityController;
    private aggregateDataController;
    private dialog;
    materialConstant: {
        MAT_RIPPLE_CENTER: boolean;
    };
    commonConstant: {
        PRIVACY: string;
        TERMS: string;
        PRICING: string;
        SUPPORT_EMAIL: string;
        HYPHEN: string;
        NO_DATA_FOUND: string;
        NO_DATA: string;
        EMAIL_PATTERN: string;
        ZIPCODE_PATTERN: string;
        GST_NUMBER_PATTERN: string;
        SPECIAL_CHARACTERS_PATTERN: string;
        ALLOWED_IMAGE_TYPES: string[];
        DECIMAL_PATTERN: string;
        MAX_IMAGE_SIZE: number;
        ASIAN_KOLKATA: string;
        VIEW_API_KEY_ID: string;
        NO_MATCH_FOUND: string;
    };
    customRangeConstant: {
        Today: moment.Moment[];
        Yesterday: moment.Moment[];
        'Last 7 Days': moment.Moment[];
        'Last 30 Days': moment.Moment[];
        'This Month': moment.Moment[];
        'Last Month': moment.Moment[];
    };
    materialFormFieldAppearance: typeof MaterialFormFieldAppearance;
    dateFormatEnum: typeof DateFormatEnum;
    dateInputTypeEnum: typeof DateInputTypeEnum;
    dateTypeEnum: typeof DateTypeEnum;
    buttonLabelEnum: typeof ButtonLabelEnum;
    orgID: any;
    timezone: string;
    startDate: string;
    endDate: string;
    aggDuration: string;
    entityType: string;
    entityID: any;
    selectEntityType: boolean;
    isViewData: boolean;
    showAlert: boolean;
    showLoader: boolean;
    entityByEntityTypeM: EntityWithChildren[];
    alertObj: AlertM;
    entityFC: FormControl;
    chartType: string;
    viewStateFlag: string;
    chartTitle: ChartTitle;
    chartData: BasicAreaLineBarChart[];
    customDateInput: DateInputComponent;
    aggDurationInput: AggregationDurationComponent;
    entityTypeInput: EntityTypeComponent;
    constructor(storageService: StorageService, alertService: AlertService, toastService: ToastrService, entityController: EntityController, aggregateDataController: AggregateDataController, dialog: MatDialog);
    ngOnInit(): void;
    dateInpChange(): void;
    aggDurationInpChange(): void;
    entityTypeInpChange(): void;
    getEntitiesByEntityType(entityType: any): void;
    openEntityDialog(): void;
    viewEntityParameterData(): void;
    isValidInputField(): boolean;
    createDataRequest(): {};
    static ɵfac: i0.ɵɵFactoryDeclaration<ByEntityComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ByEntityComponent, "lib-by-entity", never, {}, {}, never, never>;
}
