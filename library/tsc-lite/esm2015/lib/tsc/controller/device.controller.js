import { Inject, Injectable } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
// /tsc-library/
export class DeviceController {
    constructor(http, environment) {
        this.http = http;
        this.environment = environment;
    }
    getDeviceStatusInfo(orgID) {
        return this.http.get(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/devices/status`);
    }
    getDevicesByEntityID(orgID, requestBody) {
        return this.http.post(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/entities/devices`, requestBody);
    }
    getUnMappedDevices(pageNo, pageSize, sortBy, orderBy, search, orgID, layoutID, entityID) {
        let params = new HttpParams();
        params = params.append('pageNo', pageNo);
        params = params.append('pageSize', pageSize);
        params = params.append('sortBy', sortBy);
        params = params.append('orderBy', orderBy);
        search.forEach(search => params = params.append('search', search));
        return this.http.get(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}/entities/${entityID}/devices/unmapped`, { params: params });
    }
    getMappedDevices(pageNo, pageSize, search, orgID, layoutID, entityID) {
        let params = new HttpParams();
        params = params.append('pageNo', pageNo);
        params = params.append('pageSize', pageSize);
        search.forEach(search => params = params.append('search', search));
        return this.http.get(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}/entities/${entityID}/devices/mapped`, { params: params });
    }
    saveDeviceMapping(orgID, layoutID, entityID, devices) {
        return this.http.patch(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}/entities/${entityID}/map-devices`, devices);
    }
    deleteDeviceMapping(orgID, layoutID, entityID, deviceID) {
        let params = new HttpParams();
        params = params.append('deviceID', deviceID);
        return this.http.delete(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}/entities/${entityID}/devices`, { params: params });
    }
    updateSourceLoad(orgID, layoutID, entityID, deviceID, requestBody) {
        return this.http.patch(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}/entities/${entityID}/devices/${deviceID}/source-load`, requestBody);
    }
}
DeviceController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DeviceController, deps: [{ token: i1.HttpClient }, { token: 'environment' }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceController.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DeviceController, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DeviceController, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['environment']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbnRyb2xsZXIvZGV2aWNlLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFROUQsZ0JBQWdCO0FBTWhCLE1BQU0sT0FBTyxnQkFBZ0I7SUFFekIsWUFDWSxJQUFnQixFQUNPLFdBQWdCO1FBRHZDLFNBQUksR0FBSixJQUFJLENBQVk7UUFDTyxnQkFBVyxHQUFYLFdBQVcsQ0FBSztJQUMvQyxDQUFDO0lBRUwsbUJBQW1CLENBQUMsS0FBSztRQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsaUJBQWlCLEtBQUssaUJBQWlCLENBQUMsQ0FBQztJQUNySCxDQUFDO0lBRUQsb0JBQW9CLENBQUMsS0FBSyxFQUFFLFdBQVc7UUFDbkMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLGlCQUFpQixLQUFLLG1CQUFtQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ25JLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxNQUFjLEVBQUUsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsT0FBZSxFQUFFLE1BQWEsRUFBRSxLQUFhLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQjtRQUNsSixJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBRTlCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDN0MsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUzQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBd0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixpQkFBaUIsS0FBSyxZQUFZLFFBQVEsYUFBYSxRQUFRLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDOUwsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQWMsRUFBRSxRQUFnQixFQUFFLE1BQWEsRUFBRSxLQUFhLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQjtRQUMvRyxJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBRTlCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFN0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXdCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsaUJBQWlCLEtBQUssWUFBWSxRQUFRLGFBQWEsUUFBUSxpQkFBaUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzVMLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPO1FBQ2hELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixpQkFBaUIsS0FBSyxZQUFZLFFBQVEsYUFBYSxRQUFRLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6SixDQUFDO0lBRUQsbUJBQW1CLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUTtRQUNuRCxJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUU3QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsaUJBQWlCLEtBQUssWUFBWSxRQUFRLGFBQWEsUUFBUSxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNqSyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVc7UUFDN0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLGlCQUFpQixLQUFLLFlBQVksUUFBUSxhQUFhLFFBQVEsWUFBWSxRQUFRLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqTCxDQUFDOzs4R0FsRFEsZ0JBQWdCLDRDQUliLGFBQWE7a0hBSmhCLGdCQUFnQixjQUhiLE1BQU07NEZBR1QsZ0JBQWdCO2tCQUo1QixVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7MEJBTVEsTUFBTTsyQkFBQyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFN0YXR1c0luZm9NLCBEZXZpY2VNLCBEZXZpY2VNYXBwaW5nTSB9IGZyb20gJy4uL21vZGVsL2RldmljZS5tb2RlbCc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBQYWdlTSB9IGZyb20gJ0BsaWJyYXJ5L3RzYy1jb21tb24nO1xuLy8gL3RzYy1saWJyYXJ5L1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuXG5leHBvcnQgY2xhc3MgRGV2aWNlQ29udHJvbGxlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgICAgICBASW5qZWN0KCdlbnZpcm9ubWVudCcpIHByaXZhdGUgZW52aXJvbm1lbnQ6IGFueVxuICAgICkgeyB9XG5cbiAgICBnZXREZXZpY2VTdGF0dXNJbmZvKG9yZ0lEKTogT2JzZXJ2YWJsZTxTdGF0dXNJbmZvTT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxTdGF0dXNJbmZvTT4oYCR7dGhpcy5lbnZpcm9ubWVudC5UU0NfQ09NTU9OX0FQSV9VUkx9b3JnYW5pemF0aW9ucy8ke29yZ0lEfS9kZXZpY2VzL3N0YXR1c2ApO1xuICAgIH1cblxuICAgIGdldERldmljZXNCeUVudGl0eUlEKG9yZ0lELCByZXF1ZXN0Qm9keSk6IE9ic2VydmFibGU8RGV2aWNlTVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxEZXZpY2VNW10+KGAke3RoaXMuZW52aXJvbm1lbnQuVFNDX0NPTU1PTl9BUElfVVJMfW9yZ2FuaXphdGlvbnMvJHtvcmdJRH0vZW50aXRpZXMvZGV2aWNlc2AsIHJlcXVlc3RCb2R5KTtcbiAgICB9XG5cbiAgICBnZXRVbk1hcHBlZERldmljZXMocGFnZU5vOiBudW1iZXIsIHBhZ2VTaXplOiBudW1iZXIsIHNvcnRCeTogc3RyaW5nLCBvcmRlckJ5OiBzdHJpbmcsIHNlYXJjaDogYW55W10sIG9yZ0lEOiBudW1iZXIsIGxheW91dElEOiBudW1iZXIsIGVudGl0eUlEOiBudW1iZXIpOiBPYnNlcnZhYmxlPFBhZ2VNPERldmljZU1hcHBpbmdNPj4ge1xuICAgICAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcblxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdwYWdlTm8nLCBwYWdlTm8pO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdwYWdlU2l6ZScsIHBhZ2VTaXplKTtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgnc29ydEJ5Jywgc29ydEJ5KTtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgnb3JkZXJCeScsIG9yZGVyQnkpO1xuXG4gICAgICAgIHNlYXJjaC5mb3JFYWNoKHNlYXJjaCA9PiBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzZWFyY2gnLCBzZWFyY2gpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UGFnZU08RGV2aWNlTWFwcGluZ00+PihgJHt0aGlzLmVudmlyb25tZW50LlRTQ19DT01NT05fQVBJX1VSTH1vcmdhbml6YXRpb25zLyR7b3JnSUR9L2xheW91dHMvJHtsYXlvdXRJRH0vZW50aXRpZXMvJHtlbnRpdHlJRH0vZGV2aWNlcy91bm1hcHBlZGAsIHsgcGFyYW1zOiBwYXJhbXMgfSk7XG4gICAgfVxuXG4gICAgZ2V0TWFwcGVkRGV2aWNlcyhwYWdlTm86IG51bWJlciwgcGFnZVNpemU6IG51bWJlciwgc2VhcmNoOiBhbnlbXSwgb3JnSUQ6IG51bWJlciwgbGF5b3V0SUQ6IG51bWJlciwgZW50aXR5SUQ6IG51bWJlcik6IE9ic2VydmFibGU8UGFnZU08RGV2aWNlTWFwcGluZ00+PiB7XG4gICAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuXG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3BhZ2VObycsIHBhZ2VObyk7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3BhZ2VTaXplJywgcGFnZVNpemUpO1xuXG4gICAgICAgIHNlYXJjaC5mb3JFYWNoKHNlYXJjaCA9PiBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzZWFyY2gnLCBzZWFyY2gpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UGFnZU08RGV2aWNlTWFwcGluZ00+PihgJHt0aGlzLmVudmlyb25tZW50LlRTQ19DT01NT05fQVBJX1VSTH1vcmdhbml6YXRpb25zLyR7b3JnSUR9L2xheW91dHMvJHtsYXlvdXRJRH0vZW50aXRpZXMvJHtlbnRpdHlJRH0vZGV2aWNlcy9tYXBwZWRgLCB7IHBhcmFtczogcGFyYW1zIH0pO1xuICAgIH1cblxuICAgIHNhdmVEZXZpY2VNYXBwaW5nKG9yZ0lELCBsYXlvdXRJRCwgZW50aXR5SUQsIGRldmljZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wYXRjaChgJHt0aGlzLmVudmlyb25tZW50LlRTQ19DT01NT05fQVBJX1VSTH1vcmdhbml6YXRpb25zLyR7b3JnSUR9L2xheW91dHMvJHtsYXlvdXRJRH0vZW50aXRpZXMvJHtlbnRpdHlJRH0vbWFwLWRldmljZXNgLCBkZXZpY2VzKTtcbiAgICB9XG5cbiAgICBkZWxldGVEZXZpY2VNYXBwaW5nKG9yZ0lELCBsYXlvdXRJRCwgZW50aXR5SUQsIGRldmljZUlEKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdkZXZpY2VJRCcsIGRldmljZUlEKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShgJHt0aGlzLmVudmlyb25tZW50LlRTQ19DT01NT05fQVBJX1VSTH1vcmdhbml6YXRpb25zLyR7b3JnSUR9L2xheW91dHMvJHtsYXlvdXRJRH0vZW50aXRpZXMvJHtlbnRpdHlJRH0vZGV2aWNlc2AsIHsgcGFyYW1zOiBwYXJhbXMgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlU291cmNlTG9hZChvcmdJRCwgbGF5b3V0SUQsIGVudGl0eUlELCBkZXZpY2VJRCwgcmVxdWVzdEJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wYXRjaChgJHt0aGlzLmVudmlyb25tZW50LlRTQ19DT01NT05fQVBJX1VSTH1vcmdhbml6YXRpb25zLyR7b3JnSUR9L2xheW91dHMvJHtsYXlvdXRJRH0vZW50aXRpZXMvJHtlbnRpdHlJRH0vZGV2aWNlcy8ke2RldmljZUlEfS9zb3VyY2UtbG9hZGAsIHJlcXVlc3RCb2R5KTtcbiAgICB9XG5cbn1cbiJdfQ==