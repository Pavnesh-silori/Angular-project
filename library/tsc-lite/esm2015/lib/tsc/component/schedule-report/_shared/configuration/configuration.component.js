import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { User, UserContext } from '@library/user-service';
import { MaterialFormFieldAppearance, FormErrorEnum, MatSelectSearchService, COMMON_CONSTANT, MATERIAL_CONSTANT } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/tsc-common";
import * as i4 from "@library/user-service";
import * as i5 from "@angular/material/card";
import * as i6 from "@angular/material/slide-toggle";
import * as i7 from "@angular/material/form-field";
import * as i8 from "@angular/material/select";
import * as i9 from "@angular/material/core";
import * as i10 from "ngx-mat-select-search";
import * as i11 from "@angular/material/chips";
import * as i12 from "@angular/material/icon";
import * as i13 from "@angular/material/radio";
import * as i14 from "@angular/common";
import * as i15 from "@angular/material/input";
// /tsc-library/
export class ScheduleReportConfigurationComponent {
    constructor(formBuilder, 
    // tsc-library
    storageService, tscCommonService, userService) {
        this.formBuilder = formBuilder;
        this.storageService = storageService;
        this.tscCommonService = tscCommonService;
        this.userService = userService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.FormErrorEnum = FormErrorEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.userContext = UserContext.ROOT_ORG_USER;
        this.userM = [new User()];
        this.rootOrgUserM = [new User()];
        this.currentOrgUserM = [new User()];
        this.allUserID = [];
        this.totalUserCount = 0;
        this.intervalList = [
            { label: 'Daily', value: 'DAILY' },
            { label: 'Weekly', value: 'WEEKLY' },
            { label: 'Monthly', value: 'MONTHLY' }
        ];
        this.frequencyList = [
            { label: 'Daily', value: 'DAILY' },
            { label: 'Weekly', value: 'WEEKLY' },
            { label: 'Monthly', value: 'MONTHLY' }
        ];
        this.frequencyInfoLabel = 'Report will be sent at 6:00 a.m.';
        this.userFC = new FormControl(true, Validators.required);
        this.userSearchUtil = new MatSelectSearchService(['firstName', 'lastName', 'email']);
        this.selectable = true;
        this.removable = true;
        this.addOnBlur = true;
        this.separatorKeysCodes = [ENTER, COMMA];
        this.inputPlaceholder = "email1@domain.com, email2@domain.com";
        this.errorHandling = (formGroup, controlPath, error) => {
            return formGroup.get(controlPath).hasError(error);
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.initializeUsers();
        this.scheduleReportFGInit();
    }
    scheduleReportFGInit() {
        this.scheduleReportFG = this.formBuilder.group({
            name: [, Validators.required],
            dataInterval: [, Validators.required],
            frequency: [, Validators.required],
            userChoice: [UserContext.ROOT_ORG_USER],
            userID: [[], Validators.required],
            otherUserEmail: [[]],
            status: ['ACTIVE', Validators.required],
            reportFormat: [, Validators.required],
        });
        this.scheduleReportFG.get('dataInterval').valueChanges.subscribe(value => {
            switch (value) {
                case 'DAILY':
                    this.frequencyList = [{ label: "Daily", value: "DAILY" }];
                    this.frequencyInfoLabel = 'Report will be sent on daily basis at 6:00 a.m.';
                    break;
                case 'WEEKLY':
                    this.frequencyList = [
                        { label: "Daily", value: "DAILY" },
                        { label: "Weekly", value: "WEEKLY" }
                    ];
                    this.frequencyInfoLabel = 'Report will be sent on weekly basis at 6:00 a.m. on Monday';
                    break;
                case 'MONTHLY':
                    this.frequencyList = [
                        { label: "Daily", value: "DAILY" },
                        { label: "Weekly", value: "WEEKLY" },
                        { label: "Monthly", value: "MONTHLY" }
                    ];
                    this.frequencyInfoLabel = 'Report will be sent on monthly basis at 6:00 a.m. on first day of month';
                    break;
                default:
                    break;
            }
        });
    }
    initializeUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getUsersByOrgID();
            yield this.getCurrentOrgUserAccess();
        });
    }
    getUsersByOrgID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.rootOrgUserM = (yield this.userService.getUsersByOrgID(this.orgID));
            this.userM = this.rootOrgUserM;
            this.userSearchUtil.entityArr = this.userM;
            this.userSearchUtil.createSubscription();
            this.totalUserCount = this.userM.length;
            this.userM.forEach(user => this.allUserID.push(user['id']));
        });
    }
    getCurrentOrgUserAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentOrgUserM = (yield this.userService.getCurrentOrgUserAccess(this.orgID));
        });
    }
    userContextChange() {
        if (this.userFC.value) {
            this.userContext = UserContext.ROOT_ORG_USER;
            this.userM = this.rootOrgUserM;
            this.scheduleReportFG.get('userChoice').setValue(this.userContext);
        }
        else {
            this.userContext = UserContext.CURRENT_ORG_USER;
            this.userM = this.currentOrgUserM;
            this.scheduleReportFG.get('userChoice').setValue(this.userContext);
        }
        this.allUserID = [];
        this.userSearchUtil.entityArr = this.userM;
        this.userSearchUtil.createSubscription();
        this.totalUserCount = this.userM.length;
        this.userM.forEach(user => this.allUserID.push(user['id']));
        this.scheduleReportFG.get('userID').setValue([]);
    }
    selectUser() {
        const selected = this.scheduleReportFG.get('userID').value;
        if (selected.includes(-1)) {
            selected.shift();
            this.scheduleReportFG.get('userID').patchValue(selected);
        }
        else if (this.scheduleReportFG.get('userID').value.length == this.totalUserCount) {
            this.allUserID.splice(0, 0, -1);
            this.scheduleReportFG.get('userID').patchValue(this.allUserID);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            this.scheduleReportFG.get('userID').patchValue(filteredSelected);
        }
    }
    selectAllUsers() {
        if (!this.scheduleReportFG.get('userID').value.includes(-1)) {
            this.scheduleReportFG.get('userID').reset([]);
            return;
        }
        this.scheduleReportFG.get('userID').setValue([-1, ...this.allUserID]);
    }
    onInput() {
        this.inputPlaceholder = '';
    }
    get otherUserEmail() {
        return this.scheduleReportFG.get('otherUserEmail');
    }
    add(event) {
        const value = (event.value || '').trim();
        if (value) {
            const emails = value.split(',').map(email => email.trim());
            const validEmails = emails.filter(email => this.tscCommonService.isValidEmail(email));
            if (validEmails.length > 0) {
                this.otherUserEmail.patchValue(this.otherUserEmail.value.concat(validEmails));
            }
        }
        event.chipInput.clear();
    }
    removeEmail(email) {
        const index = this.otherUserEmail.value.indexOf(email);
        if (index >= 0) {
            const emails = [...this.otherUserEmail.value];
            emails.splice(index, 1);
            this.otherUserEmail.setValue(emails);
        }
    }
    onStatusChange(event) {
        const newStatus = event.checked ? 'ACTIVE' : 'INACTIVE';
        this.scheduleReportFG.get('status').setValue(newStatus);
    }
}
ScheduleReportConfigurationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportConfigurationComponent, deps: [{ token: i1.FormBuilder }, { token: i2.StorageService }, { token: i3.TSCCommonService }, { token: i4.UserService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleReportConfigurationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportConfigurationComponent, selector: "lib-configuration", ngImport: i0, template: "<mat-card class=\"border cardOverwrite\">\n    <form [formGroup]=\"scheduleReportFG\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <span class=\"cardTitle\">\n                    Scheduler configuration\n                </span>\n            </div>\n            <div class=\"col-sm-6 centerAlignVertical justify-content-end\">\n                <span class=\"me-2\"> Inactive </span>\n                <mat-slide-toggle [checked]=\"scheduleReportFG.get('status').value == 'ACTIVE'\"\n                    (change)=\"onStatusChange($event)\"></mat-slide-toggle>\n                <span class=\"ms-2\"> Active </span>\n            </div>\n            <div class=\"col-sm-12 centerAlignVertical justify-content-end\">\n                <mat-error class=\"textMatError\" *ngIf=\"errorHandling(scheduleReportFG, 'status', 'required')\">\n                    {{ FormErrorEnum.REQUIRED }}\n                </mat-error>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"row\">\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label class=\"formLabel\">Schedule report name</mat-label>\n                        <input class=\"formPlaceholder\" type=\"text\" placeholder=\"Schedule report name\" matInput\n                            formControlName=\"name\" required />\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'name', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select data interval</mat-label>\n                        <mat-select formControlName=\"dataInterval\" required>\n                            <mat-option *ngFor=\"let interval of intervalList\" [value]=\"interval.value\">\n                                {{ interval.label }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'dataInterval', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select frequency</mat-label>\n                        <mat-select formControlName=\"frequency\" required>\n                            <mat-option *ngFor=\"let frequency of frequencyList\" [value]=\"frequency.value\">\n                                {{ frequency.label }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-hint>{{ frequencyInfoLabel }}</mat-hint>\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'frequency', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <div class=\"row enabledToggle\">\n                <div class=\"col-sm-4 d-flex justify-content-start centerAlignVertical\">\n                    <span class=\"me-2\"> Current org users </span>\n                    <mat-slide-toggle [formControl]=\"userFC\" (change)=\"userContextChange()\"></mat-slide-toggle>\n                    <span class=\"ms-2\"> All users </span>\n                </div>\n            </div>\n\n            <div class=\"row mt-2\">\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select user</mat-label>\n                        <mat-select formControlName=\"userID\" multiple required>\n\n                            <ng-container *ngIf=\"userM && userM.length > 0 && userM[0]['id']; else noUserFound\">\n                                <mat-option>\n                                    <ngx-mat-select-search [formControl]=\"userSearchUtil.filterFC\"\n                                        placeholderLabel=\"Search by name/email\"\n                                        noEntriesFoundLabel=\"No matching name/email found.\">\n                                    </ngx-mat-select-search>\n                                </mat-option>\n                                <mat-option [value]=\"-1\" (click)=\"selectAllUsers()\"\n                                    [hidden]=\"userSearchUtil.filterFC.value\">\n                                    Select all\n                                </mat-option>\n                                <mat-option *ngFor=\"let user of userSearchUtil.filteredEntities | async\"\n                                    [value]=\"user.id\" (click)=\"selectUser()\">\n                                    {{ user?.email }}\n                                </mat-option>\n                            </ng-container>\n\n                            <ng-template #noUserFound>\n                                <mat-option disabled>\n                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                </mat-option>\n                            </ng-template>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling(scheduleReportFG, 'userID', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-sm-4\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Enter other user email</mat-label>\n                        <mat-chip-list #chipList>\n                            <mat-chip *ngFor=\"let email of otherUserEmail.value\" [removable]=\"removable\"\n                                (removed)=\"removeEmail(email)\">\n                                {{ email }}\n                                <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n                            </mat-chip>\n                            <input [placeholder]=\"inputPlaceholder\" [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"addOnBlur\"\n                                (matChipInputTokenEnd)=\"add($event)\" (input)=\"onInput()\">\n                        </mat-chip-list>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <div class=\"radioBtnField\">\n                        <div class=\"radioBtnGroupLabel\"> Select report format * </div>\n                        <mat-radio-group formControlName=\"reportFormat\">\n                            <div class=\"row my-1\">\n                                <div class=\"col-sm-6\">\n                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"'PDF'\">\n                                        pdf\n                                    </mat-radio-button>\n                                </div>\n                                <div class=\"col-sm-6\">\n                                    <mat-radio-button class=\"radioBtnLabel\" [value]=\"'XLSX'\">\n                                        xlsx\n                                    </mat-radio-button>\n                                </div>\n                                <mat-error class=\"textMatError ms-1 mt-1\"\n                                    *ngIf=\"errorHandling(scheduleReportFG, 'reportFormat', 'required')\">\n                                    {{ FormErrorEnum.REQUIRED }}\n                                </mat-error>\n                            </div>\n                        </mat-radio-group>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</mat-card>", styles: ["::ng-deep .enabledToggle .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .enabledToggle .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#5c80de}::ng-deep .enabledToggle .mat-slide-toggle .mat-slide-toggle-bar{background-color:#5c80de8a}::ng-deep .enabledToggle .mat-slide-toggle .mat-slide-toggle-thumb{background-color:#5c80de}\n"], components: [{ type: i5.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i6.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i7.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i8.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i9.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i10.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i11.MatChipList, selector: "mat-chip-list", inputs: ["aria-orientation", "multiple", "compareWith", "value", "required", "placeholder", "disabled", "selectable", "tabIndex", "errorStateMatcher"], outputs: ["change", "valueChange"], exportAs: ["matChipList"] }, { type: i12.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i13.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.MatError, selector: "mat-error", inputs: ["id"] }, { type: i7.MatLabel, selector: "mat-label" }, { type: i15.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { type: i1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i11.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disableRipple", "tabIndex", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"], exportAs: ["matChip"] }, { type: i11.MatChipRemove, selector: "[matChipRemove]" }, { type: i11.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputSeparatorKeyCodes", "placeholder", "id", "matChipInputFor", "matChipInputAddOnBlur", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { type: i13.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }], pipes: { "async": i14.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportConfigurationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-configuration',
                    templateUrl: './configuration.component.html',
                    styleUrls: ['./configuration.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.StorageService }, { type: i3.TSCCommonService }, { type: i4.UserService }]; } });
//# sourceMappingURL=data:application/json;base64,