import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { map, startWith, switchMap, catchError } from "rxjs/operators";
import { faCaretDown, faPlus } from '@fortawesome/free-solid-svg-icons';
import { LIST_CONSTANT } from '../../../../constant/list.constant';
import { ScheduleReportTypeEnum } from '../../../../enum/schedule-report.enum';
import { ScheduleReportPage } from '../../../../model/schedule-report.model';
// tsc-library
import { MATERIAL_CONSTANT, TABLE_CONSTANT, ButtonTooltipEnum, FormAction, COMMON_CONSTANT, DialogOneComponent, DialogOneEnum, DialogResponseEnum, ButtonLabelEnum } from '@library/tsc-common';
import { ApplicationKeyID } from '@library/application-service';
import { ProfileImg } from '@library/user-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/router";
import * as i3 from "../../../../controller/schedule-report.controller";
import * as i4 from "@library/storage-service";
import * as i5 from "@library/tsc-common";
import * as i6 from "@library/user-service";
import * as i7 from "@fortawesome/angular-fontawesome";
import * as i8 from "@angular/material/table";
import * as i9 from "@angular/material/sort";
import * as i10 from "@angular/material/menu";
import * as i11 from "@angular/material/slide-toggle";
import * as i12 from "@angular/material/paginator";
import * as i13 from "@angular/material/core";
import * as i14 from "@angular/material/tooltip";
import * as i15 from "@ng-bootstrap/ng-bootstrap";
import * as i16 from "@angular/common";
// /tsc-library/
export class ScheduleReportPageComponent {
    constructor(dialog, router, scheduleReportController, 
    // tsc-library
    storageService, statusService, userService, imageService
    // /tsc-library/
    ) {
        this.dialog = dialog;
        this.router = router;
        this.scheduleReportController = scheduleReportController;
        this.storageService = storageService;
        this.statusService = statusService;
        this.userService = userService;
        this.imageService = imageService;
        this.faPlus = faPlus;
        this.faCaretDown = faCaretDown;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.ButtonTooltipEnum = ButtonTooltipEnum;
        this.DialogResponseEnum = DialogResponseEnum;
        this.FormAction = FormAction;
        this.ProfileImg = ProfileImg;
        this.searchByPlaceHolder = 'report name';
        this.reportType = [];
        this.dataSource = [new ScheduleReportPage()];
        this.dataSourceLength = 0;
        this.displayedColumn = ['id', 'name', 'type', 'recipients', 'frequency', 'scheduledBy', 'status', 'option'];
        this.searchFlag = false;
        this.searchFC = new FormControl('', Validators.required);
        this.reportTypeFlag = false;
        this.reportTypeFC = new FormControl(['all']);
        this.filterArr = [];
        this.totalReportTypeCount = 0;
        this.recipientUserList = [];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        this.applicationName = this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID ? 'water' : 'energy';
        if (this.applicationKeyID == ApplicationKeyID.ENERGY_KEY_ID) {
            this.reportType = LIST_CONSTANT.ENERGY_APP_SCHEDULE_REPORT_TYPE;
            this.totalReportTypeCount = this.reportType.length;
        }
        else if (this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID) {
            this.reportType = LIST_CONSTANT.WATER_APP_SCHEDULE_REPORT_TYPE;
            this.totalReportTypeCount = this.reportType.length;
        }
    }
    ngAfterViewInit() {
        merge(this.sort.sortChange, this.typeSelect.multi, fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(startWith({}), switchMap(() => {
            this.filterArr = [];
            if (this.searchFlag) {
                var searchValue = 'name:' + this.searchValue;
            }
            if (this.reportTypeFlag) {
                let selectedReportType = this.reportTypeFC.value.length - 1;
                if (selectedReportType == this.totalReportTypeCount) {
                    this.reportTypeFlag = false;
                }
                else {
                    this.filterArr.push('reportType:' + this.reportTypeFC.value);
                }
            }
            return this.scheduleReportController.getScheduleReportByPage(this.paginator.pageIndex, this.paginator.pageSize, this.sort.active, this.sort.direction, searchValue, this.filterArr, this.orgID).pipe(catchError(() => observableOf(null)));
        }), map((response) => {
            if (response == null) {
                this.dataSourceLength = 0;
                return [];
            }
            this.dataSourceLength = response.totalCount;
            return response.records;
        })).subscribe((dataSource) => {
            this.dataSource = dataSource;
        });
    }
    searchFn(value) {
        this.searchFlag = true;
        this.searchValue = value;
        if (value.length == 0) {
            this.resetSearch();
        }
        this.refreshBtn.nativeElement.click();
    }
    resetSearch() {
        this.searchFlag = false;
        this.searchBar.searchClear();
    }
    showAllRecipient(userList) {
        this.recipientUserList = [];
        userList.forEach(user => {
            let metric = {
                profileImg: user.profileImgUrl || this.userService.defaultImage((user.firstName ? user.firstName + ' ' : '') + (user.lastName ? user.lastName : ''), ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW),
                name: (user.firstName ? user.firstName + ' ' + (user.lastName ? user.lastName : '') : ''),
            };
            this.recipientUserList.push(metric);
        });
    }
    openDeleteDialog(scheduleReport) {
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '450px',
            data: {
                type: DialogOneEnum.DELETE,
                icon: 'dangerous',
                header: 'Delete schedule report?',
                body: '<b>' + scheduleReport.name + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            if (res) {
                this.deleteScheduledReport(scheduleReport.id);
            }
        });
    }
    deleteScheduledReport(scheduleReportID) {
        this.scheduleReportController.deleteScheduledReport(this.orgID, scheduleReportID).subscribe((deleteRes) => {
            if (deleteRes) {
                this.refreshBtn.nativeElement.click();
            }
        });
    }
    updateReportStatusByID(scheduleReport) {
        let newStatus = scheduleReport.status == 'ACTIVE' ? 'INACTIVE' : 'ACTIVE';
        let requestBody = {
            status: newStatus
        };
        this.scheduleReportController.updateReportStatusByID(this.orgID, scheduleReport.id, requestBody)
            .subscribe(response => {
            if (response) {
                this.refreshBtn.nativeElement.click();
            }
        }, error => {
            console.log('error in updateReportStatusByID -', error);
        });
    }
    goToReportPage(reportType) {
        switch (reportType) {
            case ScheduleReportTypeEnum.SOURCING_REPORT:
                this.router.navigate([`schedule-report/${this.applicationName}-sourcing`]);
                break;
            case ScheduleReportTypeEnum.CONSUMPTION_REPORT:
                this.router.navigate([`schedule-report/${this.applicationName}-consumption`]);
                break;
            case ScheduleReportTypeEnum.BREAKUP_REPORT:
                this.router.navigate([`schedule-report/${this.applicationName}-breakup`]);
                break;
            case ScheduleReportTypeEnum.CGWA_REPORT:
                this.router.navigate([`schedule-report/cgwa`]);
                break;
            case ScheduleReportTypeEnum.TEMPERATURE_REPORT:
                this.router.navigate([`schedule-report/temperature`]);
                break;
        }
    }
    updateScheduledReport(scheduleReport) {
        switch (scheduleReport.type) {
            case ScheduleReportTypeEnum.SOURCING_REPORT:
                this.router.navigate([`schedule-report/${scheduleReport.id}/${this.applicationName}-sourcing/update`]);
                break;
            case ScheduleReportTypeEnum.CONSUMPTION_REPORT:
                this.router.navigate([`schedule-report/${scheduleReport.id}/${this.applicationName}-consumption/update`]);
                break;
            case ScheduleReportTypeEnum.BREAKUP_REPORT:
                this.router.navigate([`schedule-report/${scheduleReport.id}/${this.applicationName}-breakup/update`]);
                break;
            case ScheduleReportTypeEnum.CGWA_REPORT:
                this.router.navigate([`schedule-report/${scheduleReport.id}/cgwa/update`]);
                break;
            case ScheduleReportTypeEnum.TEMPERATURE_REPORT:
                this.router.navigate([`schedule-report/${scheduleReport.id}/temperature/update`]);
                break;
        }
    }
    getReportTypeLabel(type) {
        let reportLabel;
        let applicationName = this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
        switch (type) {
            case ScheduleReportTypeEnum.SOURCING_REPORT:
                reportLabel = `${applicationName} Sourcing Report`;
                break;
            case ScheduleReportTypeEnum.CONSUMPTION_REPORT:
                reportLabel = `${applicationName} Consumption Report`;
                break;
            case ScheduleReportTypeEnum.BREAKUP_REPORT:
                reportLabel = `${applicationName} Breakup Report`;
                break;
            case ScheduleReportTypeEnum.CGWA_REPORT:
                reportLabel = `CGWA Report`;
                break;
            case ScheduleReportTypeEnum.TEMPERATURE_REPORT:
                reportLabel = `Temperature Report`;
                break;
        }
        return reportLabel;
    }
    getFrequencyLabel(type) {
        let frequencyLabel;
        switch (type) {
            case 'DAILY':
                frequencyLabel = 'Daily';
                break;
            case 'WEEKLY':
                frequencyLabel = 'Weekly';
                break;
            case 'MONTHLY':
                frequencyLabel = 'Monthly';
                break;
        }
        return frequencyLabel;
    }
}
ScheduleReportPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportPageComponent, deps: [{ token: i1.MatDialog }, { token: i2.Router }, { token: i3.ScheduleReportController }, { token: i4.StorageService }, { token: i5.StatusService }, { token: i6.UserService }, { token: i5.ImageService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleReportPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportPageComponent, selector: "lib-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "typeSelect", first: true, predicate: ["typeSelect"], descendants: true }], ngImport: i0, template: "<div class=\"card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Schedule Report</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar [searchBy]=\"searchByPlaceHolder\"\n                    (emitSearch)=\"searchFn($event)\"></lib-search-bar-one>\n\n                <button class=\"btn btn-sm btn-light refreshBtn centerAlign me-3 py-1\" #refreshBtn matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.REFRESH\">\n                    <span class=\"material-symbols-outlined text-secondary\">\n                        refresh\n                    </span>\n                </button>\n\n                <div class=\"btn-group\" ngbDropdown placement=\"bottom-right\">\n                    <button type=\"button\" ngbDropdownToggle class=\"hideDropdownIcon btn btn-sm btn-success\">\n                        <fa-icon [icon]=\"faPlus\" class=\"me-1\"></fa-icon>Schedule report\n                        <fa-icon [icon]=\"faCaretDown\" class=\"ms-2\"></fa-icon>\n                    </button>\n                    <div ngbDropdownMenu>\n                        <a class=\"dropdown-item mt-1\" *ngFor=\"let type of reportType\" (click)=\"goToReportPage(type.value)\">\n                            {{ type.label }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"overflowX customScrollBar\">\n        <table class=\"w-100\" mat-table matSort #sort=\"matSort\" matSortActive=\"name\" matSortDirection=\"asc\"\n            matSortDisableClear [dataSource]=\"dataSource\">\n\n            <ng-container matColumnDef=\"id\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>ID</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"name\">\n                <th class=\"px-4 columnWidth2\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Name</th>\n                <td class=\"px-4 columnWidth2\" mat-cell *matCellDef=\"let row\" matTooltipPosition=\"above\"\n                    [matTooltip]=\"(row?.name.length > 20 ? row?.name : '')\" matTooltipClass=\"nameTooltip\">\n                    {{ (row.name ? row.name : COMMON_CONSTANT.HYPHEN) | dotdotdot:20 }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"type\">\n                <th class=\"px-4 columnWidth2\" mat-header-cell *matHeaderCellDef>\n                    <funnel-filter #typeSelect header=\"Report type\" type=\"multi\" [entityList]=\"reportType\" value=\"value\" view=\"label\"\n                        [selectFC]=\"reportTypeFC\" [active]=\"reportTypeFlag\" selectAllLabel=\"All report type\"\n                        (multi)=\"reportTypeFlag = true;\">\n                    </funnel-filter>\n                </th>\n                <td class=\"px-4 columnWidth2\" mat-cell *matCellDef=\"let row\">\n                    {{ getReportTypeLabel(row.type) }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"recipients\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Recipients</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <ng-container *ngFor=\"let user of row.recipients.slice(0,3); let i = index\">\n                        <img class=\"multipleProfileImg rounded-circle border\"\n                            [src]=\"imageService.getProfileImageUrl(user, ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\" alt=\"profile-image\"\n                            #tooltip=\"matTooltip\" matTooltipPosition=\"above\"\n                            [matTooltip]=\"row.recipients.length != 1 ? (user?.firstName ? user?.firstName + ' ' + (user?.lastName ? user?.lastName : '') : '') : ''\"\n                            matTooltipClass=\"nameTooltip\" />\n\n                        <span *ngIf=\"row.recipients.length == 1\">\n                            {{ user.firstName }} {{user.lastName }}\n                        </span>\n                    </ng-container>\n                    <button *ngIf=\"imageService.getCountForCircleDisplay(row.recipients) >= 1\" [matMenuTriggerFor]=\"menu\"\n                        class=\"btn btn-sm rounded-circle countCircleBtn\" (click)=\"showAllRecipient(row.recipients)\">\n                        {{ imageService.getCountForCircleDisplay(row.recipients) }}\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let recipient of recipientUserList\">\n                            <img class=\"multipleProfileImg rounded-circle border me-1\" [src]=\"recipient.profileImg\">\n                            {{ recipient.name }}\n                        </button>\n                    </mat-menu>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"frequency\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Frequency</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    {{ getFrequencyLabel(row.frequency) }}\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"scheduledBy\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Scheduled by</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <img class=\"rounded-circle border profileImageDropdownView\"\n                        [src]=\"row?.scheduledBy?.profileImgUrl || userService.defaultImage(row?.scheduledBy?.firstName + ' ', ProfileImg.PROFILE_IMAGE_DROPDOWN_NAME_VIEW)\"\n                        alt=\"profile img\">\n                    <span matTooltipPosition=\"above\"\n                        [matTooltip]=\"(row?.scheduledBy?.firstName + ' ' + row?.scheduledBy?.lastName).length > 12 ? row?.scheduledBy?.firstName + ' ' + row?.scheduledBy?.lastName : ''\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ (row?.scheduledBy?.firstName ? row?.scheduledBy?.firstName + ' ' + row?.scheduledBy?.lastName :\n                        COMMON_CONSTANT.HYPHEN)| dotdotdot:12 }}\n                    </span>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"status\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>Status</th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\"\n                    [ngClass]=\"statusService.getStatusClass(row.status)\">{{\n                    row.status ? statusService.getStatusValue(row.status) : COMMON_CONSTANT.HYPHEN }}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"option\">\n                <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef></th>\n                <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row\">\n                    <div class=\"centerAlignVertical\">\n\n                        <button type=\"button\" class=\"iconBtn centerAlign text-primary updateIconHover\"\n                            (click)=\"updateScheduledReport(row)\" matRipple\n                            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                            [matTooltip]=\"ButtonTooltipEnum.UPDATE\">\n                            <span class=\"material-symbols-outlined icon\">\n                                edit\n                            </span>\n                        </button>\n\n                        <button type=\"button\" class=\"iconBtn centerAlign text-danger deleteIconHover cursorPointer\"\n                            matTooltipPosition=\"below\" [matTooltip]=\"ButtonTooltipEnum.DELETE\" matRipple\n                            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" (click)=\"openDeleteDialog(row)\">\n                            <span class=\"material-symbols-outlined icon\">\n                                delete\n                            </span>\n                        </button>\n\n                        <mat-slide-toggle class=\"ms-3\" [checked]=\"row.status == 'ACTIVE'\"\n                            (change)=\"updateReportStatusByID(row)\"></mat-slide-toggle>\n                    </div>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\" class=\"dataRow\"></tr>\n\n            <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                    {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <mat-paginator class=\"roundedBorder\" showFirstLastButtons #paginator [length]=\"dataSourceLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", styles: ["::ng-deep .mat-menu-content{max-height:250px;overflow-x:auto}.columnWidth1{min-width:120px}.columnWidth2{min-width:200px}\n"], components: [{ type: i5.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i7.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i8.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i9.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i5.FunnelFilterComponent, selector: "funnel-filter", inputs: ["header", "active", "showSearchBar", "searchByPlaceholder", "searchBy", "selectAllLabel", "entityList", "view", "value", "type", "selectFC", "resetFlag"], outputs: ["mono", "multi", "selected"] }, { type: i10.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { type: i10.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { type: i11.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i8.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i8.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i12.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i13.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i14.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i15.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i15.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i15.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i16.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i8.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i8.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i8.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i8.MatCellDef, selector: "[matCellDef]" }, { type: i8.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i16.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { type: i16.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i8.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i8.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i8.MatNoDataRow, selector: "ng-template[matNoDataRow]" }], pipes: { "dotdotdot": i5.EllipsisPipeService } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-page',
                    templateUrl: './page.component.html',
                    styleUrls: ['./page.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.Router }, { type: i3.ScheduleReportController }, { type: i4.StorageService }, { type: i5.StatusService }, { type: i6.UserService }, { type: i5.ImageService }]; }, propDecorators: { sort: [{
                type: ViewChild,
                args: ['sort']
            }], paginator: [{
                type: ViewChild,
                args: ['paginator']
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn']
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }], typeSelect: [{
                type: ViewChild,
                args: ['typeSelect']
            }] } });
//# sourceMappingURL=data:application/json;base64,