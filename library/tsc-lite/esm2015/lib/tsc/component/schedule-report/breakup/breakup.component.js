import { __awaiter, __rest } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { isEqual } from 'lodash';
import { DropdownTypeEnum } from '../../../enum/dropdown.enum';
import { ScheduleReportTypeEnum } from '../../../enum/schedule-report.enum';
import { ScheduleReport } from '../../../model/schedule-report.model';
// tsc-library
import { MaterialFormFieldAppearance, InvalidForm, ButtonLabelEnum, FormAction, FormErrorEnum, COMMON_CONSTANT, MATERIAL_CONSTANT, ButtonTooltipEnum } from '@library/tsc-common';
import { ToastrColor } from '@library/toastr-service';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/forms";
import * as i3 from "../../../controller/schedule-report.controller";
import * as i4 from "../../../service/parameter.service";
import * as i5 from "../../../service/schedule-report.service";
import * as i6 from "@library/storage-service";
import * as i7 from "@library/tsc-common";
import * as i8 from "@library/toastr-service";
import * as i9 from "@angular/material/card";
import * as i10 from "@angular/material/radio";
import * as i11 from "../../dropdown/entity/entity.component";
import * as i12 from "@angular/material/form-field";
import * as i13 from "@angular/material/select";
import * as i14 from "@angular/material/core";
import * as i15 from "../_shared/configuration/configuration.component";
import * as i16 from "@angular/common";
// /tsc-library/
export class ScheduleReportBreakupComponent {
    constructor(activatedRoute, router, formBuilder, scheduleReportController, parameterService, scheduleReportService, 
    // tsc-library
    storageService, tscCommonService, toastrService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.formBuilder = formBuilder;
        this.scheduleReportController = scheduleReportController;
        this.parameterService = parameterService;
        this.scheduleReportService = scheduleReportService;
        this.storageService = storageService;
        this.tscCommonService = tscCommonService;
        this.toastrService = toastrService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.FormAction = FormAction;
        this.FormErrorEnum = FormErrorEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.ButtonTooltipEnum = ButtonTooltipEnum;
        this.DropdownTypeEnum = DropdownTypeEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.ApplicationKeyID = ApplicationKeyID;
        this.isEqual = true;
        this.scheduleReportI = new ScheduleReport();
        this.errorHandling = (formGroup, controlPath, error) => {
            return formGroup.get(controlPath).hasError(error);
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        this.scheduleBreakupReportFGInit();
        this.getConsumptionParameter();
        this.activatedRoute.data.subscribe(data => {
            this.action = data.action;
            this.setPageTitle();
        });
        this.activatedRoute.params.subscribe(params => {
            if (this.action == FormAction.UPDATE) {
                this.scheduleReportID = params.scheduleReportID;
                this.getScheduleReportByID(this.scheduleReportID);
            }
        });
    }
    setPageTitle() {
        const applicationName = this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
        if (this.action == FormAction.CREATE) {
            this.pageTitle = `Schedule ${applicationName} Breakup Report`;
        }
        else if (this.action == FormAction.UPDATE) {
            this.pageTitle = `Update Scheduled ${applicationName} Breakup Report`;
        }
    }
    scheduleBreakupReportFGInit() {
        this.scheduleBreakupReportFG = this.formBuilder.group({
            reportConfig: this.formBuilder.group({
                reportType: [ScheduleReportTypeEnum.BREAKUP_REPORT, Validators.required],
                deviceID: [[]],
                entityType: [],
                entityID: [[], Validators.required],
                sourceConsumer: this.formBuilder.group({
                    type: ['SOURCE', Validators.required],
                    keyID: []
                }),
                paramMetric: [, Validators.required],
            }),
            schedulerConfig: this.formBuilder.group({
                name: [, Validators.required],
                dataInterval: [, Validators.required],
                frequency: [, Validators.required],
                userChoice: [, Validators.required],
                userID: [[], Validators.required],
                otherUserEmail: [[]],
                status: [, Validators.required],
                reportFormat: [, Validators.required],
            })
        });
    }
    getConsumptionParameter() {
        return __awaiter(this, void 0, void 0, function* () {
            const consumptionParamM = yield this.parameterService.getConsumptionParameter(this.orgID);
            this.consumptionParamM = consumptionParamM.consumptionParameter;
        });
    }
    entityInpChange() {
        let entityID = this.entityInput.multipleEntityFC.value;
        this.scheduleBreakupReportFG.get('reportConfig').get('entityID').patchValue(entityID);
    }
    patchSchedulerConfigInput() {
        this.scheduleBreakupReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
    }
    getValidFormData() {
        this.patchSchedulerConfigInput();
        let entityID = this.tscCommonService.removeSelectAllID(this.scheduleBreakupReportFG.get('reportConfig').get('entityID').value);
        this.scheduleBreakupReportFG.get('reportConfig').get('entityID').patchValue(entityID);
        let userID = this.tscCommonService.removeSelectAllID(this.scheduleBreakupReportFG.get('schedulerConfig').get('userID').value);
        this.scheduleBreakupReportFG.get('schedulerConfig').get('userID').patchValue(userID);
        let paramsArray = [
            {
                name: this.scheduleBreakupReportFG.get('reportConfig').get('paramMetric').value,
                dsAgg: 'sum',
                agg: 'sum'
            }
        ];
        const reportConfigFG = this.scheduleBreakupReportFG.get('reportConfig').value;
        const schedulerConfigFG = this.scheduleBreakupReportFG.get('schedulerConfig').value;
        const { paramMetric } = reportConfigFG, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
        this.modifiedFG = {
            reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
            schedulerConfig: Object.assign({}, schedulerConfigFG)
        };
    }
    scheduleReportSubmit() {
        this.patchSchedulerConfigInput();
        if (this.schedulerConfigInput.scheduleReportFG.invalid) {
            this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
        }
        if (this.scheduleBreakupReportFG.invalid) {
            console.log('Invalid form:', this.scheduleBreakupReportFG.value);
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        else {
            this.getValidFormData();
            if (this.action == FormAction.CREATE) {
                this.createScheduleReport();
            }
            else if (this.action == FormAction.UPDATE) {
                this.updateScheduleReport();
            }
        }
    }
    createScheduleReport() {
        this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe((res) => {
            this.router.navigate([`schedule-report/page`]);
        }, error => {
            console.log('error in createScheduleReport -', error);
        });
    }
    getScheduleReportByID(scheduleReportID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.scheduleReportI = (yield this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID));
            this.patchScheduleReport(this.scheduleReportI);
        });
    }
    patchScheduleReport(scheduleReportI) {
        this.scheduleBreakupReportFG.patchValue({
            reportConfig: scheduleReportI.reportConfig,
            schedulerConfig: scheduleReportI.schedulerConfig
        });
        this.entityInput.multipleEntityFC.patchValue(scheduleReportI.reportConfig.entityID);
        this.scheduleBreakupReportFG.get('reportConfig').get('paramMetric').patchValue(scheduleReportI.reportConfig.paramMetric[0]);
        this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
        this.initialObject = {
            breakupReportConfig: this.scheduleBreakupReportFG.value,
            schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
        };
        this.isValidUpdateForm();
    }
    isValidUpdateForm() {
        this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(() => {
            this.checkEquality();
        });
        this.scheduleBreakupReportFG.valueChanges.subscribe(() => {
            this.checkEquality();
        });
    }
    checkEquality() {
        const currentValues = {
            breakupReportConfig: this.scheduleBreakupReportFG.value,
            schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
        };
        this.isEqual = isEqual(this.initialObject, currentValues);
    }
    updateScheduleReport() {
        this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe((res) => {
            this.tscCommonService.back();
        }, error => {
            console.log('error in updateScheduleReport -', error);
        });
    }
}
ScheduleReportBreakupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportBreakupComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.FormBuilder }, { token: i3.ScheduleReportController }, { token: i4.ParameterService }, { token: i5.ScheduleReportService }, { token: i6.StorageService }, { token: i7.TSCCommonService }, { token: i8.ToastrService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleReportBreakupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportBreakupComponent, selector: "lib-breakup", viewQueries: [{ propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }, { propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleBreakupReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div formGroupName=\"reportConfig\">\n                                <div formGroupName=\"sourceConsumer\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"radioBtnField\">\n                                            <div class=\"radioBtnGroupLabel\"> You want to schedule {{ applicationKeyID == ApplicationKeyID.WATER_KEY_ID ?\n                                                'water' : 'energy'}} breakup report for? * </div>\n                                            <mat-radio-group formControlName=\"type\">\n                                                <div class=\"row my-1\">\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'SOURCE'\">\n                                                            Source\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'CONSUMER'\">\n                                                            Consumer\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <mat-error class=\"textMatError ms-1 mt-1\"\n                                                        *ngIf=\"errorHandling(scheduleBreakupReportFG, 'reportConfig.sourceConsumer.type', 'required')\">\n                                                        {{ FormErrorEnum.REQUIRED }}\n                                                    </mat-error>\n                                                </div>\n                                            </mat-radio-group>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"row mt-3\">\n                            <div class=\"col-sm-3\">\n                                <lib-entity #entityInput [dropdownTypeInp]=\"DropdownTypeEnum.MULTIPLE_DROPDOWN\"\n                                    (emitFilter)=\"entityInpChange()\"></lib-entity>\n                            </div>\n                        \n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select consumption parameter</mat-label>\n                                        <mat-select formControlName=\"paramMetric\" required>\n                                            <ng-container\n                                                *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                                                <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\">\n                                                    {{ param.label }}\n                                                </mat-option>\n                                            </ng-container>\n\n                                            <ng-template #noConsumptionParamM>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling(scheduleBreakupReportFG, 'reportConfig.paramMetric', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n            \n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", components: [{ type: i9.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i11.EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: i12.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i13.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i14.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i15.ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i10.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i16.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.MatError, selector: "mat-error", inputs: ["id"] }, { type: i12.MatLabel, selector: "mat-label" }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i16.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i16.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportBreakupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-breakup',
                    templateUrl: './breakup.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.FormBuilder }, { type: i3.ScheduleReportController }, { type: i4.ParameterService }, { type: i5.ScheduleReportService }, { type: i6.StorageService }, { type: i7.TSCCommonService }, { type: i8.ToastrService }]; }, propDecorators: { entityInput: [{
                type: ViewChild,
                args: ['entityInput']
            }], schedulerConfigInput: [{
                type: ViewChild,
                args: ['schedulerConfigInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWt1cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9zY2hlZHVsZS1yZXBvcnQvYnJlYWt1cC9icmVha3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3NjaGVkdWxlLXJlcG9ydC9icmVha3VwL2JyZWFrdXAuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBMEIsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHcEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUc1RSxPQUFPLEVBQUUsY0FBYyxFQUFtQixNQUFNLHNDQUFzQyxDQUFDO0FBVXZGLGNBQWM7QUFDZCxPQUFPLEVBQWEsMkJBQTJCLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFvQixlQUFlLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvTSxPQUFPLEVBQUUsV0FBVyxFQUFpQixNQUFNLHlCQUF5QixDQUFDO0FBRXJFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDaEUsZ0JBQWdCO0FBUWhCLE1BQU0sT0FBTyw4QkFBOEI7SUErQnZDLFlBQ1ksY0FBOEIsRUFDOUIs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UCxDQUFDO0lBRUQsYUFBYTtRQUNULE1BQU0sYUFBYSxHQUFHO1lBQ2xCLG1CQUFtQixFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLO1lBQ3ZELGVBQWUsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsS0FBSztTQUNwRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsb0JBQW9CO1FBQ2hCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBYyxFQUFFLEVBQUU7WUFFaEksSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO1FBRWpDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDOzs0SEF2T1EsOEJBQThCO2dIQUE5Qiw4QkFBOEIsOFFDakMzQyw2OU1BOEdNOzRGRDdFTyw4QkFBOEI7a0JBTjFDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFdBQVcsRUFBRSwwQkFBMEI7b0JBQ3ZDLE1BQU0sRUFBRSxFQUNQO2lCQUNKO3NWQTZCNkIsV0FBVztzQkFBcEMsU0FBUzt1QkFBQyxhQUFhO2dCQUNXLG9CQUFvQjtzQkFBdEQsU0FBUzt1QkFBQyxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBEcm9wZG93blR5cGVFbnVtIH0gZnJvbSAnLi4vLi4vLi4vZW51bS9kcm9wZG93bi5lbnVtJztcbmltcG9ydCB7IFNjaGVkdWxlUmVwb3J0VHlwZUVudW0gfSBmcm9tICcuLi8uLi8uLi9lbnVtL3NjaGVkdWxlLXJlcG9ydC5lbnVtJztcblxuaW1wb3J0IHsgQ29uc3VtcHRpb25QYXJhbWV0ZXJNIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcGFyYW1ldGVyLm1vZGVsJztcbmltcG9ydCB7IFNjaGVkdWxlUmVwb3J0LCBTY2hlZHVsZVJlcG9ydEkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9zY2hlZHVsZS1yZXBvcnQubW9kZWwnO1xuXG5pbXBvcnQgeyBTY2hlZHVsZVJlcG9ydENvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL3NjaGVkdWxlLXJlcG9ydC5jb250cm9sbGVyJztcblxuaW1wb3J0IHsgUGFyYW1ldGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvcGFyYW1ldGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2NoZWR1bGVSZXBvcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9zY2hlZHVsZS1yZXBvcnQuc2VydmljZSc7XG5cbmltcG9ydCB7IEVudGl0eUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Ryb3Bkb3duL2VudGl0eS9lbnRpdHkuY29tcG9uZW50JztcbmltcG9ydCB7IFNjaGVkdWxlUmVwb3J0Q29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL19zaGFyZWQvY29uZmlndXJhdGlvbi9jb25maWd1cmF0aW9uLmNvbXBvbmVudCc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBSZXNwb25zZU0sIE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSwgSW52YWxpZEZvcm0sIEJ1dHRvbkxhYmVsRW51bSwgRm9ybUFjdGlvbiwgRm9ybUVycm9yRW51bSwgVFNDQ29tbW9uU2VydmljZSwgQ09NTU9OX0NPTlNUQU5ULCBNQVRFUklBTF9DT05TVEFOVCwgQnV0dG9uVG9vbHRpcEVudW0gfSBmcm9tICdAbGlicmFyeS90c2MtY29tbW9uJztcbmltcG9ydCB7IFRvYXN0ckNvbG9yLCBUb2FzdHJTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvdG9hc3RyLXNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICdAbGlicmFyeS9zdG9yYWdlLXNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25LZXlJRCB9IGZyb20gJ0BsaWJyYXJ5L2FwcGxpY2F0aW9uLXNlcnZpY2UnO1xuLy8gL3RzYy1saWJyYXJ5L1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2xpYi1icmVha3VwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYnJlYWt1cC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVzOiBbXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBTY2hlZHVsZVJlcG9ydEJyZWFrdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgQ09NTU9OX0NPTlNUQU5UID0gQ09NTU9OX0NPTlNUQU5UO1xuICAgIE1BVEVSSUFMX0NPTlNUQU5UID0gTUFURVJJQUxfQ09OU1RBTlQ7XG5cbiAgICBGb3JtQWN0aW9uID0gRm9ybUFjdGlvbjtcbiAgICBGb3JtRXJyb3JFbnVtID0gRm9ybUVycm9yRW51bTtcbiAgICBCdXR0b25MYWJlbEVudW0gPSBCdXR0b25MYWJlbEVudW07XG4gICAgQnV0dG9uVG9vbHRpcEVudW0gPSBCdXR0b25Ub29sdGlwRW51bTtcbiAgICBEcm9wZG93blR5cGVFbnVtID0gRHJvcGRvd25UeXBlRW51bTtcbiAgICBNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2UgPSBNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2U7XG4gICAgQXBwbGljYXRpb25LZXlJRCA9IEFwcGxpY2F0aW9uS2V5SUQ7XG5cbiAgICBvcmdJRDogYW55O1xuICAgIGFwcGxpY2F0aW9uS2V5SUQ6IGFueTtcbiAgICBjb25zdW1wdGlvblBhcmFtTTogYW55O1xuXG4gICAgc2NoZWR1bGVCcmVha3VwUmVwb3J0Rkc6IEZvcm1Hcm91cDtcbiAgICBtb2RpZmllZEZHOiBhbnk7XG4gICAgc2NoZWR1bGVSZXBvcnRJRDogYW55O1xuXG4gICAgYWN0aW9uOiBzdHJpbmc7XG4gICAgcGFnZVRpdGxlOiBzdHJpbmc7XG4gICAgaXNFcXVhbDogYm9vbGVhbiA9IHRydWU7XG4gICAgaW5pdGlhbE9iamVjdDogYW55O1xuXG4gICAgc2NoZWR1bGVSZXBvcnRJID0gbmV3IFNjaGVkdWxlUmVwb3J0KCk7XG5cbiAgICBAVmlld0NoaWxkKCdlbnRpdHlJbnB1dCcpIGVudGl0eUlucHV0OiBFbnRpdHlDb21wb25lbnQ7XG4gICAgQFZpZXdDaGlsZCgnc2NoZWR1bGVyQ29uZmlnSW5wdXQnKSBzY2hlZHVsZXJDb25maWdJbnB1dDogU2NoZWR1bGVSZXBvcnRDb25maWd1cmF0aW9uQ29tcG9uZW50O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcbiAgICAgICAgcHJpdmF0ZSBzY2hlZHVsZVJlcG9ydENvbnRyb2xsZXI6IFNjaGVkdWxlUmVwb3J0Q29udHJvbGxlcixcbiAgICAgICAgcHJpdmF0ZSBwYXJhbWV0ZXJTZXJ2aWNlOiBQYXJhbWV0ZXJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHNjaGVkdWxlUmVwb3J0U2VydmljZTogU2NoZWR1bGVSZXBvcnRTZXJ2aWNlLFxuXG4gICAgICAgIC8vIHRzYy1saWJyYXJ5XG4gICAgICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgdHNjQ29tbW9uU2VydmljZTogVFNDQ29tbW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0b2FzdHJTZXJ2aWNlOiBUb2FzdHJTZXJ2aWNlLFxuICAgICAgICAvLyAvdHNjLWxpYnJhcnkvXG4gICAgKSB7IH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9yZ0lEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdjdXJyZW50T3JnSUQnKTtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbktleUlEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdhcHBsaWNhdGlvbktleUlEJyk7XG5cbiAgICAgICAgdGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGR0luaXQoKTtcbiAgICAgICAgdGhpcy5nZXRDb25zdW1wdGlvblBhcmFtZXRlcigpO1xuXG4gICAgICAgIHRoaXMuYWN0aXZhdGVkUm91dGUuZGF0YS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IGRhdGEuYWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5zZXRQYWdlVGl0bGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmF0ZWRSb3V0ZS5wYXJhbXMuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5VUERBVEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVwb3J0SUQgPSBwYXJhbXMuc2NoZWR1bGVSZXBvcnRJRDtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNjaGVkdWxlUmVwb3J0QnlJRCh0aGlzLnNjaGVkdWxlUmVwb3J0SUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRQYWdlVGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uTmFtZSA9IHRoaXMuYXBwbGljYXRpb25LZXlJRCA9PSBBcHBsaWNhdGlvbktleUlELldBVEVSX0tFWV9JRCA/ICdXYXRlcicgOiAnRW5lcmd5JztcblxuICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5DUkVBVEUpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlID0gYFNjaGVkdWxlICR7YXBwbGljYXRpb25OYW1lfSBCcmVha3VwIFJlcG9ydGA7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5VUERBVEUpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlID0gYFVwZGF0ZSBTY2hlZHVsZWQgJHthcHBsaWNhdGlvbk5hbWV9IEJyZWFrdXAgUmVwb3J0YDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGRyA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICAgICAgcmVwb3J0Q29uZmlnOiB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgICAgICAgICByZXBvcnRUeXBlOiBbU2NoZWR1bGVSZXBvcnRUeXBlRW51bS5CUkVBS1VQX1JFUE9SVCwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgZGV2aWNlSUQ6IFtbXV0sXG4gICAgICAgICAgICAgICAgZW50aXR5VHlwZTogW10sXG4gICAgICAgICAgICAgICAgZW50aXR5SUQ6IFtbXSwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgc291cmNlQ29uc3VtZXI6IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBbJ1NPVVJDRScsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgICAgICBrZXlJRDogW11cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBwYXJhbU1ldHJpYzogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHNjaGVkdWxlckNvbmZpZzogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICAgICAgbmFtZTogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgZGF0YUludGVydmFsOiBbLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFssIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIHVzZXJDaG9pY2U6IFssIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIHVzZXJJRDogW1tdLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBvdGhlclVzZXJFbWFpbDogW1tdXSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IFssIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIHJlcG9ydEZvcm1hdDogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb25zdW1wdGlvblBhcmFtZXRlcigpIHtcbiAgICAgICAgY29uc3QgY29uc3VtcHRpb25QYXJhbU0gPSA8Q29uc3VtcHRpb25QYXJhbWV0ZXJNPmF3YWl0IHRoaXMucGFyYW1ldGVyU2VydmljZS5nZXRDb25zdW1wdGlvblBhcmFtZXRlcih0aGlzLm9yZ0lEKTtcblxuICAgICAgICB0aGlzLmNvbnN1bXB0aW9uUGFyYW1NID0gY29uc3VtcHRpb25QYXJhbU0uY29uc3VtcHRpb25QYXJhbWV0ZXI7XG4gICAgfVxuXG4gICAgZW50aXR5SW5wQ2hhbmdlKCkge1xuICAgICAgICBsZXQgZW50aXR5SUQgPSB0aGlzLmVudGl0eUlucHV0Lm11bHRpcGxlRW50aXR5RkMudmFsdWU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVCcmVha3VwUmVwb3J0RkcuZ2V0KCdyZXBvcnRDb25maWcnKS5nZXQoJ2VudGl0eUlEJykucGF0Y2hWYWx1ZShlbnRpdHlJRCk7XG4gICAgfVxuXG4gICAgcGF0Y2hTY2hlZHVsZXJDb25maWdJbnB1dCgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGRy5nZXQoJ3NjaGVkdWxlckNvbmZpZycpLnBhdGNoVmFsdWUodGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLnZhbHVlKVxuICAgIH1cblxuICAgIGdldFZhbGlkRm9ybURhdGEoKSB7XG4gICAgICAgIHRoaXMucGF0Y2hTY2hlZHVsZXJDb25maWdJbnB1dCgpO1xuXG4gICAgICAgIGxldCBlbnRpdHlJRCA9IHRoaXMudHNjQ29tbW9uU2VydmljZS5yZW1vdmVTZWxlY3RBbGxJRCh0aGlzLnNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdlbnRpdHlJRCcpLnZhbHVlKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgnZW50aXR5SUQnKS5wYXRjaFZhbHVlKGVudGl0eUlEKTtcblxuICAgICAgICBsZXQgdXNlcklEID0gdGhpcy50c2NDb21tb25TZXJ2aWNlLnJlbW92ZVNlbGVjdEFsbElEKHRoaXMuc2NoZWR1bGVCcmVha3VwUmVwb3J0RkcuZ2V0KCdzY2hlZHVsZXJDb25maWcnKS5nZXQoJ3VzZXJJRCcpLnZhbHVlKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGRy5nZXQoJ3NjaGVkdWxlckNvbmZpZycpLmdldCgndXNlcklEJykucGF0Y2hWYWx1ZSh1c2VySUQpO1xuXG4gICAgICAgIGxldCBwYXJhbXNBcnJheSA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLnNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdwYXJhbU1ldHJpYycpLnZhbHVlLFxuICAgICAgICAgICAgICAgIGRzQWdnOiAnc3VtJyxcbiAgICAgICAgICAgICAgICBhZ2c6ICdzdW0nXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cblxuICAgICAgICBjb25zdCByZXBvcnRDb25maWdGRyA9IHRoaXMuc2NoZWR1bGVCcmVha3VwUmVwb3J0RkcuZ2V0KCdyZXBvcnRDb25maWcnKS52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2NoZWR1bGVyQ29uZmlnRkcgPSB0aGlzLnNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHLmdldCgnc2NoZWR1bGVyQ29uZmlnJykudmFsdWU7XG4gICAgICAgIGNvbnN0IHsgcGFyYW1NZXRyaWMsIC4uLnJlcG9ydENvbmZpZ1dpdGhvdXRQYXJhbU1ldHJpYyB9ID0gcmVwb3J0Q29uZmlnRkc7XG5cbiAgICAgICAgdGhpcy5tb2RpZmllZEZHID0ge1xuICAgICAgICAgICAgcmVwb3J0Q29uZmlnOiB7XG4gICAgICAgICAgICAgICAgLi4ucmVwb3J0Q29uZmlnV2l0aG91dFBhcmFtTWV0cmljLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zQXJyYXlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2hlZHVsZXJDb25maWc6IHtcbiAgICAgICAgICAgICAgICAuLi5zY2hlZHVsZXJDb25maWdGR1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHNjaGVkdWxlUmVwb3J0U3VibWl0KCkge1xuICAgICAgICB0aGlzLnBhdGNoU2NoZWR1bGVyQ29uZmlnSW5wdXQoKTtcblxuICAgICAgICBpZiAodGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLmludmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyQ29uZmlnSW5wdXQuc2NoZWR1bGVSZXBvcnRGRy5tYXJrQWxsQXNUb3VjaGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGRy5pbnZhbGlkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW52YWxpZCBmb3JtOicsIHRoaXMuc2NoZWR1bGVCcmVha3VwUmVwb3J0RkcudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy50b2FzdHJTZXJ2aWNlLm9wZW5Ub2FzdChJbnZhbGlkRm9ybS5JTlZBTElEX0ZPUk1fVElUTEUsIEludmFsaWRGb3JtLklOVkFMSURfRk9STV9NRVNTQUdFLCBUb2FzdHJDb2xvci5FUlJPUik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdldFZhbGlkRm9ybURhdGEoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09IEZvcm1BY3Rpb24uQ1JFQVRFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVTY2hlZHVsZVJlcG9ydCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PSBGb3JtQWN0aW9uLlVQREFURSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2NoZWR1bGVSZXBvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVNjaGVkdWxlUmVwb3J0KCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlUmVwb3J0Q29udHJvbGxlci5jcmVhdGVTY2hlZHVsZVJlcG9ydCh0aGlzLm9yZ0lELCB0aGlzLm1vZGlmaWVkRkcpLnN1YnNjcmliZSgocmVzOiBSZXNwb25zZU0pID0+IHtcblxuICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW2BzY2hlZHVsZS1yZXBvcnQvcGFnZWBdKTtcblxuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgaW4gY3JlYXRlU2NoZWR1bGVSZXBvcnQgLScsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0U2NoZWR1bGVSZXBvcnRCeUlEKHNjaGVkdWxlUmVwb3J0SUQpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVJlcG9ydEkgPSA8U2NoZWR1bGVSZXBvcnRJPmF3YWl0IHRoaXMuc2NoZWR1bGVSZXBvcnRTZXJ2aWNlLmdldFNjaGVkdWxlUmVwb3J0QnlJRCh0aGlzLm9yZ0lELCBzY2hlZHVsZVJlcG9ydElEKTtcblxuICAgICAgICB0aGlzLnBhdGNoU2NoZWR1bGVSZXBvcnQodGhpcy5zY2hlZHVsZVJlcG9ydEkpO1xuICAgIH1cblxuICAgIHBhdGNoU2NoZWR1bGVSZXBvcnQoc2NoZWR1bGVSZXBvcnRJOiBTY2hlZHVsZVJlcG9ydEkpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGRy5wYXRjaFZhbHVlKHtcbiAgICAgICAgICAgIHJlcG9ydENvbmZpZzogc2NoZWR1bGVSZXBvcnRJLnJlcG9ydENvbmZpZyxcbiAgICAgICAgICAgIHNjaGVkdWxlckNvbmZpZzogc2NoZWR1bGVSZXBvcnRJLnNjaGVkdWxlckNvbmZpZ1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmVudGl0eUlucHV0Lm11bHRpcGxlRW50aXR5RkMucGF0Y2hWYWx1ZShzY2hlZHVsZVJlcG9ydEkucmVwb3J0Q29uZmlnLmVudGl0eUlEKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUJyZWFrdXBSZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgncGFyYW1NZXRyaWMnKS5wYXRjaFZhbHVlKHNjaGVkdWxlUmVwb3J0SS5yZXBvcnRDb25maWcucGFyYW1NZXRyaWNbMF0pO1xuICAgICAgICB0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcucGF0Y2hWYWx1ZShzY2hlZHVsZVJlcG9ydEkuc2NoZWR1bGVyQ29uZmlnKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxPYmplY3QgPSB7XG4gICAgICAgICAgICBicmVha3VwUmVwb3J0Q29uZmlnOiB0aGlzLnNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHLnZhbHVlLFxuICAgICAgICAgICAgc2NoZWR1bGVyQ29uZmlnOiB0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcudmFsdWVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmlzVmFsaWRVcGRhdGVGb3JtKCk7XG4gICAgfVxuXG4gICAgaXNWYWxpZFVwZGF0ZUZvcm0oKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQ29uZmlnSW5wdXQuc2NoZWR1bGVSZXBvcnRGRy52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tFcXVhbGl0eSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVja0VxdWFsaXR5KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNoZWNrRXF1YWxpdHkoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSB7XG4gICAgICAgICAgICBicmVha3VwUmVwb3J0Q29uZmlnOiB0aGlzLnNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHLnZhbHVlLFxuICAgICAgICAgICAgc2NoZWR1bGVyQ29uZmlnOiB0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcudmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0VxdWFsID0gaXNFcXVhbCh0aGlzLmluaXRpYWxPYmplY3QsIGN1cnJlbnRWYWx1ZXMpO1xuICAgIH1cblxuICAgIHVwZGF0ZVNjaGVkdWxlUmVwb3J0KCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlUmVwb3J0Q29udHJvbGxlci51cGRhdGVTY2hlZHVsZVJlcG9ydCh0aGlzLm9yZ0lELCB0aGlzLnNjaGVkdWxlUmVwb3J0SUQsIHRoaXMubW9kaWZpZWRGRykuc3Vic2NyaWJlKChyZXM6IFJlc3BvbnNlTSkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLnRzY0NvbW1vblNlcnZpY2UuYmFjaygpO1xuXG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBpbiB1cGRhdGVTY2hlZHVsZVJlcG9ydCAtJywgZXJyb3IpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGVycm9ySGFuZGxpbmcgPSAoZm9ybUdyb3VwOiBGb3JtR3JvdXAsIGNvbnRyb2xQYXRoOiBzdHJpbmcsIGVycm9yOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgICAgICAgcmV0dXJuIGZvcm1Hcm91cC5nZXQoY29udHJvbFBhdGgpLmhhc0Vycm9yKGVycm9yKTtcbiAgICB9XG5cbn1cbiIsIjxkaXYgY2xhc3M9XCJjYXJkIG1haW4tY2FyZCBjYXJkT3ZlcndyaXRlIGgxMDBcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyQ29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJMZWZ0Q29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZVRpdGxlXCI+e3sgcGFnZVRpdGxlIH19PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZVN1YnRpdGxlXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cInNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHXCIgKG5nU3VibWl0KT1cInNjaGVkdWxlUmVwb3J0U3VibWl0KClcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxtYXQtY2FyZCBjbGFzcz1cImJvcmRlciBjYXJkT3ZlcndyaXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZFRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVwb3J0IGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBmb3JtR3JvdXBOYW1lPVwicmVwb3J0Q29uZmlnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZm9ybUdyb3VwTmFtZT1cInNvdXJjZUNvbnN1bWVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFkaW9CdG5GaWVsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFkaW9CdG5Hcm91cExhYmVsXCI+IFlvdSB3YW50IHRvIHNjaGVkdWxlIHt7IGFwcGxpY2F0aW9uS2V5SUQgPT0gQXBwbGljYXRpb25LZXlJRC5XQVRFUl9LRVlfSUQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dhdGVyJyA6ICdlbmVyZ3knfX0gYnJlYWt1cCByZXBvcnQgZm9yPyAqIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LXJhZGlvLWdyb3VwIGZvcm1Db250cm9sTmFtZT1cInR5cGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbXktMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LXJhZGlvLWJ1dHRvbiBjbGFzcz1cInJhZGlvQnRuTGFiZWxcIiBbdmFsdWVdPVwiJ1NPVVJDRSdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1yYWRpby1idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtcmFkaW8tYnV0dG9uIGNsYXNzPVwicmFkaW9CdG5MYWJlbFwiIFt2YWx1ZV09XCInQ09OU1VNRVInXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zdW1lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1yYWRpby1idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1lcnJvciBjbGFzcz1cInRleHRNYXRFcnJvciBtcy0xIG10LTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cImVycm9ySGFuZGxpbmcoc2NoZWR1bGVCcmVha3VwUmVwb3J0RkcsICdyZXBvcnRDb25maWcuc291cmNlQ29uc3VtZXIudHlwZScsICdyZXF1aXJlZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IEZvcm1FcnJvckVudW0uUkVRVUlSRUQgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1lcnJvcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1yYWRpby1ncm91cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpYi1lbnRpdHkgI2VudGl0eUlucHV0IFtkcm9wZG93blR5cGVJbnBdPVwiRHJvcGRvd25UeXBlRW51bS5NVUxUSVBMRV9EUk9QRE9XTlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW1pdEZpbHRlcik9XCJlbnRpdHlJbnBDaGFuZ2UoKVwiPjwvbGliLWVudGl0eT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGZvcm1Hcm91cE5hbWU9XCJyZXBvcnRDb25maWdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZm9ybS1maWVsZCBjbGFzcz1cIm1hdEZpZWxkV2lkdGgxMDBcIiBbYXBwZWFyYW5jZV09XCJNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2UuRk9STV9GSUVMRF9BUFBFQVJBTkNFXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1sYWJlbD5TZWxlY3QgY29uc3VtcHRpb24gcGFyYW1ldGVyPC9tYXQtbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1zZWxlY3QgZm9ybUNvbnRyb2xOYW1lPVwicGFyYW1NZXRyaWNcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJjb25zdW1wdGlvblBhcmFtTSAmJiBjb25zdW1wdGlvblBhcmFtTS5sZW5ndGggPiAwICYmIGNvbnN1bXB0aW9uUGFyYW1NWzBdWydpZCddOyBlbHNlIG5vQ29uc3VtcHRpb25QYXJhbU1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uICpuZ0Zvcj1cImxldCBwYXJhbSBvZiBjb25zdW1wdGlvblBhcmFtTVwiIFt2YWx1ZV09XCJwYXJhbS5wYXJhbU1ldHJpY1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHBhcmFtLmxhYmVsIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjbm9Db25zdW1wdGlvblBhcmFtTT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uIGRpc2FibGVkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IENPTU1PTl9DT05TVEFOVC5OT19EQVRBX0ZPVU5EIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZXJyb3IgKm5nSWY9XCJlcnJvckhhbmRsaW5nKHNjaGVkdWxlQnJlYWt1cFJlcG9ydEZHLCAncmVwb3J0Q29uZmlnLnBhcmFtTWV0cmljJywgJ3JlcXVpcmVkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgRm9ybUVycm9yRW51bS5SRVFVSVJFRCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LWVycm9yPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9tYXQtY2FyZD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsaWItY29uZmlndXJhdGlvbiAjc2NoZWR1bGVyQ29uZmlnSW5wdXQ+PC9saWItY29uZmlndXJhdGlvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZC1ub25lXCIgdHlwZT1cInN1Ym1pdFwiICNmb3JtU3VibWl0QnRuPjwvYnV0dG9uPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbG9hdC1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgbWUtMlwiIHR5cGU9XCJidXR0b25cIiAoY2xpY2spPVwidHNjQ29tbW9uU2VydmljZS5iYWNrKClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBCdXR0b25MYWJlbEVudW0uQ0FOQ0VMX0JUTl9MQUJFTCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zdWNjZXNzXCIgW25nQ2xhc3NdPVwie1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYnRuLXN1Y2Nlc3MnIDogYWN0aW9uID09IEZvcm1BY3Rpb24uQ1JFQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYnRuLXByaW1hcnknIDogYWN0aW9uID09IEZvcm1BY3Rpb24uVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlzYWJsZWQnIDogYWN0aW9uID09IEZvcm1BY3Rpb24uVVBEQVRFICYmIGlzRXF1YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XCIgdHlwZT1cInN1Ym1pdFwiPnt7IGFjdGlvbiA9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1BY3Rpb24uQ1JFQVRFID8gJ1NjaGVkdWxlJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uTGFiZWxFbnVtLlVQREFURV9CVE5fTEFCRUwgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG48L2Rpdj4iXX0=