import { __awaiter, __rest } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { isEqual } from 'lodash';
import { Entity } from '../../../model/entity.model';
import { ScheduleReportTypeEnum } from '../../../enum/schedule-report.enum';
import { ScheduleReport } from '../../../model/schedule-report.model';
// tsc-library
import { MaterialFormFieldAppearance, InvalidForm, ButtonLabelEnum, FormAction, FormErrorEnum, COMMON_CONSTANT, MATERIAL_CONSTANT, ButtonTooltipEnum } from '@library/tsc-common';
import { ToastrColor } from '@library/toastr-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/forms";
import * as i3 from "../../../controller/schedule-report.controller";
import * as i4 from "../../../service/entity.service";
import * as i5 from "../../../service/schedule-report.service";
import * as i6 from "@library/storage-service";
import * as i7 from "@library/tsc-common";
import * as i8 from "@library/toastr-service";
import * as i9 from "@angular/material/card";
import * as i10 from "@angular/material/form-field";
import * as i11 from "@angular/material/select";
import * as i12 from "@angular/material/core";
import * as i13 from "../_shared/configuration/configuration.component";
import * as i14 from "@angular/common";
// /tsc-library/
export class ScheduleReportTemperatureComponent {
    constructor(activatedRoute, router, formBuilder, scheduleReportController, entityService, scheduleReportService, 
    // tsc-library
    storageService, tscCommonService, toastrService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.formBuilder = formBuilder;
        this.scheduleReportController = scheduleReportController;
        this.entityService = entityService;
        this.scheduleReportService = scheduleReportService;
        this.storageService = storageService;
        this.tscCommonService = tscCommonService;
        this.toastrService = toastrService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.FormAction = FormAction;
        this.FormErrorEnum = FormErrorEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.ButtonTooltipEnum = ButtonTooltipEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.entityM = [new Entity()];
        this.entityType = [];
        this.allEntityID = [];
        this.totalEntityCount = 0;
        this.entities = [];
        this.isEqual = true;
        this.scheduleReportI = new ScheduleReport();
        this.errorHandling = (formGroup, controlPath, error) => {
            return formGroup.get(controlPath).hasError(error);
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.getEntitiesByParamMetric();
        this.scheduleTemperatureReportFGInit();
        this.activatedRoute.data.subscribe(data => {
            this.action = data.action;
            this.setPageTitle();
        });
        this.activatedRoute.params.subscribe(params => {
            if (this.action == FormAction.UPDATE) {
                this.scheduleReportID = params.scheduleReportID;
                this.getScheduleReportByID(this.scheduleReportID);
            }
        });
    }
    setPageTitle() {
        if (this.action == FormAction.CREATE) {
            this.pageTitle = `Schedule Temperature Report`;
        }
        else if (this.action == FormAction.UPDATE) {
            this.pageTitle = `Update Scheduled Temperature Report`;
        }
    }
    scheduleTemperatureReportFGInit() {
        this.scheduleTemperatureReportFG = this.formBuilder.group({
            reportConfig: this.formBuilder.group({
                reportType: [ScheduleReportTypeEnum.TEMPERATURE_REPORT, Validators.required],
                deviceID: [[]],
                entityType: [, Validators.required],
                entityID: [[], Validators.required],
                sourceConsumer: this.formBuilder.group({
                    type: [],
                    keyID: []
                }),
                paramMetric: [['engTemperature'], Validators.required],
            }),
            schedulerConfig: this.formBuilder.group({
                name: [, Validators.required],
                dataInterval: [, Validators.required],
                frequency: [, Validators.required],
                userChoice: [, Validators.required],
                userID: [[], Validators.required],
                otherUserEmail: [[]],
                status: [, Validators.required],
                reportFormat: [, Validators.required],
            })
        });
    }
    getEntitiesByParamMetric() {
        return __awaiter(this, void 0, void 0, function* () {
            this.entityM = (yield this.entityService.getEntitiesByParamMetric(this.orgID, "engTemperature"));
            this.getDistictEntityType();
        });
    }
    getDistictEntityType() {
        const distinctTypes = Array.from(new Set(this.entityM.map(item => item.type)));
        this.entityType = distinctTypes.map(value => ({ value }));
    }
    entityTypeChange(entityType) {
        return __awaiter(this, void 0, void 0, function* () {
            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').reset();
            this.allEntityID = [];
            this.entities = yield this.getEntitiesByType(entityType);
            this.totalEntityCount = this.entities.length;
            this.entities.forEach(entity => this.allEntityID.push(entity['id']));
            if (this.action == FormAction.UPDATE && this.scheduleTemperatureReportFG) {
                this.scheduleTemperatureReportFG.patchValue({
                    'reportConfig.entityID': this.allEntityID
                });
            }
        });
    }
    getEntitiesByType(type) {
        return __awaiter(this, void 0, void 0, function* () {
            const filteredEntities = this.entityM.filter(entity => entity.type == type);
            return filteredEntities;
        });
    }
    selectAllEntities() {
        if (!this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value.includes(-1)) {
            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').reset([]);
            return;
        }
        this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').setValue([-1, ...this.allEntityID]);
    }
    selectedEntity() {
        const selected = this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value;
        if (selected.includes(-1)) {
            selected.shift();
            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(selected);
        }
        else if (this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value.length == this.totalEntityCount) {
            this.allEntityID.splice(0, 0, -1);
            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(this.allEntityID);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(filteredSelected);
        }
    }
    patchSchedulerConfigInput() {
        this.scheduleTemperatureReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
    }
    getValidFormData() {
        this.patchSchedulerConfigInput();
        let entityID = this.tscCommonService.removeSelectAllID(this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').value);
        this.scheduleTemperatureReportFG.get('reportConfig').get('entityID').patchValue(entityID);
        let userID = this.tscCommonService.removeSelectAllID(this.scheduleTemperatureReportFG.get('schedulerConfig').get('userID').value);
        this.scheduleTemperatureReportFG.get('schedulerConfig').get('userID').patchValue(userID);
        let paramMetrics = this.scheduleTemperatureReportFG.get('reportConfig').get('paramMetric').value;
        let paramsArray = paramMetrics.map(paramName => ({
            name: paramName,
            dsAgg: 'avg',
            agg: 'avg'
        }));
        const reportConfigFG = this.scheduleTemperatureReportFG.get('reportConfig').value;
        const schedulerConfigFG = this.scheduleTemperatureReportFG.get('schedulerConfig').value;
        const { paramMetric } = reportConfigFG, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
        this.modifiedFG = {
            reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
            schedulerConfig: Object.assign({}, schedulerConfigFG)
        };
    }
    scheduleReportSubmit() {
        this.patchSchedulerConfigInput();
        if (this.schedulerConfigInput.scheduleReportFG.invalid) {
            this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
        }
        if (this.scheduleTemperatureReportFG.invalid) {
            console.log('Invalid form:', this.scheduleTemperatureReportFG.value);
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        else {
            this.getValidFormData();
            if (this.action == FormAction.CREATE) {
                this.createScheduleReport();
            }
            else if (this.action == FormAction.UPDATE) {
                this.updateScheduleReport();
            }
        }
    }
    createScheduleReport() {
        this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe((res) => {
            this.router.navigate([`schedule-report/page`]);
        }, error => {
            console.log('error in createScheduleReport -', error);
        });
    }
    getScheduleReportByID(scheduleReportID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.scheduleReportI = (yield this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID));
            this.patchScheduleReport(this.scheduleReportI);
        });
    }
    patchScheduleReport(scheduleReportI) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getEntitiesByParamMetric();
            yield this.entityTypeChange(this.scheduleReportI.reportConfig.entityType);
            this.scheduleTemperatureReportFG.patchValue({
                reportConfig: scheduleReportI.reportConfig,
                schedulerConfig: scheduleReportI.schedulerConfig
            });
            this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
            this.initialObject = {
                temperatureReportConfig: this.scheduleTemperatureReportFG.value,
                schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
            };
            this.isValidUpdateForm();
        });
    }
    isValidUpdateForm() {
        this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(() => {
            this.checkEquality();
        });
        this.scheduleTemperatureReportFG.valueChanges.subscribe(() => {
            this.checkEquality();
        });
    }
    checkEquality() {
        const currentValues = {
            temperatureReportConfig: this.scheduleTemperatureReportFG.value,
            schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
        };
        this.isEqual = isEqual(this.initialObject, currentValues);
    }
    updateScheduleReport() {
        this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe((res) => {
            this.tscCommonService.back();
        }, error => {
            console.log('error in updateScheduleReport -', error);
        });
    }
}
ScheduleReportTemperatureComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportTemperatureComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.FormBuilder }, { token: i3.ScheduleReportController }, { token: i4.EntityService }, { token: i5.ScheduleReportService }, { token: i6.StorageService }, { token: i7.TSCCommonService }, { token: i8.ToastrService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleReportTemperatureComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportTemperatureComponent, selector: "lib-temperature", viewQueries: [{ propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleTemperatureReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label> Select entity type </mat-label>\n                                        <mat-select formControlName=\"entityType\" (selectionChange)=\"entityTypeChange($event.value)\" required>\n                                            <ng-container *ngIf=\"entityType && entityType.length > 0 && entityType?.[0]?.['value']; else noEntityType\">\n                                                <mat-option *ngFor=\"let type of entityType\" [value]=\"type.value\">\n                                                    {{ type.value }}\n                                                </mat-option>\n                                            </ng-container>\n                                            <ng-template #noEntityType>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling(scheduleTemperatureReportFG, 'reportConfig.entityType', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                    \n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"mat-field-width-100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select entity</mat-label>\n                                        <mat-select formControlName=\"entityID\" multiple required>\n                                            <ng-container *ngIf=\"entities && entities.length > 0 && entities[0]['id']; else noEntityFound\">\n                                                <mat-option [value]=\"-1\" (click)=\"selectAllEntities()\">\n                                                    Select all\n                                                </mat-option>\n                                                <mat-option *ngFor=\"let entity of entities\" [value]=\"entity.id\" (click)=\"selectedEntity()\">\n                                                    {{ entity.name }}\n                                                </mat-option>\n                                            </ng-container>\n                                            <ng-template #noEntityFound>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errorHandling(scheduleTemperatureReportFG, 'reportConfig.entityID', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n            \n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", styles: [".labelColor{font-size:12px;color:#0009}\n"], components: [{ type: i9.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i10.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i11.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i12.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i13.ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i10.MatLabel, selector: "mat-label" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportTemperatureComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-temperature',
                    templateUrl: './temperature.component.html',
                    styleUrls: ['./temperature.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.FormBuilder }, { type: i3.ScheduleReportController }, { type: i4.EntityService }, { type: i5.ScheduleReportService }, { type: i6.StorageService }, { type: i7.TSCCommonService }, { type: i8.ToastrService }]; }, propDecorators: { schedulerConfigInput: [{
                type: ViewChild,
                args: ['schedulerConfigInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGVyYXR1cmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtbGl0ZS9zcmMvbGliL3RzYy9jb21wb25lbnQvc2NoZWR1bGUtcmVwb3J0L3RlbXBlcmF0dXJlL3RlbXBlcmF0dXJlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3NjaGVkdWxlLXJlcG9ydC90ZW1wZXJhdHVyZS90ZW1wZXJhdHVyZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUEwQixVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE9BQU8sRUFBRSxNQUFNLEVBQVcsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsY0FBYyxFQUFtQixNQUFNLHNDQUFzQyxDQUFDO0FBVXZGLGNBQWM7QUFDZCxPQUFPLEVBQWEsMkJBQTJCLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFvQixlQUFlLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvTSxPQUFPLEVBQUUsV0FBVyxFQUFpQixNQUFNLHlCQUF5QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBRXJFLGdCQUFnQjtBQU9oQixNQUFNLE9BQU8sa0NBQWtDO0lBZ0MzQyxZQUNZLGNBQThCLEVBQzlCLE1BQWMsRUFDZCxXQUF3QixFQUN4Qix3QkFBa0Qs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cG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgRW50aXR5LCBFbnRpdHlNIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZW50aXR5Lm1vZGVsJztcblxuaW1wb3J0IHsgU2NoZWR1bGVSZXBvcnRUeXBlRW51bSB9IGZyb20gJy4uLy4uLy4uL2VudW0vc2NoZWR1bGUtcmVwb3J0LmVudW0nO1xuaW1wb3J0IHsgU2NoZWR1bGVSZXBvcnQsIFNjaGVkdWxlUmVwb3J0SSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3NjaGVkdWxlLXJlcG9ydC5tb2RlbCc7XG5cbmltcG9ydCB7IFNjaGVkdWxlUmVwb3J0Q29udHJvbGxlciB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvc2NoZWR1bGUtcmVwb3J0LmNvbnRyb2xsZXInO1xuXG5pbXBvcnQgeyBTY2hlZHVsZVJlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL3NjaGVkdWxlLXJlcG9ydC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU2NoZWR1bGVSZXBvcnRDb25maWd1cmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vX3NoYXJlZC9jb25maWd1cmF0aW9uL2NvbmZpZ3VyYXRpb24uY29tcG9uZW50JztcblxuaW1wb3J0IHsgRW50aXR5U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvZW50aXR5LnNlcnZpY2UnO1xuXG4vLyB0c2MtbGlicmFyeVxuaW1wb3J0IHsgUmVzcG9uc2VNLCBNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2UsIEludmFsaWRGb3JtLCBCdXR0b25MYWJlbEVudW0sIEZvcm1BY3Rpb24sIEZvcm1FcnJvckVudW0sIFRTQ0NvbW1vblNlcnZpY2UsIENPTU1PTl9DT05TVEFOVCwgTUFURVJJQUxfQ09OU1RBTlQsIEJ1dHRvblRvb2x0aXBFbnVtIH0gZnJvbSAnQGxpYnJhcnkvdHNjLWNvbW1vbic7XG5pbXBvcnQgeyBUb2FzdHJDb2xvciwgVG9hc3RyU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3RvYXN0ci1zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvc3RvcmFnZS1zZXJ2aWNlJztcbi8vIC90c2MtbGlicmFyeS9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItdGVtcGVyYXR1cmUnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90ZW1wZXJhdHVyZS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGVtcGVyYXR1cmUuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTY2hlZHVsZVJlcG9ydFRlbXBlcmF0dXJlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIENPTU1PTl9DT05TVEFOVCA9IENPTU1PTl9DT05TVEFOVDtcbiAgICBNQVRFUklBTF9DT05TVEFOVCA9IE1BVEVSSUFMX0NPTlNUQU5UO1xuXG4gICAgRm9ybUFjdGlvbiA9IEZvcm1BY3Rpb247XG4gICAgRm9ybUVycm9yRW51bSA9IEZvcm1FcnJvckVudW07XG4gICAgQnV0dG9uTGFiZWxFbnVtID0gQnV0dG9uTGFiZWxFbnVtO1xuICAgIEJ1dHRvblRvb2x0aXBFbnVtID0gQnV0dG9uVG9vbHRpcEVudW07XG4gICAgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlID0gTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlO1xuXG4gICAgb3JnSUQ6IGFueTtcblxuICAgIGVudGl0eU0gPSBbbmV3IEVudGl0eSgpXTtcbiAgICBlbnRpdHlUeXBlOiBhbnlbXSA9IFtdO1xuICAgIGFsbEVudGl0eUlEOiBhbnlbXSA9IFtdO1xuICAgIHRvdGFsRW50aXR5Q291bnQ6IG51bWJlciA9IDA7XG4gICAgZW50aXRpZXM6IGFueVtdID0gW107XG5cbiAgICBzY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0Rkc6IEZvcm1Hcm91cDtcbiAgICBtb2RpZmllZEZHOiBhbnk7XG4gICAgc2NoZWR1bGVSZXBvcnRJRDogYW55O1xuXG4gICAgYWN0aW9uOiBzdHJpbmc7XG4gICAgcGFnZVRpdGxlOiBzdHJpbmc7XG4gICAgaXNFcXVhbDogYm9vbGVhbiA9IHRydWU7XG4gICAgaW5pdGlhbE9iamVjdDogYW55O1xuXG4gICAgc2NoZWR1bGVSZXBvcnRJID0gbmV3IFNjaGVkdWxlUmVwb3J0KCk7XG5cbiAgICBAVmlld0NoaWxkKCdzY2hlZHVsZXJDb25maWdJbnB1dCcpIHNjaGVkdWxlckNvbmZpZ0lucHV0OiBTY2hlZHVsZVJlcG9ydENvbmZpZ3VyYXRpb25Db21wb25lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyLFxuICAgICAgICBwcml2YXRlIHNjaGVkdWxlUmVwb3J0Q29udHJvbGxlcjogU2NoZWR1bGVSZXBvcnRDb250cm9sbGVyLFxuICAgICAgICBwcml2YXRlIGVudGl0eVNlcnZpY2U6IEVudGl0eVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgc2NoZWR1bGVSZXBvcnRTZXJ2aWNlOiBTY2hlZHVsZVJlcG9ydFNlcnZpY2UsXG5cbiAgICAgICAgLy8gdHNjLWxpYnJhcnlcbiAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHB1YmxpYyB0c2NDb21tb25TZXJ2aWNlOiBUU0NDb21tb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHRvYXN0clNlcnZpY2U6IFRvYXN0clNlcnZpY2UsXG4gICAgICAgIC8vIC90c2MtbGlicmFyeS9cbiAgICApIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JnSUQgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoJ2N1cnJlbnRPcmdJRCcpO1xuXG4gICAgICAgIHRoaXMuZ2V0RW50aXRpZXNCeVBhcmFtTWV0cmljKCk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHSW5pdCgpO1xuXG4gICAgICAgIHRoaXMuYWN0aXZhdGVkUm91dGUuZGF0YS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9IGRhdGEuYWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5zZXRQYWdlVGl0bGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmF0ZWRSb3V0ZS5wYXJhbXMuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5VUERBVEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlUmVwb3J0SUQgPSBwYXJhbXMuc2NoZWR1bGVSZXBvcnRJRDtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNjaGVkdWxlUmVwb3J0QnlJRCh0aGlzLnNjaGVkdWxlUmVwb3J0SUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRQYWdlVGl0bGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PSBGb3JtQWN0aW9uLkNSRUFURSkge1xuICAgICAgICAgICAgdGhpcy5wYWdlVGl0bGUgPSBgU2NoZWR1bGUgVGVtcGVyYXR1cmUgUmVwb3J0YDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PSBGb3JtQWN0aW9uLlVQREFURSkge1xuICAgICAgICAgICAgdGhpcy5wYWdlVGl0bGUgPSBgVXBkYXRlIFNjaGVkdWxlZCBUZW1wZXJhdHVyZSBSZXBvcnRgO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcgPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgICAgIHJlcG9ydENvbmZpZzogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICAgICAgcmVwb3J0VHlwZTogW1NjaGVkdWxlUmVwb3J0VHlwZUVudW0uVEVNUEVSQVRVUkVfUkVQT1JULCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBkZXZpY2VJRDogW1tdXSxcbiAgICAgICAgICAgICAgICBlbnRpdHlUeXBlOiBbLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBlbnRpdHlJRDogW1tdLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBzb3VyY2VDb25zdW1lcjogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFtdLFxuICAgICAgICAgICAgICAgICAgICBrZXlJRDogW11cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBwYXJhbU1ldHJpYzogW1snZW5nVGVtcGVyYXR1cmUnXSwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHNjaGVkdWxlckNvbmZpZzogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICAgICAgbmFtZTogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgZGF0YUludGVydmFsOiBbLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFssIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIHVzZXJDaG9pY2U6IFssIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIHVzZXJJRDogW1tdLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBvdGhlclVzZXJFbWFpbDogW1tdXSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IFssIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIHJlcG9ydEZvcm1hdDogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRFbnRpdGllc0J5UGFyYW1NZXRyaWMoKSB7XG4gICAgICAgIHRoaXMuZW50aXR5TSA9IDxFbnRpdHlNW10+YXdhaXQgdGhpcy5lbnRpdHlTZXJ2aWNlLmdldEVudGl0aWVzQnlQYXJhbU1ldHJpYyh0aGlzLm9yZ0lELCBcImVuZ1RlbXBlcmF0dXJlXCIpO1xuICAgICAgICB0aGlzLmdldERpc3RpY3RFbnRpdHlUeXBlKCk7XG4gICAgfVxuXG4gICAgZ2V0RGlzdGljdEVudGl0eVR5cGUoKSB7XG4gICAgICAgIGNvbnN0IGRpc3RpbmN0VHlwZXMgPSBBcnJheS5mcm9tKG5ldyBTZXQodGhpcy5lbnRpdHlNLm1hcChpdGVtID0+IGl0ZW0udHlwZSkpKTtcbiAgICAgICAgdGhpcy5lbnRpdHlUeXBlID0gZGlzdGluY3RUeXBlcy5tYXAodmFsdWUgPT4gKHsgdmFsdWUgfSkpO1xuICAgIH1cblxuICAgIGFzeW5jIGVudGl0eVR5cGVDaGFuZ2UoZW50aXR5VHlwZSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgnZW50aXR5SUQnKS5yZXNldCgpO1xuICAgICAgICB0aGlzLmFsbEVudGl0eUlEID0gW107XG5cbiAgICAgICAgdGhpcy5lbnRpdGllcyA9IGF3YWl0IHRoaXMuZ2V0RW50aXRpZXNCeVR5cGUoZW50aXR5VHlwZSk7XG4gICAgICAgIHRoaXMudG90YWxFbnRpdHlDb3VudCA9IHRoaXMuZW50aXRpZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHRoaXMuYWxsRW50aXR5SUQucHVzaChlbnRpdHlbJ2lkJ10pKTtcblxuICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5VUERBVEUgJiYgdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLnBhdGNoVmFsdWUoe1xuICAgICAgICAgICAgICAgICdyZXBvcnRDb25maWcuZW50aXR5SUQnOiB0aGlzLmFsbEVudGl0eUlEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldEVudGl0aWVzQnlUeXBlKHR5cGUpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRFbnRpdGllcyA9IHRoaXMuZW50aXR5TS5maWx0ZXIoZW50aXR5ID0+IGVudGl0eS50eXBlID09IHR5cGUpO1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRFbnRpdGllcztcbiAgICB9XG5cbiAgICBzZWxlY3RBbGxFbnRpdGllcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgnZW50aXR5SUQnKS52YWx1ZS5pbmNsdWRlcygtMSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdlbnRpdHlJRCcpLnJlc2V0KFtdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgnZW50aXR5SUQnKS5zZXRWYWx1ZShbLTEsIC4uLnRoaXMuYWxsRW50aXR5SURdKTtcbiAgICB9XG5cbiAgICBzZWxlY3RlZEVudGl0eSgpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgnZW50aXR5SUQnKS52YWx1ZTtcblxuICAgICAgICBpZiAoc2VsZWN0ZWQuaW5jbHVkZXMoLTEpKSB7XG4gICAgICAgICAgICBzZWxlY3RlZC5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcuZ2V0KCdyZXBvcnRDb25maWcnKS5nZXQoJ2VudGl0eUlEJykucGF0Y2hWYWx1ZShzZWxlY3RlZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcuZ2V0KCdyZXBvcnRDb25maWcnKS5nZXQoJ2VudGl0eUlEJykudmFsdWUubGVuZ3RoID09IHRoaXMudG90YWxFbnRpdHlDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5hbGxFbnRpdHlJRC5zcGxpY2UoMCwgMCwgLTEpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcuZ2V0KCdyZXBvcnRDb25maWcnKS5nZXQoJ2VudGl0eUlEJykucGF0Y2hWYWx1ZSh0aGlzLmFsbEVudGl0eUlEKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkU2VsZWN0ZWQgPSBzZWxlY3RlZC5maWx0ZXIocyA9PiBzICE9IC0xKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdlbnRpdHlJRCcpLnBhdGNoVmFsdWUoZmlsdGVyZWRTZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXRjaFNjaGVkdWxlckNvbmZpZ0lucHV0KCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy5nZXQoJ3NjaGVkdWxlckNvbmZpZycpLnBhdGNoVmFsdWUodGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLnZhbHVlKVxuICAgIH1cblxuICAgIGdldFZhbGlkRm9ybURhdGEoKSB7XG4gICAgICAgIHRoaXMucGF0Y2hTY2hlZHVsZXJDb25maWdJbnB1dCgpO1xuXG4gICAgICAgIGxldCBlbnRpdHlJRCA9IHRoaXMudHNjQ29tbW9uU2VydmljZS5yZW1vdmVTZWxlY3RBbGxJRCh0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgnZW50aXR5SUQnKS52YWx1ZSk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdlbnRpdHlJRCcpLnBhdGNoVmFsdWUoZW50aXR5SUQpO1xuXG4gICAgICAgIGxldCB1c2VySUQgPSB0aGlzLnRzY0NvbW1vblNlcnZpY2UucmVtb3ZlU2VsZWN0QWxsSUQodGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcuZ2V0KCdzY2hlZHVsZXJDb25maWcnKS5nZXQoJ3VzZXJJRCcpLnZhbHVlKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcuZ2V0KCdzY2hlZHVsZXJDb25maWcnKS5nZXQoJ3VzZXJJRCcpLnBhdGNoVmFsdWUodXNlcklEKTtcblxuICAgICAgICBsZXQgcGFyYW1NZXRyaWNzID0gdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcuZ2V0KCdyZXBvcnRDb25maWcnKS5nZXQoJ3BhcmFtTWV0cmljJykudmFsdWU7XG4gICAgICAgIGxldCBwYXJhbXNBcnJheSA9IHBhcmFtTWV0cmljcy5tYXAocGFyYW1OYW1lID0+ICh7XG4gICAgICAgICAgICBuYW1lOiBwYXJhbU5hbWUsXG4gICAgICAgICAgICBkc0FnZzogJ2F2ZycsXG4gICAgICAgICAgICBhZ2c6ICdhdmcnXG4gICAgICAgIH0pKTtcblxuICAgICAgICBjb25zdCByZXBvcnRDb25maWdGRyA9IHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykudmFsdWU7XG4gICAgICAgIGNvbnN0IHNjaGVkdWxlckNvbmZpZ0ZHID0gdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcuZ2V0KCdzY2hlZHVsZXJDb25maWcnKS52YWx1ZTtcbiAgICAgICAgY29uc3QgeyBwYXJhbU1ldHJpYywgLi4ucmVwb3J0Q29uZmlnV2l0aG91dFBhcmFtTWV0cmljIH0gPSByZXBvcnRDb25maWdGRztcblxuICAgICAgICB0aGlzLm1vZGlmaWVkRkcgPSB7XG4gICAgICAgICAgICByZXBvcnRDb25maWc6IHtcbiAgICAgICAgICAgICAgICAuLi5yZXBvcnRDb25maWdXaXRob3V0UGFyYW1NZXRyaWMsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXNBcnJheVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjaGVkdWxlckNvbmZpZzoge1xuICAgICAgICAgICAgICAgIC4uLnNjaGVkdWxlckNvbmZpZ0ZHXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc2NoZWR1bGVSZXBvcnRTdWJtaXQoKSB7XG4gICAgICAgIHRoaXMucGF0Y2hTY2hlZHVsZXJDb25maWdJbnB1dCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcuaW52YWxpZCkge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLm1hcmtBbGxBc1RvdWNoZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy5pbnZhbGlkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW52YWxpZCBmb3JtOicsIHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudG9hc3RyU2VydmljZS5vcGVuVG9hc3QoSW52YWxpZEZvcm0uSU5WQUxJRF9GT1JNX1RJVExFLCBJbnZhbGlkRm9ybS5JTlZBTElEX0ZPUk1fTUVTU0FHRSwgVG9hc3RyQ29sb3IuRVJST1IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRWYWxpZEZvcm1EYXRhKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PSBGb3JtQWN0aW9uLkNSRUFURSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlU2NoZWR1bGVSZXBvcnQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5VUERBVEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNjaGVkdWxlUmVwb3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVTY2hlZHVsZVJlcG9ydCgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVJlcG9ydENvbnRyb2xsZXIuY3JlYXRlU2NoZWR1bGVSZXBvcnQodGhpcy5vcmdJRCwgdGhpcy5tb2RpZmllZEZHKS5zdWJzY3JpYmUoKHJlczogUmVzcG9uc2VNKSA9PiB7XG5cbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgc2NoZWR1bGUtcmVwb3J0L3BhZ2VgXSk7XG5cbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGluIGNyZWF0ZVNjaGVkdWxlUmVwb3J0IC0nLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFNjaGVkdWxlUmVwb3J0QnlJRChzY2hlZHVsZVJlcG9ydElEKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVSZXBvcnRJID0gPFNjaGVkdWxlUmVwb3J0ST5hd2FpdCB0aGlzLnNjaGVkdWxlUmVwb3J0U2VydmljZS5nZXRTY2hlZHVsZVJlcG9ydEJ5SUQodGhpcy5vcmdJRCwgc2NoZWR1bGVSZXBvcnRJRCk7XG5cbiAgICAgICAgdGhpcy5wYXRjaFNjaGVkdWxlUmVwb3J0KHRoaXMuc2NoZWR1bGVSZXBvcnRJKTtcbiAgICB9XG5cbiAgICBhc3luYyBwYXRjaFNjaGVkdWxlUmVwb3J0KHNjaGVkdWxlUmVwb3J0STogU2NoZWR1bGVSZXBvcnRJKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0RW50aXRpZXNCeVBhcmFtTWV0cmljKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZW50aXR5VHlwZUNoYW5nZSh0aGlzLnNjaGVkdWxlUmVwb3J0SS5yZXBvcnRDb25maWcuZW50aXR5VHlwZSk7XG5cbiAgICAgICAgdGhpcy5zY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcucGF0Y2hWYWx1ZSh7XG4gICAgICAgICAgICByZXBvcnRDb25maWc6IHNjaGVkdWxlUmVwb3J0SS5yZXBvcnRDb25maWcsXG4gICAgICAgICAgICBzY2hlZHVsZXJDb25maWc6IHNjaGVkdWxlUmVwb3J0SS5zY2hlZHVsZXJDb25maWdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLnBhdGNoVmFsdWUoc2NoZWR1bGVSZXBvcnRJLnNjaGVkdWxlckNvbmZpZyk7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsT2JqZWN0ID0ge1xuICAgICAgICAgICAgdGVtcGVyYXR1cmVSZXBvcnRDb25maWc6IHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLnZhbHVlLFxuICAgICAgICAgICAgc2NoZWR1bGVyQ29uZmlnOiB0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcudmFsdWVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmlzVmFsaWRVcGRhdGVGb3JtKCk7XG4gICAgfVxuXG4gICAgaXNWYWxpZFVwZGF0ZUZvcm0oKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQ29uZmlnSW5wdXQuc2NoZWR1bGVSZXBvcnRGRy52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tFcXVhbGl0eSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNjaGVkdWxlVGVtcGVyYXR1cmVSZXBvcnRGRy52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tFcXVhbGl0eSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjaGVja0VxdWFsaXR5KCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWVzID0ge1xuICAgICAgICAgICAgdGVtcGVyYXR1cmVSZXBvcnRDb25maWc6IHRoaXMuc2NoZWR1bGVUZW1wZXJhdHVyZVJlcG9ydEZHLnZhbHVlLFxuICAgICAgICAgICAgc2NoZWR1bGVyQ29uZmlnOiB0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcudmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0VxdWFsID0gaXNFcXVhbCh0aGlzLmluaXRpYWxPYmplY3QsIGN1cnJlbnRWYWx1ZXMpO1xuICAgIH1cblxuICAgIHVwZGF0ZVNjaGVkdWxlUmVwb3J0KCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlUmVwb3J0Q29udHJvbGxlci51cGRhdGVTY2hlZHVsZVJlcG9ydCh0aGlzLm9yZ0lELCB0aGlzLnNjaGVkdWxlUmVwb3J0SUQsIHRoaXMubW9kaWZpZWRGRykuc3Vic2NyaWJlKChyZXM6IFJlc3BvbnNlTSkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLnRzY0NvbW1vblNlcnZpY2UuYmFjaygpO1xuXG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBpbiB1cGRhdGVTY2hlZHVsZVJlcG9ydCAtJywgZXJyb3IpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGVycm9ySGFuZGxpbmcgPSAoZm9ybUdyb3VwOiBGb3JtR3JvdXAsIGNvbnRyb2xQYXRoOiBzdHJpbmcsIGVycm9yOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgICAgICAgcmV0dXJuIGZvcm1Hcm91cC5nZXQoY29udHJvbFBhdGgpLmhhc0Vycm9yKGVycm9yKTtcbiAgICB9XG5cbn0iLCI8ZGl2IGNsYXNzPVwiY2FyZCBtYWluLWNhcmQgY2FyZE92ZXJ3cml0ZSBoMTAwXCI+XG4gICAgPGRpdiBjbGFzcz1cImhlYWRlckNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyTGVmdENvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2VUaXRsZVwiPnt7IHBhZ2VUaXRsZSB9fTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2VTdWJ0aXRsZVwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJzY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkdcIiAobmdTdWJtaXQpPVwic2NoZWR1bGVSZXBvcnRTdWJtaXQoKVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1jYXJkIGNsYXNzPVwiYm9yZGVyIGNhcmRPdmVyd3JpdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkVGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXBvcnQgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBmb3JtR3JvdXBOYW1lPVwicmVwb3J0Q29uZmlnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJtYXRGaWVsZFdpZHRoMTAwXCIgW2FwcGVhcmFuY2VdPVwiTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtbGFiZWw+IFNlbGVjdCBlbnRpdHkgdHlwZSA8L21hdC1sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LXNlbGVjdCBmb3JtQ29udHJvbE5hbWU9XCJlbnRpdHlUeXBlXCIgKHNlbGVjdGlvbkNoYW5nZSk9XCJlbnRpdHlUeXBlQ2hhbmdlKCRldmVudC52YWx1ZSlcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImVudGl0eVR5cGUgJiYgZW50aXR5VHlwZS5sZW5ndGggPiAwICYmIGVudGl0eVR5cGU/LlswXT8uWyd2YWx1ZSddOyBlbHNlIG5vRW50aXR5VHlwZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IHR5cGUgb2YgZW50aXR5VHlwZVwiIFt2YWx1ZV09XCJ0eXBlLnZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdHlwZS52YWx1ZSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNub0VudGl0eVR5cGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiBkaXNhYmxlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBDT01NT05fQ09OU1RBTlQuTk9fREFUQV9GT1VORCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LXNlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWVycm9yICpuZ0lmPVwiZXJyb3JIYW5kbGluZyhzY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcsICdyZXBvcnRDb25maWcuZW50aXR5VHlwZScsICdyZXF1aXJlZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IEZvcm1FcnJvckVudW0uUkVRVUlSRUQgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1lcnJvcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LWZvcm0tZmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBmb3JtR3JvdXBOYW1lPVwicmVwb3J0Q29uZmlnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJtYXQtZmllbGQtd2lkdGgtMTAwXCIgW2FwcGVhcmFuY2VdPVwiTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtbGFiZWw+U2VsZWN0IGVudGl0eTwvbWF0LWxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtc2VsZWN0IGZvcm1Db250cm9sTmFtZT1cImVudGl0eUlEXCIgbXVsdGlwbGUgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJlbnRpdGllcyAmJiBlbnRpdGllcy5sZW5ndGggPiAwICYmIGVudGl0aWVzWzBdWydpZCddOyBlbHNlIG5vRW50aXR5Rm91bmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uIFt2YWx1ZV09XCItMVwiIChjbGljayk9XCJzZWxlY3RBbGxFbnRpdGllcygpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0IGFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IGVudGl0eSBvZiBlbnRpdGllc1wiIFt2YWx1ZV09XCJlbnRpdHkuaWRcIiAoY2xpY2spPVwic2VsZWN0ZWRFbnRpdHkoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVudGl0eS5uYW1lIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI25vRW50aXR5Rm91bmQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiBkaXNhYmxlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBDT01NT05fQ09OU1RBTlQuTk9fREFUQV9GT1VORCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LXNlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWVycm9yICpuZ0lmPVwiZXJyb3JIYW5kbGluZyhzY2hlZHVsZVRlbXBlcmF0dXJlUmVwb3J0RkcsICdyZXBvcnRDb25maWcuZW50aXR5SUQnLCAncmVxdWlyZWQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBGb3JtRXJyb3JFbnVtLlJFUVVJUkVEIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L21hdC1jYXJkPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbXQtM1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxpYi1jb25maWd1cmF0aW9uICNzY2hlZHVsZXJDb25maWdJbnB1dD48L2xpYi1jb25maWd1cmF0aW9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJkLW5vbmVcIiB0eXBlPVwic3VibWl0XCIgI2Zvcm1TdWJtaXRCdG4+PC9idXR0b24+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbXQtM1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsb2F0LWVuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeSBtZS0yXCIgdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJ0c2NDb21tb25TZXJ2aWNlLmJhY2soKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IEJ1dHRvbkxhYmVsRW51bS5DQU5DRUxfQlROX0xBQkVMIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXN1Y2Nlc3NcIiBbbmdDbGFzc109XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdidG4tc3VjY2VzcycgOiBhY3Rpb24gPT0gRm9ybUFjdGlvbi5DUkVBVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdidG4tcHJpbWFyeScgOiBhY3Rpb24gPT0gRm9ybUFjdGlvbi5VUERBVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXNhYmxlZCcgOiBhY3Rpb24gPT0gRm9ybUFjdGlvbi5VUERBVEUgJiYgaXNFcXVhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cIiB0eXBlPVwic3VibWl0XCI+e3sgYWN0aW9uID09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybUFjdGlvbi5DUkVBVEUgPyAnU2NoZWR1bGUnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25MYWJlbEVudW0uVVBEQVRFX0JUTl9MQUJFTCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbjwvZGl2PiJdfQ==