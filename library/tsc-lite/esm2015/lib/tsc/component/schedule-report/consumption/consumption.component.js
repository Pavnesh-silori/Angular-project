import { __awaiter, __rest } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { isEqual } from 'lodash';
import { ScheduleReportTypeEnum } from '../../../enum/schedule-report.enum';
import { ScheduleReport } from '../../../model/schedule-report.model';
// tsc-library
import { MaterialFormFieldAppearance, InvalidForm, ButtonLabelEnum, FormAction, FormErrorEnum, COMMON_CONSTANT, MATERIAL_CONSTANT, ButtonTooltipEnum, Static } from '@library/tsc-common';
import { ToastrColor } from '@library/toastr-service';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/forms";
import * as i3 from "../../../controller/schedule-report.controller";
import * as i4 from "../../../service/source.service";
import * as i5 from "../../../service/parameter.service";
import * as i6 from "../../../service/schedule-report.service";
import * as i7 from "@library/storage-service";
import * as i8 from "@library/tsc-common";
import * as i9 from "@library/toastr-service";
import * as i10 from "@angular/material/card";
import * as i11 from "@angular/material/radio";
import * as i12 from "@angular/material/form-field";
import * as i13 from "@angular/material/select";
import * as i14 from "@angular/material/core";
import * as i15 from "../_shared/configuration/configuration.component";
import * as i16 from "@angular/common";
// /tsc-library/
export class ScheduleReportConsumptionComponent {
    constructor(activatedRoute, router, formBuilder, scheduleReportController, sourceService, parameterService, scheduleReportService, 
    // tsc-library
    storageService, tscCommonService, toastrService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.formBuilder = formBuilder;
        this.scheduleReportController = scheduleReportController;
        this.sourceService = sourceService;
        this.parameterService = parameterService;
        this.scheduleReportService = scheduleReportService;
        this.storageService = storageService;
        this.tscCommonService = tscCommonService;
        this.toastrService = toastrService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.FormAction = FormAction;
        this.FormErrorEnum = FormErrorEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.ButtonTooltipEnum = ButtonTooltipEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.ApplicationKeyID = ApplicationKeyID;
        this.sourceConsumerType = [new Static()];
        this.isEqual = true;
        this.scheduleReportI = new ScheduleReport();
        this.errorHandling = (formGroup, controlPath, error) => {
            return formGroup.get(controlPath).hasError(error);
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        this.scheduleConsumptionReportFGInit();
        this.getConsumptionParameter();
        this.activatedRoute.data.subscribe(data => {
            this.action = data.action;
            this.setPageTitle();
        });
        this.activatedRoute.params.subscribe(params => {
            if (this.action == FormAction.UPDATE) {
                this.scheduleReportID = params.scheduleReportID;
                this.getScheduleReportByID(this.scheduleReportID);
            }
        });
        if (this.scheduleConsumptionReportFG.get('reportConfig').get('sourceConsumer.type').value == 'SOURCE') {
            this.getSourceConsumerType('source');
        }
        else {
            this.getSourceConsumerType('load');
        }
    }
    setPageTitle() {
        const applicationName = this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
        if (this.action == FormAction.CREATE) {
            this.pageTitle = `Schedule ${applicationName} Consumption Report`;
        }
        else if (this.action == FormAction.UPDATE) {
            this.pageTitle = `Update Scheduled ${applicationName} Consumption Report`;
        }
    }
    scheduleConsumptionReportFGInit() {
        this.scheduleConsumptionReportFG = this.formBuilder.group({
            reportConfig: this.formBuilder.group({
                reportType: [ScheduleReportTypeEnum.CONSUMPTION_REPORT, Validators.required],
                deviceID: [[]],
                entityType: [],
                entityID: [[]],
                sourceConsumer: this.formBuilder.group({
                    type: ['SOURCE', Validators.required],
                    keyID: [, Validators.required]
                }),
                paramMetric: [, Validators.required],
            }),
            schedulerConfig: this.formBuilder.group({
                name: [, Validators.required],
                dataInterval: [, Validators.required],
                frequency: [, Validators.required],
                userChoice: [, Validators.required],
                userID: [[], Validators.required],
                otherUserEmail: [[]],
                status: [, Validators.required],
                reportFormat: [, Validators.required],
            })
        });
        this.scheduleConsumptionReportFG.get('reportConfig').get('sourceConsumer.type').valueChanges.subscribe((value) => {
            if (value == 'SOURCE') {
                this.getSourceConsumerType('source');
            }
            else if (value == 'CONSUMER') {
                this.getSourceConsumerType('load');
            }
        });
    }
    getSourceConsumerType(sourceConsumerType) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestData = {
                type: sourceConsumerType
            };
            this.sourceConsumerType = (yield this.sourceService.getSourceConsumerType(this.orgID, requestData));
        });
    }
    getConsumptionParameter() {
        return __awaiter(this, void 0, void 0, function* () {
            const consumptionParamM = yield this.parameterService.getConsumptionParameter(this.orgID);
            this.consumptionParamM = consumptionParamM.consumptionParameter;
        });
    }
    patchSchedulerConfigInput() {
        this.scheduleConsumptionReportFG.get('schedulerConfig').patchValue(this.schedulerConfigInput.scheduleReportFG.value);
    }
    getValidFormData() {
        this.patchSchedulerConfigInput();
        let userID = this.tscCommonService.removeSelectAllID(this.scheduleConsumptionReportFG.get('schedulerConfig').get('userID').value);
        this.scheduleConsumptionReportFG.get('schedulerConfig').get('userID').patchValue(userID);
        let paramsArray = [
            {
                name: this.scheduleConsumptionReportFG.get('reportConfig').get('paramMetric').value,
                dsAgg: 'sum',
                agg: 'sum'
            }
        ];
        const reportConfigFG = this.scheduleConsumptionReportFG.get('reportConfig').value;
        const schedulerConfigFG = this.scheduleConsumptionReportFG.get('schedulerConfig').value;
        const { paramMetric } = reportConfigFG, reportConfigWithoutParamMetric = __rest(reportConfigFG, ["paramMetric"]);
        this.modifiedFG = {
            reportConfig: Object.assign(Object.assign({}, reportConfigWithoutParamMetric), { params: paramsArray }),
            schedulerConfig: Object.assign({}, schedulerConfigFG)
        };
    }
    scheduleReportSubmit() {
        this.patchSchedulerConfigInput();
        if (this.schedulerConfigInput.scheduleReportFG.invalid) {
            this.schedulerConfigInput.scheduleReportFG.markAllAsTouched();
        }
        if (this.scheduleConsumptionReportFG.invalid) {
            console.log('Invalid form:', this.scheduleConsumptionReportFG.value);
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        else {
            this.getValidFormData();
            if (this.action == FormAction.CREATE) {
                this.createScheduleReport();
            }
            else if (this.action == FormAction.UPDATE) {
                this.updateScheduleReport();
            }
        }
    }
    createScheduleReport() {
        this.scheduleReportController.createScheduleReport(this.orgID, this.modifiedFG).subscribe((res) => {
            this.router.navigate([`schedule-report/page`]);
        }, error => {
            console.log('error in createScheduleReport -', error);
        });
    }
    getScheduleReportByID(scheduleReportID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.scheduleReportI = (yield this.scheduleReportService.getScheduleReportByID(this.orgID, scheduleReportID));
            this.patchScheduleReport(this.scheduleReportI);
        });
    }
    patchScheduleReport(scheduleReportI) {
        this.scheduleConsumptionReportFG.patchValue({
            reportConfig: scheduleReportI.reportConfig,
            schedulerConfig: scheduleReportI.schedulerConfig
        });
        this.scheduleConsumptionReportFG.get('reportConfig').get('paramMetric').patchValue(scheduleReportI.reportConfig.paramMetric[0]);
        this.schedulerConfigInput.scheduleReportFG.patchValue(scheduleReportI.schedulerConfig);
        this.initialObject = {
            consumptionReportConfig: this.scheduleConsumptionReportFG.value,
            schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
        };
        this.isValidUpdateForm();
    }
    isValidUpdateForm() {
        this.schedulerConfigInput.scheduleReportFG.valueChanges.subscribe(() => {
            this.checkEquality();
        });
        this.scheduleConsumptionReportFG.valueChanges.subscribe(() => {
            this.checkEquality();
        });
    }
    checkEquality() {
        const currentValues = {
            consumptionReportConfig: this.scheduleConsumptionReportFG.value,
            schedulerConfig: this.schedulerConfigInput.scheduleReportFG.value
        };
        this.isEqual = isEqual(this.initialObject, currentValues);
    }
    updateScheduleReport() {
        this.scheduleReportController.updateScheduleReport(this.orgID, this.scheduleReportID, this.modifiedFG).subscribe((res) => {
            this.tscCommonService.back();
        }, error => {
            console.log('error in updateScheduleReport -', error);
        });
    }
}
ScheduleReportConsumptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportConsumptionComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.FormBuilder }, { token: i3.ScheduleReportController }, { token: i4.SourceService }, { token: i5.ParameterService }, { token: i6.ScheduleReportService }, { token: i7.StorageService }, { token: i8.TSCCommonService }, { token: i9.ToastrService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleReportConsumptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ScheduleReportConsumptionComponent, selector: "lib-consumption", viewQueries: [{ propertyName: "schedulerConfigInput", first: true, predicate: ["schedulerConfigInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"scheduleConsumptionReportFG\" (ngSubmit)=\"scheduleReportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <mat-card class=\"border cardOverwrite\">\n                        <div class=\"cardTitle\">\n                            Report configuration\n                        </div>\n                        <div class=\"row mt-2\">\n                            <div formGroupName=\"reportConfig\">\n                                <div formGroupName=\"sourceConsumer\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"radioBtnField\">\n                                            <div class=\"radioBtnGroupLabel\"> You want to schedule {{ applicationKeyID == ApplicationKeyID.WATER_KEY_ID ?\n                                                'water' : 'energy'}} consumption report for? * </div>\n                                            <mat-radio-group formControlName=\"type\">\n                                                <div class=\"row my-1\">\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'SOURCE'\">\n                                                            Source\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <div class=\"col-sm-6\">\n                                                        <mat-radio-button class=\"radioBtnLabel\" [value]=\"'CONSUMER'\">\n                                                            Consumer\n                                                        </mat-radio-button>\n                                                    </div>\n                                                    <mat-error class=\"textMatError ms-1 mt-1\"\n                                                        *ngIf=\"errorHandling(scheduleConsumptionReportFG, 'reportConfig.sourceConsumer.type', 'required')\">\n                                                        {{ FormErrorEnum.REQUIRED }}\n                                                    </mat-error>\n                                                </div>\n                                            </mat-radio-group>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"row mt-3\">\n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <div formGroupName=\"sourceConsumer\">\n                                        <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                            <mat-label> Select {{\n                                                scheduleConsumptionReportFG.get('reportConfig').get('sourceConsumer.type').value\n                                                == 'SOURCE' ? 'source' :\n                                                'consumer' }} type</mat-label>\n\n                                            <mat-select formControlName=\"keyID\" required>\n                                                <ng-container\n                                                    *ngIf=\"sourceConsumerType && sourceConsumerType.length > 0 && sourceConsumerType[0]['id']; else noSourceConsumerType\">\n                                                    <mat-option *ngFor=\"let type of sourceConsumerType\" [value]=\"type.keyID\">\n                                                        {{ type.name }}\n                                                    </mat-option>\n                                                </ng-container>\n\n                                                <ng-template #noSourceConsumerType>\n                                                    <mat-option disabled>\n                                                        {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                    </mat-option>\n                                                </ng-template>\n                                            </mat-select>\n\n                                            <mat-error\n                                                *ngIf=\"errorHandling(scheduleConsumptionReportFG, 'reportConfig.sourceConsumer.keyID', 'required')\">\n                                                {{ FormErrorEnum.REQUIRED }}\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"col-sm-3\">\n                                <div formGroupName=\"reportConfig\">\n                                    <mat-form-field class=\"matFieldWidth100\"\n                                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                        <mat-label>Select consumption parameter</mat-label>\n                                        <mat-select formControlName=\"paramMetric\" required>\n                                            <ng-container\n                                                *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                                                <mat-option *ngFor=\"let param of consumptionParamM\"\n                                                    [value]=\"param.paramMetric\">\n                                                    {{ param.label }}\n                                                </mat-option>\n                                            </ng-container>\n\n                                            <ng-template #noConsumptionParamM>\n                                                <mat-option disabled>\n                                                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                </mat-option>\n                                            </ng-template>\n                                        </mat-select>\n                                        <mat-error\n                                            *ngIf=\"errorHandling(scheduleConsumptionReportFG, 'reportConfig.paramMetric', 'required')\">\n                                            {{ FormErrorEnum.REQUIRED }}\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <lib-configuration #schedulerConfigInput></lib-configuration>\n                </div>\n            </div>\n\n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n            <div class=\"row mt-3\">\n                <div class=\"col-sm-12\">\n                    <div class=\"float-end\">\n                        <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"tscCommonService.back()\">\n                            {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                        </button>\n\n                        <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                                            'btn-success' : action == FormAction.CREATE,\n                                            'btn-primary' : action == FormAction.UPDATE,\n                                            'disabled' : action == FormAction.UPDATE && isEqual\n                                        }\" type=\"submit\">{{ action ==\n                            FormAction.CREATE ? 'Schedule' :\n                            ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>", components: [{ type: i10.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i11.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i12.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i13.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i14.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i15.ScheduleReportConfigurationComponent, selector: "lib-configuration" }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i11.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i16.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.MatError, selector: "mat-error", inputs: ["id"] }, { type: i12.MatLabel, selector: "mat-label" }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i16.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i16.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ScheduleReportConsumptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-consumption',
                    templateUrl: './consumption.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.FormBuilder }, { type: i3.ScheduleReportController }, { type: i4.SourceService }, { type: i5.ParameterService }, { type: i6.ScheduleReportService }, { type: i7.StorageService }, { type: i8.TSCCommonService }, { type: i9.ToastrService }]; }, propDecorators: { schedulerConfigInput: [{
                type: ViewChild,
                args: ['schedulerConfigInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VtcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtbGl0ZS9zcmMvbGliL3RzYy9jb21wb25lbnQvc2NoZWR1bGUtcmVwb3J0L2NvbnN1bXB0aW9uL2NvbnN1bXB0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3NjaGVkdWxlLXJlcG9ydC9jb25zdW1wdGlvbi9jb25zdW1wdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUEwQixVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRzVFLE9BQU8sRUFBRSxjQUFjLEVBQW1CLE1BQU0sc0NBQXNDLENBQUM7QUFVdkYsY0FBYztBQUNkLE9BQU8sRUFBYSwyQkFBMkIsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQW9CLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLEVBQVcsTUFBTSxxQkFBcUIsQ0FBQztBQUNoTyxPQUFPLEVBQUUsV0FBVyxFQUFpQixNQUFNLHlCQUF5QixDQUFDO0FBRXJFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDaEUsZ0JBQWdCO0FBUWhCLE1BQU0sT0FBTyxrQ0FBa0M7SUE4QjNDLFlBQ1ksY0FBOEIsRUFDOUIsTUFBYyxFQUNkLFdBQXdC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QjtvQkFDM0MsTUFBTSxFQUFFLEVBQ1A7aUJBQ0o7a1hBNkJzQyxvQkFBb0I7c0JBQXRELFNBQVM7dUJBQUMsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgU2NoZWR1bGVSZXBvcnRUeXBlRW51bSB9IGZyb20gJy4uLy4uLy4uL2VudW0vc2NoZWR1bGUtcmVwb3J0LmVudW0nO1xuXG5pbXBvcnQgeyBDb25zdW1wdGlvblBhcmFtZXRlck0gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9wYXJhbWV0ZXIubW9kZWwnO1xuaW1wb3J0IHsgU2NoZWR1bGVSZXBvcnQsIFNjaGVkdWxlUmVwb3J0SSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3NjaGVkdWxlLXJlcG9ydC5tb2RlbCc7XG5cbmltcG9ydCB7IFNjaGVkdWxlUmVwb3J0Q29udHJvbGxlciB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvc2NoZWR1bGUtcmVwb3J0LmNvbnRyb2xsZXInO1xuXG5pbXBvcnQgeyBTb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9zb3VyY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBQYXJhbWV0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9wYXJhbWV0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTY2hlZHVsZVJlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL3NjaGVkdWxlLXJlcG9ydC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU2NoZWR1bGVSZXBvcnRDb25maWd1cmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vX3NoYXJlZC9jb25maWd1cmF0aW9uL2NvbmZpZ3VyYXRpb24uY29tcG9uZW50JztcblxuLy8gdHNjLWxpYnJhcnlcbmltcG9ydCB7IFJlc3BvbnNlTSwgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLCBJbnZhbGlkRm9ybSwgQnV0dG9uTGFiZWxFbnVtLCBGb3JtQWN0aW9uLCBGb3JtRXJyb3JFbnVtLCBUU0NDb21tb25TZXJ2aWNlLCBDT01NT05fQ09OU1RBTlQsIE1BVEVSSUFMX0NPTlNUQU5ULCBCdXR0b25Ub29sdGlwRW51bSwgU3RhdGljLCBTdGF0aWNJIH0gZnJvbSAnQGxpYnJhcnkvdHNjLWNvbW1vbic7XG5pbXBvcnQgeyBUb2FzdHJDb2xvciwgVG9hc3RyU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3RvYXN0ci1zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvc3RvcmFnZS1zZXJ2aWNlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uS2V5SUQgfSBmcm9tICdAbGlicmFyeS9hcHBsaWNhdGlvbi1zZXJ2aWNlJztcbi8vIC90c2MtbGlicmFyeS9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItY29uc3VtcHRpb24nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb25zdW1wdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVzOiBbXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBTY2hlZHVsZVJlcG9ydENvbnN1bXB0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIENPTU1PTl9DT05TVEFOVCA9IENPTU1PTl9DT05TVEFOVDtcbiAgICBNQVRFUklBTF9DT05TVEFOVCA9IE1BVEVSSUFMX0NPTlNUQU5UO1xuXG4gICAgRm9ybUFjdGlvbiA9IEZvcm1BY3Rpb247XG4gICAgRm9ybUVycm9yRW51bSA9IEZvcm1FcnJvckVudW07XG4gICAgQnV0dG9uTGFiZWxFbnVtID0gQnV0dG9uTGFiZWxFbnVtO1xuICAgIEJ1dHRvblRvb2x0aXBFbnVtID0gQnV0dG9uVG9vbHRpcEVudW07XG4gICAgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlID0gTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlO1xuICAgIEFwcGxpY2F0aW9uS2V5SUQgPSBBcHBsaWNhdGlvbktleUlEO1xuXG4gICAgb3JnSUQ6IGFueTtcbiAgICBhcHBsaWNhdGlvbktleUlEOiBhbnk7XG4gICAgY29uc3VtcHRpb25QYXJhbU06IGFueTtcbiAgICBzb3VyY2VDb25zdW1lclR5cGUgPSBbbmV3IFN0YXRpYygpXTtcblxuICAgIHNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRzogRm9ybUdyb3VwO1xuICAgIG1vZGlmaWVkRkc6IGFueTtcbiAgICBzY2hlZHVsZVJlcG9ydElEOiBhbnk7XG5cbiAgICBhY3Rpb246IHN0cmluZztcbiAgICBwYWdlVGl0bGU6IHN0cmluZztcbiAgICBpc0VxdWFsOiBib29sZWFuID0gdHJ1ZTtcbiAgICBpbml0aWFsT2JqZWN0OiBhbnk7XG5cbiAgICBzY2hlZHVsZVJlcG9ydEkgPSBuZXcgU2NoZWR1bGVSZXBvcnQoKTtcblxuICAgIEBWaWV3Q2hpbGQoJ3NjaGVkdWxlckNvbmZpZ0lucHV0Jykgc2NoZWR1bGVyQ29uZmlnSW5wdXQ6IFNjaGVkdWxlUmVwb3J0Q29uZmlndXJhdGlvbkNvbXBvbmVudDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgcHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIsXG4gICAgICAgIHByaXZhdGUgc2NoZWR1bGVSZXBvcnRDb250cm9sbGVyOiBTY2hlZHVsZVJlcG9ydENvbnRyb2xsZXIsXG4gICAgICAgIHByaXZhdGUgc291cmNlU2VydmljZTogU291cmNlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXJhbWV0ZXJTZXJ2aWNlOiBQYXJhbWV0ZXJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHNjaGVkdWxlUmVwb3J0U2VydmljZTogU2NoZWR1bGVSZXBvcnRTZXJ2aWNlLFxuXG4gICAgICAgIC8vIHRzYy1saWJyYXJ5XG4gICAgICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgdHNjQ29tbW9uU2VydmljZTogVFNDQ29tbW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0b2FzdHJTZXJ2aWNlOiBUb2FzdHJTZXJ2aWNlLFxuICAgICAgICAvLyAvdHNjLWxpYnJhcnkvXG4gICAgKSB7IH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9yZ0lEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdjdXJyZW50T3JnSUQnKTtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbktleUlEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdhcHBsaWNhdGlvbktleUlEJyk7XG5cbiAgICAgICAgdGhpcy5zY2hlZHVsZUNvbnN1bXB0aW9uUmVwb3J0RkdJbml0KCk7XG4gICAgICAgIHRoaXMuZ2V0Q29uc3VtcHRpb25QYXJhbWV0ZXIoKTtcblxuICAgICAgICB0aGlzLmFjdGl2YXRlZFJvdXRlLmRhdGEuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSBkYXRhLmFjdGlvbjtcbiAgICAgICAgICAgIHRoaXMuc2V0UGFnZVRpdGxlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWN0aXZhdGVkUm91dGUucGFyYW1zLnN1YnNjcmliZShwYXJhbXMgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09IEZvcm1BY3Rpb24uVVBEQVRFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVJlcG9ydElEID0gcGFyYW1zLnNjaGVkdWxlUmVwb3J0SUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTY2hlZHVsZVJlcG9ydEJ5SUQodGhpcy5zY2hlZHVsZVJlcG9ydElEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdzb3VyY2VDb25zdW1lci50eXBlJykudmFsdWUgPT0gJ1NPVVJDRScpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlQ29uc3VtZXJUeXBlKCdzb3VyY2UnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlQ29uc3VtZXJUeXBlKCdsb2FkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRQYWdlVGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uTmFtZSA9IHRoaXMuYXBwbGljYXRpb25LZXlJRCA9PSBBcHBsaWNhdGlvbktleUlELldBVEVSX0tFWV9JRCA/ICdXYXRlcicgOiAnRW5lcmd5JztcblxuICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5DUkVBVEUpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlID0gYFNjaGVkdWxlICR7YXBwbGljYXRpb25OYW1lfSBDb25zdW1wdGlvbiBSZXBvcnRgO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uID09IEZvcm1BY3Rpb24uVVBEQVRFKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VUaXRsZSA9IGBVcGRhdGUgU2NoZWR1bGVkICR7YXBwbGljYXRpb25OYW1lfSBDb25zdW1wdGlvbiBSZXBvcnRgO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUNvbnN1bXB0aW9uUmVwb3J0RkcgPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgICAgIHJlcG9ydENvbmZpZzogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICAgICAgcmVwb3J0VHlwZTogW1NjaGVkdWxlUmVwb3J0VHlwZUVudW0uQ09OU1VNUFRJT05fUkVQT1JULCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBkZXZpY2VJRDogW1tdXSxcbiAgICAgICAgICAgICAgICBlbnRpdHlUeXBlOiBbXSxcbiAgICAgICAgICAgICAgICBlbnRpdHlJRDogW1tdXSxcbiAgICAgICAgICAgICAgICBzb3VyY2VDb25zdW1lcjogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFsnU09VUkNFJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgICAgIGtleUlEOiBbLCBWYWxpZGF0b3JzLnJlcXVpcmVkXVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHBhcmFtTWV0cmljOiBbLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc2NoZWR1bGVyQ29uZmlnOiB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBbLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgICAgICBkYXRhSW50ZXJ2YWw6IFssIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgdXNlckNob2ljZTogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgdXNlcklEOiBbW10sIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgICAgICAgICAgIG90aGVyVXNlckVtYWlsOiBbW11dLFxuICAgICAgICAgICAgICAgIHN0YXR1czogWywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICAgICAgICAgICAgcmVwb3J0Rm9ybWF0OiBbLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdzb3VyY2VDb25zdW1lci50eXBlJykudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAnU09VUkNFJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlQ29uc3VtZXJUeXBlKCdzb3VyY2UnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gJ0NPTlNVTUVSJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlQ29uc3VtZXJUeXBlKCdsb2FkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFNvdXJjZUNvbnN1bWVyVHlwZShzb3VyY2VDb25zdW1lclR5cGUpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgICAgICB0eXBlOiBzb3VyY2VDb25zdW1lclR5cGVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNvdXJjZUNvbnN1bWVyVHlwZSA9IDxTdGF0aWNJW10+YXdhaXQgdGhpcy5zb3VyY2VTZXJ2aWNlLmdldFNvdXJjZUNvbnN1bWVyVHlwZSh0aGlzLm9yZ0lELCByZXF1ZXN0RGF0YSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q29uc3VtcHRpb25QYXJhbWV0ZXIoKSB7XG4gICAgICAgIGNvbnN0IGNvbnN1bXB0aW9uUGFyYW1NID0gPENvbnN1bXB0aW9uUGFyYW1ldGVyTT5hd2FpdCB0aGlzLnBhcmFtZXRlclNlcnZpY2UuZ2V0Q29uc3VtcHRpb25QYXJhbWV0ZXIodGhpcy5vcmdJRCk7XG5cbiAgICAgICAgdGhpcy5jb25zdW1wdGlvblBhcmFtTSA9IGNvbnN1bXB0aW9uUGFyYW1NLmNvbnN1bXB0aW9uUGFyYW1ldGVyO1xuICAgIH1cblxuICAgIHBhdGNoU2NoZWR1bGVyQ29uZmlnSW5wdXQoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHLmdldCgnc2NoZWR1bGVyQ29uZmlnJykucGF0Y2hWYWx1ZSh0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcudmFsdWUpXG4gICAgfVxuXG4gICAgZ2V0VmFsaWRGb3JtRGF0YSgpIHtcbiAgICAgICAgdGhpcy5wYXRjaFNjaGVkdWxlckNvbmZpZ0lucHV0KCk7XG5cbiAgICAgICAgbGV0IHVzZXJJRCA9IHRoaXMudHNjQ29tbW9uU2VydmljZS5yZW1vdmVTZWxlY3RBbGxJRCh0aGlzLnNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy5nZXQoJ3NjaGVkdWxlckNvbmZpZycpLmdldCgndXNlcklEJykudmFsdWUpO1xuICAgICAgICB0aGlzLnNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy5nZXQoJ3NjaGVkdWxlckNvbmZpZycpLmdldCgndXNlcklEJykucGF0Y2hWYWx1ZSh1c2VySUQpO1xuXG4gICAgICAgIGxldCBwYXJhbXNBcnJheSA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLnNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgncGFyYW1NZXRyaWMnKS52YWx1ZSxcbiAgICAgICAgICAgICAgICBkc0FnZzogJ3N1bScsXG4gICAgICAgICAgICAgICAgYWdnOiAnc3VtJ1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG5cbiAgICAgICAgY29uc3QgcmVwb3J0Q29uZmlnRkcgPSB0aGlzLnNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLnZhbHVlO1xuICAgICAgICBjb25zdCBzY2hlZHVsZXJDb25maWdGRyA9IHRoaXMuc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHLmdldCgnc2NoZWR1bGVyQ29uZmlnJykudmFsdWU7XG4gICAgICAgIGNvbnN0IHsgcGFyYW1NZXRyaWMsIC4uLnJlcG9ydENvbmZpZ1dpdGhvdXRQYXJhbU1ldHJpYyB9ID0gcmVwb3J0Q29uZmlnRkc7XG5cbiAgICAgICAgdGhpcy5tb2RpZmllZEZHID0ge1xuICAgICAgICAgICAgcmVwb3J0Q29uZmlnOiB7XG4gICAgICAgICAgICAgICAgLi4ucmVwb3J0Q29uZmlnV2l0aG91dFBhcmFtTWV0cmljLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zQXJyYXlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2hlZHVsZXJDb25maWc6IHtcbiAgICAgICAgICAgICAgICAuLi5zY2hlZHVsZXJDb25maWdGR1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHNjaGVkdWxlUmVwb3J0U3VibWl0KCkge1xuICAgICAgICB0aGlzLnBhdGNoU2NoZWR1bGVyQ29uZmlnSW5wdXQoKTtcblxuICAgICAgICBpZiAodGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLmludmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyQ29uZmlnSW5wdXQuc2NoZWR1bGVSZXBvcnRGRy5tYXJrQWxsQXNUb3VjaGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zY2hlZHVsZUNvbnN1bXB0aW9uUmVwb3J0RkcuaW52YWxpZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgZm9ybTonLCB0aGlzLnNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnRvYXN0clNlcnZpY2Uub3BlblRvYXN0KEludmFsaWRGb3JtLklOVkFMSURfRk9STV9USVRMRSwgSW52YWxpZEZvcm0uSU5WQUxJRF9GT1JNX01FU1NBR0UsIFRvYXN0ckNvbG9yLkVSUk9SKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0VmFsaWRGb3JtRGF0YSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT0gRm9ybUFjdGlvbi5DUkVBVEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVNjaGVkdWxlUmVwb3J0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uID09IEZvcm1BY3Rpb24uVVBEQVRFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTY2hlZHVsZVJlcG9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlU2NoZWR1bGVSZXBvcnQoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVSZXBvcnRDb250cm9sbGVyLmNyZWF0ZVNjaGVkdWxlUmVwb3J0KHRoaXMub3JnSUQsIHRoaXMubW9kaWZpZWRGRykuc3Vic2NyaWJlKChyZXM6IFJlc3BvbnNlTSkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYHNjaGVkdWxlLXJlcG9ydC9wYWdlYF0pO1xuXG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBpbiBjcmVhdGVTY2hlZHVsZVJlcG9ydCAtJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRTY2hlZHVsZVJlcG9ydEJ5SUQoc2NoZWR1bGVSZXBvcnRJRCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlUmVwb3J0SSA9IDxTY2hlZHVsZVJlcG9ydEk+YXdhaXQgdGhpcy5zY2hlZHVsZVJlcG9ydFNlcnZpY2UuZ2V0U2NoZWR1bGVSZXBvcnRCeUlEKHRoaXMub3JnSUQsIHNjaGVkdWxlUmVwb3J0SUQpO1xuXG4gICAgICAgIHRoaXMucGF0Y2hTY2hlZHVsZVJlcG9ydCh0aGlzLnNjaGVkdWxlUmVwb3J0SSk7XG4gICAgfVxuXG4gICAgcGF0Y2hTY2hlZHVsZVJlcG9ydChzY2hlZHVsZVJlcG9ydEk6IFNjaGVkdWxlUmVwb3J0SSkge1xuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHLnBhdGNoVmFsdWUoe1xuICAgICAgICAgICAgcmVwb3J0Q29uZmlnOiBzY2hlZHVsZVJlcG9ydEkucmVwb3J0Q29uZmlnLFxuICAgICAgICAgICAgc2NoZWR1bGVyQ29uZmlnOiBzY2hlZHVsZVJlcG9ydEkuc2NoZWR1bGVyQ29uZmlnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHLmdldCgncmVwb3J0Q29uZmlnJykuZ2V0KCdwYXJhbU1ldHJpYycpLnBhdGNoVmFsdWUoc2NoZWR1bGVSZXBvcnRJLnJlcG9ydENvbmZpZy5wYXJhbU1ldHJpY1swXSk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQ29uZmlnSW5wdXQuc2NoZWR1bGVSZXBvcnRGRy5wYXRjaFZhbHVlKHNjaGVkdWxlUmVwb3J0SS5zY2hlZHVsZXJDb25maWcpO1xuXG4gICAgICAgIHRoaXMuaW5pdGlhbE9iamVjdCA9IHtcbiAgICAgICAgICAgIGNvbnN1bXB0aW9uUmVwb3J0Q29uZmlnOiB0aGlzLnNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy52YWx1ZSxcbiAgICAgICAgICAgIHNjaGVkdWxlckNvbmZpZzogdGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLnZhbHVlXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5pc1ZhbGlkVXBkYXRlRm9ybSgpO1xuICAgIH1cblxuICAgIGlzVmFsaWRVcGRhdGVGb3JtKCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlckNvbmZpZ0lucHV0LnNjaGVkdWxlUmVwb3J0RkcudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrRXF1YWxpdHkoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zY2hlZHVsZUNvbnN1bXB0aW9uUmVwb3J0RkcudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrRXF1YWxpdHkoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hlY2tFcXVhbGl0eSgpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IHtcbiAgICAgICAgICAgIGNvbnN1bXB0aW9uUmVwb3J0Q29uZmlnOiB0aGlzLnNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy52YWx1ZSxcbiAgICAgICAgICAgIHNjaGVkdWxlckNvbmZpZzogdGhpcy5zY2hlZHVsZXJDb25maWdJbnB1dC5zY2hlZHVsZVJlcG9ydEZHLnZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaXNFcXVhbCA9IGlzRXF1YWwodGhpcy5pbml0aWFsT2JqZWN0LCBjdXJyZW50VmFsdWVzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTY2hlZHVsZVJlcG9ydCgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVJlcG9ydENvbnRyb2xsZXIudXBkYXRlU2NoZWR1bGVSZXBvcnQodGhpcy5vcmdJRCwgdGhpcy5zY2hlZHVsZVJlcG9ydElELCB0aGlzLm1vZGlmaWVkRkcpLnN1YnNjcmliZSgocmVzOiBSZXNwb25zZU0pID0+IHtcblxuICAgICAgICAgICAgdGhpcy50c2NDb21tb25TZXJ2aWNlLmJhY2soKTtcblxuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgaW4gdXBkYXRlU2NoZWR1bGVSZXBvcnQgLScsIGVycm9yKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBlcnJvckhhbmRsaW5nID0gKGZvcm1Hcm91cDogRm9ybUdyb3VwLCBjb250cm9sUGF0aDogc3RyaW5nLCBlcnJvcjogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBmb3JtR3JvdXAuZ2V0KGNvbnRyb2xQYXRoKS5oYXNFcnJvcihlcnJvcik7XG4gICAgfVxuXG59XG4iLCI8ZGl2IGNsYXNzPVwiY2FyZCBtYWluLWNhcmQgY2FyZE92ZXJ3cml0ZSBoMTAwXCI+XG4gICAgPGRpdiBjbGFzcz1cImhlYWRlckNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyTGVmdENvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2VUaXRsZVwiPnt7IHBhZ2VUaXRsZSB9fTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2VTdWJ0aXRsZVwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJzY2hlZHVsZUNvbnN1bXB0aW9uUmVwb3J0RkdcIiAobmdTdWJtaXQpPVwic2NoZWR1bGVSZXBvcnRTdWJtaXQoKVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1jYXJkIGNsYXNzPVwiYm9yZGVyIGNhcmRPdmVyd3JpdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkVGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXBvcnQgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGZvcm1Hcm91cE5hbWU9XCJyZXBvcnRDb25maWdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBmb3JtR3JvdXBOYW1lPVwic291cmNlQ29uc3VtZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyYWRpb0J0bkZpZWxkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyYWRpb0J0bkdyb3VwTGFiZWxcIj4gWW91IHdhbnQgdG8gc2NoZWR1bGUge3sgYXBwbGljYXRpb25LZXlJRCA9PSBBcHBsaWNhdGlvbktleUlELldBVEVSX0tFWV9JRCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2F0ZXInIDogJ2VuZXJneSd9fSBjb25zdW1wdGlvbiByZXBvcnQgZm9yPyAqIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LXJhZGlvLWdyb3VwIGZvcm1Db250cm9sTmFtZT1cInR5cGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbXktMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LXJhZGlvLWJ1dHRvbiBjbGFzcz1cInJhZGlvQnRuTGFiZWxcIiBbdmFsdWVdPVwiJ1NPVVJDRSdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1yYWRpby1idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtcmFkaW8tYnV0dG9uIGNsYXNzPVwicmFkaW9CdG5MYWJlbFwiIFt2YWx1ZV09XCInQ09OU1VNRVInXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zdW1lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1yYWRpby1idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1lcnJvciBjbGFzcz1cInRleHRNYXRFcnJvciBtcy0xIG10LTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cImVycm9ySGFuZGxpbmcoc2NoZWR1bGVDb25zdW1wdGlvblJlcG9ydEZHLCAncmVwb3J0Q29uZmlnLnNvdXJjZUNvbnN1bWVyLnR5cGUnLCAncmVxdWlyZWQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBGb3JtRXJyb3JFbnVtLlJFUVVJUkVEIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtcmFkaW8tZ3JvdXA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtdC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZm9ybUdyb3VwTmFtZT1cInJlcG9ydENvbmZpZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBmb3JtR3JvdXBOYW1lPVwic291cmNlQ29uc3VtZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJtYXRGaWVsZFdpZHRoMTAwXCIgW2FwcGVhcmFuY2VdPVwiTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWxhYmVsPiBTZWxlY3Qge3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRy5nZXQoJ3JlcG9ydENvbmZpZycpLmdldCgnc291cmNlQ29uc3VtZXIudHlwZScpLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PSAnU09VUkNFJyA/ICdzb3VyY2UnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25zdW1lcicgfX0gdHlwZTwvbWF0LWxhYmVsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtc2VsZWN0IGZvcm1Db250cm9sTmFtZT1cImtleUlEXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJzb3VyY2VDb25zdW1lclR5cGUgJiYgc291cmNlQ29uc3VtZXJUeXBlLmxlbmd0aCA+IDAgJiYgc291cmNlQ29uc3VtZXJUeXBlWzBdWydpZCddOyBlbHNlIG5vU291cmNlQ29uc3VtZXJUeXBlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IHR5cGUgb2Ygc291cmNlQ29uc3VtZXJUeXBlXCIgW3ZhbHVlXT1cInR5cGUua2V5SURcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdHlwZS5uYW1lIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjbm9Tb3VyY2VDb25zdW1lclR5cGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gZGlzYWJsZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IENPTU1PTl9DT05TVEFOVC5OT19EQVRBX0ZPVU5EIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtc2VsZWN0PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiZXJyb3JIYW5kbGluZyhzY2hlZHVsZUNvbnN1bXB0aW9uUmVwb3J0RkcsICdyZXBvcnRDb25maWcuc291cmNlQ29uc3VtZXIua2V5SUQnLCAncmVxdWlyZWQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgRm9ybUVycm9yRW51bS5SRVFVSVJFRCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1lcnJvcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZm9ybUdyb3VwTmFtZT1cInJlcG9ydENvbmZpZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwibWF0RmllbGRXaWR0aDEwMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2FwcGVhcmFuY2VdPVwiTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtbGFiZWw+U2VsZWN0IGNvbnN1bXB0aW9uIHBhcmFtZXRlcjwvbWF0LWxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtc2VsZWN0IGZvcm1Db250cm9sTmFtZT1cInBhcmFtTWV0cmljXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiY29uc3VtcHRpb25QYXJhbU0gJiYgY29uc3VtcHRpb25QYXJhbU0ubGVuZ3RoID4gMCAmJiBjb25zdW1wdGlvblBhcmFtTVswXVsnaWQnXTsgZWxzZSBub0NvbnN1bXB0aW9uUGFyYW1NXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiAqbmdGb3I9XCJsZXQgcGFyYW0gb2YgY29uc3VtcHRpb25QYXJhbU1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt2YWx1ZV09XCJwYXJhbS5wYXJhbU1ldHJpY1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHBhcmFtLmxhYmVsIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjbm9Db25zdW1wdGlvblBhcmFtTT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uIGRpc2FibGVkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IENPTU1PTl9DT05TVEFOVC5OT19EQVRBX0ZPVU5EIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJlcnJvckhhbmRsaW5nKHNjaGVkdWxlQ29uc3VtcHRpb25SZXBvcnRGRywgJ3JlcG9ydENvbmZpZy5wYXJhbU1ldHJpYycsICdyZXF1aXJlZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IEZvcm1FcnJvckVudW0uUkVRVUlSRUQgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1lcnJvcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LWZvcm0tZmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvbWF0LWNhcmQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtdC0zXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMlwiPlxuICAgICAgICAgICAgICAgICAgICA8bGliLWNvbmZpZ3VyYXRpb24gI3NjaGVkdWxlckNvbmZpZ0lucHV0PjwvbGliLWNvbmZpZ3VyYXRpb24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImQtbm9uZVwiIHR5cGU9XCJzdWJtaXRcIiAjZm9ybVN1Ym1pdEJ0bj48L2J1dHRvbj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtdC0zXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXQtZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IG1lLTJcIiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cInRzY0NvbW1vblNlcnZpY2UuYmFjaygpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgQnV0dG9uTGFiZWxFbnVtLkNBTkNFTF9CVE5fTEFCRUwgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc3VjY2Vzc1wiIFtuZ0NsYXNzXT1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2J0bi1zdWNjZXNzJyA6IGFjdGlvbiA9PSBGb3JtQWN0aW9uLkNSRUFURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2J0bi1wcmltYXJ5JyA6IGFjdGlvbiA9PSBGb3JtQWN0aW9uLlVQREFURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc2FibGVkJyA6IGFjdGlvbiA9PSBGb3JtQWN0aW9uLlVQREFURSAmJiBpc0VxdWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVwiIHR5cGU9XCJzdWJtaXRcIj57eyBhY3Rpb24gPT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3JtQWN0aW9uLkNSRUFURSA/ICdTY2hlZHVsZScgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbkxhYmVsRW51bS5VUERBVEVfQlROX0xBQkVMIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgIDwvZGl2PlxuPC9kaXY+Il19