import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { SavedConsumptionParameter } from '../../../../model/parameter.model';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "../../../../service/parameter.service";
import * as i3 from "@angular/common";
// /tsc-library/
export class TscRestrictComponent {
    constructor(storageService, parameterService) {
        this.storageService = storageService;
        this.parameterService = parameterService;
        this.consumptionParameter = [new SavedConsumptionParameter()];
        this.setLayoutRedirectUrl = '/layout/page';
        this.setConsumptionRedirectUrl = '/preference/consumption-parameter/add';
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.layoutID = this.storageService.getStorage('layoutID');
        this.getSavedConsumptionParameter();
    }
    getSavedConsumptionParameter() {
        return __awaiter(this, void 0, void 0, function* () {
            this.consumptionParameter = (yield this.parameterService.getSavedConsumptionParameter(this.orgID));
        });
    }
}
TscRestrictComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TscRestrictComponent, deps: [{ token: i1.StorageService }, { token: i2.ParameterService }], target: i0.ɵɵFactoryTarget.Component });
TscRestrictComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TscRestrictComponent, selector: "lib-tsc-restrict", ngImport: i0, template: "<div class=\"card main-card cardOverwrite h-100\">\n    <div class=\"card-body\">\n        <div class=\"container d-flex align-items-center\">\n            <div class=\"mx-auto text-center\">\n                <img class=\"img\" src=\"/assets/images/tsc-restrict.jpg\" alt=\"Not found\" />\n                <br />\n                <br />\n                <ng-container\n                    *ngIf=\"!consumptionParameter?.[0]?.['consumptionParamID'] && !layoutID; else setConsumptionParameter\">\n                    You have not set consumption parameters. Please add consumption parameters for better experience.\n                    <br />\n                    Click <a [href]=\"setConsumptionRedirectUrl\">here</a> to add consumption parameters.\n                    <br />\n                    <br />\n                    You don't have any layout to showcase the respective page. Please create a layout for better\n                    experience.\n                    <br />\n                    Click <a [href]=\"setLayoutRedirectUrl\">here</a> to create a layout.\n                </ng-container>\n                <ng-template #setConsumptionParameter>\n                    <ng-container\n                        *ngIf=\"!consumptionParameter?.[0]?.['consumptionParamID'] && layoutID; else setLayout\">\n                        You have not set consumption parameters. Please add consumption parameters for better\n                        experience.\n                        <br />\n                        Click <a [href]=\"setConsumptionRedirectUrl\">here</a> to add consumption parameters.\n                    </ng-container>\n                    <ng-template #setLayout>\n                        You don't have any layout to showcase the respective page. Please create a layout for better\n                        experience.\n                        <br />\n                        Click <a [href]=\"setLayoutRedirectUrl\">here</a> to create a layout.\n                    </ng-template>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>", styles: [".img{max-width:600px}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TscRestrictComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-tsc-restrict',
                    templateUrl: './tsc-restrict.component.html',
                    styleUrls: ['./tsc-restrict.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.ParameterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHNjLXJlc3RyaWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L19zaGFyZWQvc3RhdGljLXBhZ2UvdHNjLXJlc3RyaWN0L3RzYy1yZXN0cmljdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9fc2hhcmVkL3N0YXRpYy1wYWdlL3RzYy1yZXN0cmljdC90c2MtcmVzdHJpY3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLHlCQUF5QixFQUE4QixNQUFNLG1DQUFtQyxDQUFDOzs7OztBQU0xRyxnQkFBZ0I7QUFPaEIsTUFBTSxPQUFPLG9CQUFvQjtJQVM3QixZQUNZLGNBQThCLEVBQzlCLGdCQUFrQztRQURsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVA5Qyx5QkFBb0IsR0FBRyxDQUFDLElBQUkseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO1FBRXpELHlCQUFvQixHQUFHLGNBQWMsQ0FBQztRQUN0Qyw4QkFBeUIsR0FBRyx1Q0FBdUMsQ0FBQztJQUtoRSxDQUFDO0lBRUwsUUFBUTtRQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUssNEJBQTRCOztZQUM5QixJQUFJLENBQUMsb0JBQW9CLElBQWlDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDO1FBQ25JLENBQUM7S0FBQTs7a0hBdkJRLG9CQUFvQjtzR0FBcEIsb0JBQW9CLHdEQ2ZqQywwaUVBcUNNOzRGRHRCTyxvQkFBb0I7a0JBTGhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsV0FBVyxFQUFFLCtCQUErQjtvQkFDNUMsU0FBUyxFQUFFLENBQUMsK0JBQStCLENBQUM7aUJBQy9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU2F2ZWRDb25zdW1wdGlvblBhcmFtZXRlciwgU2F2ZWRDb25zdW1wdGlvblBhcmFtZXRlck0gfSBmcm9tICcuLi8uLi8uLi8uLi9tb2RlbC9wYXJhbWV0ZXIubW9kZWwnO1xuXG5pbXBvcnQgeyBQYXJhbWV0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZS9wYXJhbWV0ZXIuc2VydmljZSc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3N0b3JhZ2Utc2VydmljZSc7XG4vLyAvdHNjLWxpYnJhcnkvXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbGliLXRzYy1yZXN0cmljdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RzYy1yZXN0cmljdC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdHNjLXJlc3RyaWN0LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVHNjUmVzdHJpY3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgb3JnSUQ6IGFueTtcbiAgICBsYXlvdXRJRDogYW55O1xuICAgIGNvbnN1bXB0aW9uUGFyYW1ldGVyID0gW25ldyBTYXZlZENvbnN1bXB0aW9uUGFyYW1ldGVyKCldO1xuXG4gICAgc2V0TGF5b3V0UmVkaXJlY3RVcmwgPSAnL2xheW91dC9wYWdlJztcbiAgICBzZXRDb25zdW1wdGlvblJlZGlyZWN0VXJsID0gJy9wcmVmZXJlbmNlL2NvbnN1bXB0aW9uLXBhcmFtZXRlci9hZGQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBhcmFtZXRlclNlcnZpY2U6IFBhcmFtZXRlclNlcnZpY2VcbiAgICApIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JnSUQgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoJ2N1cnJlbnRPcmdJRCcpO1xuICAgICAgICB0aGlzLmxheW91dElEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdsYXlvdXRJRCcpO1xuXG4gICAgICAgIHRoaXMuZ2V0U2F2ZWRDb25zdW1wdGlvblBhcmFtZXRlcigpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFNhdmVkQ29uc3VtcHRpb25QYXJhbWV0ZXIoKSB7XG4gICAgICAgIHRoaXMuY29uc3VtcHRpb25QYXJhbWV0ZXIgPSA8U2F2ZWRDb25zdW1wdGlvblBhcmFtZXRlck1bXT5hd2FpdCB0aGlzLnBhcmFtZXRlclNlcnZpY2UuZ2V0U2F2ZWRDb25zdW1wdGlvblBhcmFtZXRlcih0aGlzLm9yZ0lEKTtcbiAgICB9XG5cbn1cbiIsIjxkaXYgY2xhc3M9XCJjYXJkIG1haW4tY2FyZCBjYXJkT3ZlcndyaXRlIGgtMTAwXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJteC1hdXRvIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImltZ1wiIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3RzYy1yZXN0cmljdC5qcGdcIiBhbHQ9XCJOb3QgZm91bmRcIiAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCIhY29uc3VtcHRpb25QYXJhbWV0ZXI/LlswXT8uWydjb25zdW1wdGlvblBhcmFtSUQnXSAmJiAhbGF5b3V0SUQ7IGVsc2Ugc2V0Q29uc3VtcHRpb25QYXJhbWV0ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgWW91IGhhdmUgbm90IHNldCBjb25zdW1wdGlvbiBwYXJhbWV0ZXJzLiBQbGVhc2UgYWRkIGNvbnN1bXB0aW9uIHBhcmFtZXRlcnMgZm9yIGJldHRlciBleHBlcmllbmNlLlxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgQ2xpY2sgPGEgW2hyZWZdPVwic2V0Q29uc3VtcHRpb25SZWRpcmVjdFVybFwiPmhlcmU8L2E+IHRvIGFkZCBjb25zdW1wdGlvbiBwYXJhbWV0ZXJzLlxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIFlvdSBkb24ndCBoYXZlIGFueSBsYXlvdXQgdG8gc2hvd2Nhc2UgdGhlIHJlc3BlY3RpdmUgcGFnZS4gUGxlYXNlIGNyZWF0ZSBhIGxheW91dCBmb3IgYmV0dGVyXG4gICAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2UuXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICBDbGljayA8YSBbaHJlZl09XCJzZXRMYXlvdXRSZWRpcmVjdFVybFwiPmhlcmU8L2E+IHRvIGNyZWF0ZSBhIGxheW91dC5cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI3NldENvbnN1bXB0aW9uUGFyYW1ldGVyPlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cIiFjb25zdW1wdGlvblBhcmFtZXRlcj8uWzBdPy5bJ2NvbnN1bXB0aW9uUGFyYW1JRCddICYmIGxheW91dElEOyBlbHNlIHNldExheW91dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgWW91IGhhdmUgbm90IHNldCBjb25zdW1wdGlvbiBwYXJhbWV0ZXJzLiBQbGVhc2UgYWRkIGNvbnN1bXB0aW9uIHBhcmFtZXRlcnMgZm9yIGJldHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgQ2xpY2sgPGEgW2hyZWZdPVwic2V0Q29uc3VtcHRpb25SZWRpcmVjdFVybFwiPmhlcmU8L2E+IHRvIGFkZCBjb25zdW1wdGlvbiBwYXJhbWV0ZXJzLlxuICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNzZXRMYXlvdXQ+XG4gICAgICAgICAgICAgICAgICAgICAgICBZb3UgZG9uJ3QgaGF2ZSBhbnkgbGF5b3V0IHRvIHNob3djYXNlIHRoZSByZXNwZWN0aXZlIHBhZ2UuIFBsZWFzZSBjcmVhdGUgYSBsYXlvdXQgZm9yIGJldHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgQ2xpY2sgPGEgW2hyZWZdPVwic2V0TGF5b3V0UmVkaXJlY3RVcmxcIj5oZXJlPC9hPiB0byBjcmVhdGUgYSBsYXlvdXQuXG4gICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PiJdfQ==