import { Component, Inject } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
// tsc-library
import { DialogEnum } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/radio";
import * as i4 from "@angular/material/tooltip";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
// /tsc-library/
export class EntityDialogComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.DialogEnum = DialogEnum;
        this.entityFC = new FormControl('', Validators.required);
        this.entityID = data === null || data === void 0 ? void 0 : data.entityID;
        this.entityType = data === null || data === void 0 ? void 0 : data.entityType;
        this.entityObject = data === null || data === void 0 ? void 0 : data.entityObject;
        this.dialogRef.disableClose = true;
    }
    ngOnInit() {
        if (this.entityID) {
            this.entityFC.patchValue(this.entityID);
        }
    }
    onEntityChange(selectedValue) {
        this.entityFC.patchValue(selectedValue);
        this.dialogRef.close({
            result: DialogEnum.CLOSE_DR,
            entityID: this.entityFC.value
        });
    }
}
EntityDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: EntityDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
EntityDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: EntityDialogComponent, selector: "lib-entity", ngImport: i0, template: "<div mat-dialog-title>\n    <div class=\"row\">\n        <div class=\"col-sm-11\">\n            <div class=\"pageTitle dialogHeader fw-bold\"> Select Entity </div>\n            <div class=\"pageSubtitle\">\n                Entities displayed in gray color have never had consumption, whereas those in black have consumption.\n            </div>\n        </div>\n        <div class=\"col-sm-1\">\n            <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\"\n                matTooltip=\"Close\" matTooltipPosition=\"before\">\n                <span class=\"material-symbols-outlined\">\n                    close\n                </span>\n            </button>\n        </div>\n    </div>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <mat-radio-group [formControl]=\"entityFC\" (change)=\"onEntityChange($event.value)\" *ngIf=\"entityObject && entityObject.length > 0 && entityObject[0].id\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div *ngFor=\"let entity of entityObject; let i = index\" class=\"mt-2\">\n                    <mat-radio-button class=\"radioBtnLabel me-2\" [ngClass]=\"{'text-secondary': !entity.entityStatusFlag}\"\n                        [value]=\"entity.id\" [disabled]=\"!entity.entityStatusFlag\">\n                        {{ entity.name }}\n                    </mat-radio-button>\n                    <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                        <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <ng-template #recursiveTemplate let-entities>\n            <div *ngFor=\"let entity of entities; let i = index\" class=\"mt-2\">\n                <mat-radio-button class=\"radioBtnLabel me-2\" [ngClass]=\"{'text-secondary': !entity.entityStatusFlag}\"\n                    [value]=\"entity.id\" [disabled]=\"!entity.entityStatusFlag\">\n                    {{ entity.name }}\n                </mat-radio-button>\n                <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-5\">\n                    <ng-container *ngTemplateOutlet=\"recursiveTemplate; context:{ $implicit: entity.children }\"></ng-container>\n                </div>\n            </div>\n        </ng-template>\n    </mat-radio-group>\n</div>", components: [{ type: i2.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i3.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i4.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: EntityDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-entity',
                    templateUrl: './entity.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L19zaGFyZWQvZGlhbG9nL2VudGl0eS9lbnRpdHkuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtbGl0ZS9zcmMvbGliL3RzYy9jb21wb25lbnQvX3NoYXJlZC9kaWFsb2cvZW50aXR5L2VudGl0eS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQWdCLE1BQU0sMEJBQTBCLENBQUM7QUFFekUsY0FBYztBQUNkLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7Ozs7QUFDakQsZ0JBQWdCO0FBUWhCLE1BQU0sT0FBTyxxQkFBcUI7SUFVOUIsWUFDVyxTQUE4QyxFQUNyQixJQUFJO1FBRDdCLGNBQVMsR0FBVCxTQUFTLENBQXFDO1FBQ3JCLFNBQUksR0FBSixJQUFJLENBQUE7UUFWeEMsZUFBVSxHQUFHLFVBQVUsQ0FBQztRQU14QixhQUFRLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFNN0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFVBQVUsQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxZQUFZLENBQUM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNDO0lBQ0wsQ0FBQztJQUVELGNBQWMsQ0FBQyxhQUFhO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ2pCLE1BQU0sRUFBRSxVQUFVLENBQUMsUUFBUTtZQUMzQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLO1NBQ2hDLENBQUMsQ0FBQTtJQUNOLENBQUM7O21IQWpDUSxxQkFBcUIsOENBWWxCLGVBQWU7dUdBWmxCLHFCQUFxQixrRENkbEMsKzdFQStDTTs0RkRqQ08scUJBQXFCO2tCQU5qQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxZQUFZO29CQUN0QixXQUFXLEVBQUUseUJBQXlCO29CQUN0QyxNQUFNLEVBQUUsRUFDUDtpQkFDSjs7MEJBYVEsTUFBTTsyQkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEsIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBEaWFsb2dFbnVtIH0gZnJvbSAnQGxpYnJhcnkvdHNjLWNvbW1vbic7XG4vLyAvdHNjLWxpYnJhcnkvXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbGliLWVudGl0eScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2VudGl0eS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVzOiBbXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBFbnRpdHlEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgRGlhbG9nRW51bSA9IERpYWxvZ0VudW07XG5cbiAgICBlbnRpdHlJRDogYW55O1xuICAgIGVudGl0eVR5cGU6IGFueTtcbiAgICBlbnRpdHlPYmplY3Q6IGFueTtcblxuICAgIGVudGl0eUZDOiBGb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgnJywgVmFsaWRhdG9ycy5yZXF1aXJlZCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPEVudGl0eURpYWxvZ0NvbXBvbmVudD4sXG4gICAgICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YSxcbiAgICApIHtcbiAgICAgICAgdGhpcy5lbnRpdHlJRCA9IGRhdGE/LmVudGl0eUlEO1xuICAgICAgICB0aGlzLmVudGl0eVR5cGUgPSBkYXRhPy5lbnRpdHlUeXBlO1xuICAgICAgICB0aGlzLmVudGl0eU9iamVjdCA9IGRhdGE/LmVudGl0eU9iamVjdDtcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYuZGlzYWJsZUNsb3NlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZW50aXR5SUQpIHtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5RkMucGF0Y2hWYWx1ZSh0aGlzLmVudGl0eUlEKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRW50aXR5Q2hhbmdlKHNlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbnRpdHlGQy5wYXRjaFZhbHVlKHNlbGVjdGVkVmFsdWUpO1xuXG4gICAgICAgIHRoaXMuZGlhbG9nUmVmLmNsb3NlKHtcbiAgICAgICAgICAgIHJlc3VsdDogRGlhbG9nRW51bS5DTE9TRV9EUixcbiAgICAgICAgICAgIGVudGl0eUlEOiB0aGlzLmVudGl0eUZDLnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG59IiwiPGRpdiBtYXQtZGlhbG9nLXRpdGxlPlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2VUaXRsZSBkaWFsb2dIZWFkZXIgZnctYm9sZFwiPiBTZWxlY3QgRW50aXR5IDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2VTdWJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgIEVudGl0aWVzIGRpc3BsYXllZCBpbiBncmF5IGNvbG9yIGhhdmUgbmV2ZXIgaGFkIGNvbnN1bXB0aW9uLCB3aGVyZWFzIHRob3NlIGluIGJsYWNrIGhhdmUgY29uc3VtcHRpb24uXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMVwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBtYXQtaWNvbi1idXR0b24gbWF0LWRpYWxvZy1jbG9zZSBjZGtGb2N1c0luaXRpYWwgY2xhc3M9XCJmbG9hdC1lbmQgbWF0RGlhbG9nQ2xvc2VcIlxuICAgICAgICAgICAgICAgIG1hdFRvb2x0aXA9XCJDbG9zZVwiIG1hdFRvb2x0aXBQb3NpdGlvbj1cImJlZm9yZVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiPlxuICAgICAgICAgICAgICAgICAgICBjbG9zZVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48ZGl2IGNsYXNzPVwibWF0RGlhbG9nQ29udGVudFwiIG1hdC1kaWFsb2ctY29udGVudD5cbiAgICA8bWF0LXJhZGlvLWdyb3VwIFtmb3JtQ29udHJvbF09XCJlbnRpdHlGQ1wiIChjaGFuZ2UpPVwib25FbnRpdHlDaGFuZ2UoJGV2ZW50LnZhbHVlKVwiICpuZ0lmPVwiZW50aXR5T2JqZWN0ICYmIGVudGl0eU9iamVjdC5sZW5ndGggPiAwICYmIGVudGl0eU9iamVjdFswXS5pZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgZW50aXR5IG9mIGVudGl0eU9iamVjdDsgbGV0IGkgPSBpbmRleFwiIGNsYXNzPVwibXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LXJhZGlvLWJ1dHRvbiBjbGFzcz1cInJhZGlvQnRuTGFiZWwgbWUtMlwiIFtuZ0NsYXNzXT1cInsndGV4dC1zZWNvbmRhcnknOiAhZW50aXR5LmVudGl0eVN0YXR1c0ZsYWd9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFt2YWx1ZV09XCJlbnRpdHkuaWRcIiBbZGlzYWJsZWRdPVwiIWVudGl0eS5lbnRpdHlTdGF0dXNGbGFnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBlbnRpdHkubmFtZSB9fVxuICAgICAgICAgICAgICAgICAgICA8L21hdC1yYWRpby1idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJlbnRpdHkuY2hpbGRyZW4gJiYgZW50aXR5LmNoaWxkcmVuLmxlbmd0aCA+IDBcIiBjbGFzcz1cIm1zLTVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJyZWN1cnNpdmVUZW1wbGF0ZTsgY29udGV4dDp7ICRpbXBsaWNpdDogZW50aXR5LmNoaWxkcmVuIH1cIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8bmctdGVtcGxhdGUgI3JlY3Vyc2l2ZVRlbXBsYXRlIGxldC1lbnRpdGllcz5cbiAgICAgICAgICAgIDxkaXYgKm5nRm9yPVwibGV0IGVudGl0eSBvZiBlbnRpdGllczsgbGV0IGkgPSBpbmRleFwiIGNsYXNzPVwibXQtMlwiPlxuICAgICAgICAgICAgICAgIDxtYXQtcmFkaW8tYnV0dG9uIGNsYXNzPVwicmFkaW9CdG5MYWJlbCBtZS0yXCIgW25nQ2xhc3NdPVwieyd0ZXh0LXNlY29uZGFyeSc6ICFlbnRpdHkuZW50aXR5U3RhdHVzRmxhZ31cIlxuICAgICAgICAgICAgICAgICAgICBbdmFsdWVdPVwiZW50aXR5LmlkXCIgW2Rpc2FibGVkXT1cIiFlbnRpdHkuZW50aXR5U3RhdHVzRmxhZ1wiPlxuICAgICAgICAgICAgICAgICAgICB7eyBlbnRpdHkubmFtZSB9fVxuICAgICAgICAgICAgICAgIDwvbWF0LXJhZGlvLWJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiZW50aXR5LmNoaWxkcmVuICYmIGVudGl0eS5jaGlsZHJlbi5sZW5ndGggPiAwXCIgY2xhc3M9XCJtcy01XCI+XG4gICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJyZWN1cnNpdmVUZW1wbGF0ZTsgY29udGV4dDp7ICRpbXBsaWNpdDogZW50aXR5LmNoaWxkcmVuIH1cIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbWF0LXJhZGlvLWdyb3VwPlxuPC9kaXY+Il19