import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LIST_CONSTANT } from '../../../constant/list.constant';
// tsc-library
import { FileTypeEnum, MATERIAL_CONSTANT } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@ng-bootstrap/ng-bootstrap";
import * as i2 from "@angular/material/core";
import * as i3 from "@angular/common";
// /tsc-library/
export class DownloadReportComponent {
    constructor() {
        this.listConstant = LIST_CONSTANT;
        this.materialConstant = MATERIAL_CONSTANT;
        this.fileTypeEnum = FileTypeEnum;
        this.fileTypeEmitted = new EventEmitter();
        this.excludeFileType = '';
    }
    ngOnInit() {
    }
    onChange(selectedType) {
        this.fileTypeEmitted.emit(selectedType);
    }
    ngOnChanges(changes) {
        if (changes.excludeFileTypeInp && this.excludeFileTypeInp) {
            this.excludeFileType = this.excludeFileTypeInp;
        }
    }
}
DownloadReportComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DownloadReportComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DownloadReportComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DownloadReportComponent, selector: "lib-download-report", inputs: { excludeFileTypeInp: "excludeFileTypeInp" }, outputs: { fileTypeEmitted: "fileTypeEmitted" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"btn-group\" ngbDropdown>\n    <button type=\"button\" ngbDropdownToggle class=\"btn btn-sm btn-primary ms-2 dropdownAfter\" matRipple\n        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n        <div class=\"d-flex align-items-center\">\n            <span class=\"me-2\">\n                Export as\n            </span>\n            <span class=\"material-symbols-outlined iconSize\">\n                arrow_drop_down\n            </span>\n        </div>\n    </button>\n\n    <div ngbDropdownMenu>\n        <button *ngFor=\"let type of listConstant.DOWNLOAD_TYPE\" class=\"dropdown-item\" [hidden]=\"excludeFileType == type.value\"\n            (click)=\"onChange(type.value)\">\n            <div class=\"d-flex align-items-center\">\n                <span class=\"material-symbols-outlined me-2 fs-5\" [ngSwitch]=\"type.value\">\n                    <span *ngSwitchCase=\"fileTypeEnum.PDF\" class=\"material-symbols-outlined pdfColor\">\n                        picture_as_pdf\n                    </span>\n                    <span *ngSwitchCase=\"fileTypeEnum.CSV\" class=\"material-symbols-outlined csvXlsxColor\">\n                        csv\n                    </span>\n                    <span *ngSwitchCase=\"fileTypeEnum.XLSX\" class=\"material-symbols-outlined csvXlsxColor\">\n                        description\n                    </span>\n                </span>\n                <span>\n                    {{ type.label }}\n                </span>\n            </div>\n        </button>\n    </div>\n</div>", styles: [".funnelFilterDD{width:0;height:0;overflow:hidden}.pdfColor{color:#dc3545}.csvXlsxColor{color:#1d712b}.iconSize{font-size:18px}\n"], directives: [{ type: i1.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i1.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i1.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DownloadReportComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-download-report',
                    templateUrl: './download-report.component.html',
                    styleUrls: ['./download-report.component.scss']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { excludeFileTypeInp: [{
                type: Input
            }], fileTypeEmitted: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtcmVwb3J0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L19zaGFyZWQvZG93bmxvYWQtcmVwb3J0L2Rvd25sb2FkLXJlcG9ydC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9fc2hhcmVkL2Rvd25sb2FkLXJlcG9ydC9kb3dubG9hZC1yZXBvcnQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFOUYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRWhFLGNBQWM7QUFDZCxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBQ3RFLGdCQUFnQjtBQU9oQixNQUFNLE9BQU8sdUJBQXVCO0lBY2hDO1FBWkEsaUJBQVksR0FBRyxhQUFhLENBQUM7UUFDN0IscUJBQWdCLEdBQUcsaUJBQWlCLENBQUM7UUFDckMsaUJBQVksR0FBRyxZQUFZLENBQUM7UUFNNUIsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRTdDLG9CQUFlLEdBQUcsRUFBRSxDQUFDO0lBRUwsQ0FBQztJQUVqQixRQUFRO0lBQ1IsQ0FBQztJQUVELFFBQVEsQ0FBQyxZQUFZO1FBQ2pCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3ZELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1NBQ2xEO0lBQ0wsQ0FBQzs7cUhBM0JRLHVCQUF1Qjt5R0FBdkIsdUJBQXVCLHVMQ2JwQyx1aERBa0NNOzRGRHJCTyx1QkFBdUI7a0JBTG5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsV0FBVyxFQUFFLGtDQUFrQztvQkFDL0MsU0FBUyxFQUFFLENBQUMsa0NBQWtDLENBQUM7aUJBQ2xEOzBFQVFHLGtCQUFrQjtzQkFEakIsS0FBSztnQkFJTixlQUFlO3NCQURkLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IExJU1RfQ09OU1RBTlQgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudC9saXN0LmNvbnN0YW50JztcblxuLy8gdHNjLWxpYnJhcnlcbmltcG9ydCB7IEZpbGVUeXBlRW51bSwgTUFURVJJQUxfQ09OU1RBTlQgfSBmcm9tICdAbGlicmFyeS90c2MtY29tbW9uJztcbi8vIC90c2MtbGlicmFyeS9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItZG93bmxvYWQtcmVwb3J0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZG93bmxvYWQtcmVwb3J0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9kb3dubG9hZC1yZXBvcnQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBEb3dubG9hZFJlcG9ydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBsaXN0Q29uc3RhbnQgPSBMSVNUX0NPTlNUQU5UO1xuICAgIG1hdGVyaWFsQ29uc3RhbnQgPSBNQVRFUklBTF9DT05TVEFOVDtcbiAgICBmaWxlVHlwZUVudW0gPSBGaWxlVHlwZUVudW07XG5cbiAgICBASW5wdXQoKVxuICAgIGV4Y2x1ZGVGaWxlVHlwZUlucDogRmlsZVR5cGVFbnVtO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZmlsZVR5cGVFbWl0dGVkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICBleGNsdWRlRmlsZVR5cGUgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB9XG5cbiAgICBvbkNoYW5nZShzZWxlY3RlZFR5cGUpIHtcbiAgICAgICAgdGhpcy5maWxlVHlwZUVtaXR0ZWQuZW1pdChzZWxlY3RlZFR5cGUpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoYW5nZXMuZXhjbHVkZUZpbGVUeXBlSW5wICYmIHRoaXMuZXhjbHVkZUZpbGVUeXBlSW5wKSB7XG4gICAgICAgICAgICB0aGlzLmV4Y2x1ZGVGaWxlVHlwZSA9IHRoaXMuZXhjbHVkZUZpbGVUeXBlSW5wO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iLCI8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgbmdiRHJvcGRvd24+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgbmdiRHJvcGRvd25Ub2dnbGUgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5IG1zLTIgZHJvcGRvd25BZnRlclwiIG1hdFJpcHBsZVxuICAgICAgICBbbWF0UmlwcGxlQ2VudGVyZWRdPVwibWF0ZXJpYWxDb25zdGFudC5NQVRfUklQUExFX0NFTlRFUlwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZS0yXCI+XG4gICAgICAgICAgICAgICAgRXhwb3J0IGFzXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQgaWNvblNpemVcIj5cbiAgICAgICAgICAgICAgICBhcnJvd19kcm9wX2Rvd25cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9idXR0b24+XG5cbiAgICA8ZGl2IG5nYkRyb3Bkb3duTWVudT5cbiAgICAgICAgPGJ1dHRvbiAqbmdGb3I9XCJsZXQgdHlwZSBvZiBsaXN0Q29uc3RhbnQuRE9XTkxPQURfVFlQRVwiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIFtoaWRkZW5dPVwiZXhjbHVkZUZpbGVUeXBlID09IHR5cGUudmFsdWVcIlxuICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2hhbmdlKHR5cGUudmFsdWUpXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBtZS0yIGZzLTVcIiBbbmdTd2l0Y2hdPVwidHlwZS52YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdTd2l0Y2hDYXNlPVwiZmlsZVR5cGVFbnVtLlBERlwiIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBwZGZDb2xvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgcGljdHVyZV9hc19wZGZcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdTd2l0Y2hDYXNlPVwiZmlsZVR5cGVFbnVtLkNTVlwiIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBjc3ZYbHN4Q29sb3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzdlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ1N3aXRjaENhc2U9XCJmaWxlVHlwZUVudW0uWExTWFwiIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBjc3ZYbHN4Q29sb3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgIHt7IHR5cGUubGFiZWwgfX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG48L2Rpdj4iXX0=