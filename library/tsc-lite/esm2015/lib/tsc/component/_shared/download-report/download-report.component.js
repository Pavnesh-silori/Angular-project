import { Component, EventEmitter, Output } from '@angular/core';
import { LIST_CONSTANT } from '../../../constant/list.constant';
// tsc-library
import { FileTypeEnum, MATERIAL_CONSTANT } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@ng-bootstrap/ng-bootstrap";
import * as i2 from "@angular/material/core";
import * as i3 from "@angular/common";
// /tsc-library/
export class DownloadReportComponent {
    constructor() {
        this.listConstant = LIST_CONSTANT;
        this.materialConstant = MATERIAL_CONSTANT;
        this.fileTypeEnum = FileTypeEnum;
        this.fileTypeEmitted = new EventEmitter();
    }
    ngOnInit() {
    }
    onChange(selectedType) {
        this.fileTypeEmitted.emit(selectedType);
    }
}
DownloadReportComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DownloadReportComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DownloadReportComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DownloadReportComponent, selector: "lib-download-report", outputs: { fileTypeEmitted: "fileTypeEmitted" }, ngImport: i0, template: "<div class=\"btn-group\" ngbDropdown>\n    <button type=\"button\" ngbDropdownToggle class=\"btn btn-sm btn-primary ms-2 dropdownAfter\" matRipple\n        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n        <div class=\"d-flex align-items-center\">\n            <span class=\"me-2\">\n                Export as\n            </span>\n            <span class=\"material-symbols-outlined iconSize\">\n                arrow_drop_down\n            </span>\n        </div>\n    </button>\n    <div ngbDropdownMenu>\n        <button *ngFor=\"let type of listConstant.DOWNLOAD_TYPE\" class=\"dropdown-item\"\n            (click)=\"onChange(type.value)\">\n            <div class=\"d-flex align-items-center\">\n                <span class=\"material-symbols-outlined me-2 fs-5\" [ngSwitch]=\"type.value\">\n                    <span *ngSwitchCase=\"fileTypeEnum.PDF\" class=\"material-symbols-outlined pdfColor\">\n                        picture_as_pdf\n                    </span>\n                    <span *ngSwitchCase=\"fileTypeEnum.CSV\" class=\"material-symbols-outlined csvXlsxColor\">\n                        csv\n                    </span>\n                    <span *ngSwitchCase=\"fileTypeEnum.XLSX\" class=\"material-symbols-outlined csvXlsxColor\">\n                        description\n                    </span>\n                </span>\n                <span>\n                    {{ type.label }}\n                </span>\n            </div>\n        </button>\n    </div>\n</div>", styles: [".funnelFilterDD{width:0;height:0;overflow:hidden}.pdfColor{color:#dc3545}.csvXlsxColor{color:#1d712b}.iconSize{font-size:18px}\n"], directives: [{ type: i1.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i1.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i1.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DownloadReportComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-download-report',
                    templateUrl: './download-report.component.html',
                    styleUrls: ['./download-report.component.scss']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { fileTypeEmitted: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtcmVwb3J0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L19zaGFyZWQvZG93bmxvYWQtcmVwb3J0L2Rvd25sb2FkLXJlcG9ydC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9fc2hhcmVkL2Rvd25sb2FkLXJlcG9ydC9kb3dubG9hZC1yZXBvcnQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVoRSxjQUFjO0FBQ2QsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7OztBQUN0RSxnQkFBZ0I7QUFPaEIsTUFBTSxPQUFPLHVCQUF1QjtJQVNoQztRQVBBLGlCQUFZLEdBQUcsYUFBYSxDQUFDO1FBQzdCLHFCQUFnQixHQUFHLGlCQUFpQixDQUFDO1FBQ3JDLGlCQUFZLEdBQUcsWUFBWSxDQUFDO1FBRzVCLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUU3QixDQUFDO0lBRWpCLFFBQVE7SUFDUixDQUFDO0lBRUQsUUFBUSxDQUFDLFlBQVk7UUFDakIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7cUhBaEJRLHVCQUF1Qjt5R0FBdkIsdUJBQXVCLDRHQ2JwQywwK0NBaUNNOzRGRHBCTyx1QkFBdUI7a0JBTG5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsV0FBVyxFQUFFLGtDQUFrQztvQkFDL0MsU0FBUyxFQUFFLENBQUMsa0NBQWtDLENBQUM7aUJBQ2xEOzBFQVFHLGVBQWU7c0JBRGQsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBMSVNUX0NPTlNUQU5UIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnQvbGlzdC5jb25zdGFudCc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBGaWxlVHlwZUVudW0sIE1BVEVSSUFMX0NPTlNUQU5UIH0gZnJvbSAnQGxpYnJhcnkvdHNjLWNvbW1vbic7XG4vLyAvdHNjLWxpYnJhcnkvXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbGliLWRvd25sb2FkLXJlcG9ydCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Rvd25sb2FkLXJlcG9ydC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZG93bmxvYWQtcmVwb3J0LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRG93bmxvYWRSZXBvcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgbGlzdENvbnN0YW50ID0gTElTVF9DT05TVEFOVDtcbiAgICBtYXRlcmlhbENvbnN0YW50ID0gTUFURVJJQUxfQ09OU1RBTlQ7XG4gICAgZmlsZVR5cGVFbnVtID0gRmlsZVR5cGVFbnVtO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZmlsZVR5cGVFbWl0dGVkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgfVxuXG4gICAgb25DaGFuZ2Uoc2VsZWN0ZWRUeXBlKSB7XG4gICAgICAgIHRoaXMuZmlsZVR5cGVFbWl0dGVkLmVtaXQoc2VsZWN0ZWRUeXBlKTtcbiAgICB9XG5cbn1cbiIsIjxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiBuZ2JEcm9wZG93bj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBuZ2JEcm9wZG93blRvZ2dsZSBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnkgbXMtMiBkcm9wZG93bkFmdGVyXCIgbWF0UmlwcGxlXG4gICAgICAgIFttYXRSaXBwbGVDZW50ZXJlZF09XCJtYXRlcmlhbENvbnN0YW50Lk1BVF9SSVBQTEVfQ0VOVEVSXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1lLTJcIj5cbiAgICAgICAgICAgICAgICBFeHBvcnQgYXNcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBpY29uU2l6ZVwiPlxuICAgICAgICAgICAgICAgIGFycm93X2Ryb3BfZG93blxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2J1dHRvbj5cbiAgICA8ZGl2IG5nYkRyb3Bkb3duTWVudT5cbiAgICAgICAgPGJ1dHRvbiAqbmdGb3I9XCJsZXQgdHlwZSBvZiBsaXN0Q29uc3RhbnQuRE9XTkxPQURfVFlQRVwiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiXG4gICAgICAgICAgICAoY2xpY2spPVwib25DaGFuZ2UodHlwZS52YWx1ZSlcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIG1lLTIgZnMtNVwiIFtuZ1N3aXRjaF09XCJ0eXBlLnZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ1N3aXRjaENhc2U9XCJmaWxlVHlwZUVudW0uUERGXCIgY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIHBkZkNvbG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBwaWN0dXJlX2FzX3BkZlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ1N3aXRjaENhc2U9XCJmaWxlVHlwZUVudW0uQ1NWXCIgY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIGNzdlhsc3hDb2xvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgY3N2XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nU3dpdGNoQ2FzZT1cImZpbGVUeXBlRW51bS5YTFNYXCIgY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIGNzdlhsc3hDb2xvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAge3sgdHlwZS5sYWJlbCB9fVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbjwvZGl2PiJdfQ==