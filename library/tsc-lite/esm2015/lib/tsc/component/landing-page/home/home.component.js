import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { DeviceInfo } from '../../../model/device.model';
import { EntityLevelConsumption } from '../../../model/entity.model';
import { AggregateDataRequest } from '../../../model/aggregate-data.model';
// tsc-library
import { DateTimeIntervalEnum } from '@library/date';
import { COMMON_CONSTANT } from '@library/tsc-common';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@library/date";
import * as i3 from "@library/tsc-common";
import * as i4 from "../../../service/aggregate-data.service";
import * as i5 from "../../../controller/entity.controller";
import * as i6 from "../../../controller/device.controller";
import * as i7 from "@angular/material/card";
import * as i8 from "ng-circle-progress";
import * as i9 from "@angular/common";
// /tsc-library/
export class HomeComponent {
    constructor(storageService, dateService, tscCommonService, aggregateDataService, entityController, deviceController) {
        this.storageService = storageService;
        this.dateService = dateService;
        this.tscCommonService = tscCommonService;
        this.aggregateDataService = aggregateDataService;
        this.entityController = entityController;
        this.deviceController = deviceController;
        this.commonConstant = COMMON_CONSTANT;
        this.entityConsumption = [new EntityLevelConsumption()];
        this.deviceInfoM = new DeviceInfo();
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        if (this.applicationKeyID == ApplicationKeyID.ENERGY_KEY_ID) {
            this.label = "Energy";
            this.icon = "bolt";
            this.paramKey = "engEnergyUsed";
            this.outerStrokeColor = "#fa9200";
            this.outerStrokeGradientStopColor = "#fdd130";
            this.innerStrokeColor = "#fbe2a6";
        }
        else if (this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID) {
            this.label = "Water";
            this.icon = "water_drop";
            this.paramKey = "gwFlowTotalizer";
            this.outerStrokeColor = "#4882c2";
            this.outerStrokeGradientStopColor = "#53a9ff";
            this.innerStrokeColor = "#dbe7ff";
        }
        this.getTotalConsumption(DateTimeIntervalEnum.CURRENT_DAY)
            .then(app => {
            this.todayConsumption = app;
        });
        this.getTotalConsumption(DateTimeIntervalEnum.CURRENT_MONTH)
            .then(app => {
            var _a, _b, _c, _d, _e, _f;
            this.currentMonthConsumption = app;
            const totalConsumptionValue = (_d = (_c = (_b = (_a = this.currentMonthConsumption) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b['data']) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d['value'];
            this.totalConsumptionCircleData = {
                percent: this.tscCommonService.formatLargeNumber(totalConsumptionValue, 'false', 1),
                maxPercent: 999999999,
                units: (_f = (_e = this.currentMonthConsumption) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.unit,
                showUnits: true,
                radius: 75,
                space: 4,
                outerStrokeGradient: true,
                outerStrokeWidth: 10,
                outerStrokeColor: this.outerStrokeColor,
                outerStrokeGradientStopColor: this.outerStrokeGradientStopColor,
                innerStrokeColor: this.innerStrokeColor,
                showBackground: false,
                innerStrokeWidth: 5,
                showSubtitle: false,
                subtitleFormat: false,
                startFromZero: false,
                animationDuration: 500,
                backgroundColor: '#ffffff',
            };
        });
        this.getTotalConsumption(DateTimeIntervalEnum.CURRENT_YEAR)
            .then(app => {
            this.currentYearConsumption = app;
        });
        this.getTotalEntitiesConsumption();
        this.getEntityLevelConsumption();
        this.getDeviceInfo();
    }
    getTotalConsumption(selectedRange) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const requestData = new AggregateDataRequest();
                if (selectedRange == DateTimeIntervalEnum.CURRENT_DAY) {
                    requestData.startTime = this.dateService.getStartDateTime(DateTimeIntervalEnum.CURRENT_DAY);
                    requestData.interval = 'day_1';
                }
                else if (selectedRange == DateTimeIntervalEnum.CURRENT_MONTH) {
                    requestData.startTime = this.dateService.getStartDateTime(DateTimeIntervalEnum.CURRENT_MONTH);
                    requestData.interval = 'month_1';
                }
                else if (selectedRange == DateTimeIntervalEnum.CURRENT_YEAR) {
                    requestData.startTime = this.dateService.getStartDateTime(DateTimeIntervalEnum.CURRENT_YEAR);
                    requestData.interval = 'year_1';
                }
                requestData.endTime = this.dateService.getEndDateTime(DateTimeIntervalEnum.CURRENT_TIME);
                requestData.params = [
                    {
                        name: this.paramKey,
                        dsAgg: "sum",
                        agg: "sum",
                        source_or_load: "source",
                        sourceLoadType: "all"
                    }
                ];
                requestData.nullifyParams();
                requestData.groupAll = true;
                const result = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                return result;
            }
            catch (error) {
                console.error(`Error in getTotalConsumption for (${selectedRange})`, error);
            }
        });
    }
    getTotalEntitiesConsumption() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let requestData = new AggregateDataRequest();
                requestData.startTime = this.dateService.getStartDateTime(DateTimeIntervalEnum.CURRENT_MONTH);
                requestData.endTime = this.dateService.getEndDateTime(DateTimeIntervalEnum.CURRENT_TIME);
                requestData.interval = "month_1";
                requestData.params = [
                    {
                        name: this.paramKey,
                        dsAgg: "sum",
                        agg: "sum",
                        source_or_load: "load",
                        sourceLoadType: "all"
                    }
                ];
                requestData.nullifyParams();
                requestData.groupAll = true;
                const totalEntitiesConsumData = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                const consumptionBreakupValue = (_c = (_b = (_a = totalEntitiesConsumData === null || totalEntitiesConsumData === void 0 ? void 0 : totalEntitiesConsumData[0]) === null || _a === void 0 ? void 0 : _a['data']) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c['value'];
                this.consumptionBreakupCircleData = {
                    percent: this.tscCommonService.formatLargeNumber(consumptionBreakupValue, 'false', 1),
                    maxPercent: 999999999,
                    units: (_d = totalEntitiesConsumData === null || totalEntitiesConsumData === void 0 ? void 0 : totalEntitiesConsumData[0]) === null || _d === void 0 ? void 0 : _d.unit,
                    showUnits: true,
                    radius: 75,
                    space: 4,
                    outerStrokeGradient: true,
                    outerStrokeWidth: 10,
                    outerStrokeColor: this.outerStrokeColor,
                    outerStrokeGradientStopColor: this.outerStrokeGradientStopColor,
                    innerStrokeColor: this.innerStrokeColor,
                    showBackground: false,
                    innerStrokeWidth: 5,
                    showSubtitle: false,
                    subtitleFormat: false,
                    startFromZero: false,
                    animationDuration: 500,
                    backgroundColor: '#ffffff',
                };
            }
            catch (error) {
                console.error(`Error in getTotalEntitiesConsumption()`, error);
            }
        });
    }
    getEntityLevelConsumption() {
        let requestData = new AggregateDataRequest();
        requestData.startTime = this.dateService.getStartDateTime(DateTimeIntervalEnum.CURRENT_MONTH);
        requestData.endTime = this.dateService.getEndDateTime(DateTimeIntervalEnum.CURRENT_TIME);
        requestData.interval = "month_1";
        requestData.params = [
            {
                name: this.paramKey,
                dsAgg: "sum",
                agg: "sum",
                source_or_load: "load",
                sourceLoadType: "all"
            }
        ];
        requestData.nullifyParams();
        requestData.groupAll = false;
        this.entityController.getEntityLevelConsumption(this.orgID, requestData)
            .subscribe((entityConsumRes) => {
            this.entityConsumption = entityConsumRes;
        }, error => {
            console.log('error in getEntityLevelConsumption() -', error);
        });
    }
    highestConsumptionEntity() {
        var _a, _b, _c;
        if (((_a = this.entityConsumption) === null || _a === void 0 ? void 0 : _a.length) == 0) {
            return null;
        }
        return (_b = this.entityConsumption) === null || _b === void 0 ? void 0 : _b.reduce((maxEntity, currentEntity) => {
            return currentEntity.value > maxEntity.value ? currentEntity : maxEntity;
        }, (_c = this.entityConsumption) === null || _c === void 0 ? void 0 : _c[0]);
    }
    calculateProgress(entity) {
        const highestConsumption = this.highestConsumptionEntity();
        if (!highestConsumption) {
            return 0;
        }
        const progress = (entity.value / highestConsumption.value) * 100;
        return progress;
    }
    getDeviceInfo() {
        this.deviceController.getDeviceInfo(this.orgID)
            .subscribe((deviceRes) => {
            this.deviceInfoM = deviceRes;
        }, error => {
            console.log('error in getDeviceInfo() -', error);
        });
    }
}
HomeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: HomeComponent, deps: [{ token: i1.StorageService }, { token: i2.DateService }, { token: i3.TSCCommonService }, { token: i4.AggregateDataService }, { token: i5.EntityController }, { token: i6.DeviceController }], target: i0.ɵɵFactoryTarget.Component });
HomeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: HomeComponent, selector: "lib-home", ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Home</div>\n        </div>\n    </div>\n\n    <div class=\"card-body pt-0\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor cardHeight\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <span class=\"cardTitle\">\n                                Total {{ label }} Consumption\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"d-flex align-items-center\">\n                            <div class=\"col-sm-6\">\n                                <span class=\"centerAlign\">\n                                    <circle-progress [options]=\"totalConsumptionCircleData\" [renderOnClick]=\"false\"\n                                        class=\"copy\"></circle-progress>\n                                </span>\n                                <span class=\"centerAlign\">\n                                    This Month\n                                </span>\n                            </div>\n                            <div class=\"col-sm-6 ms-4\">\n                                <div class=\"row\">\n                                    <ng-container *ngTemplateOutlet=\"totalConsumption; context: {\n                                        label: 'Today',\n                                        value: todayConsumption?.[0]?.['data']?.[0]?.['value'],\n                                        unit: todayConsumption?.[0]?.['unit'],\n                                        matCardClass: 'today'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\">\n                                    <ng-container *ngTemplateOutlet=\"totalConsumption; context: {\n                                        label: 'This Month',\n                                        value: currentMonthConsumption?.[0]?.['data']?.[0]?.['value'],\n                                        unit: currentMonthConsumption?.[0]?.['unit'],\n                                        matCardClass: 'month'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\">\n                                    <ng-container *ngTemplateOutlet=\"totalConsumption; context: {\n                                        label: 'This Year',\n                                        value: currentYearConsumption?.[0]?.['data']?.[0]?.['value'],\n                                        unit: currentYearConsumption?.[0]?.['unit'],\n                                        matCardClass: 'year'\n                                    }\"></ng-container>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor cardHeight\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <span class=\"cardTitle\">\n                                {{ label }} Consumption Breakup\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"d-flex align-items-center\">\n                            <div class=\"col-sm-6\">\n                                <span class=\"centerAlign\">\n                                    <circle-progress [options]=\"consumptionBreakupCircleData\" [renderOnClick]=\"false\"\n                                        class=\"copy\"></circle-progress>\n                                </span>\n                                <span class=\"centerAlign\">\n                                    This Month\n                                </span>\n                            </div>\n                            <div class=\"col-sm-6\">\n                                <div class=\"row\" *ngIf=\"entityConsumption?.[0]?.id\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[0].name,\n                                        value: entityConsumption[0].value,\n                                        unit: entityConsumption[0].unit,\n                                        entityObj: entityConsumption[0],\n                                        outerProgressBarClass: 'progress1BGColor',\n                                        innerProgressBarClass: 'progress1Color'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\" *ngIf=\"entityConsumption?.[1]\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[1].name,\n                                        value: entityConsumption[1].value,\n                                        unit: entityConsumption[1].unit,\n                                        entityObj: entityConsumption[1],\n                                        outerProgressBarClass: 'progress2BGColor',\n                                        innerProgressBarClass: 'progress2Color'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\" *ngIf=\"entityConsumption?.[2]\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[2].name,\n                                        value: entityConsumption[2].value,\n                                        unit: entityConsumption[2].unit,\n                                        entityObj: entityConsumption[2],\n                                        outerProgressBarClass: 'progress3BGColor',\n                                        innerProgressBarClass: 'progress3Color'\n                                    }\"></ng-container>\n                                </div>\n                                <div class=\"row mt-4\" *ngIf=\"entityConsumption?.[3]\">\n                                    <ng-container *ngTemplateOutlet=\"entityProgress; context: {\n                                        name: entityConsumption[3].name,\n                                        value: entityConsumption[3].value,\n                                        unit: entityConsumption[3].unit,\n                                        entityObj: entityConsumption[3],\n                                        outerProgressBarClass: 'progress4BGColor',\n                                        innerProgressBarClass: 'progress4Color'\n                                    }\"></ng-container>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </mat-card>\n            </div>\n        </div>\n\n        <div class=\"row mt-4\">\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-info\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Total devices',\n                        count: deviceInfoM.total\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-success\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Online devices',\n                        count: deviceInfoM.online\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-warning\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Delayed devices',\n                        count: deviceInfoM.delay\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n            <div class=\"col-sm-3\">\n                <mat-card class=\"card main-card cardOverwrite card-danger\">\n                    <ng-container *ngTemplateOutlet=\"deviceStatus; context: {\n                        label: 'Offline devices',\n                        count: deviceInfoM.offline\n                    }\"></ng-container>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #totalConsumption let-label=\"label\" let-value=\"value\" let-unit=\"unit\" let-matCardClass=\"matCardClass\"\n    let-outerProgressBarClass=\"outerProgressBarClass\" let-innerProgressBarClass=\"innerProgressBarClass\">\n    <div class=\"col-sm-12\">\n        <div class=\"d-flex align-items-center\">\n            <mat-card class=\"card main-card square d-flex justify-content-center me-2\" [class]=\"matCardClass\">\n                <span class=\"material-symbols-outlined\">\n                    {{ icon }}\n                </span>\n            </mat-card>\n            <div class=\"row\">\n                <span>{{ label }}</span><br />\n                <span class=\"text-primary fw-bold\">{{ value ? value : commonConstant.HYPHEN }} <span\n                        class=\"unitSize\">{{ value ? unit : '' }}</span></span>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #entityProgress let-name=\"name\" let-value=\"value\" let-unit=\"unit\" let-entityObj=\"entityObj\"\n    let-outerProgressBarClass=\"outerProgressBarClass\" let-innerProgressBarClass=\"innerProgressBarClass\">\n    <div class=\"col-sm-12\">\n        <span>\n            {{ name }}\n        </span>\n        <span class=\"float-end text-primary fw-bold\"> {{ value ? value : commonConstant.HYPHEN }}\n            <span class=\"unitSize\"> {{ value ? unit : '' }} </span>\n        </span>\n        <div class=\"progress progressBarRadius\" [class]=\"outerProgressBarClass\">\n            <div class=\"progress-bar progressBarRadius\" [class]=\"innerProgressBarClass\" role=\"progressbar\"\n                [style.width.%]=\"calculateProgress(entityObj)\"></div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #deviceStatus let-label=\"label\" let-count=\"count\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <span class=\"material-symbols-outlined\">\n                devices\n            </span>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-sm-12 fs-1 fw-bold centerAlign\">\n            {{ count != undefined && count != null ? count : commonConstant.HYPHEN }}\n        </div>\n    </div>\n    <div class=\"row mt-1\">\n        <div class=\"col-sm-12 fs-5 centerAlign\">\n            {{ label }}\n        </div>\n    </div>\n</ng-template>", styles: [".cardHeight{height:280px}.square{box-shadow:none!important;border-radius:6px!important;height:50px;width:50px}.unitSize{font-size:.66rem}.today{background-color:#f9dedc;color:#fa7d74}.month{background-color:#c2e7ff;color:#21a1f7}.year{background-color:#c4eed0;color:#04942d}.progressBarRadius{border-radius:16px!important}.progress1BGColor{background-color:#f9dedc}.progress2BGColor{background-color:#c2e7ff}.progress3BGColor{background-color:#fff0d1}.progress4BGColor{background-color:#c4eed0}.progress1Color{background-color:#fa7d74}.progress2Color{background-color:#21a1f7}.progress3Color{background-color:#ffbb29}.progress4Color{background-color:#04942d}.card-info{background-color:#cfe2ff;color:#084298}.card-success{background-color:#c3f1d9;color:#058844}.card-warning{background-color:#fff3cd;color:#664d03}.card-danger{background-color:#f8d7da;color:#842029}\n"], components: [{ type: i7.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i8.CircleProgressComponent, selector: "circle-progress", inputs: ["name", "class", "backgroundGradient", "backgroundColor", "backgroundGradientStopColor", "backgroundOpacity", "backgroundStroke", "backgroundStrokeWidth", "backgroundPadding", "radius", "space", "percent", "toFixed", "maxPercent", "renderOnClick", "units", "unitsFontSize", "unitsFontWeight", "unitsColor", "outerStrokeGradient", "outerStrokeWidth", "outerStrokeColor", "outerStrokeGradientStopColor", "outerStrokeLinecap", "innerStrokeColor", "innerStrokeWidth", "titleFormat", "title", "titleColor", "titleFontSize", "titleFontWeight", "subtitleFormat", "subtitle", "subtitleColor", "subtitleFontSize", "subtitleFontWeight", "imageSrc", "imageHeight", "imageWidth", "animation", "animateTitle", "animateSubtitle", "animationDuration", "showTitle", "showSubtitle", "showUnits", "showImage", "showBackground", "showInnerStroke", "clockwise", "responsive", "startFromZero", "showZeroOuterStroke", "lazy", "options"], outputs: ["onClick"] }], directives: [{ type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: HomeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-home',
                    templateUrl: './home.component.html',
                    styleUrls: ['./home.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.DateService }, { type: i3.TSCCommonService }, { type: i4.AggregateDataService }, { type: i5.EntityController }, { type: i6.DeviceController }]; } });
//# sourceMappingURL=data:application/json;base64,