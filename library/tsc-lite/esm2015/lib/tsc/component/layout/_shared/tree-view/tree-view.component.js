import { Component, EventEmitter, Input, Output } from '@angular/core';
import { EntityTree } from '../../../../model/entity.model';
import { CreateUpdateEntityComponent } from '../../_dialog/create-update/entity/entity.component';
import { DeviceMappingComponent } from '../../_dialog/device-mapping/device-mapping.component';
import { ButtonLabelEnum, DialogEnum, DialogOneComponent, DialogOneEnum, FormAction } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "../../../../controller/entity.controller";
import * as i3 from "@library/toastr-service";
import * as i4 from "@angular/material/dialog";
import * as i5 from "@angular/material/expansion";
import * as i6 from "@angular/common";
import * as i7 from "@angular/material/tooltip";
// /tsc-library/
export class CreateUpdateTreeViewComponent {
    constructor(storageService, entityController, toastrService, dialog) {
        this.storageService = storageService;
        this.entityController = entityController;
        this.toastrService = toastrService;
        this.dialog = dialog;
        this.formActionEnum = FormAction;
        this.emitFilter = new EventEmitter();
        this.entities = [new EntityTree()];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.getEntitiesForTreeView();
    }
    ngOnChanges(changes) {
        this.getEntitiesForTreeView();
    }
    getEntitiesForTreeView() {
        this.entityController.getEntitiesForTreeView(this.orgID, this.layoutID)
            .subscribe((entityTreeRes) => {
            this.entities = entityTreeRes;
        }, error => {
            console.log('error in getEntitiesForTreeView() -', error);
        });
    }
    hasContent(entity) {
        return entity && entity.children && entity.children.length > 0;
    }
    openChildDialog(entityID, action) {
        const dialog = this.dialog.open(CreateUpdateEntityComponent, {
            data: {
                action: action,
                entityID: entityID,
                layoutID: this.layoutID,
            },
            minWidth: '500px',
            maxWidth: '500px',
        });
        dialog.afterClosed()
            .subscribe((result) => {
            if (result == DialogEnum.SUCCESS_DR) {
                this.getEntitiesForTreeView();
            }
        });
    }
    mapDevices(entityID) {
        const dialog = this.dialog.open(DeviceMappingComponent, {
            data: {
                entityID: entityID,
                layoutID: this.layoutID,
            },
            minWidth: '80vw',
            maxWidth: '80vw',
            height: '100%',
            position: { right: '-2px', top: '0px' },
        });
        dialog.afterClosed()
            .subscribe((result) => {
            if (result == DialogEnum.SUCCESS_DR) {
                this.getEntitiesForTreeView();
            }
        });
    }
    openDeleteEntityDialog(entityID, entityName) {
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '450px',
            data: {
                type: DialogOneEnum.DELETE,
                icon: 'dangerous',
                header: 'Delete entity?',
                body: 'This will delete all children entities of <b>' + entityName + '</b>.</br></br>Are you sure you want to continue?',
                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            if (res) {
                this.deleteEntity(entityID);
            }
        });
    }
    deleteEntity(entityID) {
        this.entityController.deleteEntity(this.orgID, this.layoutID, entityID).subscribe((deleteRes) => {
            this.getEntitiesForTreeView();
        });
    }
}
CreateUpdateTreeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateTreeViewComponent, deps: [{ token: i1.StorageService }, { token: i2.EntityController }, { token: i3.ToastrService }, { token: i4.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
CreateUpdateTreeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreateUpdateTreeViewComponent, selector: "lib-tree-view", inputs: { permissionType: "permissionType", allowUpdateOnClick: "allowUpdateOnClick", layoutID: "layoutID" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0, template: "<!-- template call for entityTemplate -->\n<mat-accordion>\n    <ng-container *ngFor=\"let entity of entities\">\n        <ng-container *ngTemplateOutlet=\"entityTemplate; \n            context: {\n                entity: entity,\n                panelTitleClass: 'fw-bold',\n                expansionPanelClass : 'cardBackgroundColor',\n                expanded: hasContent(entity),\n                allowUpdateDelete: false\n            }\">\n        </ng-container>\n    </ng-container>\n</mat-accordion>\n<!-- /template call for entityTemplate/ -->\n\n\n<!-- template for recursive entity -->\n<ng-template #entityTemplate let-entity=\"entity\" let-panelTitleClass=\"panelTitleClass\"\n    let-expansionPanelClass=\"expansionPanelClass\" let-expanded=\"expanded\" let-allowUpdateDelete=\"allowUpdateDelete\">\n    <mat-expansion-panel class=\"mt-2 cardOverwrite\" [class]=\"expansionPanelClass\" [expanded]=\"expanded\"\n        [disabled]=\"!hasContent(entity)\" [hideToggle]=\"!hasContent(entity)\">\n\n        <mat-expansion-panel-header class=\"matAccRightAlignedHeader\">\n            <mat-panel-title>\n                <div class=\"d-flex align-items-center\">\n                    <span [class]=\"panelTitleClass\">\n                        {{ entity.name }}\n                    </span> <span class=\"badge rounded-pill bg-info ms-2\">\n                        {{ entity.type }}\n                    </span>\n                </div>\n            </mat-panel-title>\n            <mat-panel-description class=\"float-end\" *ngIf=\"allowUpdateOnClick\">\n                <span class=\"material-symbols-outlined text-primary me-3\" #tooltip=\"matTooltip\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Add child\"\n                    (click)=\"openChildDialog(entity.id, 'create'); $event.stopPropagation()\">\n                    add_circle\n                </span>\n                <span class=\"material-symbols-outlined text-primary me-3\" #tooltip=\"matTooltip\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Device mapping\"\n                    (click)=\"mapDevices(entity.id); $event.stopPropagation()\">\n                    devices\n                </span>\n                <span class=\"material-symbols-outlined text-secondary me-3\" *ngIf=\"allowUpdateDelete\" #tooltip=\"matTooltip\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Edit child\"\n                    (click)=\"openChildDialog(entity.id, 'update'); $event.stopPropagation()\">\n                    edit_square\n                </span>\n                <span class=\"material-symbols-outlined text-danger me-3\" *ngIf=\"allowUpdateDelete\" #tooltip=\"matTooltip\"\n                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Delete\"\n                    (click)=\"openDeleteEntityDialog(entity.id, entity.name); $event.stopPropagation()\">\n                    delete\n                </span>\n            </mat-panel-description>\n        </mat-expansion-panel-header>\n\n        <ng-container *ngIf=\"entity.children && entity.children.length > 0\">\n            <ng-container *ngFor=\"let child of entity.children\">\n                <ng-container *ngTemplateOutlet=\"entityTemplate; \n                    context:{ \n                        entity: child,\n                        panelTitleClass: 'text-dark',\n                        expansionPanelClass : 'border',\n                        expanded: 'false',\n                        allowUpdateDelete: true\n                    }\">\n                </ng-container>\n            </ng-container>\n        </ng-container>\n\n    </mat-expansion-panel>\n</ng-template>\n<!-- /template for recursive entity/ -->", components: [{ type: i5.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i5.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }], directives: [{ type: i5.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.MatExpansionPanelDescription, selector: "mat-panel-description" }, { type: i7.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateTreeViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-tree-view',
                    templateUrl: './tree-view.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.EntityController }, { type: i3.ToastrService }, { type: i4.MatDialog }]; }, propDecorators: { permissionType: [{
                type: Input
            }], allowUpdateOnClick: [{
                type: Input
            }], layoutID: [{
                type: Input
            }], emitFilter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,