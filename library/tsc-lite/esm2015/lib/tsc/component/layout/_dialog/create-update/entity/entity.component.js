import { __awaiter } from "tslib";
import { Component, Inject } from '@angular/core';
import { Validators } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { isEqual } from 'lodash';
import { EntityType } from '../../../../../model/entity.model';
// tsc-library
import { InvalidForm, MatSelectSearchService, MaterialFormFieldAppearance, ButtonLabelEnum, DialogEnum, FormErrorEnum } from '@library/tsc-common';
import { ToastrColor } from '@library/toastr-service';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@library/toastr-service";
import * as i3 from "../../../../../service/entity.service";
import * as i4 from "../../../../../controller/entity.controller";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/material/dialog";
import * as i7 from "@angular/material/button";
import * as i8 from "@angular/material/form-field";
import * as i9 from "@angular/material/select";
import * as i10 from "@angular/material/core";
import * as i11 from "ngx-mat-select-search";
import * as i12 from "@angular/material/tooltip";
import * as i13 from "@angular/material/input";
import * as i14 from "@angular/common";
// /tsc-library/
export class CreateUpdateEntityComponent {
    constructor(storageService, toastService, entityService, entityController, entityFB, dialogRef, data) {
        this.storageService = storageService;
        this.toastService = toastService;
        this.entityService = entityService;
        this.entityController = entityController;
        this.entityFB = entityFB;
        this.dialogRef = dialogRef;
        this.data = data;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.DialogEnum = DialogEnum;
        this.FormErrorEnum = FormErrorEnum;
        this.title = 'Create';
        this.action = 'create';
        this.isNewEntityTypeSelected = false;
        this.isEqual = false;
        this.entityTypeM = [new EntityType()];
        this.entityTypeSearchUtil = new MatSelectSearchService(['type']);
        this.errorHandling = (control, error) => {
            return this.entityFG.controls[control].hasError(error);
        };
        this.action = data['action'];
        this.entityID = data['entityID'];
        this.layoutID = data['layoutID'];
        this.dialogRef.disableClose = true;
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.getEntityType();
        this.entityFGInit();
        if (this.action == 'update') {
            this.title = 'Update';
            this.getEntityByID();
        }
        this.entityFG.valueChanges.subscribe(() => { this.isEqual = isEqual(this.initialObject, this.entityFG.getRawValue()); });
    }
    getEntityType() {
        return __awaiter(this, void 0, void 0, function* () {
            this.entityTypeM = (yield this.entityService.getEntityTypeByLayoutID(this.orgID, 'NO'));
            this.entityTypeSearchUtil.entityArr = this.entityTypeM;
            this.entityTypeSearchUtil.createSubscription();
        });
    }
    entityFGInit() {
        this.entityFG = this.entityFB.group({
            name: ['', Validators.required],
            type: ['', Validators.required]
        });
    }
    createNewType() {
        this.isNewEntityTypeSelected = true;
        this.entityFG.get('type').reset();
    }
    getEntityByID() {
        this.entityController.getEntityByID(this.orgID, this.layoutID, this.entityID).subscribe((entityRes) => {
            this.entityM = entityRes;
            this.patchEntity(this.entityM);
        });
    }
    patchEntity(entity) {
        this.entityFG.patchValue({
            name: entity['name'],
            type: entity['type']
        });
        this.isEqual = true;
    }
    addEntity() {
        if (this.entityFG.invalid) {
            this.entityFG.markAllAsTouched();
            this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        this.entityController.createEntity(this.orgID, this.layoutID, this.entityID, this.entityFG.value)
            .subscribe((addEntityRes) => {
            this.dialogRef.close(DialogEnum.SUCCESS_DR);
        }, error => {
            console.log('error in addEntity - ', error);
        });
    }
    updateEntity() {
        if (this.entityFG.invalid) {
            this.entityFG.markAllAsTouched();
            this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        this.entityController.updateEntity(this.orgID, this.layoutID, this.entityID, this.entityFG.value)
            .subscribe((addEntityRes) => {
            this.dialogRef.close(DialogEnum.SUCCESS_DR);
        }, error => {
            console.log('error in updateEntity - ', error);
        });
    }
}
CreateUpdateEntityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateEntityComponent, deps: [{ token: i1.StorageService }, { token: i2.ToastrService }, { token: i3.EntityService }, { token: i4.EntityController }, { token: i5.FormBuilder }, { token: i6.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
CreateUpdateEntityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreateUpdateEntityComponent, selector: "lib-entity", ngImport: i0, template: "<div mat-dialog-title>\n    <strong class=\"dialogTitle\">\n        {{ title }} Entity\n    </strong>\n    <button mat-icon-button mat-dialog-close cdkFocusInitial class=\"float-end matDialogClose\" matTooltip=\"Close\"\n        matTooltipPosition=\"before\">\n        <span class=\"material-symbols-outlined\" [mat-dialog-close]=\"DialogEnum.CLOSE_DR\">\n            close\n        </span>\n    </button>\n</div>\n\n<div class=\"matDialogContent\" mat-dialog-content>\n    <form [formGroup]=\"entityFG\">\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Name</mat-label>\n                    <input matInput placeholder=\"Name\" type=\"text\" formControlName=\"name\" required />\n                    <mat-error *ngIf=\"errorHandling('name', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-6\" *ngIf=\"!isNewEntityTypeSelected\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select type</mat-label>\n                    <mat-select formControlName=\"type\" required>\n                        <mat-option>\n                            <ngx-mat-select-search [formControl]=\"entityTypeSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                                noEntriesFoundLabel=\"No matching type found.\">\n                            </ngx-mat-select-search>\n                        </mat-option>\n                        <mat-option *ngFor=\"let entity of entityTypeSearchUtil.filteredEntities | async\" [value]=\"entity.type\">\n                            {{ entity.type }}\n                        </mat-option>\n\n                        <div class=\"row m-0 stickyDropdownMenuItem\">\n                            <div class=\"col-sm-12 text-primary cursorPointer\" (click)=\"createNewType()\">\n                                Create new type\n                            </div>\n                        </div>\n                    </mat-select>\n                    <mat-error *ngIf=\"errorHandling('type', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-6\" *ngIf=\"isNewEntityTypeSelected\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Type</mat-label>\n                    <input matInput placeholder=\"Type\" type=\"text\" formControlName=\"type\" required />\n                    <mat-error *ngIf=\"errorHandling('type', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n\n                <span class=\"mt-2 text-primary cursorPointer\" (click)=\"isNewEntityTypeSelected = false\">\n                    <small>Select type *</small>\n                </span>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div mat-dialog-footer align=\"end\">\n    <div [ngSwitch]=\"action\" class=\"d-inline\">\n        <button *ngSwitchCase=\"'create'\" type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"addEntity()\">\n            {{ ButtonLabelEnum.CREATE_BTN_LABEL }}\n        </button>\n        <button *ngSwitchCase=\"'update'\" type=\"button\" class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled': isEqual}\"\n            (click)=\"updateEntity()\">\n            {{ ButtonLabelEnum.UPDATE_BTN_LABEL }}\n        </button>\n        <button *ngSwitchDefault class=\"d-none\"></button>\n    </div>\n</div>", components: [{ type: i7.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i8.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i9.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i11.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i6.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i6.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i12.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i6.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.MatLabel, selector: "mat-label" }, { type: i13.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.MatError, selector: "mat-error", inputs: ["id"] }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i14.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i14.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateEntityComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-entity',
                    templateUrl: './entity.component.html',
                    styleUrls: []
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.ToastrService }, { type: i3.EntityService }, { type: i4.EntityController }, { type: i5.FormBuilder }, { type: i6.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L2xheW91dC9fZGlhbG9nL2NyZWF0ZS11cGRhdGUvZW50aXR5L2VudGl0eS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9sYXlvdXQvX2RpYWxvZy9jcmVhdGUtdXBkYXRlL2VudGl0eS9lbnRpdHkuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRTFELE9BQU8sRUFBMEIsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEUsT0FBTyxFQUFnQixlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV6RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE9BQU8sRUFBVSxVQUFVLEVBQWUsTUFBTSxtQ0FBbUMsQ0FBQztBQU1wRixjQUFjO0FBQ2QsT0FBTyxFQUFFLFdBQVcsRUFBYSxzQkFBc0IsRUFBRSwyQkFBMkIsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlKLE9BQU8sRUFBaUIsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDckUsZ0JBQWdCO0FBT2hCLE1BQU0sT0FBTywyQkFBMkI7SUF1QnBDLFlBQ1ksY0FBOEIsRUFDOUIsWUFBMkIsRUFDM0IsYUFBNEIsRUFDNUIsZ0JBQWtDLEVBQ2xDLFFBQXFCLEVBQ3RCLFNBQW9ELEVBQzNCLElBQUk7UUFONUIsbUJBQWMsR0FBZCxj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bnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0RGlhbG9nUmVmLCBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgRW50aXR5LCBFbnRpdHlUeXBlLCBFbnRpdHlUeXBlTSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL21vZGVsL2VudGl0eS5tb2RlbCc7XG5cbmltcG9ydCB7IEVudGl0eUNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb250cm9sbGVyL2VudGl0eS5jb250cm9sbGVyJztcblxuaW1wb3J0IHsgRW50aXR5U2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NlcnZpY2UvZW50aXR5LnNlcnZpY2UnO1xuXG4vLyB0c2MtbGlicmFyeVxuaW1wb3J0IHsgSW52YWxpZEZvcm0sIFJlc3BvbnNlTSwgTWF0U2VsZWN0U2VhcmNoU2VydmljZSwgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLCBCdXR0b25MYWJlbEVudW0sIERpYWxvZ0VudW0sIEZvcm1FcnJvckVudW0gfSBmcm9tICdAbGlicmFyeS90c2MtY29tbW9uJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvc3RvcmFnZS1zZXJ2aWNlJztcbmltcG9ydCB7IFRvYXN0clNlcnZpY2UsIFRvYXN0ckNvbG9yIH0gZnJvbSAnQGxpYnJhcnkvdG9hc3RyLXNlcnZpY2UnO1xuLy8gL3RzYy1saWJyYXJ5L1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2xpYi1lbnRpdHknLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9lbnRpdHkuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogW11cbn0pXG5leHBvcnQgY2xhc3MgQ3JlYXRlVXBkYXRlRW50aXR5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSA9IE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZTtcbiAgICBCdXR0b25MYWJlbEVudW0gPSBCdXR0b25MYWJlbEVudW07XG4gICAgRGlhbG9nRW51bSA9IERpYWxvZ0VudW07XG4gICAgRm9ybUVycm9yRW51bSA9IEZvcm1FcnJvckVudW07XG5cbiAgICB0aXRsZTogc3RyaW5nID0gJ0NyZWF0ZSc7XG4gICAgYWN0aW9uOiBzdHJpbmcgPSAnY3JlYXRlJztcblxuICAgIG9yZ0lEOiBhbnk7XG4gICAgbGF5b3V0SUQ6IGFueTtcbiAgICBlbnRpdHlJRDogYW55O1xuICAgIGlzTmV3RW50aXR5VHlwZVNlbGVjdGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgaXNFcXVhbDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGluaXRpYWxPYmplY3Q6IGFueTtcblxuICAgIGVudGl0eU06IEVudGl0eTtcbiAgICBlbnRpdHlUeXBlTSA9IFtuZXcgRW50aXR5VHlwZSgpXTtcblxuICAgIGVudGl0eUZHOiBGb3JtR3JvdXA7XG4gICAgZW50aXR5VHlwZVNlYXJjaFV0aWw6IE1hdFNlbGVjdFNlYXJjaFNlcnZpY2UgPSBuZXcgTWF0U2VsZWN0U2VhcmNoU2VydmljZShbJ3R5cGUnXSk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdG9hc3RTZXJ2aWNlOiBUb2FzdHJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGVudGl0eVNlcnZpY2U6IEVudGl0eVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZW50aXR5Q29udHJvbGxlcjogRW50aXR5Q29udHJvbGxlcixcbiAgICAgICAgcHJpdmF0ZSBlbnRpdHlGQjogRm9ybUJ1aWxkZXIsXG4gICAgICAgIHB1YmxpYyBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxDcmVhdGVVcGRhdGVFbnRpdHlDb21wb25lbnQ+LFxuICAgICAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGFcbiAgICApIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBkYXRhWydhY3Rpb24nXTtcbiAgICAgICAgdGhpcy5lbnRpdHlJRCA9IGRhdGFbJ2VudGl0eUlEJ107XG4gICAgICAgIHRoaXMubGF5b3V0SUQgPSBkYXRhWydsYXlvdXRJRCddXG4gICAgICAgIHRoaXMuZGlhbG9nUmVmLmRpc2FibGVDbG9zZSA9IHRydWU7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JnSUQgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoJ2N1cnJlbnRPcmdJRCcpO1xuXG4gICAgICAgIHRoaXMuZ2V0RW50aXR5VHlwZSgpO1xuICAgICAgICB0aGlzLmVudGl0eUZHSW5pdCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PSAndXBkYXRlJykge1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9ICdVcGRhdGUnO1xuICAgICAgICAgICAgdGhpcy5nZXRFbnRpdHlCeUlEKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbnRpdHlGRy52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHsgdGhpcy5pc0VxdWFsID0gaXNFcXVhbCh0aGlzLmluaXRpYWxPYmplY3QsIHRoaXMuZW50aXR5RkcuZ2V0UmF3VmFsdWUoKSk7IH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEVudGl0eVR5cGUoKSB7XG4gICAgICAgIHRoaXMuZW50aXR5VHlwZU0gPSA8RW50aXR5VHlwZU1bXT5hd2FpdCB0aGlzLmVudGl0eVNlcnZpY2UuZ2V0RW50aXR5VHlwZUJ5TGF5b3V0SUQodGhpcy5vcmdJRCwgJ05PJyk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHlUeXBlU2VhcmNoVXRpbC5lbnRpdHlBcnIgPSB0aGlzLmVudGl0eVR5cGVNO1xuICAgICAgICB0aGlzLmVudGl0eVR5cGVTZWFyY2hVdGlsLmNyZWF0ZVN1YnNjcmlwdGlvbigpO1xuICAgIH1cblxuICAgIGVudGl0eUZHSW5pdCgpIHtcbiAgICAgICAgdGhpcy5lbnRpdHlGRyA9IHRoaXMuZW50aXR5RkIuZ3JvdXAoe1xuICAgICAgICAgICAgbmFtZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgICAgICAgIHR5cGU6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlTmV3VHlwZSgpIHtcbiAgICAgICAgdGhpcy5pc05ld0VudGl0eVR5cGVTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZW50aXR5RkcuZ2V0KCd0eXBlJykucmVzZXQoKTtcbiAgICB9XG5cbiAgICBnZXRFbnRpdHlCeUlEKCkge1xuICAgICAgICB0aGlzLmVudGl0eUNvbnRyb2xsZXIuZ2V0RW50aXR5QnlJRCh0aGlzLm9yZ0lELCB0aGlzLmxheW91dElELCB0aGlzLmVudGl0eUlEKS5zdWJzY3JpYmUoKGVudGl0eVJlcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlNID0gZW50aXR5UmVzO1xuICAgICAgICAgICAgdGhpcy5wYXRjaEVudGl0eSh0aGlzLmVudGl0eU0pO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHBhdGNoRW50aXR5KGVudGl0eSkge1xuICAgICAgICB0aGlzLmVudGl0eUZHLnBhdGNoVmFsdWUoe1xuICAgICAgICAgICAgbmFtZTogZW50aXR5WyduYW1lJ10sXG4gICAgICAgICAgICB0eXBlOiBlbnRpdHlbJ3R5cGUnXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pc0VxdWFsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBhZGRFbnRpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLmVudGl0eUZHLmludmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5RkcubWFya0FsbEFzVG91Y2hlZCgpO1xuICAgICAgICAgICAgdGhpcy50b2FzdFNlcnZpY2Uub3BlblRvYXN0KEludmFsaWRGb3JtLklOVkFMSURfRk9STV9USVRMRSwgSW52YWxpZEZvcm0uSU5WQUxJRF9GT1JNX01FU1NBR0UsIFRvYXN0ckNvbG9yLkVSUk9SKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW50aXR5Q29udHJvbGxlci5jcmVhdGVFbnRpdHkodGhpcy5vcmdJRCwgdGhpcy5sYXlvdXRJRCwgdGhpcy5lbnRpdHlJRCwgdGhpcy5lbnRpdHlGRy52YWx1ZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGFkZEVudGl0eVJlczogUmVzcG9uc2VNKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoRGlhbG9nRW51bS5TVUNDRVNTX0RSKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgaW4gYWRkRW50aXR5IC0gJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUVudGl0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW50aXR5RkcuaW52YWxpZCkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlGRy5tYXJrQWxsQXNUb3VjaGVkKCk7XG4gICAgICAgICAgICB0aGlzLnRvYXN0U2VydmljZS5vcGVuVG9hc3QoSW52YWxpZEZvcm0uSU5WQUxJRF9GT1JNX1RJVExFLCBJbnZhbGlkRm9ybS5JTlZBTElEX0ZPUk1fTUVTU0FHRSwgVG9hc3RyQ29sb3IuRVJST1IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW50aXR5Q29udHJvbGxlci51cGRhdGVFbnRpdHkodGhpcy5vcmdJRCwgdGhpcy5sYXlvdXRJRCwgdGhpcy5lbnRpdHlJRCwgdGhpcy5lbnRpdHlGRy52YWx1ZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGFkZEVudGl0eVJlczogUmVzcG9uc2VNKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoRGlhbG9nRW51bS5TVUNDRVNTX0RSKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgaW4gdXBkYXRlRW50aXR5IC0gJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcnJvckhhbmRsaW5nID0gKGNvbnRyb2w6IHN0cmluZywgZXJyb3I6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlGRy5jb250cm9sc1tjb250cm9sXS5oYXNFcnJvcihlcnJvcik7XG4gICAgfVxuXG59XG4iLCI8ZGl2IG1hdC1kaWFsb2ctdGl0bGU+XG4gICAgPHN0cm9uZyBjbGFzcz1cImRpYWxvZ1RpdGxlXCI+XG4gICAgICAgIHt7IHRpdGxlIH19IEVudGl0eVxuICAgIDwvc3Ryb25nPlxuICAgIDxidXR0b24gbWF0LWljb24tYnV0dG9uIG1hdC1kaWFsb2ctY2xvc2UgY2RrRm9jdXNJbml0aWFsIGNsYXNzPVwiZmxvYXQtZW5kIG1hdERpYWxvZ0Nsb3NlXCIgbWF0VG9vbHRpcD1cIkNsb3NlXCJcbiAgICAgICAgbWF0VG9vbHRpcFBvc2l0aW9uPVwiYmVmb3JlXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiIFttYXQtZGlhbG9nLWNsb3NlXT1cIkRpYWxvZ0VudW0uQ0xPU0VfRFJcIj5cbiAgICAgICAgICAgIGNsb3NlXG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbjwvZGl2PlxuXG48ZGl2IGNsYXNzPVwibWF0RGlhbG9nQ29udGVudFwiIG1hdC1kaWFsb2ctY29udGVudD5cbiAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cImVudGl0eUZHXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgICAgIDxtYXQtZm9ybS1maWVsZCBjbGFzcz1cIm1hdEZpZWxkV2lkdGgxMDBcIiBbYXBwZWFyYW5jZV09XCJNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2UuRk9STV9GSUVMRF9BUFBFQVJBTkNFXCI+XG4gICAgICAgICAgICAgICAgICAgIDxtYXQtbGFiZWwgY2xhc3M9XCJmb3JtTGFiZWxcIj5OYW1lPC9tYXQtbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBtYXRJbnB1dCBwbGFjZWhvbGRlcj1cIk5hbWVcIiB0eXBlPVwidGV4dFwiIGZvcm1Db250cm9sTmFtZT1cIm5hbWVcIiByZXF1aXJlZCAvPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LWVycm9yICpuZ0lmPVwiZXJyb3JIYW5kbGluZygnbmFtZScsICdyZXF1aXJlZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBGb3JtRXJyb3JFbnVtLlJFUVVJUkVEIH19XG4gICAgICAgICAgICAgICAgICAgIDwvbWF0LWVycm9yPlxuICAgICAgICAgICAgICAgIDwvbWF0LWZvcm0tZmllbGQ+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCIgKm5nSWY9XCIhaXNOZXdFbnRpdHlUeXBlU2VsZWN0ZWRcIj5cbiAgICAgICAgICAgICAgICA8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJtYXRGaWVsZFdpZHRoMTAwXCIgW2FwcGVhcmFuY2VdPVwiTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LWxhYmVsPlNlbGVjdCB0eXBlPC9tYXQtbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxtYXQtc2VsZWN0IGZvcm1Db250cm9sTmFtZT1cInR5cGVcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZ3gtbWF0LXNlbGVjdC1zZWFyY2ggW2Zvcm1Db250cm9sXT1cImVudGl0eVR5cGVTZWFyY2hVdGlsLmZpbHRlckZDXCIgcGxhY2Vob2xkZXJMYWJlbD1cIlNlYXJjaCBieSBuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9FbnRyaWVzRm91bmRMYWJlbD1cIk5vIG1hdGNoaW5nIHR5cGUgZm91bmQuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZ3gtbWF0LXNlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiAqbmdGb3I9XCJsZXQgZW50aXR5IG9mIGVudGl0eVR5cGVTZWFyY2hVdGlsLmZpbHRlcmVkRW50aXRpZXMgfCBhc3luY1wiIFt2YWx1ZV09XCJlbnRpdHkudHlwZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVudGl0eS50eXBlIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbS0wIHN0aWNreURyb3Bkb3duTWVudUl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyIHRleHQtcHJpbWFyeSBjdXJzb3JQb2ludGVyXCIgKGNsaWNrKT1cImNyZWF0ZU5ld1R5cGUoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmVhdGUgbmV3IHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L21hdC1zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgIDxtYXQtZXJyb3IgKm5nSWY9XCJlcnJvckhhbmRsaW5nKCd0eXBlJywgJ3JlcXVpcmVkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IEZvcm1FcnJvckVudW0uUkVRVUlSRUQgfX1cbiAgICAgICAgICAgICAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgICAgICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIiAqbmdJZj1cImlzTmV3RW50aXR5VHlwZVNlbGVjdGVkXCI+XG4gICAgICAgICAgICAgICAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwibWF0RmllbGRXaWR0aDEwMFwiIFthcHBlYXJhbmNlXT1cIk1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZS5GT1JNX0ZJRUxEX0FQUEVBUkFOQ0VcIj5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1sYWJlbCBjbGFzcz1cImZvcm1MYWJlbFwiPlR5cGU8L21hdC1sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG1hdElucHV0IHBsYWNlaG9sZGVyPVwiVHlwZVwiIHR5cGU9XCJ0ZXh0XCIgZm9ybUNvbnRyb2xOYW1lPVwidHlwZVwiIHJlcXVpcmVkIC8+XG4gICAgICAgICAgICAgICAgICAgIDxtYXQtZXJyb3IgKm5nSWY9XCJlcnJvckhhbmRsaW5nKCd0eXBlJywgJ3JlcXVpcmVkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IEZvcm1FcnJvckVudW0uUkVRVUlSRUQgfX1cbiAgICAgICAgICAgICAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgICAgICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cblxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXQtMiB0ZXh0LXByaW1hcnkgY3Vyc29yUG9pbnRlclwiIChjbGljayk9XCJpc05ld0VudGl0eVR5cGVTZWxlY3RlZCA9IGZhbHNlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzbWFsbD5TZWxlY3QgdHlwZSAqPC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuPC9kaXY+XG5cbjxkaXYgbWF0LWRpYWxvZy1mb290ZXIgYWxpZ249XCJlbmRcIj5cbiAgICA8ZGl2IFtuZ1N3aXRjaF09XCJhY3Rpb25cIiBjbGFzcz1cImQtaW5saW5lXCI+XG4gICAgICAgIDxidXR0b24gKm5nU3dpdGNoQ2FzZT1cIidjcmVhdGUnXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc3VjY2Vzc1wiIChjbGljayk9XCJhZGRFbnRpdHkoKVwiPlxuICAgICAgICAgICAge3sgQnV0dG9uTGFiZWxFbnVtLkNSRUFURV9CVE5fTEFCRUwgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gKm5nU3dpdGNoQ2FzZT1cIid1cGRhdGUnXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc3VjY2Vzc1wiIFtuZ0NsYXNzXT1cInsnZGlzYWJsZWQnOiBpc0VxdWFsfVwiXG4gICAgICAgICAgICAoY2xpY2spPVwidXBkYXRlRW50aXR5KClcIj5cbiAgICAgICAgICAgIHt7IEJ1dHRvbkxhYmVsRW51bS5VUERBVEVfQlROX0xBQkVMIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uICpuZ1N3aXRjaERlZmF1bHQgY2xhc3M9XCJkLW5vbmVcIj48L2J1dHRvbj5cbiAgICA8L2Rpdj5cbjwvZGl2PiJdfQ==