import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { SelectionModel } from '@angular/cdk/collections';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { catchError, map, startWith, switchMap } from 'rxjs/operators';
import { Entity } from '../../../../model/entity.model';
import { SourceLoadComponent } from '../../_dialog/create-update/source-load/source-load.component';
import { ButtonLabelEnum, DialogEnum, DialogOneComponent, DialogOneEnum, FormAction, TABLE_CONSTANT } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "../../../../controller/device.controller";
import * as i4 from "../../../../service/entity.service";
import * as i5 from "@angular/material/dialog";
import * as i6 from "@library/tsc-common";
import * as i7 from "@angular/material/table";
import * as i8 from "@angular/material/checkbox";
import * as i9 from "@angular/material/card";
import * as i10 from "@angular/material/paginator";
import * as i11 from "@angular/common";
import * as i12 from "@ng-bootstrap/ng-bootstrap";
import * as i13 from "@angular/material/tooltip";
// /tsc-library/
export class ViewComponent {
    constructor(activatedRoute, storageService, deviceController, entityService, dialog) {
        this.activatedRoute = activatedRoute;
        this.storageService = storageService;
        this.deviceController = deviceController;
        this.entityService = entityService;
        this.dialog = dialog;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.searchArr = [];
        this.dataSource = [];
        this.searchFlag = false;
        this.resultLength = 0;
        this.displayedColumn = ['checkbox', 'body', 'delete'];
        this.allDeviceIDs = [];
        this.selection = new SelectionModel(true, []);
        this.entityM = new Entity();
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.activatedRoute.params.subscribe((param) => {
            this.layoutID = param.layoutID;
            this.entityID = param.entityID;
            this.getEntityByID();
        });
    }
    getEntityByID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.entityM = yield this.entityService.getEntityByID(this.orgID, this.layoutID, this.entityID);
        });
    }
    ngAfterViewInit() {
        this.selection.clear();
        merge(this.paginator.page, fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(startWith({}), switchMap(() => {
            this.searchArr = [];
            if (this.searchFlag) {
                this.searchArr.push('name:' + this.searchValue);
            }
            return this.deviceController.getMappedDevices(this.paginator.pageIndex, this.paginator.pageSize, this.searchArr, this.orgID, this.layoutID, this.entityID).pipe(catchError(() => observableOf(null)));
        }), map((response) => {
            if (response == null) {
                this.resultLength = 0;
                return [];
            }
            this.resultLength = response["totalCount"];
            return response["records"];
        })).subscribe((dataSource) => {
            this.dataSource = dataSource;
            dataSource.forEach((record) => {
                this.allDeviceIDs.push(record.id);
            });
        });
    }
    searchFn(value) {
        this.searchFlag = true;
        this.searchValue = value;
        if (value.length == 0) {
            this.resetSearch();
        }
        else {
            this.paginator.pageIndex = 0;
        }
        this.refreshBtn.nativeElement.click();
    }
    resetSearch() {
        this.searchFlag = false;
        this.searchBar.searchClear();
    }
    selectAll() {
        if (this.isAllSelected()) {
            this.selection.clear();
            return;
        }
        this.selection.select(...this.allDeviceIDs);
    }
    isAllSelected() {
        const selected = this.selection.selected.length;
        const numRows = this.dataSource.length;
        return selected == numRows;
    }
    openSourceLoadDialog(device) {
        const dialog = this.dialog.open(SourceLoadComponent, {
            data: {
                deviceInfo: device,
                layoutID: this.layoutID,
                entityID: this.entityID,
                updateFromDialog: true
            },
            minWidth: '600px',
            maxWidth: '600px',
        });
        dialog.afterClosed()
            .subscribe((dialogRes) => {
            if (dialogRes && dialogRes.result == DialogEnum.SUCCESS_DR && dialogRes.action == FormAction.UPDATE) {
                this.refreshBtn.nativeElement.click();
            }
        });
    }
    openDeleteDialog(actionType, id, name) {
        let entityName = this.entityM.name;
        let bodyText;
        if (actionType == 'BULK_DELETE' && !this.isAllSelected()) {
            bodyText = 'From <b>' + entityName + '</b> entity, mapping of devices <b> ' + this.selection.selected.join(', ') + '</b>' + ' will be removed.</br></br>Are you sure you want to continue?';
        }
        else if (actionType == 'BULK_DELETE' && this.isAllSelected()) {
            bodyText = 'From <b>' + entityName + '</b> entity, all mapped devices will be removed.</br></br>Are you sure you want to continue?';
        }
        else {
            bodyText = 'From <b>' + entityName + '</b> entity, mapping of device <b> ' + name + '</b>' + ' will be removed.</br></br>Are you sure you want to continue?';
        }
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '450px',
            data: {
                type: DialogOneEnum.DELETE,
                icon: 'dangerous',
                header: 'Delete device mapping?',
                body: bodyText,
                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            if (res) {
                if (actionType == 'BULK_DELETE' && !this.isAllSelected()) {
                    this.deleteDeviceMapping(this.selection.selected);
                }
                else if (actionType == 'BULK_DELETE' && this.isAllSelected()) {
                    this.deleteDeviceMapping(this.allDeviceIDs);
                }
                else {
                    this.deleteDeviceMapping(id);
                }
            }
        });
    }
    deleteDeviceMapping(deviceID) {
        this.deviceController.deleteDeviceMapping(this.orgID, this.layoutID, this.entityID, deviceID).subscribe((deleteRes) => {
            this.refreshBtn.nativeElement.click();
        });
    }
}
ViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ViewComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.StorageService }, { token: i3.DeviceController }, { token: i4.EntityService }, { token: i5.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
ViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ViewComponent, selector: "app-view", viewQueries: [{ propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">View Mapped Devices <span *ngIf=\"entityM\">\n                    - ({{ entityM?.name }})\n                </span></div>\n        </div>\n\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-2\" #searchBar searchBy=\"device name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n                <div class=\"me-2 btn-group\" ngbDropdown placement=\"bottom-right\">\n                    <button type=\"button\" ngbDropdownToggle class=\"btn btn-sm btn-primary\"\n                        [ngClass]=\"{'disableButton': selection.selected.length == 0}\"\n                        [disabled]=\"selection.selected.length == 0\">\n                        Bulk action\n                    </button>\n                    <div ngbDropdownMenu>\n                        <button class=\"btn btn-outline-danger rounded-0 dropdown-item\"\n                            (click)=\"openDeleteDialog('BULK_DELETE')\">\n                            Delete\n                        </button>\n                    </div>\n                </div>\n                <a [routerLink]=\"'/layout/' + layoutID + '/entity/' + entityID + '/map-device/add'\">Map devices</a>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <table mat-table [dataSource]=\"dataSource\">\n\n        <ng-container matColumnDef=\"checkbox\">\n            <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef>\n                <mat-checkbox (change)=\"$event ? selectAll() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\" [disabled]=\"dataSource.length == 0\">\n                    Select all\n                </mat-checkbox>\n            </th>\n            <td class=\"px-3 columnWidth1\" mat-cell *matCellDef=\"let row; let i = index;\" class=\"text-start\">\n                <mat-checkbox (change)=\"$event ? selection.toggle(row.id) : null\"\n                    [checked]=\"selection.isSelected(row.id)\"></mat-checkbox>\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"body\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td class=\"px-3\" mat-cell *matCellDef=\"let row\">\n                <div class=\"pt-3 pb-3\">\n\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <mat-card class=\"card main-card border cardOverwrite\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-12\">\n                                        <span class=\"card-title sectionTitle\">\n                                            Devices\n                                        </span>\n                                    </div>\n                                </div>\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                ID\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.id }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Name\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\"\n                                                [matTooltip]=\"row?.['name']?.length>20? row['name']: ''\"\n                                                matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\">\n                                                {{ row.name | dotdotdot:20 }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Make\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.make }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Model\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.model }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-3\">\n                                                Type\n                                            </div>\n                                            <div class=\"col-sm-8 fw-bold\">\n                                                {{ row.type | titlecase }}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </mat-card>\n                        </div>\n                    </div>\n\n                    <div class=\"row pt-3\" *ngIf=\"row.mappingRecords && row.mappingRecords.length > 0\">\n                        <div class=\"col-sm-12\">\n                            <mat-card class=\"card main-card border cardOverwrite\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6\">\n                                        <span class=\"card-title sectionTitle\">\n                                            Device property\n                                        </span>\n                                    </div>\n                                    <div class=\"col-sm-6\">\n                                        <span class=\"material-symbols-outlined text-secondary float-end cursorPointer\"\n                                            matTooltipPosition=\"above\" matTooltip=\"Edit\"\n                                            (click)=\"openSourceLoadDialog(row)\">\n                                            edit_square\n                                        </span>\n                                    </div>\n                                </div>\n\n                                <div class=\"row pt-2\">\n                                    <div class=\"col-sm-6\" *ngFor=\"let mapping of row.mappingRecords\">\n                                        Parameter Name: <span class=\"fw-bold\">\n                                            {{ mapping?.parameterName }}\n                                        </span>\n\n                                        <div *ngFor=\"let sourceLoad of mapping?.mapping\">\n                                            <div class=\"row mt-2\">\n                                                <div class=\"col-sm-3\" *ngIf=\"sourceLoad?.type == 'SOURCE'\">\n                                                    Source\n                                                </div>\n                                                <div class=\"col-sm-3\" *ngIf=\"sourceLoad?.type == 'LOAD'\">\n                                                    Load\n                                                </div>\n                                                <div class=\"col-sm-6\">\n                                                    <span class=\"fw-bold\">{{ sourceLoad?.name }}</span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </mat-card>\n                        </div>\n                    </div>\n                </div>\n\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"delete\">\n            <th class=\"columnWidth2\" mat-header-cell *matHeaderCellDef></th>\n            <td class=\"columnWidth2\" mat-cell *matCellDef=\"let row\">\n                <span class=\"material-symbols-outlined text-danger float-end\"\n                    [ngClass]=\"{'text-danger cursorPointer': selection.selected.length == 0, 'text-secondary': selection.selected.length > 0}\"\n                    matTooltipPosition=\"above\" [matTooltip]=\"selection.selected.length == 0 ? 'Remove mapping': ''\"\n                    (click)=\"selection.selected.length == 0 && openDeleteDialog('SINGLE_DELETE', row.id, row.name)\">\n                    delete\n                </span>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumn; sticky: true\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\"></tr>\n\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", styles: [".columnWidth1{width:140px}.columnWidth2{width:120px}.badge{font-weight:bold;font-size:1em;text-transform:lowercase}\n"], components: [{ type: i6.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i7.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i8.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i9.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i7.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i10.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i12.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i11.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i12.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i7.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7.MatCellDef, selector: "[matCellDef]" }, { type: i7.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i13.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7.MatNoDataRow, selector: "ng-template[matNoDataRow]" }], pipes: { "dotdotdot": i6.EllipsisPipeService, "titlecase": i11.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-view',
                    templateUrl: './view.component.html',
                    styleUrls: ['./view.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.StorageService }, { type: i3.DeviceController }, { type: i4.EntityService }, { type: i5.MatDialog }]; }, propDecorators: { paginator: [{
                type: ViewChild,
                args: ['paginator']
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn']
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }] } });
//# sourceMappingURL=data:application/json;base64,