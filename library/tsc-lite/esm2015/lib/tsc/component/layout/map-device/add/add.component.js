import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { isEqual } from 'lodash';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { catchError, filter, map, startWith, switchMap, tap } from 'rxjs/operators';
import { Entity } from '../../../../model/entity.model';
import { SourceConsumerConfigure } from '../../../../model/source-consumer.model';
import { SourceLoadComponent } from '../../_dialog/create-update/source-load/source-load.component';
import { ButtonLabelEnum, DialogOneComponent, DialogOneEnum, TABLE_CONSTANT } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/tsc-common";
import * as i4 from "../../../../service/entity.service";
import * as i5 from "../../../../controller/device.controller";
import * as i6 from "../../../../controller/source.controller";
import * as i7 from "@angular/forms";
import * as i8 from "@angular/material/dialog";
import * as i9 from "@angular/material/table";
import * as i10 from "@angular/material/checkbox";
import * as i11 from "ngx-smart-popover";
import * as i12 from "@angular/material/sort";
import * as i13 from "@angular/material/button";
import * as i14 from "@angular/material/paginator";
import * as i15 from "@angular/common";
import * as i16 from "@angular/material/tooltip";
import * as i17 from "@angular/cdk/clipboard";
// /tsc-library/
export class AddComponent {
    constructor(activatedRoute, storageService, tscCommonService, entityService, deviceController, sourceController, deviceMappingFB, dialog) {
        this.activatedRoute = activatedRoute;
        this.storageService = storageService;
        this.tscCommonService = tscCommonService;
        this.entityService = entityService;
        this.deviceController = deviceController;
        this.sourceController = sourceController;
        this.deviceMappingFB = deviceMappingFB;
        this.dialog = dialog;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.searchArr = [];
        this.dataSource = [];
        this.searchFlag = false;
        this.resultLength = 0;
        this.isEqual = true;
        this.showEdit = false;
        this.allowBackendCall = true;
        this.entityM = new Entity();
        this.sourceConsumerConfiguredM = new SourceConsumerConfigure();
        this.initialMappingRecords = {};
        this.displayedColumn = ['mapDevice', 'id', 'name', 'make', 'model', 'type'];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.activatedRoute.params.subscribe((param) => {
            this.layoutID = param.layoutID;
            this.entityID = param.entityID;
            this.getEntityByID();
        });
        this.getSourceConsumerConfig();
        this.deviceMappingInit();
    }
    getSourceConsumerConfig() {
        this.sourceController.getSourceConsumerConfig(this.orgID).subscribe((res) => {
            this.sourceConsumerConfiguredM = res;
            this.redirectUrl = this.getRedirectUrl();
        }, error => console.log('Error:', error));
    }
    getRedirectUrl() {
        if (!this.sourceConsumerConfiguredM.sourceTypeConfigured) {
            return 'preference/source/create';
        }
        if (!this.sourceConsumerConfiguredM.consumerTypeConfigured) {
            return 'preference/consumer/create';
        }
        return 'preference/source/page';
    }
    getEntityByID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.entityM = yield this.entityService.getEntityByID(this.orgID, this.layoutID, this.entityID);
        });
    }
    deviceMappingInit() {
        this.deviceMappingFG = this.deviceMappingFB.group({
            deviceRecords: this.deviceMappingFB.array([])
        });
    }
    get deviceRecords() {
        return this.deviceMappingFG.get('deviceRecords');
    }
    ngAfterViewInit() {
        merge(this.paginator.page, this.sort.sortChange, fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(startWith({}), filter(() => this.handleBackendTrigger()), switchMap(() => this.getUnmappedDevice())).subscribe();
    }
    getUnmappedDevice() {
        this.deviceMappingFG.valueChanges.subscribe(() => {
            this.isEqual = isEqual(this.intialObject, this.deviceMappingFG.value);
        });
        this.searchArr = [];
        if (this.searchFlag) {
            this.searchArr.push('name:' + this.searchValue);
        }
        return this.deviceController.getUnMappedDevices(this.paginator.pageIndex, this.paginator.pageSize, this.sort.active, this.sort.direction, this.searchArr, this.orgID, this.layoutID, this.entityID).pipe(catchError(() => observableOf(null)), map((response) => {
            if (response == null) {
                this.resultLength = 0;
                return [];
            }
            this.resultLength = response["totalCount"];
            return response["records"];
        }), tap((dataSource) => {
            this.dataSource = dataSource;
            this.deviceMappingFG.reset();
            this.deviceRecords.clear();
            dataSource.forEach((record, index) => {
                this.deviceRecords.push(this.deviceMappingFB.group({
                    id: [record.id],
                    isDeviceMapped: [false],
                    type: [record.type],
                    parameter: [record.parameter],
                    mappingRecords: this.deviceMappingFB.array([])
                }));
            });
            this.intialObject = this.deviceMappingFG.value;
            this.isEqual = true;
        }));
    }
    handleBackendTrigger() {
        if (this.intialObject != undefined && !isEqual(this.intialObject, this.deviceMappingFG.value)) {
            this.openConfirmationDialog();
            return false;
        }
        return true;
    }
    openConfirmationDialog() {
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '450px',
            data: {
                type: DialogOneEnum.CONFIRMATION,
                icon: 'warning',
                header: 'Confirm?',
                body: 'Changes made will not be saved. Are you sure you want to proceed?',
                buttonOne: ButtonLabelEnum.NO_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.YES_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            this.allowBackendCall = res;
            if (this.allowBackendCall == true) {
                this.deviceMappingFG.reset();
                this.getUnmappedDevice().subscribe();
            }
            else {
                this.searchBar.searchClear();
            }
        });
    }
    searchFn(value) {
        this.searchFlag = true;
        this.searchValue = value;
        if (value.length == 0) {
            this.resetSearch();
        }
        else {
            this.paginator.pageIndex = 0;
        }
        this.refreshBtn.nativeElement.click();
    }
    resetSearch() {
        this.searchFlag = false;
        this.searchBar.searchClear();
    }
    onCheckboxChange(index, isChecked) {
        const deviceGroup = this.deviceRecords.at(index);
        deviceGroup.get('isDeviceMapped').setValue(isChecked);
        if (isChecked) {
            if (deviceGroup.get('isDeviceMapped').value && deviceGroup.get('type').value == 'METER' && deviceGroup.get('parameter').value.length > 0) {
                this.openSourceLoadDialog(deviceGroup.value);
            }
        }
        else {
            const mappingRecordsArray = deviceGroup.get('mappingRecords');
            mappingRecordsArray.clear();
        }
    }
    openSourceLoadDialog(device) {
        const dialog = this.dialog.open(SourceLoadComponent, {
            data: {
                deviceInfo: device,
                entityID: this.entityID
            },
            minWidth: '40vw',
            maxWidth: '40vw',
            height: '100%',
            position: { right: '-2px', top: '0px' },
        });
        dialog.afterClosed()
            .subscribe((dialogRes) => {
            const deviceIndex = this.findIndexByDeviceID(device.id);
            if (dialogRes && dialogRes.sourceLoadMappingRes) {
                if (deviceIndex != -1) {
                    const deviceRecordsControl = this.deviceMappingFG.get('deviceRecords');
                    const mappingRecordsControl = deviceRecordsControl.at(deviceIndex).get('mappingRecords');
                    mappingRecordsControl.clear();
                    dialogRes.sourceLoadMappingRes.forEach(mappingItem => {
                        const parameterID = mappingItem.parameterID;
                        const mappings = mappingItem.mapping.map(mapping => {
                            return this.deviceMappingFB.group(mapping);
                        });
                        const mappingGroup = this.deviceMappingFB.group({
                            parameterID,
                            mapping: this.deviceMappingFB.array(mappings)
                        });
                        mappingRecordsControl.push(mappingGroup);
                    });
                }
            }
            if (dialogRes && dialogRes.sourceLoadMappingRes.length == 0) {
                if (deviceIndex != -1) {
                    const isDeviceMappedControl = this.deviceMappingFG.get('deviceRecords')['controls'][deviceIndex].get('isDeviceMapped');
                    isDeviceMappedControl.setValue(false);
                }
            }
        });
    }
    findIndexByDeviceID(id) {
        return this.deviceMappingFG.get('deviceRecords')['controls']
            .findIndex((d) => d.value.id == id);
    }
    saveDeviceMapping() {
        const deviceRecordsArray = this.deviceMappingFG.get('deviceRecords');
        deviceRecordsArray.controls.forEach((deviceGroup) => {
            const isDeviceMapped = deviceGroup.get('isDeviceMapped').value;
            const type = deviceGroup.get('type').value;
            const mappingRecordsControl = deviceGroup.get('mappingRecords');
            if (type == 'METER' && !isDeviceMapped) {
                mappingRecordsControl.clear();
            }
            deviceGroup.removeControl('parameter');
        });
        this.deviceController.saveDeviceMapping(this.orgID, this.layoutID, this.entityID, this.deviceMappingFG.getRawValue()).subscribe((mappedDevicesRes) => {
            this.tscCommonService.back();
        }, error => {
            console.log('error in saveDeviceMapping() - ', error);
        });
    }
}
AddComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AddComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.StorageService }, { token: i3.TSCCommonService }, { token: i4.EntityService }, { token: i5.DeviceController }, { token: i6.SourceController }, { token: i7.FormBuilder }, { token: i8.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
AddComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AddComponent, selector: "app-add", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Map Devices <span *ngIf=\"entityM\">\n                    - ({{ entityM?.name }})\n                </span></div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar searchBy=\"device name\" (emitSearch)=\"searchFn($event)\">\n                </lib-search-bar-one>\n                <a [routerLink]=\"'/layout/' + layoutID + '/entity/' + entityID + '/map-device/view'\">View mapped devices</a>\n            </div>\n        </div>\n    </div>\n\n    <button #refreshBtn class=\"d-none\"></button>\n\n    <form [formGroup]=\"deviceMappingFG\">\n        <div class=\"overflowX customScrollBar w-100\">\n            <table mat-table class=\"w-100\" [dataSource]=\"dataSource\" #sort=\"matSort\" matSort matSortActive=\"name\"\n                matSortDirection=\"asc\" matSortDisableClear>\n\n                <ng-container matColumnDef=\"mapDevice\">\n                    <th class=\"columnWidth1\" mat-header-cell *matHeaderCellDef> Map device </th>\n                    <td class=\"columnWidth1\" mat-cell *matCellDef=\"let row; let i = index\">\n                        <div class=\"d-flex align-items-center\">\n                            <mat-checkbox [formControl]=\"deviceRecords?.at(i)?.get('isDeviceMapped')\"\n                                [disabled]=\"row.type == 'METER' && (!sourceConsumerConfiguredM.sourceTypeConfigured || !sourceConsumerConfiguredM.consumerTypeConfigured)\"\n                                (change)=\"onCheckboxChange(i, $event.checked)\"></mat-checkbox>\n\n                            <span\n                                *ngIf=\"row.type == 'METER' && (!sourceConsumerConfiguredM.sourceTypeConfigured || !sourceConsumerConfiguredM.consumerTypeConfigured)\"\n                                [popover]=\"infoPopover\" popoverPlacement=\"right\" [popoverOnHover]=\"false\" [popoverAnimation]=\"true\">\n                                <span class=\"material-symbols-outlined fontSize cursorPointer mt-2 ms-2\">\n                                    info\n                                </span>\n                            </span>\n\n                            <popover-content #infoPopover [animation]=\"true\" [closeOnClickOutside]=\"true\">\n                                <span>Click <a [href]=\"redirectUrl\">here </a>to set preferences</span>\n                            </popover-content>\n\n                            <span *ngIf=\"deviceRecords?.at(i)?.get('mappingRecords').length > 0\"\n                                class=\"material-symbols-outlined text-secondary fontSize cursorPointer ms-5\" #tooltip=\"matTooltip\"\n                                matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Update source/consumer\"\n                                (click)=\"this.openSourceLoadDialog(deviceRecords?.at(i).value)\">\n                                edit_square\n                            </span>\n                        </div>\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"id\">\n                    <th class=\"columnWidth2\" mat-header-cell *matHeaderCellDef>\n                        Device ID\n                    </th>\n                    <td class=\"columnWidth2\" mat-cell *matCellDef=\"let row\">\n                        {{ row['id'] }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"name\">\n                    <th class=\"columnWidth3\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear> Name </th>\n                    <td class=\"columnWidth3\" mat-cell *matCellDef=\"let row\"> <span\n                            [matTooltip]=\"row?.['name']?.length>24? row['name']: ''\" matTooltipPosition=\"above\"\n                            matTooltipClass=\"nameTooltip\">\n                            {{ row.name | dotdotdot:24 }}\n                        </span>\n                        <button [cdkCopyToClipboard]=\"row.name\" matSuffix mat-icon-button type=\"button\">\n                            <span class=\"material-symbols-outlined fs-5\" mat-raised-button matTooltipPosition=\"right\"\n                                matTooltip=\"copy\">\n                                content_copy\n                            </span>\n                        </button>\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"make\">\n                    <th class=\"columnWidth4\" mat-header-cell *matHeaderCellDef> Make </th>\n                    <td class=\"columnWidth4\" mat-cell *matCellDef=\"let row\"\n                        [matTooltip]=\"row?.['make']?.length>15? row['make']: ''\" matTooltipPosition=\"above\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ row?.['make'] | dotdotdot:15 }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"model\">\n                    <th class=\"columnWidth4\" mat-header-cell *matHeaderCellDef> Model </th>\n                    <td class=\"columnWidth4\" mat-cell *matCellDef=\"let row\"\n                        [matTooltip]=\"row?.['model']?.length>15? row['model']: ''\" matTooltipPosition=\"above\"\n                        matTooltipClass=\"nameTooltip\">\n                        {{ row?.['model'] | dotdotdot:15 }}\n                    </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"type\">\n                    <th class=\"columnWidth4\" mat-header-cell *matHeaderCellDef> Type </th>\n                    <td class=\"columnWidth4\" mat-cell *matCellDef=\"let row\">\n                        {{ row.type | titlecase }}\n                    </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumn; sticky: true\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\"></tr>\n\n                <tr class=\"mat-row\" *matNoDataRow>\n                    <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                        {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        <mat-paginator #paginator class=\"roundedBorder\" showFirstLastButtons [length]=\"resultLength\"\n            [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n        </mat-paginator>\n    </form>\n\n    <div align=\"end\">\n        <button type=\"submit\" class=\"btn btn-sm btn-success me-3 mb-2\" [ngClass]=\"{'disabled': isEqual}\"\n            (click)=\"saveDeviceMapping()\">\n            {{ ButtonLabelEnum.SAVE_BTN_LABEL }}\n        </button>\n    </div>\n\n</div>", styles: [".columnWidth1{min-width:120px}.columnWidth2{min-width:140px}.columnWidth3{min-width:180px}.columnWidth4{min-width:140px}.badge{font-weight:bold;font-size:1em;text-transform:lowercase}.fontSize{font-size:20px}\n"], components: [{ type: i3.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i9.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i10.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i11.PopoverContentComponent, selector: "popover-content", inputs: ["placement", "animation", "closeOnClickOutside", "closeOnMouseOutside", "appendToBody", "size", "content", "title", "parentClass"] }, { type: i12.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i13.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i9.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i9.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i14.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i12.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i9.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i9.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i9.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i9.MatCellDef, selector: "[matCellDef]" }, { type: i9.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i11.PopoverDirective, selector: "[popover]", inputs: ["popoverOnHover", "popoverDismissTimeout", "popover", "popoverSize", "popoverDisabled", "popoverAnimation", "popoverPlacement", "popoverTitle", "popoverCloseOnClickOutside", "popoverCloseOnMouseOutside", "appendToBody"], outputs: ["onShown", "onHidden"], exportAs: ["popover"] }, { type: i16.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i17.CdkCopyToClipboard, selector: "[cdkCopyToClipboard]", inputs: ["cdkCopyToClipboard", "cdkCopyToClipboardAttempts"], outputs: ["cdkCopyToClipboardCopied"] }, { type: i9.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i9.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i9.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { type: i15.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "dotdotdot": i3.EllipsisPipeService, "titlecase": i15.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AddComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-add',
                    templateUrl: './add.component.html',
                    styleUrls: ['./add.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.StorageService }, { type: i3.TSCCommonService }, { type: i4.EntityService }, { type: i5.DeviceController }, { type: i6.SourceController }, { type: i7.FormBuilder }, { type: i8.MatDialog }]; }, propDecorators: { sort: [{
                type: ViewChild,
                args: ['sort']
            }], paginator: [{
                type: ViewChild,
                args: ['paginator']
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn']
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }] } });
//# sourceMappingURL=data:application/json;base64,