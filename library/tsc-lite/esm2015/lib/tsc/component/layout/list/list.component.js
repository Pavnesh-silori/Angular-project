import { Component } from '@angular/core';
import { ParameterEntity } from '../../../model/entity.model';
import { CreateUpdateEntityComponent } from '../_dialog/create-update/entity/entity.component';
import { ButtonLabelEnum, DialogEnum, DialogOneComponent, DialogOneEnum } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "../../../controller/entity.controller";
import * as i4 from "@angular/material/dialog";
import * as i5 from "@angular/material/expansion";
import * as i6 from "@angular/common";
import * as i7 from "@angular/material/tooltip";
// /tsc-library/
export class ListComponent {
    constructor(router, activatedRoute, storageService, entityController, dialog) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.storageService = storageService;
        this.entityController = entityController;
        this.dialog = dialog;
        this.entities = [new ParameterEntity()];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.activatedRoute.parent.parent.paramMap.subscribe((params) => {
            this.layoutID = params.get('layoutID');
            this.getEntitiesByLayoutID();
        });
    }
    getEntitiesByLayoutID() {
        this.entityController.getEntitiesByLayoutID(this.orgID, this.layoutID)
            .subscribe((entityTreeRes) => {
            this.entities = entityTreeRes;
        }, error => {
            console.log('error in getEntitiesByLayoutID() -', error);
        });
    }
    hasContent(entity) {
        return entity && entity.children && entity.children.length > 0;
    }
    mapDevice(entityID) {
        this.router.navigate([`layout/${this.layoutID}/entity/${entityID}/map-device/add`]);
    }
    viewMappedDevice(entityID) {
        this.router.navigate([`layout/${this.layoutID}/entity/${entityID}/map-device/view`]);
    }
    openEntityDialog(entityID, action) {
        const dialog = this.dialog.open(CreateUpdateEntityComponent, {
            data: {
                action: action,
                entityID: entityID,
                layoutID: this.layoutID,
            },
            minWidth: '500px',
            maxWidth: '500px',
        });
        dialog.afterClosed()
            .subscribe((result) => {
            if (result == DialogEnum.SUCCESS_DR) {
                this.getEntitiesByLayoutID();
            }
        });
    }
    openDeleteDialog(entityID, entityName) {
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '450px',
            data: {
                type: DialogOneEnum.DELETE,
                icon: 'dangerous',
                header: 'Delete entity?',
                body: 'This will delete the entity <b>' + entityName + '</b> and all its children entities.</br></br>Are you sure you want to continue?',
                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            if (res) {
                this.deleteEntity(entityID);
            }
        });
    }
    deleteEntity(entityID) {
        this.entityController.deleteEntity(this.orgID, this.layoutID, entityID).subscribe((deleteRes) => {
            this.getEntitiesByLayoutID();
        });
    }
}
ListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ListComponent, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.StorageService }, { token: i3.EntityController }, { token: i4.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
ListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ListComponent, selector: "app-list", ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <!-- template call for entityTemplate -->\n                <mat-accordion>\n                    <ng-container *ngFor=\"let entity of entities\">\n                        <ng-container *ngTemplateOutlet=\"entityTemplate; \n                            context: {\n                                entity: entity,\n                                panelTitleClass: 'fw-bold',\n                                expansionPanelClass : 'cardBackgroundColor',\n                                expanded: hasContent(entity),\n                                allowUpdateDelete: false\n                            }\">\n                        </ng-container>\n                    </ng-container>\n                </mat-accordion>\n                <!-- /template call for entityTemplate/ -->\n\n                <!-- template for recursive entity -->\n                <ng-template #entityTemplate let-entity=\"entity\" let-panelTitleClass=\"panelTitleClass\"\n                    let-expansionPanelClass=\"expansionPanelClass\" let-expanded=\"expanded\" let-allowUpdateDelete=\"allowUpdateDelete\">\n                    <mat-expansion-panel class=\"mt-2 cardOverwrite\" [class]=\"expansionPanelClass\" [expanded]=\"expanded\"\n                        [disabled]=\"!hasContent(entity)\" [hideToggle]=\"!hasContent(entity)\">\n\n                        <mat-expansion-panel-header class=\"matAccRightAlignedHeader\">\n                            <mat-panel-title>\n                                <div class=\"d-flex align-items-center\">\n                                    <span [class]=\"panelTitleClass\">\n                                        {{ entity.name }}\n                                    </span> <span class=\"badge rounded-pill info ms-2\">\n                                        {{ entity.type }}\n                                    </span>\n                                </div>\n                            </mat-panel-title>\n                            <mat-panel-description class=\"float-end\">\n                                <span class=\"material-symbols-outlined text-primary me-3\" #tooltip=\"matTooltip\" matTooltipPosition=\"above\"\n                                    matTooltipClass=\"nameTooltip\" matTooltip=\"Add entity\"\n                                    (click)=\"openEntityDialog(entity.id, 'create'); $event.stopPropagation()\">\n                                    add_circle\n                                </span>\n                                <span class=\"material-symbols-outlined text-primary me-3\" #tooltip=\"matTooltip\" matTooltipPosition=\"above\"\n                                    matTooltipClass=\"nameTooltip\" matTooltip=\"Map device\" (click)=\"mapDevice(entity.id); $event.stopPropagation()\">\n                                    devices\n                                </span>\n                                <span class=\"material-symbols-outlined text-secondary me-3\" #tooltip=\"matTooltip\"\n                                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"View mapped device\"\n                                    (click)=\"viewMappedDevice(entity.id); $event.stopPropagation()\">\n                                    visibility\n                                </span>\n                                <span class=\"material-symbols-outlined text-secondary me-3\" *ngIf=\"allowUpdateDelete\" #tooltip=\"matTooltip\"\n                                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Edit entity\"\n                                    (click)=\"openEntityDialog(entity.id, 'update'); $event.stopPropagation()\">\n                                    edit_square\n                                </span>\n                                <span class=\"material-symbols-outlined text-danger me-3\" *ngIf=\"allowUpdateDelete\" #tooltip=\"matTooltip\"\n                                    matTooltipPosition=\"above\" matTooltipClass=\"nameTooltip\" matTooltip=\"Delete entity\"\n                                    (click)=\"openDeleteDialog(entity.id, entity.name); $event.stopPropagation()\">\n                                    delete\n                                </span>\n                            </mat-panel-description>\n                        </mat-expansion-panel-header>\n\n                        <ng-container *ngIf=\"entity.children && entity.children.length > 0\">\n                            <ng-container *ngFor=\"let child of entity.children\">\n                                <ng-container *ngTemplateOutlet=\"entityTemplate; \n                                        context:{ \n                                            entity: child,\n                                            panelTitleClass: 'text-dark',\n                                            expansionPanelClass : 'border',\n                                            expanded: 'false',\n                                            allowUpdateDelete: true\n                                        }\">\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n\n                    </mat-expansion-panel>\n                </ng-template>\n                <!-- /template for recursive entity/ -->\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i5.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i5.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }], directives: [{ type: i5.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i5.MatExpansionPanelDescription, selector: "mat-panel-description" }, { type: i7.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-list',
                    templateUrl: './list.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.StorageService }, { type: i3.EntityController }, { type: i4.MatDialog }]; } });
//# sourceMappingURL=data:application/json;base64,