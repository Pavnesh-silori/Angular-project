import { Component, ViewChild } from '@angular/core';
import * as moment from 'moment';
import { Alert } from '../../../../model/alert.model';
import { EntityWithChildren } from '../../../../model/entity.model';
import { DashboardErrorEnum, ReportErrorEnum } from '../../../../enum/error.enum';
import { EntityDialogComponent } from '../../../_shared/dialog/entity/entity.component';
import { ButtonLabelEnum, COMMON_CONSTANT, InvalidForm, MATERIAL_CONSTANT, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE, DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import { BasicAreaLineBarChart, ChartTitle, ChartTypeEnum, ChartViewStateEnum } from '@library/echart';
import { FormControl, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "../../../../service/alert.service";
import * as i3 from "@library/toastr-service";
import * as i4 from "../../../../controller/entity.controller";
import * as i5 from "../../../../controller/aggregate-data.controller";
import * as i6 from "@angular/material/dialog";
import * as i7 from "@library/date";
import * as i8 from "../../../dropdown/aggregation-duration/aggregation-duration.component";
import * as i9 from "../../../dropdown/entity-type/entity-type.component";
import * as i10 from "@library/tsc-common";
import * as i11 from "@angular/material/card";
import * as i12 from "@library/echart";
import * as i13 from "@angular/common";
import * as i14 from "@angular/material/core";
// /tsc-library/
export class ByEntityComponent {
    constructor(storageService, alertService, toastService, entityController, aggregateDataController, dialog) {
        this.storageService = storageService;
        this.alertService = alertService;
        this.toastService = toastService;
        this.entityController = entityController;
        this.aggregateDataController = aggregateDataController;
        this.dialog = dialog;
        this.materialConstant = MATERIAL_CONSTANT;
        this.commonConstant = COMMON_CONSTANT;
        this.customRangeConstant = CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
        this.materialFormFieldAppearance = MaterialFormFieldAppearance;
        this.dateFormatEnum = DateFormatEnum;
        this.dateInputTypeEnum = DateInputTypeEnum;
        this.dateTypeEnum = DateTypeEnum;
        this.buttonLabelEnum = ButtonLabelEnum;
        this.selectEntityType = false;
        this.isViewData = false;
        this.showAlert = false;
        this.showLoader = false;
        this.entityByEntityTypeM = [new EntityWithChildren()];
        this.alertObj = new Alert();
        this.entityFC = new FormControl([], [Validators.required]);
        this.chartType = ChartTypeEnum.BASIC_LINE_CHART;
        this.viewStateFlag = ChartViewStateEnum.LOADING;
        this.chartTitle = new ChartTitle();
        this.chartData = [];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
    }
    dateInpChange() {
        this.startDate = this.customDateInput.startDateFC.value;
        this.endDate = this.customDateInput.endDateFC.value;
    }
    aggDurationInpChange() {
        this.aggDuration = this.aggDurationInput.aggDurationFC.value;
    }
    entityTypeInpChange() {
        this.entityType = this.entityTypeInput.entityTypeFC.value;
        this.entityFC.reset([]);
        this.getEntitiesByEntityType(this.entityType);
    }
    getEntitiesByEntityType(entityType) {
        let requestBody = {};
        requestBody['entityType'] = [entityType];
        this.entityController.getEntitiesByEntityType(this.orgID, requestBody)
            .subscribe((res) => {
            this.entityByEntityTypeM = [res];
        }, error => {
            console.log('error in getEntitiesByEntityType() - ', error);
        });
    }
    openEntityDialog() {
        if (this.entityType) {
            const dialog = this.dialog.open(EntityDialogComponent, {
                data: {
                    entityType: this.entityTypeInput.entityTypeFC.value,
                    entityObject: this.entityByEntityTypeM
                },
                width: '50vw',
                height: '100%',
                position: { right: '-2px', top: '0px' },
            });
            dialog.afterClosed().subscribe((dialogRes) => {
                if (dialogRes.entityID) {
                    this.entityID = dialogRes.entityID;
                    this.entityFC.patchValue(this.entityID);
                }
            });
        }
        else {
            this.selectEntityType = true;
        }
    }
    viewEntityParameterData() {
        this.chartData = [];
        this.isViewData = true;
        this.alertService.resetAlertProperties(this.alertObj);
        if (this.isValidInputField()) {
            this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        if (this.startDate == this.endDate) {
            this.alertService.setAlertProperties(this.alertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
            return;
        }
        this.showLoader = true;
        try {
            const requestData = this.createDataRequest();
            this.aggregateDataController.getEntityParameterData(this.orgID, requestData)
                .subscribe((entityParamRes) => {
                let entityParameterData = entityParamRes === null || entityParamRes === void 0 ? void 0 : entityParamRes.paramData;
                this.showLoader = false;
                if (entityParameterData && entityParameterData.every(item => item.data.length == 0)) {
                    this.alertService.setAlertProperties(this.alertObj, DashboardErrorEnum.DATA_NOT_FOUND_LABEL, DashboardErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
                else {
                    this.viewStateFlag = ChartViewStateEnum.HAS_DATA;
                    this.chartData = [];
                    entityParameterData.forEach((res) => {
                        if (res.data.length > 0) {
                            const newChartdata = new BasicAreaLineBarChart();
                            newChartdata.metaData = res.data.map(item => ({
                                name: moment(new Date(item.date)).format("YYYY-MM-DD HH:mm:ss"),
                                value: item.value
                            }));
                            newChartdata.unit = {
                                name: '',
                                code: res.unit,
                            };
                            newChartdata.markLine = [
                                {
                                    label: 'Avg',
                                    value: res.avgValue,
                                    color: '#e83e8c'
                                },
                                {
                                    label: 'Max',
                                    value: res.maxValue,
                                    color: '#e83e8c'
                                }
                            ];
                            newChartdata.yAxisLabel = res.label + ' (' + res.unit + ')';
                            newChartdata.yAxisNameGap = 25;
                            newChartdata.showDataView = true;
                            newChartdata.showMagicType = true;
                            newChartdata.showRestore = true;
                            newChartdata.showDownloadImage = true;
                            newChartdata.chartTitle = {
                                name: res.label,
                                color: 'gray'
                            };
                            this.chartData.push(newChartdata);
                        }
                    });
                }
            }, error => {
                console.log('error in viewParameterData() - ', error);
                this.alertService.setAlertProperties(this.alertObj, DashboardErrorEnum.INVALID_ERROR_LABEL, DashboardErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
                throw error;
            });
        }
        catch (error) {
            console.error(`Error in viewEntityParameterData()`, error);
            this.alertService.setAlertProperties(this.alertObj, DashboardErrorEnum.INVALID_ERROR_LABEL, DashboardErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
        }
        finally {
            this.showLoader = false;
        }
    }
    isValidInputField() {
        const controls = [
            this.customDateInput.startDateFC,
            this.aggDurationInput.aggDurationFC,
            this.entityTypeInput.entityTypeFC,
            this.entityFC
        ];
        controls.forEach(control => control.markAsTouched());
        return controls.some(control => control.invalid);
    }
    createDataRequest() {
        const requestData = {};
        requestData['startTime'] = this.startDate;
        requestData['endTime'] = this.endDate;
        requestData['interval'] = this.aggDuration;
        requestData['entityID'] = [this.entityID];
        requestData['entityType'] = [this.entityTypeInput.entityTypeFC.value];
        return requestData;
    }
}
ByEntityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ByEntityComponent, deps: [{ token: i1.StorageService }, { token: i2.AlertService }, { token: i3.ToastrService }, { token: i4.EntityController }, { token: i5.AggregateDataController }, { token: i6.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
ByEntityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ByEntityComponent, selector: "lib-by-entity", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityTypeInput", first: true, predicate: ["entityTypeInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">By Entity</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\" [isMandatoryFieldInp]=\"true\"\n                    [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\" [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\"\n                    [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\" [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\"\n                    [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\" [showRangeInp]=\"true\"\n                    [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n            \n            <div class=\"col-sm-3\">\n                <lib-entity-type #entityTypeInput (emitFilter)=\"entityTypeInpChange()\"></lib-entity-type>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <button class=\"btn btn-link selectEntityText\" [ngClass]=\"{'mt-2': !selectEntityType || (isViewData && entityFC.value.length == 0)}\" type=\"button\"\n                    (click)=\"openEntityDialog()\">\n                    Select entity *\n                </button>\n                <span class=\"textMatError\" *ngIf=\"selectEntityType\">\n                    <br />\n                    Please select entity type first\n                </span>\n                <span class=\"ms-2 textMatError\" *ngIf=\"!selectEntityType && isViewData && entityFC.value.length == 0\">\n                    <br />\n                    Select entity\n                </span>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewEntityParameterData()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"alertObj.showAlert\" [labelInp]=\"alertObj.alertLabel\"\n                    [contentInp]=\"alertObj.alertContent\" [messageAlertTypeInp]=\"alertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"alertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <ng-container *ngIf=\"showLoader; else dataTemplate\">\n                <lib-skeleton-loader [count]=\"3\" [appearance]=\"''\"\n                    [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n            </ng-container>\n\n            <ng-template #dataTemplate>\n                <div class=\"row\" *ngIf=\"chartData.length > 0\">\n                    <div class=\"col-sm-6\" *ngFor=\"let data of chartData\">\n                        <mat-card class=\"cardOverwrite cardBackgroundColor mb-3\">\n                            <lib-basic-area-line-bar [chartTypeInp]=\"chartType\" [chartTitleInp]=\"data.chartTitle\"\n                                [viewStateInp]=\"viewStateFlag\" [dataInp]=\"data\">\n                            </lib-basic-area-line-bar>\n                        </mat-card>\n                    </div>\n                </div>\n            </ng-template>\n        </div>\n    </div>\n</div>", styles: [".selectEntityText{font-size:.88rem}\n"], components: [{ type: i7.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i8.AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i9.EntityTypeComponent, selector: "lib-entity-type", outputs: ["emitFilter"] }, { type: i10.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i10.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }, { type: i11.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i12.BasicAreaLineBarComponent, selector: "lib-basic-area-line-bar", inputs: ["chartTypeInp", "viewStateInp", "chartTitleInp", "dataInp"] }], directives: [{ type: i13.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i13.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ByEntityComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-by-entity',
                    templateUrl: './by-entity.component.html',
                    styleUrls: ['./by-entity.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.AlertService }, { type: i3.ToastrService }, { type: i4.EntityController }, { type: i5.AggregateDataController }, { type: i6.MatDialog }]; }, propDecorators: { customDateInput: [{
                type: ViewChild,
                args: ['customDateInput']
            }], aggDurationInput: [{
                type: ViewChild,
                args: ['aggDurationInput']
            }], entityTypeInput: [{
                type: ViewChild,
                args: ['entityTypeInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,