import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import * as moment from 'moment';
import { DashboardErrorEnum, ReportErrorEnum } from '../../../../enum/error.enum';
import { Parameter } from '../../../../model/parameter.model';
import { Alert } from '../../../../model/alert.model';
import { AggregateDataRequest } from '../../../../model/aggregate-data.model';
import { ButtonLabelEnum, COMMON_CONSTANT, FormErrorEnum, InvalidForm, MATERIAL_CONSTANT, MatSelectSearchService, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE, DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import { BasicAreaLineBarChart, ChartTitle, ChartTypeEnum, ChartViewStateEnum } from '@library/echart';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "../../../../service/alert.service";
import * as i3 from "@library/toastr-service";
import * as i4 from "../../../../controller/parameter.controller";
import * as i5 from "../../../../service/parameter.service";
import * as i6 from "../../../../service/aggregate-data.service";
import * as i7 from "@library/tsc-common";
import * as i8 from "@library/date";
import * as i9 from "../../../dropdown/aggregation-duration/aggregation-duration.component";
import * as i10 from "../../../dropdown/entity-type/entity-type.component";
import * as i11 from "@angular/material/form-field";
import * as i12 from "@angular/material/select";
import * as i13 from "@angular/material/core";
import * as i14 from "ngx-mat-select-search";
import * as i15 from "@angular/material/card";
import * as i16 from "@library/echart";
import * as i17 from "@angular/forms";
import * as i18 from "@angular/common";
// /tsc-library/
export class ByParameterComponent {
    constructor(storageService, alertService, toastService, parameterController, parameterService, aggregateDataService, tscCommonService) {
        this.storageService = storageService;
        this.alertService = alertService;
        this.toastService = toastService;
        this.parameterController = parameterController;
        this.parameterService = parameterService;
        this.aggregateDataService = aggregateDataService;
        this.tscCommonService = tscCommonService;
        this.materialConstant = MATERIAL_CONSTANT;
        this.commonConstant = COMMON_CONSTANT;
        this.customRangeConstant = CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
        this.buttonLabelEnum = ButtonLabelEnum;
        this.materialFormFieldAppearance = MaterialFormFieldAppearance;
        this.dateFormatEnum = DateFormatEnum;
        this.dateInputTypeEnum = DateInputTypeEnum;
        this.dateTypeEnum = DateTypeEnum;
        this.FormErrorEnum = FormErrorEnum;
        this.showAlert = false;
        this.showLoader = false;
        this.parameterM = [new Parameter()];
        this.parameterByEntityTypeM = [new Parameter()];
        this.alertObj = new Alert();
        this.parameterFC = new FormControl('', [Validators.required]);
        this.parameterSearchUtil = new MatSelectSearchService(['label']);
        this.chartType = ChartTypeEnum.BASIC_LINE_CHART;
        this.viewStateFlag = ChartViewStateEnum.LOADING;
        this.chartTitle = new ChartTitle();
        this.chartData = [];
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
    }
    getParameterByLayoutID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.parameterM = (yield this.parameterService.getParameterByLayoutID(this.orgID));
        });
    }
    dateInpChange() {
        this.startDate = this.customDateInput.startDateFC.value;
        this.endDate = this.customDateInput.endDateFC.value;
    }
    aggDurationInpChange() {
        this.aggDuration = this.aggDurationInput.aggDurationFC.value;
    }
    entityTypeInpChange() {
        this.entityType = this.entityTypeInput.entityTypeFC.value;
        this.getParameterByEntityType(this.entityType);
    }
    getParameterByEntityType(entityType) {
        let requestBody = {};
        requestBody['entityType'] = [entityType];
        this.parameterController.getParameterByEntityType(this.orgID, requestBody)
            .subscribe((res) => {
            this.parameterByEntityTypeM = res;
            this.parameterSearchUtil.entityArr = this.parameterByEntityTypeM;
            this.parameterSearchUtil.createSubscription();
        }, error => {
            console.log('error in getParameterByEntityType() - ', error);
        });
    }
    onParameterChange(selectedParameter) {
        this.parameterFC.patchValue(selectedParameter);
    }
    viewParameterData() {
        return __awaiter(this, void 0, void 0, function* () {
            this.chartData = [];
            this.alertService.resetAlertProperties(this.alertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.alertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = this.createDataRequest();
                const aggregateRes = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                this.showLoader = false;
                if (aggregateRes && aggregateRes.every(item => item.data.length == 0)) {
                    this.alertService.setAlertProperties(this.alertObj, DashboardErrorEnum.DATA_NOT_FOUND_LABEL, DashboardErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
                else {
                    this.viewStateFlag = ChartViewStateEnum.HAS_DATA;
                    this.chartData = [];
                    aggregateRes.forEach((res) => {
                        if (res.data.length > 0) {
                            const newChartdata = new BasicAreaLineBarChart();
                            newChartdata.metaData = res.data.map(item => ({
                                name: moment(new Date(item.date)).format("YYYY-MM-DD HH:mm:ss"),
                                value: item.value
                            }));
                            newChartdata.unit = {
                                name: '',
                                code: res.unit,
                            };
                            newChartdata.yAxisLabel = res.paramLabel + ' (' + res.unit + ')';
                            newChartdata.showDataView = true;
                            newChartdata.showMagicType = true;
                            newChartdata.showRestore = true;
                            newChartdata.showDownloadImage = true;
                            newChartdata.chartTitle = {
                                name: res.entityName,
                                color: 'gray'
                            };
                            this.chartData.push(newChartdata);
                        }
                    });
                }
            }
            catch (error) {
                console.error(`Error in getAggregateData()`, error);
                this.alertService.setAlertProperties(this.alertObj, DashboardErrorEnum.INVALID_ERROR_LABEL, DashboardErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    isValidInputField() {
        const controls = [
            this.customDateInput.startDateFC,
            this.aggDurationInput.aggDurationFC,
            this.entityTypeInput.entityTypeFC,
            this.parameterFC
        ];
        controls.forEach(control => control.markAsTouched());
        return controls.some(control => control.invalid);
    }
    createDataRequest() {
        const requestData = new AggregateDataRequest();
        const isCounterParameter = this.getCounterParameter(this.parameterFC.value);
        requestData.startTime = this.startDate;
        requestData.endTime = this.endDate;
        requestData.interval = this.aggDuration;
        requestData.entityType = this.entityTypeInput.entityTypeFC.value;
        requestData.params = [
            {
                name: this.parameterFC.value,
                dsAgg: "avg",
                agg: "avg",
                sourceLoadType: isCounterParameter ? "all" : null,
                source_or_load: isCounterParameter ? "source" : null,
            }
        ];
        requestData.nullifyParams();
        return requestData;
    }
    getCounterParameter(paramMetricValue) {
        const parameter = this.tscCommonService.getUniqueObject(this.parameterM, 'isCounter', paramMetricValue);
        return parameter ? parameter.isCounter : false;
    }
}
ByParameterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ByParameterComponent, deps: [{ token: i1.StorageService }, { token: i2.AlertService }, { token: i3.ToastrService }, { token: i4.ParameterController }, { token: i5.ParameterService }, { token: i6.AggregateDataService }, { token: i7.TSCCommonService }], target: i0.ɵɵFactoryTarget.Component });
ByParameterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ByParameterComponent, selector: "lib-by-parameter", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityTypeInput", first: true, predicate: ["entityTypeInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">By Parameter</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\"\n                    [showTimeInCDRInp]=\"true\" [showRangeInp]=\"true\"\n                    [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity-type #entityTypeInput (emitFilter)=\"entityTypeInpChange()\"></lib-entity-type>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\"\n                    [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select parameter</mat-label>\n                    <mat-select (selectionChange)=\"onParameterChange($event.value)\" [formControl]=\"parameterFC\"\n                        required>\n                        <ng-container\n                            *ngIf=\"parameterByEntityTypeM && parameterByEntityTypeM.length > 0 && parameterByEntityTypeM[0]['id']; else noDataFound\">\n                            <mat-option>\n                                <ngx-mat-select-search [formControl]=\"parameterSearchUtil.filterFC\"\n                                    placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                                </ngx-mat-select-search>\n                            </mat-option>\n                            <mat-option *ngFor=\"let parameter of parameterSearchUtil.filteredEntities | async\"\n                                [value]=\"parameter.paramMetric\">\n                                {{ parameter.label }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noDataFound>\n                            <mat-option disabled>\n                                {{ commonConstant.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n                    <mat-error *ngIf=\"!entityType\">\n                        Please select entity type first\n                    </mat-error>\n                    <mat-error *ngIf=\"parameterFC.touched && parameterFC.hasError('required') && entityType\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewParameterData()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"alertObj.showAlert\" [labelInp]=\"alertObj.alertLabel\"\n                    [contentInp]=\"alertObj.alertContent\" [messageAlertTypeInp]=\"alertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"alertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-2\">\n            <ng-container *ngIf=\"showLoader; else dataTemplate\">\n                <lib-skeleton-loader [count]=\"3\" [appearance]=\"''\"\n                    [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n            </ng-container>\n\n            <ng-template #dataTemplate>\n                <div class=\"row\" *ngIf=\"chartData.length > 0\">\n                    <div class=\"col-sm-6\" *ngFor=\"let data of chartData\">\n                        <mat-card class=\"cardOverwrite cardBackgroundColor mb-3\">\n                            <lib-basic-area-line-bar [chartTypeInp]=\"chartType\" [chartTitleInp]=\"data.chartTitle\"\n                                [viewStateInp]=\"viewStateFlag\" [dataInp]=\"data\">\n                            </lib-basic-area-line-bar>\n                        </mat-card>\n                    </div>\n                </div>\n            </ng-template>\n        </div>\n\n    </div>\n</div>", components: [{ type: i8.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i9.AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i10.EntityTypeComponent, selector: "lib-entity-type", outputs: ["emitFilter"] }, { type: i11.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i12.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i13.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i14.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i7.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i7.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }, { type: i15.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i16.BasicAreaLineBarComponent, selector: "lib-basic-area-line-bar", inputs: ["chartTypeInp", "viewStateInp", "chartTitleInp", "dataInp"] }], directives: [{ type: i11.MatLabel, selector: "mat-label" }, { type: i17.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i17.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i17.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i18.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i18.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i11.MatError, selector: "mat-error", inputs: ["id"] }, { type: i13.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }], pipes: { "async": i18.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ByParameterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-by-parameter',
                    templateUrl: './by-parameter.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.AlertService }, { type: i3.ToastrService }, { type: i4.ParameterController }, { type: i5.ParameterService }, { type: i6.AggregateDataService }, { type: i7.TSCCommonService }]; }, propDecorators: { customDateInput: [{
                type: ViewChild,
                args: ['customDateInput']
            }], aggDurationInput: [{
                type: ViewChild,
                args: ['aggDurationInput']
            }], entityTypeInput: [{
                type: ViewChild,
                args: ['entityTypeInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,