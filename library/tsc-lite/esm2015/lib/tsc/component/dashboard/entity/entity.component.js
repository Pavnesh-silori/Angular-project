import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { ParameterEntity, EntityType } from '../../../model/entity.model';
import { OrgRecentData, RecentDataRequestWithoutParam } from '../../../model/recent-data.model';
// tsc-library
import { COMMON_CONSTANT, FormErrorEnum, MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "../../../service/entity.service";
import * as i3 from "../../../service/recent-data.service";
import * as i4 from "@library/date";
import * as i5 from "../../../service/trend.service";
import * as i6 from "@angular/material/form-field";
import * as i7 from "@angular/material/select";
import * as i8 from "@angular/material/core";
import * as i9 from "ngx-mat-select-search";
import * as i10 from "@angular/material/expansion";
import * as i11 from "@library/tsc-common";
import * as i12 from "ngx-perfect-scrollbar";
import * as i13 from "@angular/material/radio";
import * as i14 from "@angular/material/card";
import * as i15 from "@angular/common";
import * as i16 from "@angular/forms";
import * as i17 from "@angular/material/tooltip";
// /tsc-library/
export class EntityDashboardComponent {
    constructor(storageService, entityService, recentDataService, dateService, trendService) {
        this.storageService = storageService;
        this.entityService = entityService;
        this.recentDataService = recentDataService;
        this.dateService = dateService;
        this.trendService = trendService;
        this.commonConstant = COMMON_CONSTANT;
        this.materialFormFieldAppearance = MaterialFormFieldAppearance;
        this.FormErrorEnum = FormErrorEnum;
        this.isAccordionOpen = true;
        //loader variable declaration
        this.entityTypeLoader = true;
        this.entityDeviceLoader = false;
        this.realTimeDeviceDataLoader = false;
        this.entityTypeM = [new EntityType()];
        this.entityDeviceM = new ParameterEntity();
        this.filteredEntityDeviceM = [];
        this.orgRecentDataM = [new OrgRecentData()];
        this.entityTypeFC = new FormControl('', Validators.required);
        this.entityFC = new FormControl('', Validators.required);
        this.entityTypeSearchUtil = new MatSelectSearchService(['type']);
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.layoutID = this.storageService.getStorage('layoutID');
        this.timezone = this.storageService.getStorage('timezone');
        this.getEntityTypeByLayoutID();
    }
    getEntityTypeByLayoutID() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.entityTypeM = (yield this.entityService.getEntityTypeByLayoutID(this.orgID, 'YES'));
                this.entityTypeSearchUtil.entityArr = this.entityTypeM;
                this.entityTypeSearchUtil.createSubscription();
                if (this.entityTypeM && this.entityTypeM.length > 0) {
                    const defaultEntityType = this.entityTypeM[0].type;
                    if (defaultEntityType) {
                        this.entityTypeFC.patchValue(defaultEntityType);
                        this.getEntitiesWithDevicesByLayoutID(this.entityTypeFC.value);
                    }
                }
            }
            catch (error) {
                console.error("Error in getEntityTypeByLayoutID()", error);
            }
            finally {
                this.entityTypeLoader = false;
            }
        });
    }
    entityTypeChange(selectedType) {
        this.entityFC.setValue('');
        this.entityTypeFC.patchValue(selectedType);
        this.orgRecentDataM = [new OrgRecentData()];
        this.getEntitiesWithDevicesByLayoutID(selectedType);
    }
    getEntitiesWithDevicesByLayoutID(entityType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.entityDeviceLoader = true;
                let requestBody = {
                    'entityType': [entityType]
                };
                this.entityDeviceM = yield this.entityService.getEntitiesWithDevicesByLayoutID(this.orgID, this.layoutID, requestBody, 'YES');
                this.filteredEntityDeviceM = [this.entityDeviceM];
            }
            catch (error) {
                console.error("Error in getEntitiesWithDevicesByLayoutID()", error);
            }
            finally {
                this.entityDeviceLoader = false;
            }
        });
    }
    searchFn(value) {
        const searchTerm = value.trim().toLowerCase();
        if (searchTerm.length > 0) {
            this.filteredEntityDeviceM = this.searchEntities([this.entityDeviceM], searchTerm);
        }
        else {
            this.searchBar.searchClear();
            this.filteredEntityDeviceM = [this.entityDeviceM];
        }
    }
    searchEntities(entities, searchTerm) {
        let results = [];
        entities.forEach(entity => {
            if (entity.name.toLowerCase().includes(searchTerm)) {
                results.push(entity);
            }
            else if (entity.children && entity.children.length > 0) {
                const matchingChildren = this.searchEntities(entity.children, searchTerm);
                if (matchingChildren.length > 0) {
                    const parentCopy = Object.assign({}, entity);
                    parentCopy.children = matchingChildren;
                    results.push(parentCopy);
                }
            }
        });
        return results;
    }
    openAccordion() {
        this.isAccordionOpen = true;
    }
    closeAccordion() {
        this.isAccordionOpen = false;
    }
    isDeviceAttached(entity) {
        return (entity.type == 'FACILITY' || entity.type == 'ENTITY') && entity.children && entity.children.some(child => child.type == 'DEVICE');
    }
    onEntityDeviceSelection() {
        const selectedValue = this.entityFC.value;
        this.realTimeDeviceDataLoader = true;
        this.getOrgRecentData(selectedValue);
    }
    getTooltipLabel(entity) {
        if (entity.type == 'FACILITY') {
            return 'Facility';
        }
        else if (entity.type == 'ENTITY') {
            return 'Entity';
        }
        else if (entity.type == 'DEVICE') {
            return 'Device';
        }
    }
    getOrgRecentData(selectedValue) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let requestBody = new RecentDataRequestWithoutParam();
                requestBody.entityID = selectedValue;
                requestBody.timezone = this.timezone;
                requestBody.backscan = 1;
                this.orgRecentDataM = (yield this.recentDataService.getOrgRecentData(this.orgID, requestBody));
            }
            catch (error) {
                console.error("Error in getOrgRecentData()", error);
            }
            finally {
                this.realTimeDeviceDataLoader = false;
            }
        });
    }
    showTrend(paramMetric, entityID, deviceID) {
        let requestBody = {
            paramMetric: paramMetric,
            entityID: entityID,
            deviceID: deviceID
        };
        this.trendService.openDialog(requestBody);
    }
}
EntityDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: EntityDashboardComponent, deps: [{ token: i1.StorageService }, { token: i2.EntityService }, { token: i3.RecentDataService }, { token: i4.DateService }, { token: i5.TrendService }], target: i0.ɵɵFactoryTarget.Component });
EntityDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: EntityDashboardComponent, selector: "lib-entity", viewQueries: [{ propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "scrollContainer", first: true, predicate: ["scrollContainer"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Entity Dashboard</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <ng-container *ngIf=\"entityTypeLoader; else showEntityType\">\n                <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 1 }\"></ng-container>\n            </ng-container>\n\n            <ng-template #showEntityType>\n                <div class=\"col-sm-3\">\n                    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select entity type</mat-label>\n                        <mat-select (selectionChange)=\"entityTypeChange($event.value)\" [formControl]=\"entityTypeFC\" required>\n                            <ng-container *ngIf=\"entityTypeM && entityTypeM.length > 0 && entityTypeM?.[0]?.type; else noDataFound\">\n                                <mat-option>\n                                    <ngx-mat-select-search [formControl]=\"entityTypeSearchUtil.filterFC\"\n                                        placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                                    </ngx-mat-select-search>\n                                </mat-option>\n                                <mat-option *ngFor=\"let type of entityTypeSearchUtil.filteredEntities | async\"\n                                    [value]=\"type.type\">\n                                    {{ type.type | titlecase }}\n                                </mat-option>\n                            </ng-container>\n                            <ng-template #noDataFound>\n                                <mat-option disabled>\n                                    {{ commonConstant.NO_DATA_FOUND }}\n                                </mat-option>\n                            </ng-template>\n                        </mat-select>\n                        <mat-error *ngIf=\"entityTypeFC.touched && entityTypeFC.hasError('required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </ng-template>\n        </div>\n\n        <div class=\"row mt-2\">\n            <div class=\"col-sm-6\">\n                <mat-accordion>\n                    <mat-expansion-panel class=\"matAccordion\" [expanded]=\"isAccordionOpen\" (opened)=\"openAccordion()\"\n                        (closed)=\"closeAccordion()\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                <div class=\"cardTitle\">\n                                    Select entity\n                                </div>\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <lib-search-bar-two class=\"float-end me-3\" #searchBar searchBy=\"name\"\n                                    (emitSearch)=\"searchFn($event)\">\n                                </lib-search-bar-two>\n                            </div>\n                        </div>\n                        \n                        <perfect-scrollbar class=\"scrollHeight\" [config]=\"{useBothWheelAxes: true, suppressScrollX: false, suppressScrollY: false}\" #scrollContainer>\n                            <ng-container *ngIf=\"entityDeviceLoader; else entityDeviceView\">\n                                <div class=\"mt-2\">\n                                    <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 3 }\"></ng-container>\n                                </div>\n                            </ng-container>\n                            <ng-template #entityDeviceView>\n                                <mat-radio-group [formControl]=\"entityFC\" (change)=\"onEntityDeviceSelection()\">\n                                    <div *ngFor=\"let entity of filteredEntityDeviceM\">\n                                        <ng-container *ngTemplateOutlet=\"entityTemplate; context:{ $implicit: entity }\"></ng-container>\n                                    </div>\n\n                                    <ng-template #entityTemplate let-entity>\n                                        <div class=\"ms-3 mt-2\">\n                                            <ng-container *ngIf=\"isDeviceAttached(entity); else entityView\">\n                                                <mat-radio-button class=\"radioBtnLabel me-2\" [value]=\"entity.id\">\n                                                    <span class=\"badge rounded-pill\" [ngClass]=\"{'facility': entity.type == 'FACILITY', 'entity': entity.type == 'ENTITY', 'device': entity.type == 'DEVICE'}\"\n                                                        [matTooltip]=\"getTooltipLabel(entity)\" matTooltipPosition=\"above\">\n                                                        <div class=\"d-flex align-items-center\">\n                                                            <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'FACILITY'\">factory</span>\n                                                            <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'ENTITY'\">domain</span>\n                                                            <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'DEVICE'\">devices</span>\n                                                            {{ entity.name }}\n                                                        </div>\n                                                    </span>\n                                                </mat-radio-button>\n                                            </ng-container>\n\n                                            <ng-template #entityView>\n                                                <span class=\"badge rounded-pill\" [ngClass]=\"{'facility': entity.type == 'FACILITY', 'entity': entity.type == 'ENTITY', 'device': entity.type == 'DEVICE'}\"\n                                                    [matTooltip]=\"getTooltipLabel(entity)\" matTooltipPosition=\"above\">\n                                                    <div class=\"d-flex align-items-center\">\n                                                        <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'FACILITY'\">factory</span>\n                                                        <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'ENTITY'\">domain</span>\n                                                        <span class=\"material-symbols-outlined me-2\" *ngIf=\"entity.type == 'DEVICE'\">devices</span>\n                                                        {{ entity.name }}\n                                                    </div>\n                                                </span>\n                                            </ng-template>\n                                        </div>\n\n                                        <div *ngIf=\"entity.children && entity.children.length > 0\" class=\"ms-3 mt-2\">\n                                            <ng-container *ngFor=\"let child of entity.children\">\n                                                <ng-container\n                                                    *ngTemplateOutlet=\"entityTemplate; context:{ $implicit: child }\"></ng-container>\n                                            </ng-container>\n                                        </div>\n                                    </ng-template>\n                                </mat-radio-group>\n                                \n                            </ng-template>\n                        </perfect-scrollbar>\n                    </mat-expansion-panel>\n                </mat-accordion>\n            </div>\n\n            <div class=\"col-sm-6\">\n                <mat-card class=\"cardOverwrite cardBackgroundColor cardHeight2\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"d-flex align-items-center\">\n                                <span class=\"material-symbols-outlined me-3\">\n                                    devices\n                                </span>\n                                <span class=\"cardTitle mt-1\">\n                                    Real time data\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <hr>\n                    <perfect-scrollbar class=\"scrollHeight\">\n                        <ng-container *ngIf=\"realTimeDeviceDataLoader; else realTimeDeviceDataView\">\n                            <ng-container *ngTemplateOutlet=\"showLoader; context: { count: 3 }\"></ng-container>\n                        </ng-container>\n\n                        <ng-template #realTimeDeviceDataView>\n                            <ng-container *ngFor=\"let realTimeData of orgRecentDataM;\">\n                                <ng-container *ngTemplateOutlet=\"parameterSummary; context: {\n                                    device: realTimeData?.deviceData,\n                                    entityID: realTimeData?.entityID\n                                }\"></ng-container>\n                            </ng-container>\n                        </ng-template>\n                    </perfect-scrollbar>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #parameterSummary let-device=\"device\" let-entityID=\"entityID\">\n    <ng-container *ngFor=\"let deviceData of device;\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"d-flex align-items-center fw-bold\">\n                    <span class=\"material-symbols-outlined me-1\"\n                        [ngClass]=\"{'text-success': deviceData.status == 'LIVE', 'text-secondary': deviceData.status == 'OFFLINE' || deviceData.status == 'NO_DATA'}\">\n                        devices\n                    </span>\n                    {{ deviceData.name ? deviceData.name : commonConstant.HYPHEN }}\n                </div>\n            </div>\n        </div>\n        <div class=\"row mt-2\" *ngFor=\"let parameterData of deviceData.paramData;\">\n            <div class=\"col-sm-4 text-start text-secondary\">\n                {{ parameterData.label ? parameterData.label : commonConstant.HYPHEN }}\n            </div>\n            <div class=\"col-sm-4 text-center\">\n                <a class=\"text-primary cursorPointer fw-bold\" matTooltip=\"Trend\" matTooltipPosition=\"above\"\n                    (click)=\"showTrend(parameterData?.name, entityID, deviceData?.id)\">\n                    <span> {{ parameterData?.data?.value ? parameterData?.data?.value : commonConstant.HYPHEN }} </span>\n                    <span> {{ parameterData?.data?.value ? parameterData?.unit : '' }} </span>\n                </a>\n            </div>\n            <div class=\"col-sm-4 text-start text-secondary\">\n                {{ dateService.getRelativeTimeAgoLabel(parameterData?.data?.date, timezone) }}\n            </div>\n        </div>\n        <hr>\n    </ng-container>\n</ng-template>\n\n<ng-template #showLoader let-count=\"count\">\n    <lib-skeleton-loader [count]=\"count\" [appearance]=\"''\"\n        [theme]=\"{ 'border-radius': '16px', height: '40px', 'background-color': 'rgb(230 232 235)' }\"></lib-skeleton-loader>\n</ng-template>", styles: [".labelColor{color:#0009}.matAccordion{box-shadow:none!important;background:whitesmoke;border-radius:16px!important}.badge{font-weight:normal;font-size:1em;padding:1.4px 15px;text-transform:none}.facility{background-color:#e3e2e2;color:#000}.entity{background-color:#e7effc;color:#084298}.device{background-color:#e0f7eb;color:#1c8a51}.cardHeight1{height:490px}.cardHeight2{height:520px}.scrollHeight{height:410px}\n"], components: [{ type: i6.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i7.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i8.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i9.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i10.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i10.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { type: i11.SearchBarTwoComponent, selector: "lib-search-bar-two", inputs: ["type", "searchBy", "clear"], outputs: ["emitSearch"] }, { type: i12.PerfectScrollbarComponent, selector: "perfect-scrollbar", inputs: ["disabled", "usePSClass", "autoPropagation", "scrollIndicators", "config"], outputs: ["psScrollY", "psScrollX", "psScrollUp", "psScrollDown", "psScrollLeft", "psScrollRight", "psYReachEnd", "psYReachStart", "psXReachEnd", "psXReachStart"], exportAs: ["ngxPerfectScrollbar"] }, { type: i13.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i14.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i11.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i15.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.MatLabel, selector: "mat-label" }, { type: i16.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i16.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i16.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i15.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.MatError, selector: "mat-error", inputs: ["id"] }, { type: i10.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i10.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i13.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i15.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i17.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }], pipes: { "async": i15.AsyncPipe, "titlecase": i15.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: EntityDashboardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-entity',
                    templateUrl: './entity.component.html',
                    styleUrls: ['./entity.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.EntityService }, { type: i3.RecentDataService }, { type: i4.DateService }, { type: i5.TrendService }]; }, propDecorators: { searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }], scrollContainer: [{
                type: ViewChild,
                args: ['scrollContainer']
            }] } });
//# sourceMappingURL=data:application/json;base64,