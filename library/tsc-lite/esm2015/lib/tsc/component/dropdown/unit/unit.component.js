import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { Unit } from '../../../model/unit.model';
import { COMMON_CONSTANT, MaterialFormFieldAppearance, MatSelectSearchService } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "../../../service/unit.service";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/select";
import * as i5 from "@angular/material/core";
import * as i6 from "ngx-mat-select-search";
import * as i7 from "@angular/forms";
import * as i8 from "@angular/common";
// /tsc-library/
export class UnitComponent {
    constructor(storageService, unitService) {
        this.storageService = storageService;
        this.unitService = unitService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.emitFilter = new EventEmitter();
        this.unitM = [new Unit()];
        this.selectedUnitFC = new FormControl('', [Validators.required]);
        this.unitSearchUtil = new MatSelectSearchService(['name']);
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
    }
    ngOnChanges(changes) {
        if (this.selectedParameterID) {
            if (changes.selectedParameterID) {
                this.getUnitByParameterID(this.selectedParameterID);
            }
        }
    }
    getUnitByParameterID(parameterID) {
        return __awaiter(this, void 0, void 0, function* () {
            this.unitM = (yield this.unitService.getUnitByParameterID(this.orgID, parameterID));
            this.unitSearchUtil.entityArr = this.unitM;
            this.unitSearchUtil.createSubscription();
        });
    }
    unitChange(selectedUnit) {
        this.selectedUnitFC.patchValue(selectedUnit);
        this.emitFilter.emit();
    }
}
UnitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: UnitComponent, deps: [{ token: i1.StorageService }, { token: i2.UnitService }], target: i0.ɵɵFactoryTarget.Component });
UnitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: UnitComponent, selector: "lib-unit", inputs: { selectedParameterID: "selectedParameterID" }, outputs: { emitFilter: "emitFilter" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"row\">\n    <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n        <mat-label>Select unit</mat-label>\n        <mat-select (selectionChange)=\"unitChange($event.value)\" [formControl]=\"selectedUnitFC\" required>\n            <ng-container *ngIf=\"unitM && unitM.length > 0 && unitM[0]['id']; else noDataFound\">\n                <mat-option>\n                    <ngx-mat-select-search [formControl]=\"unitSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                        noEntriesFoundLabel=\"No matching name found.\">\n                    </ngx-mat-select-search>\n                </mat-option>\n                <mat-option *ngFor=\"let unit of unitSearchUtil.filteredEntities | async\" [value]=\"unit.id\">\n                    {{ unit.name }}\n                </mat-option>\n            </ng-container>\n            <ng-template #noDataFound>\n                <mat-option disabled>\n                    {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                </mat-option>\n            </ng-template>\n        </mat-select>\n        <mat-error *ngIf=\"!selectedParameterID\">\n            Please select parameter first\n        </mat-error>\n        <mat-error *ngIf=\"selectedUnitFC.hasError('required') && selectedParameterID\">\n            Select unit\n        </mat-error>\n    </mat-form-field>\n</div>", components: [{ type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i4.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i5.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i6.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }], directives: [{ type: i3.MatLabel, selector: "mat-label" }, { type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.MatError, selector: "mat-error", inputs: ["id"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: UnitComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-unit',
                    templateUrl: './unit.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.UnitService }]; }, propDecorators: { selectedParameterID: [{
                type: Input
            }], emitFilter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9kcm9wZG93bi91bml0L3VuaXQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtbGl0ZS9zcmMvbGliL3RzYy9jb21wb25lbnQvZHJvcGRvd24vdW5pdC91bml0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU5RixPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXpELE9BQU8sRUFBRSxJQUFJLEVBQVMsTUFBTSwyQkFBMkIsQ0FBQztBQU14RCxPQUFPLEVBQUUsZUFBZSxFQUFFLDJCQUEyQixFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7Ozs7Ozs7QUFDM0csZ0JBQWdCO0FBU2hCLE1BQU0sT0FBTyxhQUFhO0lBbUJ0QixZQUNZLGNBQThCLEVBQzlCLFdBQXdCO1FBRHhCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQWhCcEMsb0JBQWUsR0FBRyxlQUFlLENBQUM7UUFDbEMsZ0NBQTJCLEdBQUcsMkJBQTJCLENBQUM7UUFHMUQsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJaEMsVUFBSyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXJCLG1CQUFjLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRXpFLG1CQUFjLEdBQTJCLElBQUksc0JBQXNCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBSzFFLENBQUM7SUFFTCxRQUFRO1FBQ0osSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFCLElBQUksT0FBTyxDQUFDLG1CQUFtQixFQUFFO2dCQUM3QixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDdkQ7U0FDSjtJQUNMLENBQUM7SUFFSyxvQkFBb0IsQ0FBQyxXQUFXOztZQUNsQyxJQUFJLENBQUMsS0FBSyxJQUFZLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFBLENBQUM7WUFFM0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMzQyxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDN0MsQ0FBQztLQUFBO0lBRUQsVUFBVSxDQUFDLFlBQVk7UUFDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzsyR0E5Q1EsYUFBYTsrRkFBYixhQUFhLG9LQ3BCMUIsZzRDQTJCTTs0RkRQTyxhQUFhO2tCQVB6QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxVQUFVO29CQUNwQixXQUFXLEVBQUUsdUJBQXVCO29CQUNwQyxNQUFNLEVBQUUsRUFDUDtpQkFDSjsrSEFLRyxtQkFBbUI7c0JBRGxCLEtBQUs7Z0JBT04sVUFBVTtzQkFEVCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgVW5pdCwgVW5pdE0gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC91bml0Lm1vZGVsJztcblxuaW1wb3J0IHsgVW5pdFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL3VuaXQuc2VydmljZSc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3N0b3JhZ2Utc2VydmljZSc7XG5pbXBvcnQgeyBDT01NT05fQ09OU1RBTlQsIE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSwgTWF0U2VsZWN0U2VhcmNoU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3RzYy1jb21tb24nO1xuLy8gL3RzYy1saWJyYXJ5L1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2xpYi11bml0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdW5pdC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVzOiBbXG4gICAgXVxufSlcblxuZXhwb3J0IGNsYXNzIFVuaXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgQElucHV0KClcbiAgICBzZWxlY3RlZFBhcmFtZXRlcklEOiBhbnk7XG5cbiAgICBDT01NT05fQ09OU1RBTlQgPSBDT01NT05fQ09OU1RBTlQ7XG4gICAgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlID0gTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZW1pdEZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIG9yZ0lEOiBhbnk7XG5cbiAgICB1bml0TSA9IFtuZXcgVW5pdCgpXTtcblxuICAgIHNlbGVjdGVkVW5pdEZDOiBGb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWRdKTtcblxuICAgIHVuaXRTZWFyY2hVdGlsOiBNYXRTZWxlY3RTZWFyY2hTZXJ2aWNlID0gbmV3IE1hdFNlbGVjdFNlYXJjaFNlcnZpY2UoWyduYW1lJ10pO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHVuaXRTZXJ2aWNlOiBVbml0U2VydmljZVxuICAgICkgeyB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcmdJRCA9IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0U3RvcmFnZSgnY3VycmVudE9yZ0lEJyk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFBhcmFtZXRlcklEKSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5zZWxlY3RlZFBhcmFtZXRlcklEKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRVbml0QnlQYXJhbWV0ZXJJRCh0aGlzLnNlbGVjdGVkUGFyYW1ldGVySUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VW5pdEJ5UGFyYW1ldGVySUQocGFyYW1ldGVySUQpIHtcbiAgICAgICAgdGhpcy51bml0TSA9IDxVbml0TVtdPmF3YWl0IHRoaXMudW5pdFNlcnZpY2UuZ2V0VW5pdEJ5UGFyYW1ldGVySUQodGhpcy5vcmdJRCwgcGFyYW1ldGVySUQpO1xuXG4gICAgICAgIHRoaXMudW5pdFNlYXJjaFV0aWwuZW50aXR5QXJyID0gdGhpcy51bml0TTtcbiAgICAgICAgdGhpcy51bml0U2VhcmNoVXRpbC5jcmVhdGVTdWJzY3JpcHRpb24oKTtcbiAgICB9XG5cbiAgICB1bml0Q2hhbmdlKHNlbGVjdGVkVW5pdCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVW5pdEZDLnBhdGNoVmFsdWUoc2VsZWN0ZWRVbml0KTtcbiAgICAgICAgdGhpcy5lbWl0RmlsdGVyLmVtaXQoKTtcbiAgICB9XG5cbn0iLCI8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwibWF0RmllbGRXaWR0aDEwMFwiIFthcHBlYXJhbmNlXT1cIk1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZS5GT1JNX0ZJRUxEX0FQUEVBUkFOQ0VcIj5cbiAgICAgICAgPG1hdC1sYWJlbD5TZWxlY3QgdW5pdDwvbWF0LWxhYmVsPlxuICAgICAgICA8bWF0LXNlbGVjdCAoc2VsZWN0aW9uQ2hhbmdlKT1cInVuaXRDaGFuZ2UoJGV2ZW50LnZhbHVlKVwiIFtmb3JtQ29udHJvbF09XCJzZWxlY3RlZFVuaXRGQ1wiIHJlcXVpcmVkPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInVuaXRNICYmIHVuaXRNLmxlbmd0aCA+IDAgJiYgdW5pdE1bMF1bJ2lkJ107IGVsc2Ugbm9EYXRhRm91bmRcIj5cbiAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPG5neC1tYXQtc2VsZWN0LXNlYXJjaCBbZm9ybUNvbnRyb2xdPVwidW5pdFNlYXJjaFV0aWwuZmlsdGVyRkNcIiBwbGFjZWhvbGRlckxhYmVsPVwiU2VhcmNoIGJ5IG5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbm9FbnRyaWVzRm91bmRMYWJlbD1cIk5vIG1hdGNoaW5nIG5hbWUgZm91bmQuXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvbmd4LW1hdC1zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvbWF0LW9wdGlvbj5cbiAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiAqbmdGb3I9XCJsZXQgdW5pdCBvZiB1bml0U2VhcmNoVXRpbC5maWx0ZXJlZEVudGl0aWVzIHwgYXN5bmNcIiBbdmFsdWVdPVwidW5pdC5pZFwiPlxuICAgICAgICAgICAgICAgICAgICB7eyB1bml0Lm5hbWUgfX1cbiAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjbm9EYXRhRm91bmQ+XG4gICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gZGlzYWJsZWQ+XG4gICAgICAgICAgICAgICAgICAgIHt7IENPTU1PTl9DT05TVEFOVC5OT19EQVRBX0ZPVU5EIH19XG4gICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC9tYXQtc2VsZWN0PlxuICAgICAgICA8bWF0LWVycm9yICpuZ0lmPVwiIXNlbGVjdGVkUGFyYW1ldGVySURcIj5cbiAgICAgICAgICAgIFBsZWFzZSBzZWxlY3QgcGFyYW1ldGVyIGZpcnN0XG4gICAgICAgIDwvbWF0LWVycm9yPlxuICAgICAgICA8bWF0LWVycm9yICpuZ0lmPVwic2VsZWN0ZWRVbml0RkMuaGFzRXJyb3IoJ3JlcXVpcmVkJykgJiYgc2VsZWN0ZWRQYXJhbWV0ZXJJRFwiPlxuICAgICAgICAgICAgU2VsZWN0IHVuaXRcbiAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgPC9tYXQtZm9ybS1maWVsZD5cbjwvZGl2PiJdfQ==