import { __awaiter } from "tslib";
import { Component, Inject, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { isEqual } from 'lodash';
// tsc-library
import { MaterialFormFieldAppearance, ButtonLabelEnum, FormAction, PageTitleEnum, FormErrorEnum, InvalidForm, COMMON_CONSTANT, Static, DialogResponseEnum, ButtonTooltipEnum, MATERIAL_CONSTANT } from '@library/tsc-common';
import { ToastrColor } from '@library/toastr-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/forms";
import * as i3 from "@library/storage-service";
import * as i4 from "@library/toastr-service";
import * as i5 from "@library/tsc-common";
import * as i6 from "../../../../../controller/source.controller";
import * as i7 from "../../../../../service/source.service";
import * as i8 from "@angular/material/form-field";
import * as i9 from "@angular/material/select";
import * as i10 from "@angular/material/core";
import * as i11 from "@angular/material/tooltip";
import * as i12 from "@angular/material/input";
import * as i13 from "@angular/common";
// /tsc-library/
export class SourceCreateUpdateComponent {
    constructor(data, dialogRef, renderer, formBuilder, storageService, toastrService, tscCommonService, sourceController, sourceService) {
        this.data = data;
        this.dialogRef = dialogRef;
        this.renderer = renderer;
        this.formBuilder = formBuilder;
        this.storageService = storageService;
        this.toastrService = toastrService;
        this.tscCommonService = tscCommonService;
        this.sourceController = sourceController;
        this.sourceService = sourceService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.FormAction = FormAction;
        this.FormErrorEnum = FormErrorEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.ButtonTooltipEnum = ButtonTooltipEnum;
        this.PageTitleEnum = PageTitleEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.pageTitle = 'Source type';
        this.isEqual = true;
        this.allSourceTypeID = [];
        this.totalSourceTypeCount = 0;
        this.utilitySourceI = [new Static()];
        this.sourceType = [new Static()];
        this.errorHandling = (formGroup, controlPath, error) => {
            return formGroup.get(controlPath).hasError(error);
        };
        this.action = data.action;
        this.sourceID = data.sourceID;
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.getUtilitySourceAndType();
        this.sourceFGInit();
        if (this.action == FormAction.UPDATE) {
            this.getSourceTypeByID(this.sourceID);
        }
    }
    ngAfterViewInit() {
        this.heightHandler();
    }
    heightHandler() {
        const headerHeight = this.header.nativeElement.offsetHeight;
        const footerHeight = this.footer.nativeElement.offsetHeight;
        const offsetHeight = 'calc(100vh - ' + (headerHeight + footerHeight + 24) + 'px)';
        this.renderer.setStyle(this.body.nativeElement, 'height', offsetHeight);
        this.renderer.setStyle(this.body.nativeElement, 'max-height', offsetHeight);
    }
    getUtilitySourceAndType() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sourceService.getUtilitySourceAndType(this.orgID);
            this.utilitySourceTypeM = result.utilitySource;
        });
    }
    sourceFGInit() {
        this.sourceFG = this.formBuilder.group({
            name: [, [Validators.required]],
            utilitySourceID: [, [Validators.required]],
            typeID: [, [Validators.required]]
        });
    }
    onUtilitySourceChange(utilitySourceID) {
        const selectedUtilitySource = this.utilitySourceTypeM.find(source => source.id == utilitySourceID);
        if (selectedUtilitySource) {
            this.sourceType = selectedUtilitySource.type;
        }
        else {
            this.sourceType = [];
        }
    }
    sourceSubmit() {
        if (this.sourceFG.invalid) {
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        else {
            if (this.action == FormAction.CREATE) {
                this.createSourceType();
            }
            else if (this.action == FormAction.UPDATE) {
                this.updateSourceType();
            }
        }
    }
    createSourceType() {
        this.sourceController.createSourceType(this.orgID, this.sourceFG.value).subscribe((res) => {
            let result;
            result = {
                status: DialogResponseEnum.SUCCESS,
            };
            this.dialogRef.close(result);
        }, error => {
            console.log('error in createSourceType -', error);
        });
    }
    getSourceTypeByID(sourceID) {
        this.sourceController.getSourceTypeByID(this.orgID, sourceID).subscribe((res) => {
            this.sourceM = res;
            this.patchSource(this.sourceM);
        }, error => {
            console.log('error in getSourceTypeByID -', error);
        });
    }
    patchSource(source) {
        this.sourceFG.patchValue(source);
        this.onUtilitySourceChange(source.utilitySourceID);
        this.intialObject = this.sourceFG.value;
        this.sourceFG.valueChanges.subscribe(() => {
            this.isEqual = isEqual(this.intialObject, this.sourceFG.value);
        });
    }
    updateSourceType() {
        this.sourceController.updateSourceType(this.orgID, this.sourceID, this.sourceFG.value).subscribe((res) => {
            let result;
            result = {
                status: DialogResponseEnum.SUCCESS,
            };
            this.dialogRef.close(result);
        }, error => {
            console.log('error in updateSourceType -', error);
        });
    }
}
SourceCreateUpdateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SourceCreateUpdateComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1.MatDialogRef }, { token: i0.Renderer2 }, { token: i2.FormBuilder }, { token: i3.StorageService }, { token: i4.ToastrService }, { token: i5.TSCCommonService }, { token: i6.SourceController }, { token: i7.SourceService }], target: i0.ɵɵFactoryTarget.Component });
SourceCreateUpdateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourceCreateUpdateComponent, selector: "lib-create-update", viewQueries: [{ propertyName: "header", first: true, predicate: ["header"], descendants: true }, { propertyName: "footer", first: true, predicate: ["footer"], descendants: true }, { propertyName: "body", first: true, predicate: ["body"], descendants: true }], ngImport: i0, template: "<div class=\"headerContainer p-0\" #header>\n    <div class=\"headerLeftContainer\">\n        <div class=\"pageTitle\">{{ action == FormAction.CREATE ? PageTitleEnum.CREATE :\n            PageTitleEnum.UPDATE }} {{ pageTitle }}</div>\n    </div>\n\n    <div class=\"headerRightContainer\">\n        <div class=\"headerRightContainerInner\">\n            <button class=\"btn btn-sm centerAlign py-1 iconBtn\" matRipple\n                [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                [matTooltip]=\"ButtonTooltipEnum.CLOSE\" mat-dialog-close>\n                <span class=\"material-symbols-outlined\">\n                    close\n                </span>\n            </button>\n        </div>\n    </div>\n</div>\n\n<mat-dialog-content class=\"mat-typography customScrollBar pt-2\" #body>\n    <form [formGroup]=\"sourceFG\" (ngSubmit)=\"sourceSubmit()\">\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\"\n                    [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label class=\"formLabel\">Name</mat-label>\n                    <input class=\"formPlaceholder\" type=\"text\" placeholder=\"Source name\" matInput formControlName=\"name\"\n                        required />\n                    <mat-error *ngIf=\"errorHandling(sourceFG, 'name', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select utility source</mat-label>\n\n                    <mat-select formControlName=\"utilitySourceID\" (selectionChange)=\"onUtilitySourceChange($event.value)\" required>\n                        <ng-container\n                            *ngIf=\"utilitySourceTypeM && utilitySourceTypeM.length > 0 && utilitySourceTypeM[0]['id']; else noUtilitySource\">\n                            <mat-option *ngFor=\"let utilitySource of utilitySourceTypeM\" [value]=\"utilitySource.id\">\n                                {{ utilitySource.name }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noUtilitySource>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"errorHandling(sourceFG, 'utilitySourceID', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select utility source type</mat-label>\n\n                    <mat-select formControlName=\"typeID\" required>\n                        <ng-container *ngIf=\"sourceType && sourceType.length > 0 && sourceType[0]['id']; else noSourceType\">\n                            <mat-option *ngFor=\"let type of sourceType\" [value]=\"type.id\">\n                                {{ type.name }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noSourceType>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"errorHandling(sourceFG, 'typeID', 'required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n    </form>\n</mat-dialog-content>\n\n<div class=\"tscDialogFooter\" #footer>\n    <button class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled': isEqual && action == FormAction.UPDATE}\"\n        (click)=\"formSubmitBtn.click()\" matRipple [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\"\n        matTooltipPosition=\"below\" [matTooltip]=\"ButtonTooltipEnum.NO_CHANGE\"> {{\n        tscCommonService.getButtonLabel(action) }}</button>\n    <button class=\"btn btn-sm btn-secondary me-2\" mat-dialog-close matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">Cancel</button>\n</div>", components: [{ type: i8.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i9.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i10.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i10.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i11.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.MatLabel, selector: "mat-label" }, { type: i12.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.MatError, selector: "mat-error", inputs: ["id"] }, { type: i13.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i13.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SourceCreateUpdateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-create-update',
                    templateUrl: './create-update.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef }, { type: i0.Renderer2 }, { type: i2.FormBuilder }, { type: i3.StorageService }, { type: i4.ToastrService }, { type: i5.TSCCommonService }, { type: i6.SourceController }, { type: i7.SourceService }]; }, propDecorators: { header: [{
                type: ViewChild,
                args: ['header']
            }], footer: [{
                type: ViewChild,
                args: ['footer']
            }], body: [{
                type: ViewChild,
                args: ['body']
            }] } });
//# sourceMappingURL=data:application/json;base64,