import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { SelectionModel } from '@angular/cdk/collections';
import { isEqual } from 'lodash';
import { SourceConsumerConfigure } from '../../../../model/source-consumer.model';
// tsc-library
import { MaterialFormFieldAppearance, ButtonLabelEnum, FormAction, PageTitleEnum, FormErrorEnum, InvalidForm, COMMON_CONSTANT, MatSelectSearchService, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { ToastrColor } from '@library/toastr-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/toastr-service";
import * as i4 from "@library/tsc-common";
import * as i5 from "../../../../controller/source.controller";
import * as i6 from "../../../../controller/parameter.controller";
import * as i7 from "../../../../service/parameter.service";
import * as i8 from "@angular/material/checkbox";
import * as i9 from "@angular/material/form-field";
import * as i10 from "@angular/material/select";
import * as i11 from "ngx-mat-select-search";
import * as i12 from "@angular/material/core";
import * as i13 from "@angular/common";
// /tsc-library/
export class ConsumptionParamAddUpdateComponent {
    constructor(formBuilder, storageService, toastrService, tscCommonService, sourceController, parameterController, parameterService) {
        this.formBuilder = formBuilder;
        this.storageService = storageService;
        this.toastrService = toastrService;
        this.tscCommonService = tscCommonService;
        this.sourceController = sourceController;
        this.parameterController = parameterController;
        this.parameterService = parameterService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.FormAction = FormAction;
        this.FormErrorEnum = FormErrorEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.PageTitleEnum = PageTitleEnum;
        this.MessageAlertIconEnum = MessageAlertIconEnum;
        this.MessageAlertTypeEnum = MessageAlertTypeEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.isEqual = true;
        this.sourceConsumerConfiguredM = new SourceConsumerConfigure();
        this.allConsumptionParamID = [];
        this.selection = new SelectionModel(true, []);
        this.dependentConsumParamSearchUtil = [];
        this.hasError = (control, error) => {
            return this.consumptionParamFG.get(control).hasError(error);
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.getSourceConsumerConfig();
        this.consumptionParamFGInit();
    }
    getSourceConsumerConfig() {
        this.sourceController.getSourceConsumerConfig(this.orgID).subscribe((res) => {
            this.sourceConsumerConfiguredM = res;
            this.getConsumptionParameter();
        }, error => console.log('Error:', error));
    }
    getConsumptionParameter() {
        this.consumptionParamFG.valueChanges.subscribe(() => { this.isEqual = isEqual(this.initialObject, this.consumptionParamFG.getRawValue()); });
        this.parameterController.getConsumptionParameter(this.orgID).subscribe((response) => {
            if (response) {
                this.consumptionParamM = response.consumptionParameter;
                this.consumptionParamM.forEach((parameter) => {
                    this.allConsumptionParamID.push(parameter);
                    this.consumptionParameterFA.push(this.newConsumptionParameterFG(parameter.id));
                    let searchUtility = new MatSelectSearchService(['label']);
                    searchUtility.entityArr = parameter.dependentParameter;
                    searchUtility.createSubscription();
                    this.dependentConsumParamSearchUtil.push(searchUtility);
                    this.initialObject = this.consumptionParamFG.value;
                    this.isEqual = true;
                });
                this.getSavedConsumptionParameter();
            }
        }, error => {
            console.log('error in getConsumptionParameter -', error);
        });
    }
    consumptionParamFGInit() {
        this.consumptionParamFG = this.formBuilder.group({
            consumptionParameter: this.formBuilder.array([])
        });
    }
    get consumptionParameterFA() {
        return this.consumptionParamFG.get('consumptionParameter');
    }
    getSavedConsumptionParameter() {
        return __awaiter(this, void 0, void 0, function* () {
            const param = yield this.parameterService.getSavedConsumptionParameter(this.orgID);
            this.patchConsumptionParam(param);
        });
    }
    patchConsumptionParam(param) {
        this.consumptionParameterFA.controls.forEach(control => {
            param.forEach(element => {
                this.selection.select(element['aggregateParamID']);
                if (element['aggregateParamID'] == control.value['aggregateParamID'])
                    control.get('dependentParameterID').patchValue(element['dependentParameterID']);
            });
        });
    }
    selectAll() {
        if (this.isAllSelected()) {
            this.consumptionParameterFA.controls.forEach(control => {
                const id = control.get('aggregateParamID').value;
                this.selection.deselect(id);
            });
            return;
        }
        this.consumptionParameterFA.controls.forEach(control => {
            const id = control.get('aggregateParamID').value;
            this.selection.select(id);
        });
    }
    isAllSelected() {
        const selected = this.selection.selected.length;
        const numRows = this.consumptionParamM.length;
        return selected == numRows;
    }
    newConsumptionParameterFG(parameterID) {
        return this.formBuilder.group({
            aggregateParamID: [parameterID],
            dependentParameterID: [[], Validators.required]
        });
    }
    selectAllDependentParam(index) {
        const dependentParamFG = this.consumptionParameterFA.at(index);
        const dependentParamFC = dependentParamFG.get('dependentParameterID');
        if (!dependentParamFC.value.includes(-1)) {
            dependentParamFC.reset([]);
            return;
        }
        const parameter = this.consumptionParamM[index];
        const parameterDependentIDs = parameter.dependentParameter.map(depParam => depParam.id);
        dependentParamFC.setValue([-1, ...parameterDependentIDs]);
    }
    selectDependentParam(index) {
        const dependentParamFG = this.consumptionParameterFA.at(index);
        const dependentParamFC = dependentParamFG.get('dependentParameterID');
        const selected = dependentParamFC.value;
        const parameter = this.consumptionParamM[index];
        const parameterDependentIDs = parameter.dependentParameter.map(depParam => depParam.id);
        const totalDepParamCount = parameterDependentIDs.length;
        if (selected.includes(-1)) {
            selected.shift();
            dependentParamFC.patchValue(selected);
        }
        else if (dependentParamFC.value.length == totalDepParamCount) {
            parameterDependentIDs.splice(0, 0, -1);
            dependentParamFC.patchValue(parameterDependentIDs);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            dependentParamFC.patchValue(filteredSelected);
        }
    }
    consumptionParameterSubmit() {
        const consumptionParameter = this.consumptionParamFG.value.consumptionParameter.map(param => {
            const dependentParameterID = param.dependentParameterID.includes(-1)
                ? param.dependentParameterID.filter(id => id != -1)
                : param.dependentParameterID;
            return Object.assign(Object.assign({}, param), { dependentParameterID });
        });
        if (this.consumptionParamFG.invalid) {
            this.consumptionParamFG.markAllAsTouched();
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_TITLE, ToastrColor.ERROR);
            return;
        }
        this.parameterController.saveConsumptionParameter(this.orgID, consumptionParameter).subscribe((res) => {
            this.getConsumptionParameter();
        }, error => {
            console.log('error in saveConsumptionParameter -', error);
        });
    }
    toggleField(index, parameterID) {
        if (this.selection.isSelected(parameterID)) {
            this.consumptionParameterFA.controls[index].enable();
            return false;
        }
        else {
            this.consumptionParameterFA.controls[index].disable();
            return true;
        }
    }
}
ConsumptionParamAddUpdateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ConsumptionParamAddUpdateComponent, deps: [{ token: i1.FormBuilder }, { token: i2.StorageService }, { token: i3.ToastrService }, { token: i4.TSCCommonService }, { token: i5.SourceController }, { token: i6.ParameterController }, { token: i7.ParameterService }], target: i0.ɵɵFactoryTarget.Component });
ConsumptionParamAddUpdateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ConsumptionParamAddUpdateComponent, selector: "lib-add-update", ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Add Consumption Parameter</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <ng-container *ngIf=\"sourceConsumerConfiguredM?.sourceTypeConfigured; else notSourceType\">\n            <ng-container\n                *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noComsumptionParamFound\">\n                <div class=\"row\">\n                    <div class=\"col-sm-12 mb-3\">\n                        <lib-message-alert [labelInp]=\"'Info'\"\n                            [contentInp]=\"'Adding consumption parameters will impact your data.'\"\n                            [messageAlertTypeInp]=\"MessageAlertTypeEnum.INFO\"\n                            [messageAlertIconInp]=\"MessageAlertIconEnum.INFO_ICON\">\n                        </lib-message-alert>\n                    </div>\n                </div>\n                <form [formGroup]=\"consumptionParamFG\" (ngSubmit)=\"consumptionParameterSubmit()\">\n                    <ng-container formArrayName=\"consumptionParameter\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <table class=\"table\">\n                                    <tbody>\n                                        <tr class=\"tableHeader\">\n                                            <td><mat-checkbox (change)=\"$event ? selectAll() : null\"\n                                                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                                                    [disabled]=\"consumptionParamM.length == 0 || consumptionParamM[0]['id'] == null\">\n                                                    Select all\n                                                </mat-checkbox></td>\n                                            <td align=\"center\" class=\"fw-bold\"> Consumption Parameter </td>\n                                            <td align=\"center\" class=\"fw-bold\"> Dependent Parameter </td>\n                                        </tr>\n                                    </tbody>\n                                    <tbody>\n                                        <tr *ngFor=\"let parameter of consumptionParamM; let i = index\">\n                                            <ng-container [formGroupName]=\"i\">\n                                                <td>\n                                                    <mat-checkbox\n                                                        (change)=\"$event ? selection.toggle(parameter.id) : null\"\n                                                        [checked]=\"selection.isSelected(parameter.id)\"></mat-checkbox>\n                                                </td>\n                                                <td align=\"center\">\n                                                    <div class=\"mt-4\">\n                                                        {{ parameter.label }}\n                                                    </div>\n                                                </td>\n                                                <td align=\"center\">\n                                                    <div class=\"row pt-2\">\n                                                        <div class=\"col-sm-8\">\n                                                            <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                                                                <mat-label>Select dependent parameter</mat-label>\n\n                                                                <mat-select formControlName=\"dependentParameterID\" [disabled]=\"toggleField(i, parameter.id)\"\n                                                                    (selectionChange)=\"selection.select(parameter.id)\" multiple required>\n                                                                    <ng-container *ngIf=\"dependentConsumParamSearchUtil[i]['filteredEntities']; else noDependentParamFound\">\n                                                                        <ngx-mat-select-search [formControl]=\"dependentConsumParamSearchUtil[i].filterFC\"\n                                                                            placeholderLabel=\"Search by name\" noEntriesFoundLabel=\"No matching name found.\">\n                                                                        </ngx-mat-select-search>\n                                                                        <mat-option [value]=\"-1\" (click)=\"selectAllDependentParam(i)\"\n                                                                            [hidden]=\"dependentConsumParamSearchUtil[i].filterFC.value\">\n                                                                            Select all\n                                                                        </mat-option>\n                                                                        <mat-option *ngFor=\"let param of dependentConsumParamSearchUtil[i]['filteredEntities'] | async\"\n                                                                            [value]=\"param.id\" (click)=\"selectDependentParam(i)\">\n                                                                            {{ param.label }}\n                                                                        </mat-option>\n                                                                    </ng-container>\n                                                                    <ng-template #noDependentParamFound>\n                                                                        <mat-option disabled>\n                                                                            {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                                                                        </mat-option>\n                                                                    </ng-template>\n                                                                </mat-select>\n\n                                                                <mat-error *ngIf=\"this.consumptionParameterFA.controls[i].get('dependentParameterID').hasError('required')\">\n                                                                    {{ FormErrorEnum.REQUIRED }}\n                                                                </mat-error>\n                                                            </mat-form-field>\n                                                        </div>\n                                                    </div>\n                                                </td>\n                                            </ng-container>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </ng-container>\n\n                    <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n\n                    <div class=\"row mt-2\">\n                        <div class=\"col-sm-12\">\n                            <div class=\"float-end\">\n                                <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\"\n                                    (click)=\"tscCommonService.back()\">\n                                    {{ ButtonLabelEnum.CANCEL_BTN_LABEL }}\n                                </button>\n\n                                <button class=\"btn btn-sm btn-success\" [ngClass]=\"{'disabled' : isEqual}\"\n                                    type=\"submit\">{{\n                                    ButtonLabelEnum.SAVE_BTN_LABEL }}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </ng-container>\n            <ng-template #noComsumptionParamFound>\n                <lib-message-alert [labelInp]=\"'Not found!'\" [contentInp]=\"'No consumption parameter found.'\"\n                    [messageAlertTypeInp]=\"MessageAlertTypeEnum.DANGER\"\n                    [messageAlertIconInp]=\"MessageAlertIconEnum.DANGER_ICON\">\n                </lib-message-alert>\n            </ng-template>\n        </ng-container>\n        <ng-template #notSourceType>\n            <lib-message-alert [labelInp]=\"'Info'\"\n                [contentInp]=\"'Source type not set. Please set source type first to add consumption parameters'\"\n                [messageAlertTypeInp]=\"MessageAlertTypeEnum.INFO\"\n                [messageAlertIconInp]=\"MessageAlertIconEnum.INFO_ICON\">\n            </lib-message-alert>\n        </ng-template>\n    </div>\n</div>", components: [{ type: i4.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i8.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i9.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i10.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i11.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i12.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i13.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i9.MatLabel, selector: "mat-label" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i9.MatError, selector: "mat-error", inputs: ["id"] }, { type: i13.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i13.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ConsumptionParamAddUpdateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-add-update',
                    templateUrl: './add-update.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.StorageService }, { type: i3.ToastrService }, { type: i4.TSCCommonService }, { type: i5.SourceController }, { type: i6.ParameterController }, { type: i7.ParameterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXVwZGF0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9wcmVmZXJlbmNlcy9jb25zdW1wdGlvbi1wYXJhbWV0ZXIvYWRkLXVwZGF0ZS9hZGQtdXBkYXRlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3ByZWZlcmVuY2VzL2NvbnN1bXB0aW9uLXBhcmFtZXRlci9hZGQtdXBkYXRlL2FkZC11cGRhdGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFrRCxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdqQyxPQUFPLEVBQUUsdUJBQXVCLEVBQTRCLE1BQU0seUNBQXlDLENBQUM7QUFPNUcsY0FBYztBQUNkLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQW9CLFdBQVcsRUFBRSxlQUFlLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQWEsTUFBTSxxQkFBcUIsQ0FBQztBQUU1UCxPQUFPLEVBQUUsV0FBVyxFQUFpQixNQUFNLHlCQUF5QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7QUFDckUsZ0JBQWdCO0FBUWhCLE1BQU0sT0FBTyxrQ0FBa0M7SUEwQjNDLFlBQ1ksV0FBd0IsRUFDeEIsY0FBOEIsRUFDOUIsYUFBNEIsRUFDN0Is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SUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN0RCxPQUFPLElBQUksQ0FBQztTQUNmO0lBQ0wsQ0FBQzs7Z0lBdk1RLGtDQUFrQztvSEFBbEMsa0NBQWtDLHNEQzNCL0MsMDJSQStITTs0RkRwR08sa0NBQWtDO2tCQU45QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFdBQVcsRUFBRSw2QkFBNkI7b0JBQzFDLE1BQU0sRUFBRSxFQUNQO2lCQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1BcnJheSwgRm9ybUJ1aWxkZXIsIEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFNlbGVjdGlvbk1vZGVsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvbGxlY3Rpb25zJztcblxuaW1wb3J0IHsgaXNFcXVhbCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IENvbnN1bXB0aW9uUGFyYW1ldGVyTSwgU2F2ZWRDb25zdW1wdGlvblBhcmFtZXRlck0gfSBmcm9tICcuLi8uLi8uLi8uLi9tb2RlbC9wYXJhbWV0ZXIubW9kZWwnO1xuaW1wb3J0IHsgU291cmNlQ29uc3VtZXJDb25maWd1cmUsIFNvdXJjZUNvbnN1bWVyQ29uZmlndXJlTSB9IGZyb20gJy4uLy4uLy4uLy4uL21vZGVsL3NvdXJjZS1jb25zdW1lci5tb2RlbCc7XG5cbmltcG9ydCB7IFBhcmFtZXRlckNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250cm9sbGVyL3BhcmFtZXRlci5jb250cm9sbGVyJztcbmltcG9ydCB7IFNvdXJjZUNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250cm9sbGVyL3NvdXJjZS5jb250cm9sbGVyJztcblxuaW1wb3J0IHsgUGFyYW1ldGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NlcnZpY2UvcGFyYW1ldGVyLnNlcnZpY2UnO1xuXG4vLyB0c2MtbGlicmFyeVxuaW1wb3J0IHsgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLCBCdXR0b25MYWJlbEVudW0sIEZvcm1BY3Rpb24sIFBhZ2VUaXRsZUVudW0sIEZvcm1FcnJvckVudW0sIFRTQ0NvbW1vblNlcnZpY2UsIEludmFsaWRGb3JtLCBDT01NT05fQ09OU1RBTlQsIE1hdFNlbGVjdFNlYXJjaFNlcnZpY2UsIE1lc3NhZ2VBbGVydEljb25FbnVtLCBNZXNzYWdlQWxlcnRUeXBlRW51bSwgUmVzcG9uc2VNIH0gZnJvbSAnQGxpYnJhcnkvdHNjLWNvbW1vbic7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3N0b3JhZ2Utc2VydmljZSc7XG5pbXBvcnQgeyBUb2FzdHJDb2xvciwgVG9hc3RyU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3RvYXN0ci1zZXJ2aWNlJztcbi8vIC90c2MtbGlicmFyeS9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItYWRkLXVwZGF0ZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2FkZC11cGRhdGUuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlczogW1xuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgQ29uc3VtcHRpb25QYXJhbUFkZFVwZGF0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBDT01NT05fQ09OU1RBTlQgPSBDT01NT05fQ09OU1RBTlQ7XG5cbiAgICBGb3JtQWN0aW9uID0gRm9ybUFjdGlvbjtcbiAgICBGb3JtRXJyb3JFbnVtID0gRm9ybUVycm9yRW51bTtcbiAgICBCdXR0b25MYWJlbEVudW0gPSBCdXR0b25MYWJlbEVudW07XG4gICAgUGFnZVRpdGxlRW51bSA9IFBhZ2VUaXRsZUVudW07XG4gICAgTWVzc2FnZUFsZXJ0SWNvbkVudW0gPSBNZXNzYWdlQWxlcnRJY29uRW51bTtcbiAgICBNZXNzYWdlQWxlcnRUeXBlRW51bSA9IE1lc3NhZ2VBbGVydFR5cGVFbnVtO1xuICAgIE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSA9IE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZTtcblxuICAgIG9yZ0lEOiBhbnk7XG4gICAgaXNFcXVhbDogYm9vbGVhbiA9IHRydWU7XG4gICAgaW5pdGlhbE9iamVjdDogYW55O1xuXG4gICAgY29uc3VtcHRpb25QYXJhbU06IGFueTtcbiAgICBjb25zdW1wdGlvblBhcmFtRkc6IEZvcm1Hcm91cDtcblxuICAgIHNvdXJjZUNvbnN1bWVyQ29uZmlndXJlZE0gPSBuZXcgU291cmNlQ29uc3VtZXJDb25maWd1cmUoKTtcblxuICAgIGFsbENvbnN1bXB0aW9uUGFyYW1JRDogYW55W10gPSBbXTtcbiAgICBzZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uTW9kZWwodHJ1ZSwgW10pO1xuXG4gICAgZGVwZW5kZW50Q29uc3VtUGFyYW1TZWFyY2hVdGlsOiBNYXRTZWxlY3RTZWFyY2hTZXJ2aWNlW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcbiAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdG9hc3RyU2VydmljZTogVG9hc3RyU2VydmljZSxcbiAgICAgICAgcHVibGljIHRzY0NvbW1vblNlcnZpY2U6IFRTQ0NvbW1vblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgc291cmNlQ29udHJvbGxlcjogU291cmNlQ29udHJvbGxlcixcbiAgICAgICAgcHJpdmF0ZSBwYXJhbWV0ZXJDb250cm9sbGVyOiBQYXJhbWV0ZXJDb250cm9sbGVyLFxuICAgICAgICBwcml2YXRlIHBhcmFtZXRlclNlcnZpY2U6IFBhcmFtZXRlclNlcnZpY2VcbiAgICApIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JnSUQgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoJ2N1cnJlbnRPcmdJRCcpO1xuXG4gICAgICAgIHRoaXMuZ2V0U291cmNlQ29uc3VtZXJDb25maWcoKTtcbiAgICAgICAgdGhpcy5jb25zdW1wdGlvblBhcmFtRkdJbml0KCk7XG4gICAgfVxuXG4gICAgZ2V0U291cmNlQ29uc3VtZXJDb25maWcoKSB7XG4gICAgICAgIHRoaXMuc291cmNlQ29udHJvbGxlci5nZXRTb3VyY2VDb25zdW1lckNvbmZpZyh0aGlzLm9yZ0lEKS5zdWJzY3JpYmUoKHJlczogU291cmNlQ29uc3VtZXJDb25maWd1cmVNKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUNvbnN1bWVyQ29uZmlndXJlZE0gPSByZXM7XG4gICAgICAgICAgICB0aGlzLmdldENvbnN1bXB0aW9uUGFyYW1ldGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZygnRXJyb3I6JywgZXJyb3IpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0Q29uc3VtcHRpb25QYXJhbWV0ZXIoKSB7XG4gICAgICAgIHRoaXMuY29uc3VtcHRpb25QYXJhbUZHLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4geyB0aGlzLmlzRXF1YWwgPSBpc0VxdWFsKHRoaXMuaW5pdGlhbE9iamVjdCwgdGhpcy5jb25zdW1wdGlvblBhcmFtRkcuZ2V0UmF3VmFsdWUoKSk7IH0pO1xuXG4gICAgICAgIHRoaXMucGFyYW1ldGVyQ29udHJvbGxlci5nZXRDb25zdW1wdGlvblBhcmFtZXRlcih0aGlzLm9yZ0lEKS5zdWJzY3JpYmUoKHJlc3BvbnNlOiBDb25zdW1wdGlvblBhcmFtZXRlck0pID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtcHRpb25QYXJhbU0gPSByZXNwb25zZS5jb25zdW1wdGlvblBhcmFtZXRlcjtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtcHRpb25QYXJhbU0uZm9yRWFjaCgocGFyYW1ldGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsQ29uc3VtcHRpb25QYXJhbUlELnB1c2gocGFyYW1ldGVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1wdGlvblBhcmFtZXRlckZBLnB1c2godGhpcy5uZXdDb25zdW1wdGlvblBhcmFtZXRlckZHKHBhcmFtZXRlci5pZCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2hVdGlsaXR5ID0gbmV3IE1hdFNlbGVjdFNlYXJjaFNlcnZpY2UoWydsYWJlbCddKTtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVXRpbGl0eS5lbnRpdHlBcnIgPSBwYXJhbWV0ZXIuZGVwZW5kZW50UGFyYW1ldGVyO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hVdGlsaXR5LmNyZWF0ZVN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlcGVuZGVudENvbnN1bVBhcmFtU2VhcmNoVXRpbC5wdXNoKHNlYXJjaFV0aWxpdHkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbE9iamVjdCA9IHRoaXMuY29uc3VtcHRpb25QYXJhbUZHLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRXF1YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTYXZlZENvbnN1bXB0aW9uUGFyYW1ldGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBpbiBnZXRDb25zdW1wdGlvblBhcmFtZXRlciAtJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdW1wdGlvblBhcmFtRkdJbml0KCkge1xuICAgICAgICB0aGlzLmNvbnN1bXB0aW9uUGFyYW1GRyA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICAgICAgY29uc3VtcHRpb25QYXJhbWV0ZXI6IHRoaXMuZm9ybUJ1aWxkZXIuYXJyYXkoW10pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBjb25zdW1wdGlvblBhcmFtZXRlckZBKCk6IEZvcm1BcnJheSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bXB0aW9uUGFyYW1GRy5nZXQoJ2NvbnN1bXB0aW9uUGFyYW1ldGVyJykgYXMgRm9ybUFycmF5O1xuICAgIH1cblxuICAgIGFzeW5jIGdldFNhdmVkQ29uc3VtcHRpb25QYXJhbWV0ZXIoKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gPFNhdmVkQ29uc3VtcHRpb25QYXJhbWV0ZXJNW10+YXdhaXQgdGhpcy5wYXJhbWV0ZXJTZXJ2aWNlLmdldFNhdmVkQ29uc3VtcHRpb25QYXJhbWV0ZXIodGhpcy5vcmdJRCk7XG4gICAgICAgIHRoaXMucGF0Y2hDb25zdW1wdGlvblBhcmFtKHBhcmFtKVxuICAgIH1cblxuICAgIHBhdGNoQ29uc3VtcHRpb25QYXJhbShwYXJhbSkge1xuICAgICAgICB0aGlzLmNvbnN1bXB0aW9uUGFyYW1ldGVyRkEuY29udHJvbHMuZm9yRWFjaChjb250cm9sID0+IHtcbiAgICAgICAgICAgIHBhcmFtLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24uc2VsZWN0KGVsZW1lbnRbJ2FnZ3JlZ2F0ZVBhcmFtSUQnXSlcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFsnYWdncmVnYXRlUGFyYW1JRCddID09IGNvbnRyb2wudmFsdWVbJ2FnZ3JlZ2F0ZVBhcmFtSUQnXSlcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbC5nZXQoJ2RlcGVuZGVudFBhcmFtZXRlcklEJykucGF0Y2hWYWx1ZShlbGVtZW50WydkZXBlbmRlbnRQYXJhbWV0ZXJJRCddKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGVjdEFsbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbGxTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bXB0aW9uUGFyYW1ldGVyRkEuY29udHJvbHMuZm9yRWFjaChjb250cm9sID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGNvbnRyb2wuZ2V0KCdhZ2dyZWdhdGVQYXJhbUlEJykudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24uZGVzZWxlY3QoaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25zdW1wdGlvblBhcmFtZXRlckZBLmNvbnRyb2xzLmZvckVhY2goY29udHJvbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGNvbnRyb2wuZ2V0KCdhZ2dyZWdhdGVQYXJhbUlEJykudmFsdWU7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5zZWxlY3QoaWQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc0FsbFNlbGVjdGVkKCkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuc2VsZWN0aW9uLnNlbGVjdGVkLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbnVtUm93cyA9IHRoaXMuY29uc3VtcHRpb25QYXJhbU0ubGVuZ3RoO1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWQgPT0gbnVtUm93cztcbiAgICB9XG5cbiAgICBuZXdDb25zdW1wdGlvblBhcmFtZXRlckZHKHBhcmFtZXRlcklEKTogRm9ybUdyb3VwIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICAgICAgYWdncmVnYXRlUGFyYW1JRDogW3BhcmFtZXRlcklEXSxcbiAgICAgICAgICAgIGRlcGVuZGVudFBhcmFtZXRlcklEOiBbW10sIFZhbGlkYXRvcnMucmVxdWlyZWRdXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGVjdEFsbERlcGVuZGVudFBhcmFtKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZGVwZW5kZW50UGFyYW1GRyA9IHRoaXMuY29uc3VtcHRpb25QYXJhbWV0ZXJGQS5hdChpbmRleCkgYXMgRm9ybUdyb3VwO1xuICAgICAgICBjb25zdCBkZXBlbmRlbnRQYXJhbUZDID0gZGVwZW5kZW50UGFyYW1GRy5nZXQoJ2RlcGVuZGVudFBhcmFtZXRlcklEJykgYXMgRm9ybUFycmF5O1xuXG4gICAgICAgIGlmICghZGVwZW5kZW50UGFyYW1GQy52YWx1ZS5pbmNsdWRlcygtMSkpIHtcbiAgICAgICAgICAgIGRlcGVuZGVudFBhcmFtRkMucmVzZXQoW10pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1ldGVyID0gdGhpcy5jb25zdW1wdGlvblBhcmFtTVtpbmRleF07XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlckRlcGVuZGVudElEcyA9IHBhcmFtZXRlci5kZXBlbmRlbnRQYXJhbWV0ZXIubWFwKGRlcFBhcmFtID0+IGRlcFBhcmFtLmlkKTtcblxuICAgICAgICBkZXBlbmRlbnRQYXJhbUZDLnNldFZhbHVlKFstMSwgLi4ucGFyYW1ldGVyRGVwZW5kZW50SURzXSk7XG4gICAgfVxuXG5cbiAgICBzZWxlY3REZXBlbmRlbnRQYXJhbShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGRlcGVuZGVudFBhcmFtRkcgPSB0aGlzLmNvbnN1bXB0aW9uUGFyYW1ldGVyRkEuYXQoaW5kZXgpIGFzIEZvcm1Hcm91cDtcbiAgICAgICAgY29uc3QgZGVwZW5kZW50UGFyYW1GQyA9IGRlcGVuZGVudFBhcmFtRkcuZ2V0KCdkZXBlbmRlbnRQYXJhbWV0ZXJJRCcpIGFzIEZvcm1Db250cm9sO1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZGVwZW5kZW50UGFyYW1GQy52YWx1ZTtcblxuICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSB0aGlzLmNvbnN1bXB0aW9uUGFyYW1NW2luZGV4XTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyRGVwZW5kZW50SURzID0gcGFyYW1ldGVyLmRlcGVuZGVudFBhcmFtZXRlci5tYXAoZGVwUGFyYW0gPT4gZGVwUGFyYW0uaWQpO1xuICAgICAgICBjb25zdCB0b3RhbERlcFBhcmFtQ291bnQgPSBwYXJhbWV0ZXJEZXBlbmRlbnRJRHMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZC5pbmNsdWRlcygtMSkpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkLnNoaWZ0KCk7XG4gICAgICAgICAgICBkZXBlbmRlbnRQYXJhbUZDLnBhdGNoVmFsdWUoc2VsZWN0ZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVudFBhcmFtRkMudmFsdWUubGVuZ3RoID09IHRvdGFsRGVwUGFyYW1Db3VudCkge1xuICAgICAgICAgICAgcGFyYW1ldGVyRGVwZW5kZW50SURzLnNwbGljZSgwLCAwLCAtMSk7XG4gICAgICAgICAgICBkZXBlbmRlbnRQYXJhbUZDLnBhdGNoVmFsdWUocGFyYW1ldGVyRGVwZW5kZW50SURzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkU2VsZWN0ZWQgPSBzZWxlY3RlZC5maWx0ZXIocyA9PiBzICE9IC0xKTtcbiAgICAgICAgICAgIGRlcGVuZGVudFBhcmFtRkMucGF0Y2hWYWx1ZShmaWx0ZXJlZFNlbGVjdGVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN1bXB0aW9uUGFyYW1ldGVyU3VibWl0KCkge1xuICAgICAgICBjb25zdCBjb25zdW1wdGlvblBhcmFtZXRlciA9IHRoaXMuY29uc3VtcHRpb25QYXJhbUZHLnZhbHVlLmNvbnN1bXB0aW9uUGFyYW1ldGVyLm1hcChwYXJhbSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZXBlbmRlbnRQYXJhbWV0ZXJJRCA9IHBhcmFtLmRlcGVuZGVudFBhcmFtZXRlcklELmluY2x1ZGVzKC0xKVxuICAgICAgICAgICAgICAgID8gcGFyYW0uZGVwZW5kZW50UGFyYW1ldGVySUQuZmlsdGVyKGlkID0+IGlkICE9IC0xKVxuICAgICAgICAgICAgICAgIDogcGFyYW0uZGVwZW5kZW50UGFyYW1ldGVySUQ7XG5cbiAgICAgICAgICAgIHJldHVybiB7IC4uLnBhcmFtLCBkZXBlbmRlbnRQYXJhbWV0ZXJJRCB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5jb25zdW1wdGlvblBhcmFtRkcuaW52YWxpZCkge1xuICAgICAgICAgICAgdGhpcy5jb25zdW1wdGlvblBhcmFtRkcubWFya0FsbEFzVG91Y2hlZCgpO1xuICAgICAgICAgICAgdGhpcy50b2FzdHJTZXJ2aWNlLm9wZW5Ub2FzdChJbnZhbGlkRm9ybS5JTlZBTElEX0ZPUk1fVElUTEUsIEludmFsaWRGb3JtLklOVkFMSURfRk9STV9USVRMRSwgVG9hc3RyQ29sb3IuRVJST1IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJDb250cm9sbGVyLnNhdmVDb25zdW1wdGlvblBhcmFtZXRlcih0aGlzLm9yZ0lELCBjb25zdW1wdGlvblBhcmFtZXRlcikuc3Vic2NyaWJlKChyZXM6IFJlc3BvbnNlTSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nZXRDb25zdW1wdGlvblBhcmFtZXRlcigpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgaW4gc2F2ZUNvbnN1bXB0aW9uUGFyYW1ldGVyIC0nLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvZ2dsZUZpZWxkKGluZGV4LCBwYXJhbWV0ZXJJRCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24uaXNTZWxlY3RlZChwYXJhbWV0ZXJJRCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtcHRpb25QYXJhbWV0ZXJGQS5jb250cm9sc1tpbmRleF0uZW5hYmxlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bXB0aW9uUGFyYW1ldGVyRkEuY29udHJvbHNbaW5kZXhdLmRpc2FibGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFzRXJyb3IgPSAoY29udHJvbDogc3RyaW5nLCBlcnJvcjogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bXB0aW9uUGFyYW1GRy5nZXQoY29udHJvbCkuaGFzRXJyb3IoZXJyb3IpO1xuICAgIH1cblxufVxuIiwiPGRpdiBjbGFzcz1cImNhcmQgbWFpbi1jYXJkIGNhcmRPdmVyd3JpdGUgaDEwMFwiPlxuICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJDb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlckxlZnRDb250YWluZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWdlVGl0bGVcIj5BZGQgQ29uc3VtcHRpb24gUGFyYW1ldGVyPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZVN1YnRpdGxlXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwic291cmNlQ29uc3VtZXJDb25maWd1cmVkTT8uc291cmNlVHlwZUNvbmZpZ3VyZWQ7IGVsc2Ugbm90U291cmNlVHlwZVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICpuZ0lmPVwiY29uc3VtcHRpb25QYXJhbU0gJiYgY29uc3VtcHRpb25QYXJhbU0ubGVuZ3RoID4gMCAmJiBjb25zdW1wdGlvblBhcmFtTVswXVsnaWQnXTsgZWxzZSBub0NvbXN1bXB0aW9uUGFyYW1Gb3VuZFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMiBtYi0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGliLW1lc3NhZ2UtYWxlcnQgW2xhYmVsSW5wXT1cIidJbmZvJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2NvbnRlbnRJbnBdPVwiJ0FkZGluZyBjb25zdW1wdGlvbiBwYXJhbWV0ZXJzIHdpbGwgaW1wYWN0IHlvdXIgZGF0YS4nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbWVzc2FnZUFsZXJ0VHlwZUlucF09XCJNZXNzYWdlQWxlcnRUeXBlRW51bS5JTkZPXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbWVzc2FnZUFsZXJ0SWNvbklucF09XCJNZXNzYWdlQWxlcnRJY29uRW51bS5JTkZPX0lDT05cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGliLW1lc3NhZ2UtYWxlcnQ+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxmb3JtIFtmb3JtR3JvdXBdPVwiY29uc3VtcHRpb25QYXJhbUZHXCIgKG5nU3VibWl0KT1cImNvbnN1bXB0aW9uUGFyYW1ldGVyU3VibWl0KClcIj5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciBmb3JtQXJyYXlOYW1lPVwiY29uc3VtcHRpb25QYXJhbWV0ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwidGFibGVIZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxtYXQtY2hlY2tib3ggKGNoYW5nZSk9XCIkZXZlbnQgPyBzZWxlY3RBbGwoKSA6IG51bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtjaGVja2VkXT1cInNlbGVjdGlvbi5oYXNWYWx1ZSgpICYmIGlzQWxsU2VsZWN0ZWQoKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImNvbnN1bXB0aW9uUGFyYW1NLmxlbmd0aCA9PSAwIHx8IGNvbnN1bXB0aW9uUGFyYW1NWzBdWydpZCddID09IG51bGxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3QgYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1jaGVja2JveD48L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249XCJjZW50ZXJcIiBjbGFzcz1cImZ3LWJvbGRcIj4gQ29uc3VtcHRpb24gUGFyYW1ldGVyIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj1cImNlbnRlclwiIGNsYXNzPVwiZnctYm9sZFwiPiBEZXBlbmRlbnQgUGFyYW1ldGVyIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyICpuZ0Zvcj1cImxldCBwYXJhbWV0ZXIgb2YgY29uc3VtcHRpb25QYXJhbU07IGxldCBpID0gaW5kZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciBbZm9ybUdyb3VwTmFtZV09XCJpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1jaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2hhbmdlKT1cIiRldmVudCA/IHNlbGVjdGlvbi50b2dnbGUocGFyYW1ldGVyLmlkKSA6IG51bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbY2hlY2tlZF09XCJzZWxlY3Rpb24uaXNTZWxlY3RlZChwYXJhbWV0ZXIuaWQpXCI+PC9tYXQtY2hlY2tib3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm10LTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcGFyYW1ldGVyLmxhYmVsIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBwdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwibWF0RmllbGRXaWR0aDEwMFwiIFthcHBlYXJhbmNlXT1cIk1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZS5GT1JNX0ZJRUxEX0FQUEVBUkFOQ0VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWxhYmVsPlNlbGVjdCBkZXBlbmRlbnQgcGFyYW1ldGVyPC9tYXQtbGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LXNlbGVjdCBmb3JtQ29udHJvbE5hbWU9XCJkZXBlbmRlbnRQYXJhbWV0ZXJJRFwiIFtkaXNhYmxlZF09XCJ0b2dnbGVGaWVsZChpLCBwYXJhbWV0ZXIuaWQpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNlbGVjdGlvbkNoYW5nZSk9XCJzZWxlY3Rpb24uc2VsZWN0KHBhcmFtZXRlci5pZClcIiBtdWx0aXBsZSByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImRlcGVuZGVudENvbnN1bVBhcmFtU2VhcmNoVXRpbFtpXVsnZmlsdGVyZWRFbnRpdGllcyddOyBlbHNlIG5vRGVwZW5kZW50UGFyYW1Gb3VuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5neC1tYXQtc2VsZWN0LXNlYXJjaCBbZm9ybUNvbnRyb2xdPVwiZGVwZW5kZW50Q29uc3VtUGFyYW1TZWFyY2hVdGlsW2ldLmZpbHRlckZDXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlckxhYmVsPVwiU2VhcmNoIGJ5IG5hbWVcIiBub0VudHJpZXNGb3VuZExhYmVsPVwiTm8gbWF0Y2hpbmcgbmFtZSBmb3VuZC5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmd4LW1hdC1zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gW3ZhbHVlXT1cIi0xXCIgKGNsaWNrKT1cInNlbGVjdEFsbERlcGVuZGVudFBhcmFtKGkpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaGlkZGVuXT1cImRlcGVuZGVudENvbnN1bVBhcmFtU2VhcmNoVXRpbFtpXS5maWx0ZXJGQy52YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdCBhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LW9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uICpuZ0Zvcj1cImxldCBwYXJhbSBvZiBkZXBlbmRlbnRDb25zdW1QYXJhbVNlYXJjaFV0aWxbaV1bJ2ZpbHRlcmVkRW50aXRpZXMnXSB8IGFzeW5jXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdmFsdWVdPVwicGFyYW0uaWRcIiAoY2xpY2spPVwic2VsZWN0RGVwZW5kZW50UGFyYW0oaSlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBwYXJhbS5sYWJlbCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNub0RlcGVuZGVudFBhcmFtRm91bmQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiBkaXNhYmxlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBDT01NT05fQ09OU1RBTlQuTk9fREFUQV9GT1VORCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LXNlbGVjdD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZXJyb3IgKm5nSWY9XCJ0aGlzLmNvbnN1bXB0aW9uUGFyYW1ldGVyRkEuY29udHJvbHNbaV0uZ2V0KCdkZXBlbmRlbnRQYXJhbWV0ZXJJRCcpLmhhc0Vycm9yKCdyZXF1aXJlZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IEZvcm1FcnJvckVudW0uUkVRVUlSRUQgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1lcnJvcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LWZvcm0tZmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImQtbm9uZVwiIHR5cGU9XCJzdWJtaXRcIiAjZm9ybVN1Ym1pdEJ0bj48L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXQtZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgbWUtMlwiIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cInRzY0NvbW1vblNlcnZpY2UuYmFjaygpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBCdXR0b25MYWJlbEVudW0uQ0FOQ0VMX0JUTl9MQUJFTCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc3VjY2Vzc1wiIFtuZ0NsYXNzXT1cInsnZGlzYWJsZWQnIDogaXNFcXVhbH1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiPnt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25MYWJlbEVudW0uU0FWRV9CVE5fTEFCRUwgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8bmctdGVtcGxhdGUgI25vQ29tc3VtcHRpb25QYXJhbUZvdW5kPlxuICAgICAgICAgICAgICAgIDxsaWItbWVzc2FnZS1hbGVydCBbbGFiZWxJbnBdPVwiJ05vdCBmb3VuZCEnXCIgW2NvbnRlbnRJbnBdPVwiJ05vIGNvbnN1bXB0aW9uIHBhcmFtZXRlciBmb3VuZC4nXCJcbiAgICAgICAgICAgICAgICAgICAgW21lc3NhZ2VBbGVydFR5cGVJbnBdPVwiTWVzc2FnZUFsZXJ0VHlwZUVudW0uREFOR0VSXCJcbiAgICAgICAgICAgICAgICAgICAgW21lc3NhZ2VBbGVydEljb25JbnBdPVwiTWVzc2FnZUFsZXJ0SWNvbkVudW0uREFOR0VSX0lDT05cIj5cbiAgICAgICAgICAgICAgICA8L2xpYi1tZXNzYWdlLWFsZXJ0PlxuICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjbm90U291cmNlVHlwZT5cbiAgICAgICAgICAgIDxsaWItbWVzc2FnZS1hbGVydCBbbGFiZWxJbnBdPVwiJ0luZm8nXCJcbiAgICAgICAgICAgICAgICBbY29udGVudElucF09XCInU291cmNlIHR5cGUgbm90IHNldC4gUGxlYXNlIHNldCBzb3VyY2UgdHlwZSBmaXJzdCB0byBhZGQgY29uc3VtcHRpb24gcGFyYW1ldGVycydcIlxuICAgICAgICAgICAgICAgIFttZXNzYWdlQWxlcnRUeXBlSW5wXT1cIk1lc3NhZ2VBbGVydFR5cGVFbnVtLklORk9cIlxuICAgICAgICAgICAgICAgIFttZXNzYWdlQWxlcnRJY29uSW5wXT1cIk1lc3NhZ2VBbGVydEljb25FbnVtLklORk9fSUNPTlwiPlxuICAgICAgICAgICAgPC9saWItbWVzc2FnZS1hbGVydD5cbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L2Rpdj5cbjwvZGl2PiJdfQ==