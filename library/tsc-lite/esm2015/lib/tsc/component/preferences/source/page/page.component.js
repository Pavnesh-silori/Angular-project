import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { map, startWith, switchMap, catchError } from "rxjs/operators";
import { faPlus, faEllipsisV } from '@fortawesome/free-solid-svg-icons';
import { SourceConsumerPage } from '../../../../model/source-consumer.model';
import { SourceCreateUpdateComponent } from '../../_dialog/source/create-update/create-update.component';
// tsc-library
import { MATERIAL_CONSTANT, TABLE_CONSTANT, ButtonTooltipEnum, ButtonLabelEnum, FormAction, COMMON_CONSTANT, DialogOneComponent, DialogOneEnum, DialogResponseEnum } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@library/storage-service";
import * as i3 from "../../../../controller/source.controller";
import * as i4 from "../../../../service/source.service";
import * as i5 from "@library/tsc-common";
import * as i6 from "@fortawesome/angular-fontawesome";
import * as i7 from "@angular/material/table";
import * as i8 from "@angular/material/sort";
import * as i9 from "@angular/material/paginator";
import * as i10 from "@angular/material/core";
import * as i11 from "@angular/material/tooltip";
// /tsc-library/
export class SourcePageComponent {
    constructor(dialog, storageService, sourceController, sourceService) {
        this.dialog = dialog;
        this.storageService = storageService;
        this.sourceController = sourceController;
        this.sourceService = sourceService;
        this.faPlus = faPlus;
        this.faEllipsisV = faEllipsisV;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.ButtonTooltipEnum = ButtonTooltipEnum;
        this.DialogResponseEnum = DialogResponseEnum;
        this.FormAction = FormAction;
        this.searchByPlaceHolder = 'source name';
        this.dataSource = [new SourceConsumerPage()];
        this.dataSourceLength = 0;
        this.displayedColumn = ['id', 'name', 'utilitySourceName', 'type', 'option'];
        this.searchFlag = false;
        this.searchFC = new FormControl('', Validators.required);
        this.utilitySource = false;
        this.utilitySourceFC = new FormControl();
        this.filterArr = [];
        this.updateSource = (action, row) => {
            const dialogRef = this.dialog.open(SourceCreateUpdateComponent, {
                height: '100vh',
                width: '600px',
                position: { right: '-2px', top: '0px' },
                disableClose: true,
                panelClass: 'matDialogContainerOverride',
                data: {
                    action: action,
                    sourceID: row.id
                }
            });
            dialogRef.afterClosed()
                .subscribe((result) => {
                if (result.status == DialogResponseEnum.SUCCESS) {
                    this.refreshBtn.nativeElement.click();
                }
            });
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.getUtilitySourceAndType();
    }
    getUtilitySourceAndType() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sourceService.getUtilitySourceAndType(this.orgID);
            const allKey = {
                "id": 0,
                "name": "All",
                "keyID": "ALL",
                "type": []
            };
            result.utilitySource.unshift(allKey);
            this.utilitySourceI = result.utilitySource;
        });
    }
    ngAfterViewInit() {
        merge(this.sort.sortChange, this.typeSelect.mono, fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(startWith({}), switchMap(() => {
            this.filterArr = [];
            if (this.searchFlag) {
                var searchValue = 'name:' + this.searchValue;
            }
            if (this.utilitySource) {
                if (this.utilitySourceFC.value == 'ALL') {
                    this.utilitySource = false;
                }
                else {
                    this.filterArr.push('utilitySource:' + this.utilitySourceFC.value);
                }
            }
            return this.sourceController.getSourceTypeByPage(this.paginator.pageIndex, this.paginator.pageSize, this.sort.active, this.sort.direction, searchValue, this.filterArr, this.orgID).pipe(catchError(() => observableOf(null)));
        }), map((response) => {
            if (response == null) {
                this.dataSourceLength = 0;
                return [];
            }
            this.dataSourceLength = response.totalCount;
            return response.records;
        })).subscribe((dataSource) => {
            this.dataSource = dataSource;
        });
    }
    searchFn(value) {
        this.searchFlag = true;
        this.searchValue = value;
        if (value.length == 0) {
            this.resetSearch();
        }
        this.refreshBtn.nativeElement.click();
    }
    resetSearch() {
        this.searchFlag = false;
        this.searchBar.searchClear();
    }
    createSource(action) {
        const dialogRef = this.dialog.open(SourceCreateUpdateComponent, {
            height: '100vh',
            width: '600px',
            position: { right: '-2px', top: '0px' },
            disableClose: true,
            panelClass: 'matDialogContainerOverride',
            data: {
                action: action
            }
        });
        dialogRef.afterClosed()
            .subscribe((result) => {
            if (result.status == DialogResponseEnum.SUCCESS) {
                this.refreshBtn.nativeElement.click();
            }
        });
    }
    openDeleteDialog(source) {
        const dialog = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '450px',
            data: {
                type: DialogOneEnum.DELETE,
                icon: 'dangerous',
                header: 'Delete source type?',
                body: '<b>' + source.name + '</b>' + ' will be deleted permanently.</br></br>Are you sure you want to continue?',
                buttonOne: ButtonLabelEnum.CANCEL_BTN_LABEL,
                buttonTwo: ButtonLabelEnum.DELETE_BTN_LABEL
            }
        });
        dialog.afterClosed().subscribe(res => {
            if (res) {
                this.deleteSourceType(source.id);
            }
        });
    }
    deleteSourceType(sourceID) {
        this.sourceController.deleteSourceType(this.orgID, sourceID).subscribe((deleteRes) => {
            if (deleteRes) {
                this.refreshBtn.nativeElement.click();
            }
        });
    }
}
SourcePageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SourcePageComponent, deps: [{ token: i1.MatDialog }, { token: i2.StorageService }, { token: i3.SourceController }, { token: i4.SourceService }], target: i0.ɵɵFactoryTarget.Component });
SourcePageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourcePageComponent, selector: "lib-page", viewQueries: [{ propertyName: "sort", first: true, predicate: ["sort"], descendants: true }, { propertyName: "paginator", first: true, predicate: ["paginator"], descendants: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true }, { propertyName: "typeSelect", first: true, predicate: ["typeSelect"], descendants: true }], ngImport: i0, template: "<div class=\"card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Source type</div>\n            <div class=\"pageSubtitle\"></div>\n        </div>\n\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar [searchBy]=\"searchByPlaceHolder\"\n                    (emitSearch)=\"searchFn($event)\"></lib-search-bar-one>\n\n                <button class=\"btn btn-sm btn-light refreshBtn centerAlign me-3 py-1\" #refreshBtn matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.REFRESH\">\n                    <span class=\"material-symbols-outlined text-secondary\">\n                        refresh\n                    </span>\n                </button>\n\n                <button type=\"button\" class=\"btn btn-sm btn-success\" (click)=\"createSource(FormAction.CREATE)\" matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.CREATE\">\n                    <fa-icon [icon]=\"faPlus\" class=\"me-1\"></fa-icon>Source type\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <table class=\"w-100\" mat-table matSort #sort=\"matSort\" matSortActive=\"name\" matSortDirection=\"asc\"\n        matSortDisableClear [dataSource]=\"dataSource\">\n\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef>ID</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"name\">\n            <th class=\"px-4\" mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Name</th>\n            <td class=\"px-4\" mat-cell *matCellDef=\"let row\">\n                {{ row.name ? row.name : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"utilitySourceName\">\n            <th mat-header-cell *matHeaderCellDef>\n                <funnel-filter #typeSelect header=\"Utility source\" type=\"mono\" value=\"keyID\"\n                    [entityList]=\"utilitySourceI\" view=\"name\" [selectFC]=\"utilitySourceFC\" [active]=\"utilitySource\"\n                    (mono)=\"utilitySource = true;\">\n                </funnel-filter>\n            </th>\n            <td mat-cell *matCellDef=\"let row\">\n                {{ row.utilitySourceName ? row.utilitySourceName : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"type\">\n            <th class=\"px-4\" mat-header-cell *matHeaderCellDef>Utility source type</th>\n            <td class=\"px-4\" mat-cell *matCellDef=\"let row\">\n                {{ row.type ? row.type : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"option\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let row\">\n                <div class=\"centerAlignVertical\">\n\n                    <button type=\"button\" class=\"iconBtn centerAlign text-primary updateIconHover\"\n                        (click)=\"updateSource(FormAction.UPDATE, row)\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                        [matTooltip]=\"ButtonTooltipEnum.UPDATE\">\n                        <span class=\"material-symbols-outlined icon\">\n                            edit\n                        </span>\n                    </button>\n\n                    <a class=\"iconBtn centerAlign text-danger deleteIconHover cursorPointer\" matTooltipPosition=\"below\"\n                        [matTooltip]=\"ButtonTooltipEnum.DELETE\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" (click)=\"openDeleteDialog(row)\">\n                        <span class=\"material-symbols-outlined icon\">\n                            delete\n                        </span>\n                    </a>\n                </div>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumn\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumn;\" class=\"dataRow\"></tr>\n\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumn.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator class=\"roundedBorder\" showFirstLastButtons #paginator [length]=\"dataSourceLength\"\n        [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\" [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\">\n    </mat-paginator>\n</div>", components: [{ type: i5.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i6.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i7.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i8.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i5.FunnelFilterComponent, selector: "funnel-filter", inputs: ["header", "active", "showSearchBar", "searchByPlaceholder", "searchBy", "selectAllLabel", "entityList", "view", "value", "type", "selectFC", "resetFlag"], outputs: ["mono", "multi", "selected"] }, { type: i7.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i7.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i9.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i10.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i11.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i8.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i7.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i7.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i7.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i7.MatCellDef, selector: "[matCellDef]" }, { type: i7.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i7.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i7.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i7.MatNoDataRow, selector: "ng-template[matNoDataRow]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SourcePageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-page',
                    templateUrl: './page.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.StorageService }, { type: i3.SourceController }, { type: i4.SourceService }]; }, propDecorators: { sort: [{
                type: ViewChild,
                args: ['sort']
            }], paginator: [{
                type: ViewChild,
                args: ['paginator']
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn']
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar']
            }], typeSelect: [{
                type: ViewChild,
                args: ['typeSelect']
            }] } });
//# sourceMappingURL=data:application/json;base64,