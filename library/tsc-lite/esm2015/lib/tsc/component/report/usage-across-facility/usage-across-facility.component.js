import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { ReportErrorEnum } from '../../../enum/error.enum';
import { AggregateDataRequest } from '../../../model/aggregate-data.model';
import { Alert } from '../../../model/alert.model';
import { DownloadReportRequest } from '../../../model/report.model';
// tsc-library
import { CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE, DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import { ButtonLabelEnum, COMMON_CONSTANT, InvalidForm, MATERIAL_CONSTANT, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@library/toastr-service";
import * as i3 from "../../../service/aggregate-data.service";
import * as i4 from "../../../service/report.service";
import * as i5 from "../../../service/alert.service";
import * as i6 from "../../_shared/filter/source-load/source-load.component";
import * as i7 from "@library/date";
import * as i8 from "../../dropdown/aggregation-duration/aggregation-duration.component";
import * as i9 from "../../_shared/download-report/download-report.component";
import * as i10 from "@library/tsc-common";
import * as i11 from "@angular/material/core";
import * as i12 from "@angular/common";
// /tsc-library/
export class UsageAcrossFacilityComponent {
    constructor(storageService, toastService, aggregateDataService, reportService, alertService) {
        this.storageService = storageService;
        this.toastService = toastService;
        this.aggregateDataService = aggregateDataService;
        this.reportService = reportService;
        this.alertService = alertService;
        this.materialConstant = MATERIAL_CONSTANT;
        this.commonConstant = COMMON_CONSTANT;
        this.customRangeConstant = CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
        this.materialFormFieldAppearance = MaterialFormFieldAppearance;
        this.buttonLabelEnum = ButtonLabelEnum;
        this.dateFormatEnum = DateFormatEnum;
        this.dateInputTypeEnum = DateInputTypeEnum;
        this.dateTypeEnum = DateTypeEnum;
        this.showAlert = false;
        this.showLoader = false;
        this.reportAlertObj = new Alert();
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        if (this.applicationKeyID == ApplicationKeyID.ENERGY_KEY_ID) {
            this.paramMetric = "engEnergyUsed";
        }
        else if (this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID) {
            this.paramMetric = "gwFlowTotalizer";
        }
    }
    sourceLoadInpChange() {
        this.category = this.sourceLoadInput.categoryFC.value;
    }
    dateInpChange() {
        this.startDate = this.customDateInput.startDateFC.value;
        this.endDate = this.customDateInput.endDateFC.value;
    }
    aggDurationInpChange() {
        this.aggDuration = this.aggDurationInput.aggDurationFC.value;
    }
    viewReport() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = this.createDataRequest();
                this.reportData = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    this.timestamp = this.reportService.extractTimestamp(this.reportData);
                    this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                }
                else if (((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.length) == 0) {
                    this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.DATA_NOT_FOUND_LABEL, ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
            }
            catch (error) {
                console.error("Error in viewReport()", error);
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_ERROR_LABEL, ReportErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    downloadReport(format) {
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = new DownloadReportRequest();
                requestData.request = this.createDataRequest();
                requestData.reportName = 'Usage Across Facility Report';
                requestData.reportFormat = format;
                yield this.reportService.downloadReport(this.orgID, requestData);
            }
            catch (error) {
                console.error("Error in downloadReport()", error);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    createDataRequest() {
        const requestData = new AggregateDataRequest();
        requestData.startTime = this.startDate;
        requestData.endTime = this.endDate;
        requestData.interval = this.aggDuration;
        requestData.params = [
            {
                name: this.paramMetric,
                dsAgg: "sum",
                agg: "sum",
                source_or_load: this.category,
                sourceLoadType: 'all'
            }
        ];
        requestData.nullifyParams();
        return requestData;
    }
    isValidInputField() {
        const controls = [
            this.customDateInput.startDateFC,
            this.aggDurationInput.aggDurationFC
        ];
        controls.forEach(control => control.markAsTouched());
        return controls.some(control => control.invalid);
    }
}
UsageAcrossFacilityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: UsageAcrossFacilityComponent, deps: [{ token: i1.StorageService }, { token: i2.ToastrService }, { token: i3.AggregateDataService }, { token: i4.ReportService }, { token: i5.AlertService }], target: i0.ɵɵFactoryTarget.Component });
UsageAcrossFacilityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: UsageAcrossFacilityComponent, selector: "lib-usage-across-facility", viewQueries: [{ propertyName: "sourceLoadInput", first: true, predicate: ["sourceLoadInput"], descendants: true }, { propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Usage Across Facility Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\">\n                <lib-source-load #sourceLoadInput (emitFilter)=\"sourceLoadInpChange()\"></lib-source-load>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"reportData && reportData.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.entityName }}<br />\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i6.SourceLoadComponent, selector: "lib-source-load", inputs: ["defaultCategoryInp"], outputs: ["emitFilter"] }, { type: i7.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i8.AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i9.DownloadReportComponent, selector: "lib-download-report", outputs: ["fileTypeEmitted"] }, { type: i10.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp"] }, { type: i10.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i11.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i12.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: UsageAcrossFacilityComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-usage-across-facility',
                    templateUrl: './usage-across-facility.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.ToastrService }, { type: i3.AggregateDataService }, { type: i4.ReportService }, { type: i5.AlertService }]; }, propDecorators: { sourceLoadInput: [{
                type: ViewChild,
                args: ['sourceLoadInput']
            }], customDateInput: [{
                type: ViewChild,
                args: ['customDateInput']
            }], aggDurationInput: [{
                type: ViewChild,
                args: ['aggDurationInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNhZ2UtYWNyb3NzLWZhY2lsaXR5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3JlcG9ydC91c2FnZS1hY3Jvc3MtZmFjaWxpdHkvdXNhZ2UtYWNyb3NzLWZhY2lsaXR5LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3JlcG9ydC91c2FnZS1hY3Jvc3MtZmFjaWxpdHkvdXNhZ2UtYWNyb3NzLWZhY2lsaXR5LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFM0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLEtBQUssRUFBVSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBU3BFLGNBQWM7QUFDZCxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsY0FBYyxFQUFzQixpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUksT0FBTyxFQUFFLFdBQVcsRUFBaUIsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsMkJBQTJCLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoTCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7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QUNyQyxXQUFXLEVBQUUsd0NBQXdDO29CQUNyRCxNQUFNLEVBQUUsRUFDUDtpQkFDSjsyTkE4QmlDLGVBQWU7c0JBQTVDLFNBQVM7dUJBQUMsaUJBQWlCO2dCQUNFLGVBQWU7c0JBQTVDLFNBQVM7dUJBQUMsaUJBQWlCO2dCQUNHLGdCQUFnQjtzQkFBOUMsU0FBUzt1QkFBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFJlcG9ydEVycm9yRW51bSB9IGZyb20gJy4uLy4uLy4uL2VudW0vZXJyb3IuZW51bSc7XG5cbmltcG9ydCB7IEFnZ3JlZ2F0ZURhdGFSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvYWdncmVnYXRlLWRhdGEubW9kZWwnO1xuaW1wb3J0IHsgQWxlcnQsIEFsZXJ0TSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FsZXJ0Lm1vZGVsJztcbmltcG9ydCB7IERvd25sb2FkUmVwb3J0UmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3JlcG9ydC5tb2RlbCc7XG5cbmltcG9ydCB7IFNvdXJjZUxvYWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9fc2hhcmVkL2ZpbHRlci9zb3VyY2UtbG9hZC9zb3VyY2UtbG9hZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWdncmVnYXRpb25EdXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Ryb3Bkb3duL2FnZ3JlZ2F0aW9uLWR1cmF0aW9uL2FnZ3JlZ2F0aW9uLWR1cmF0aW9uLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IEFnZ3JlZ2F0ZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9hZ2dyZWdhdGUtZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IFJlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL3JlcG9ydC5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvYWxlcnQuc2VydmljZSc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBDVVNUT01fUkFOR0VfQ09OU1RBTlRfRVhDTFVTSVZFX0RBVEUsIERhdGVGb3JtYXRFbnVtLCBEYXRlSW5wdXRDb21wb25lbnQsIERhdGVJbnB1dFR5cGVFbnVtLCBEYXRlVHlwZUVudW0gfSBmcm9tICdAbGlicmFyeS9kYXRlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvc3RvcmFnZS1zZXJ2aWNlJztcbmltcG9ydCB7IFRvYXN0ckNvbG9yLCBUb2FzdHJTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvdG9hc3RyLXNlcnZpY2UnO1xuaW1wb3J0IHsgQnV0dG9uTGFiZWxFbnVtLCBDT01NT05fQ09OU1RBTlQsIEludmFsaWRGb3JtLCBNQVRFUklBTF9DT05TVEFOVCwgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLCBNZXNzYWdlQWxlcnRJY29uRW51bSwgTWVzc2FnZUFsZXJ0VHlwZUVudW0gfSBmcm9tICdAbGlicmFyeS90c2MtY29tbW9uJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uS2V5SUQgfSBmcm9tICdAbGlicmFyeS9hcHBsaWNhdGlvbi1zZXJ2aWNlJztcbi8vIC90c2MtbGlicmFyeS9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItdXNhZ2UtYWNyb3NzLWZhY2lsaXR5JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdXNhZ2UtYWNyb3NzLWZhY2lsaXR5LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZXM6IFtcbiAgICBdXG59KVxuXG5leHBvcnQgY2xhc3MgVXNhZ2VBY3Jvc3NGYWNpbGl0eUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBtYXRlcmlhbENvbnN0YW50ID0gTUFURVJJQUxfQ09OU1RBTlQ7XG4gICAgY29tbW9uQ29uc3RhbnQgPSBDT01NT05fQ09OU1RBTlQ7XG4gICAgY3VzdG9tUmFuZ2VDb25zdGFudCA9IENVU1RPTV9SQU5HRV9DT05TVEFOVF9FWENMVVNJVkVfREFURTtcblxuICAgIG1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSA9IE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZTtcbiAgICBidXR0b25MYWJlbEVudW0gPSBCdXR0b25MYWJlbEVudW07XG4gICAgZGF0ZUZvcm1hdEVudW0gPSBEYXRlRm9ybWF0RW51bTtcbiAgICBkYXRlSW5wdXRUeXBlRW51bSA9IERhdGVJbnB1dFR5cGVFbnVtO1xuICAgIGRhdGVUeXBlRW51bSA9IERhdGVUeXBlRW51bTtcblxuICAgIG9yZ0lEOiBhbnk7XG4gICAgYXBwbGljYXRpb25LZXlJRDogYW55O1xuICAgIHBhcmFtTWV0cmljOiBhbnk7XG4gICAgdGltZXpvbmU6IHN0cmluZztcbiAgICBjYXRlZ29yeTogc3RyaW5nO1xuICAgIHN0YXJ0RGF0ZTogc3RyaW5nO1xuICAgIGVuZERhdGU6IHN0cmluZztcbiAgICBhZ2dEdXJhdGlvbjogc3RyaW5nO1xuICAgIHRpbWVzdGFtcDogYW55O1xuICAgIHJlbmRlclRhYmxlOiBhbnk7XG4gICAgcmVwb3J0RGF0YTogYW55O1xuICAgIHNob3dBbGVydDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHNob3dMb2FkZXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHJlcG9ydEFsZXJ0T2JqOiBBbGVydE0gPSBuZXcgQWxlcnQoKTtcblxuICAgIEBWaWV3Q2hpbGQoJ3NvdXJjZUxvYWRJbnB1dCcpIHNvdXJjZUxvYWRJbnB1dDogU291cmNlTG9hZENvbXBvbmVudDtcbiAgICBAVmlld0NoaWxkKCdjdXN0b21EYXRlSW5wdXQnKSBjdXN0b21EYXRlSW5wdXQ6IERhdGVJbnB1dENvbXBvbmVudDtcbiAgICBAVmlld0NoaWxkKCdhZ2dEdXJhdGlvbklucHV0JykgYWdnRHVyYXRpb25JbnB1dDogQWdncmVnYXRpb25EdXJhdGlvbkNvbXBvbmVudDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0b2FzdFNlcnZpY2U6IFRvYXN0clNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYWdncmVnYXRlRGF0YVNlcnZpY2U6IEFnZ3JlZ2F0ZURhdGFTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlcG9ydFNlcnZpY2U6IFJlcG9ydFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2VcbiAgICApIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JnSUQgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoJ2N1cnJlbnRPcmdJRCcpO1xuICAgICAgICB0aGlzLnRpbWV6b25lID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCd0aW1lem9uZScpO1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uS2V5SUQgPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoJ2FwcGxpY2F0aW9uS2V5SUQnKTtcblxuICAgICAgICBpZiAodGhpcy5hcHBsaWNhdGlvbktleUlEID09IEFwcGxpY2F0aW9uS2V5SUQuRU5FUkdZX0tFWV9JRCkge1xuICAgICAgICAgICAgdGhpcy5wYXJhbU1ldHJpYyA9IFwiZW5nRW5lcmd5VXNlZFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYXBwbGljYXRpb25LZXlJRCA9PSBBcHBsaWNhdGlvbktleUlELldBVEVSX0tFWV9JRCkge1xuICAgICAgICAgICAgdGhpcy5wYXJhbU1ldHJpYyA9IFwiZ3dGbG93VG90YWxpemVyXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3VyY2VMb2FkSW5wQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLmNhdGVnb3J5ID0gdGhpcy5zb3VyY2VMb2FkSW5wdXQuY2F0ZWdvcnlGQy52YWx1ZTtcbiAgICB9XG5cbiAgICBkYXRlSW5wQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IHRoaXMuY3VzdG9tRGF0ZUlucHV0LnN0YXJ0RGF0ZUZDLnZhbHVlO1xuICAgICAgICB0aGlzLmVuZERhdGUgPSB0aGlzLmN1c3RvbURhdGVJbnB1dC5lbmREYXRlRkMudmFsdWU7XG4gICAgfVxuXG4gICAgYWdnRHVyYXRpb25JbnBDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuYWdnRHVyYXRpb24gPSB0aGlzLmFnZ0R1cmF0aW9uSW5wdXQuYWdnRHVyYXRpb25GQy52YWx1ZTtcbiAgICB9XG5cbiAgICBhc3luYyB2aWV3UmVwb3J0KCkge1xuXG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnJlc2V0QWxlcnRQcm9wZXJ0aWVzKHRoaXMucmVwb3J0QWxlcnRPYmopO1xuXG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWRJbnB1dEZpZWxkKCkpIHtcbiAgICAgICAgICAgIHRoaXMudG9hc3RTZXJ2aWNlLm9wZW5Ub2FzdChJbnZhbGlkRm9ybS5JTlZBTElEX0ZPUk1fVElUTEUsIEludmFsaWRGb3JtLklOVkFMSURfRk9STV9NRVNTQUdFLCBUb2FzdHJDb2xvci5FUlJPUik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGFydERhdGUgPT0gdGhpcy5lbmREYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaiwgUmVwb3J0RXJyb3JFbnVtLklOVkFMSURfREFURV9MQUJFTCwgUmVwb3J0RXJyb3JFbnVtLklOVkFMSURfREFURV9NRVNTQUdFLCBNZXNzYWdlQWxlcnRUeXBlRW51bS5JTkZPLCBNZXNzYWdlQWxlcnRJY29uRW51bS5JTkZPX0lDT04pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zaG93TG9hZGVyID0gdHJ1ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSB0aGlzLmNyZWF0ZURhdGFSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVwb3J0RGF0YSA9IGF3YWl0IHRoaXMuYWdncmVnYXRlRGF0YVNlcnZpY2UuZ2V0QWdncmVnYXRlRGF0YSh0aGlzLm9yZ0lELCByZXF1ZXN0RGF0YSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJlcG9ydERhdGE/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IHRoaXMucmVwb3J0U2VydmljZS5leHRyYWN0VGltZXN0YW1wKHRoaXMucmVwb3J0RGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZSA9IHRoaXMucmVwb3J0U2VydmljZS5wb3B1bGF0ZVRhYmxlKHRoaXMudGltZXN0YW1wLCB0aGlzLnJlcG9ydERhdGEsIHRoaXMuZGF0ZUZvcm1hdEVudW0uREFURV9USU1FKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZXBvcnREYXRhPy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnNldEFsZXJ0UHJvcGVydGllcyh0aGlzLnJlcG9ydEFsZXJ0T2JqLCBSZXBvcnRFcnJvckVudW0uREFUQV9OT1RfRk9VTkRfTEFCRUwsIFJlcG9ydEVycm9yRW51bS5EQVRBX05PVF9GT1VORF9NRVNTQUdFLCBNZXNzYWdlQWxlcnRUeXBlRW51bS5XQVJOSU5HLCBNZXNzYWdlQWxlcnRJY29uRW51bS5XQVJOSU5HX0lDT04pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gdmlld1JlcG9ydCgpXCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnNldEFsZXJ0UHJvcGVydGllcyh0aGlzLnJlcG9ydEFsZXJ0T2JqLCBSZXBvcnRFcnJvckVudW0uSU5WQUxJRF9FUlJPUl9MQUJFTCwgUmVwb3J0RXJyb3JFbnVtLklOVkFMSURfRVJST1JfTUVTU0FHRSwgTWVzc2FnZUFsZXJ0VHlwZUVudW0uREFOR0VSLCBNZXNzYWdlQWxlcnRJY29uRW51bS5EQU5HRVJfSUNPTik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRvd25sb2FkUmVwb3J0KGZvcm1hdDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnJlc2V0QWxlcnRQcm9wZXJ0aWVzKHRoaXMucmVwb3J0QWxlcnRPYmopO1xuXG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWRJbnB1dEZpZWxkKCkpIHtcbiAgICAgICAgICAgIHRoaXMudG9hc3RTZXJ2aWNlLm9wZW5Ub2FzdChJbnZhbGlkRm9ybS5JTlZBTElEX0ZPUk1fVElUTEUsIEludmFsaWRGb3JtLklOVkFMSURfRk9STV9NRVNTQUdFLCBUb2FzdHJDb2xvci5FUlJPUik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGFydERhdGUgPT0gdGhpcy5lbmREYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaiwgUmVwb3J0RXJyb3JFbnVtLklOVkFMSURfREFURV9MQUJFTCwgUmVwb3J0RXJyb3JFbnVtLklOVkFMSURfREFURV9NRVNTQUdFLCBNZXNzYWdlQWxlcnRUeXBlRW51bS5JTkZPLCBNZXNzYWdlQWxlcnRJY29uRW51bS5JTkZPX0lDT04pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zaG93TG9hZGVyID0gdHJ1ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSBuZXcgRG93bmxvYWRSZXBvcnRSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgIHJlcXVlc3REYXRhLnJlcXVlc3QgPSB0aGlzLmNyZWF0ZURhdGFSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXF1ZXN0RGF0YS5yZXBvcnROYW1lID0gJ1VzYWdlIEFjcm9zcyBGYWNpbGl0eSBSZXBvcnQnO1xuICAgICAgICAgICAgcmVxdWVzdERhdGEucmVwb3J0Rm9ybWF0ID0gZm9ybWF0O1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlcG9ydFNlcnZpY2UuZG93bmxvYWRSZXBvcnQodGhpcy5vcmdJRCwgcmVxdWVzdERhdGEpO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gZG93bmxvYWRSZXBvcnQoKVwiLCBlcnJvcik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZURhdGFSZXF1ZXN0KCkge1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3REYXRhID0gbmV3IEFnZ3JlZ2F0ZURhdGFSZXF1ZXN0KCk7XG5cbiAgICAgICAgcmVxdWVzdERhdGEuc3RhcnRUaW1lID0gdGhpcy5zdGFydERhdGU7XG4gICAgICAgIHJlcXVlc3REYXRhLmVuZFRpbWUgPSB0aGlzLmVuZERhdGU7XG4gICAgICAgIHJlcXVlc3REYXRhLmludGVydmFsID0gdGhpcy5hZ2dEdXJhdGlvbjtcbiAgICAgICAgcmVxdWVzdERhdGEucGFyYW1zID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucGFyYW1NZXRyaWMsXG4gICAgICAgICAgICAgICAgZHNBZ2c6IFwic3VtXCIsXG4gICAgICAgICAgICAgICAgYWdnOiBcInN1bVwiLFxuICAgICAgICAgICAgICAgIHNvdXJjZV9vcl9sb2FkOiB0aGlzLmNhdGVnb3J5LFxuICAgICAgICAgICAgICAgIHNvdXJjZUxvYWRUeXBlOiAnYWxsJ1xuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICByZXF1ZXN0RGF0YS5udWxsaWZ5UGFyYW1zKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3REYXRhO1xuICAgIH1cblxuICAgIGlzVmFsaWRJbnB1dEZpZWxkKCkge1xuICAgICAgICBjb25zdCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0ZUlucHV0LnN0YXJ0RGF0ZUZDLFxuICAgICAgICAgICAgdGhpcy5hZ2dEdXJhdGlvbklucHV0LmFnZ0R1cmF0aW9uRkNcbiAgICAgICAgXTtcblxuICAgICAgICBjb250cm9scy5mb3JFYWNoKGNvbnRyb2wgPT4gY29udHJvbC5tYXJrQXNUb3VjaGVkKCkpO1xuICAgICAgICByZXR1cm4gY29udHJvbHMuc29tZShjb250cm9sID0+IGNvbnRyb2wuaW52YWxpZCk7XG4gICAgfVxuXG59XG4iLCI8ZGl2IGNsYXNzPVwiY2FyZCBtYWluLWNhcmQgY2FyZE92ZXJ3cml0ZSBoMTAwXCI+XG4gICAgPGRpdiBjbGFzcz1cImhlYWRlckNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyTGVmdENvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2VUaXRsZVwiPlVzYWdlIEFjcm9zcyBGYWNpbGl0eSBSZXBvcnQ8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNFwiPlxuICAgICAgICAgICAgICAgIDxsaWItc291cmNlLWxvYWQgI3NvdXJjZUxvYWRJbnB1dCAoZW1pdEZpbHRlcik9XCJzb3VyY2VMb2FkSW5wQ2hhbmdlKClcIj48L2xpYi1zb3VyY2UtbG9hZD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPlxuICAgICAgICAgICAgICAgIDxsaWItZGF0ZS1pbnB1dCAjY3VzdG9tRGF0ZUlucHV0IChlbWl0RmlsdGVyKT1cImRhdGVJbnBDaGFuZ2UoKVwiIFttYXRlcmlhbEZpZWxkV2lkdGhJbnBdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIFttYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2VJbnBdPVwibWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiXG4gICAgICAgICAgICAgICAgICAgIFtpc01hbmRhdG9yeUZpZWxkSW5wXT1cInRydWVcIiBbZGF0ZUlucHV0VHlwZUlucF09XCJkYXRlSW5wdXRUeXBlRW51bS5DVVNUT01fSU5QVVRcIlxuICAgICAgICAgICAgICAgICAgICBbZGF0ZVR5cGVJbnBdPVwiZGF0ZVR5cGVFbnVtLkVYQ0xVU0lWRVwiIFtzaG93RGVmYXVsdER1cmF0aW9uSW5wXT1cInRydWVcIiBbc2hvd0NkclJhbmdlTGFiZWxJbnBdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIFtsYWJlbElucF09XCInU2VsZWN0IGRhdGUnXCIgW3RpbWV6b25lSW5wXT1cInRpbWV6b25lXCIgW3JhbmdlSW5wXT1cImN1c3RvbVJhbmdlQ29uc3RhbnRcIiBbc2hvd1RpbWVJbkNEUklucF09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgW3Nob3dSYW5nZUlucF09XCJ0cnVlXCIgW2NkckZvcm1hdElucF09XCInWVlZWS1NTS1ERCBISDptbTpzcydcIj48L2xpYi1kYXRlLWlucHV0PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPlxuICAgICAgICAgICAgICAgIDxsaWItYWdncmVnYXRpb24tZHVyYXRpb24gI2FnZ0R1cmF0aW9uSW5wdXRcbiAgICAgICAgICAgICAgICAgICAgKGVtaXRGaWx0ZXIpPVwiYWdnRHVyYXRpb25JbnBDaGFuZ2UoKVwiPjwvbGliLWFnZ3JlZ2F0aW9uLWR1cmF0aW9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXQtZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJ2aWV3UmVwb3J0KClcIiBtYXRSaXBwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIFttYXRSaXBwbGVDZW50ZXJlZF09XCJtYXRlcmlhbENvbnN0YW50Lk1BVF9SSVBQTEVfQ0VOVEVSXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBidXR0b25MYWJlbEVudW0uUkVBRF9CVE5fTEFCRUwgfX1cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxsaWItZG93bmxvYWQtcmVwb3J0IChmaWxlVHlwZUVtaXR0ZWQpPVwiZG93bmxvYWRSZXBvcnQoJGV2ZW50KVwiPjwvbGliLWRvd25sb2FkLXJlcG9ydD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgPGxpYi1tZXNzYWdlLWFsZXJ0ICpuZ0lmPVwicmVwb3J0QWxlcnRPYmouc2hvd0FsZXJ0XCIgW2xhYmVsSW5wXT1cInJlcG9ydEFsZXJ0T2JqLmFsZXJ0TGFiZWxcIlxuICAgICAgICAgICAgICAgICAgICBbY29udGVudElucF09XCJyZXBvcnRBbGVydE9iai5hbGVydENvbnRlbnRcIiBbbWVzc2FnZUFsZXJ0VHlwZUlucF09XCJyZXBvcnRBbGVydE9iai5tZXNzYWdlQWxlcnRUeXBlXCJcbiAgICAgICAgICAgICAgICAgICAgW21lc3NhZ2VBbGVydEljb25JbnBdPVwicmVwb3J0QWxlcnRPYmoubWVzc2FnZUFsZXJ0SWNvblwiPlxuICAgICAgICAgICAgICAgIDwvbGliLW1lc3NhZ2UtYWxlcnQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNlbnRlckFsaWduXCI+XG4gICAgICAgICAgICAgICAgPGxpYi1za2VsZXRvbi1sb2FkZXIgKm5nSWY9XCJzaG93TG9hZGVyXCIgW2NvdW50XT1cIjNcIiBbYXBwZWFyYW5jZV09XCInY2lyY2xlJ1wiXG4gICAgICAgICAgICAgICAgICAgIFt0aGVtZV09XCJ7IGhlaWdodDogJzE1cHgnLCB3aWR0aDogJzE1cHgnLCAnYmFja2dyb3VuZC1jb2xvcic6ICcjZTdlYmYzJyB9XCI+PC9saWItc2tlbGV0b24tbG9hZGVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbXQtM1wiICpuZ0lmPVwicmVwb3J0RGF0YSAmJiByZXBvcnREYXRhLmxlbmd0aCA+IDBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvdmVyZmxvd1ggY3VzdG9tU2Nyb2xsQmFyXCI+XG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwidGFibGVIZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmdy1ib2xkXCI+IFNyLiBOby4gPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249XCJjZW50ZXJcIiBjbGFzcz1cImZ3LWJvbGRcIj4gVGltZSA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGRhdGEgb2YgcmVwb3J0RGF0YTsgbGV0IGkgPSBpbmRleFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249XCJjZW50ZXJcIiBjbGFzcz1cImZ3LWJvbGRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGRhdGEuZW50aXR5TmFtZSB9fTxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgZGF0YS5wYXJhbUxhYmVsIH19ICh7eyBkYXRhLnVuaXQgfX0pICh7eyBkYXRhLmRzQWdnIH19KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyICpuZ0Zvcj1cImxldCByb3cgb2YgcmVuZGVyVGFibGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgcm93LmluZGV4IH19PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249XCJjZW50ZXJcIiBjbGFzcz1cImNvbFdpZHRoQ29udGFpbmluZ0RhdGVUaW1lXCI+e3sgcm93LnRpbWUgfX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj1cImNlbnRlclwiICpuZ0Zvcj1cImxldCB2YWx1ZSBvZiByb3cuZGF0YVwiPnt7IHZhbHVlID8gdmFsdWUgOiBjb21tb25Db25zdGFudC5IWVBIRU5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+Il19