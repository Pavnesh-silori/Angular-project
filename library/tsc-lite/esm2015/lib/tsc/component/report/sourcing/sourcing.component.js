import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { ReportErrorEnum } from '../../../enum/error.enum';
import { AggregateDataRequest } from '../../../model/aggregate-data.model';
import { Alert } from '../../../model/alert.model';
import { DownloadReportRequest } from '../../../model/report.model';
// tsc-library
import { CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE, DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import { ButtonLabelEnum, COMMON_CONSTANT, FormErrorEnum, InvalidForm, MATERIAL_CONSTANT, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/toastr-service";
import * as i4 from "../../../service/aggregate-data.service";
import * as i5 from "../../../service/parameter.service";
import * as i6 from "../../../service/report.service";
import * as i7 from "../../../service/alert.service";
import * as i8 from "@library/tsc-common";
import * as i9 from "@angular/material/slide-toggle";
import * as i10 from "@library/date";
import * as i11 from "../../dropdown/aggregation-duration/aggregation-duration.component";
import * as i12 from "@angular/material/form-field";
import * as i13 from "@angular/material/select";
import * as i14 from "@angular/material/core";
import * as i15 from "../../_shared/download-report/download-report.component";
import * as i16 from "@angular/forms";
import * as i17 from "@angular/common";
// /tsc-library/
export class SourcingReportComponent {
    constructor(router, storageService, toastService, aggregateDataService, parameterService, reportService, alertService, tscCommonService) {
        this.router = router;
        this.storageService = storageService;
        this.toastService = toastService;
        this.aggregateDataService = aggregateDataService;
        this.parameterService = parameterService;
        this.reportService = reportService;
        this.alertService = alertService;
        this.tscCommonService = tscCommonService;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.CUSTOM_RANGE_CONSTANT = CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.DateFormatEnum = DateFormatEnum;
        this.DateInputTypeEnum = DateInputTypeEnum;
        this.DateTypeEnum = DateTypeEnum;
        this.FormErrorEnum = FormErrorEnum;
        this.allParameterID = [];
        this.parameterList = [];
        this.totalParameterCount = 0;
        this.showAlert = false;
        this.showLoader = false;
        this.reportAlertObj = new Alert();
        this.parameterFC = new FormControl([], [Validators.required]);
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        const applicationName = this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID ? 'Water' : 'Energy';
        this.pageTitle = `${applicationName} Sourcing Report`;
        this.getConsumptionParameter();
    }
    getConsumptionParameter() {
        return __awaiter(this, void 0, void 0, function* () {
            const consumptionParamM = yield this.parameterService.getConsumptionParameter(this.orgID);
            this.consumptionParamM = consumptionParamM.consumptionParameter;
            this.totalParameterCount = this.consumptionParamM.length;
            this.consumptionParamM.forEach(parameter => this.allParameterID.push(parameter['paramMetric']));
        });
    }
    dateInpChange() {
        this.startDate = this.customDateInput.startDateFC.value;
        this.endDate = this.customDateInput.endDateFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    aggDurationInpChange() {
        this.aggDuration = this.aggDurationInput.aggDurationFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    selectAllParameters() {
        if (!this.parameterFC.value.includes(-1)) {
            this.parameterFC.reset([]);
            return;
        }
        this.parameterFC.setValue([-1, ...this.allParameterID]);
        this.paramInpChange();
    }
    selectedParameters() {
        const selected = this.parameterFC.value;
        if (selected.includes(-1)) {
            selected.shift();
            this.parameterFC.patchValue(selected);
        }
        else if (this.parameterFC.value.length == this.totalParameterCount) {
            this.allParameterID.splice(0, 0, -1);
            this.parameterFC.patchValue(this.allParameterID);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            this.parameterFC.patchValue(filteredSelected);
        }
        this.paramInpChange();
    }
    paramInpChange() {
        let paramMetric = this.parameterFC.value;
        if (paramMetric.length > 0) {
            this.parameterList = this.tscCommonService.removeSelectAllID(paramMetric);
        }
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    viewReport() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = this.createDataRequest();
                this.reportData = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(item => item.data.length == 0))) {
                    this.timestamp = this.reportService.extractTimestamp(this.reportData);
                    this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.DateFormatEnum.DATE_TIME);
                }
                else {
                    this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.DATA_NOT_FOUND_LABEL, ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
            }
            catch (error) {
                console.error("Error in viewReport()", error);
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_ERROR_LABEL, ReportErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    downloadReport(format) {
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = new DownloadReportRequest();
                requestData.request = this.createDataRequest();
                requestData.reportName = this.pageTitle;
                requestData.reportFormat = format;
                yield this.reportService.downloadReport(this.orgID, requestData);
            }
            catch (error) {
                console.error("Error in downloadReport()", error);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    createDataRequest() {
        var _a;
        let parameter;
        if (((_a = this.parameterFC.value) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            parameter = this.tscCommonService.removeSelectAllID(this.parameterFC.value);
        }
        const requestData = new AggregateDataRequest();
        requestData.startTime = this.startDate;
        requestData.endTime = this.endDate;
        requestData.interval = this.aggDuration;
        requestData.params = parameter.map(param => ({
            name: param,
            dsAgg: "sum",
            agg: "sum",
            source_or_load: "source",
            sourceLoadType: 'all'
        }));
        requestData.nullifyParams();
        return requestData;
    }
    isValidInputField() {
        const controls = [
            this.customDateInput.startDateFC,
            this.aggDurationInput.aggDurationFC,
            this.parameterFC
        ];
        controls.forEach(control => control.markAsTouched());
        return controls.some(control => control.invalid);
    }
    scheduleReport(value) {
        if (value) {
            const applicationName = this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID ? 'water' : 'energy';
            this.router.navigate([`schedule-report/${applicationName}-sourcing`]);
        }
    }
}
SourcingReportComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SourcingReportComponent, deps: [{ token: i1.Router }, { token: i2.StorageService }, { token: i3.ToastrService }, { token: i4.AggregateDataService }, { token: i5.ParameterService }, { token: i6.ReportService }, { token: i7.AlertService }, { token: i8.TSCCommonService }], target: i0.ɵɵFactoryTarget.Component });
SourcingReportComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SourcingReportComponent, selector: "lib-sourcing", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <mat-slide-toggle (change)=\"scheduleReport($event.checked)\">Schedule report</mat-slide-toggle>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"DateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"CUSTOM_RANGE_CONSTANT\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select consumption parameter</mat-label>\n\n                    <mat-select [formControl]=\"parameterFC\" multiple required>\n                        <ng-container\n                            *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                            <mat-option [value]=\"-1\" (click)=\"selectAllParameters()\">\n                                Select all\n                            </mat-option>\n                            <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\" (click)=\"selectedParameters()\">\n                                {{ param.label }}\n                            </mat-option>\n                        </ng-container>\n\n                        <ng-template #noConsumptionParamM>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"parameterFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                        {{ ButtonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.entityName }}<br />\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : COMMON_CONSTANT.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i9.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i10.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i11.AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i12.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i13.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i14.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i15.DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i8.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i8.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i12.MatLabel, selector: "mat-label" }, { type: i16.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i16.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i16.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i17.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i17.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i12.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SourcingReportComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-sourcing',
                    templateUrl: './sourcing.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.StorageService }, { type: i3.ToastrService }, { type: i4.AggregateDataService }, { type: i5.ParameterService }, { type: i6.ReportService }, { type: i7.AlertService }, { type: i8.TSCCommonService }]; }, propDecorators: { customDateInput: [{
                type: ViewChild,
                args: ['customDateInput']
            }], aggDurationInput: [{
                type: ViewChild,
                args: ['aggDurationInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,