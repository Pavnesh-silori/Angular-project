import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { ReportErrorEnum } from '../../../enum/error.enum';
import { Alert } from '../../../model/alert.model';
import { MeterData } from '../../../model/aggregate-data.model';
// tsc-library
import { ButtonLabelEnum, COMMON_CONSTANT, FileTypeEnum, FormErrorEnum, InvalidForm, MATERIAL_CONSTANT, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/forms";
import * as i3 from "@library/storage-service";
import * as i4 from "@library/toastr-service";
import * as i5 from "../../../service/alert.service";
import * as i6 from "../../../service/aggregate-data.service";
import * as i7 from "../../../service/report.service";
import * as i8 from "@angular/material/slide-toggle";
import * as i9 from "@library/date";
import * as i10 from "@angular/material/form-field";
import * as i11 from "@angular/material/select";
import * as i12 from "@angular/material/core";
import * as i13 from "../../_shared/download-report/download-report.component";
import * as i14 from "@library/tsc-common";
import * as i15 from "@angular/common";
// /tsc-library/
export class CgwaReportComponent {
    constructor(router, formBuilder, storageService, toastService, alertService, aggregateDataService, reportService) {
        this.router = router;
        this.formBuilder = formBuilder;
        this.storageService = storageService;
        this.toastService = toastService;
        this.alertService = alertService;
        this.aggregateDataService = aggregateDataService;
        this.reportService = reportService;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.DateFormatEnum = DateFormatEnum;
        this.DateInputTypeEnum = DateInputTypeEnum;
        this.DateTypeEnum = DateTypeEnum;
        this.FileTypeEnum = FileTypeEnum;
        this.FormErrorEnum = FormErrorEnum;
        this.reportData = [new MeterData()];
        this.showAlert = false;
        this.showLoader = false;
        this.reportAlertObj = new Alert();
        this.errorHandling = (formGroup, controlPath, error) => {
            return formGroup.get(controlPath).hasError(error);
        };
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
        this.reportFGInit();
    }
    reportFGInit() {
        this.reportFG = this.formBuilder.group({
            startDate: [, Validators.required],
            endDate: [, Validators.required],
            sourceConsumer: this.formBuilder.group({
                type: ['SOURCE', Validators.required],
                keyID: ['BOREWELL', Validators.required]
            }),
            params: this.formBuilder.array([this.createParamsGroup()]),
            interval: [, Validators.required]
        });
    }
    createParamsGroup() {
        return this.formBuilder.group({
            name: ['gwFlowTotalizer', Validators.required],
            dsAgg: ['sum', Validators.required],
            agg: ['sum', Validators.required]
        });
    }
    dateInpChange() {
        let startDate = this.monthDateInput.startDateFC.value;
        let endDate = this.monthDateInput.endDateFC.value;
        this.reportFG.get('startDate').patchValue(startDate);
        this.reportFG.get('endDate').patchValue(endDate);
    }
    reportSubmit() {
        this.alertService.resetAlertProperties(this.reportAlertObj);
        if (this.reportFG.invalid) {
            console.log('Invalid form:', this.reportFG.value);
            this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        else {
            this.showLoader = true;
            this.alertService.resetAlertProperties(this.reportAlertObj);
            this.viewReport();
        }
    }
    viewReport() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.aggregateDataService.getMeterAggregateDataForReport(this.orgID, this.reportFG.value);
                if (result && result.length > 0 && result[0]['date']) {
                    this.reportData = result;
                }
                else {
                    this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.DATA_NOT_FOUND_LABEL, ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
            }
            catch (error) {
                console.error("Error in viewReport()", error);
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_ERROR_LABEL, ReportErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    downloadReport(format) {
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.reportFG.invalid) {
                console.log('Invalid form:', this.reportFG.value);
                this.reportFG.markAllAsTouched();
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = {};
                requestData['request'] = this.reportFG.value;
                requestData['reportName'] = 'CGWA Report';
                requestData['reportFormat'] = format;
                yield this.reportService.downloadConsumptionReport(this.orgID, requestData);
            }
            catch (error) {
                console.error("Error in downloadConsumptionReport()", error);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    scheduleReport(value) {
        if (value) {
            this.router.navigate([`schedule-report/cgwa`]);
        }
    }
}
CgwaReportComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CgwaReportComponent, deps: [{ token: i1.Router }, { token: i2.FormBuilder }, { token: i3.StorageService }, { token: i4.ToastrService }, { token: i5.AlertService }, { token: i6.AggregateDataService }, { token: i7.ReportService }], target: i0.ɵɵFactoryTarget.Component });
CgwaReportComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CgwaReportComponent, selector: "lib-cgwa", viewQueries: [{ propertyName: "monthDateInput", first: true, predicate: ["monthDateInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">CGWA Report</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <mat-slide-toggle (change)=\"scheduleReport($event.checked)\">Schedule report</mat-slide-toggle>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <form [formGroup]=\"reportFG\" (ngSubmit)=\"reportSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-sm-3\">\n                    <lib-date-input #monthDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                        [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                        [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.MONTH_INPUT\"\n                        [dateTypeInp]=\"DateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\"\n                        [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\"></lib-date-input>\n                </div>\n\n                <div class=\"col-sm-3\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label>Select aggregation duration</mat-label>\n                        <mat-select formControlName=\"interval\" required>\n                            <mat-option [value]=\"'DAILY'\">Daily</mat-option>\n                            <mat-option [value]=\"'MONTHLY'\">Monthly</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling(reportFG, 'interval', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <button class=\"d-none\" type=\"submit\" #formSubmitBtn></button>\n        </form>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" (click)=\"formSubmitBtn.click()\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                        {{ ButtonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report [excludeFileTypeInp]=\"FileTypeEnum.CSV\" (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"reportData && reportData.length > 0 && reportData[0].date\">\n            <table class=\"table\">\n                <tbody>\n                    <tr class=\"tableHeader\">\n                        <td align=\"center\" class=\"fw-bold\"> Date </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter name </td>\n                        <td align=\"center\" class=\"fw-bold\"> Parameter name </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter start reading </td>\n                        <td align=\"center\" class=\"fw-bold\"> Meter end reading </td>\n                        <td align=\"center\" class=\"fw-bold\"> Consumption </td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr *ngFor=\"let data of reportData; let i = index\">\n                        <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row?.date | date: 'dd-MMM-yyyy\n                            HH:mm:ss' }}</td>\n                        <td align=\"center\">{{ row?.meterName }}</td>\n                        <td align=\"center\">{{ row?.parameterName }}</td>\n                        <td align=\"center\">{{ row?.meterStartReading }}</td>\n                        <td align=\"center\">{{ row?.meterEndReading }}</td>\n                        <td align=\"center\">{{ row?.meterConsumption }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>", components: [{ type: i8.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i9.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i10.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i11.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i12.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i13.DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i14.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i14.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.MatLabel, selector: "mat-label" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.MatError, selector: "mat-error", inputs: ["id"] }, { type: i12.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i15.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i15.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CgwaReportComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-cgwa',
                    templateUrl: './cgwa.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.FormBuilder }, { type: i3.StorageService }, { type: i4.ToastrService }, { type: i5.AlertService }, { type: i6.AggregateDataService }, { type: i7.ReportService }]; }, propDecorators: { monthDateInput: [{
                type: ViewChild,
                args: ['monthDateInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,