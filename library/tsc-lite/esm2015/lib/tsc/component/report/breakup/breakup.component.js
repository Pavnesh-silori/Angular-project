import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { ReportErrorEnum } from '../../../enum/error.enum';
import { DropdownTypeEnum } from '../../../enum/dropdown.enum';
import { AggregateDataRequest } from '../../../model/aggregate-data.model';
import { Alert } from '../../../model/alert.model';
import { DownloadReportRequest } from '../../../model/report.model';
// tsc-library
import { CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE, DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import { ButtonLabelEnum, COMMON_CONSTANT, FormErrorEnum, InvalidForm, MATERIAL_CONSTANT, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@library/storage-service";
import * as i3 from "@library/toastr-service";
import * as i4 from "../../../service/parameter.service";
import * as i5 from "../../../service/aggregate-data.service";
import * as i6 from "../../../service/report.service";
import * as i7 from "../../../service/alert.service";
import * as i8 from "@library/tsc-common";
import * as i9 from "@angular/material/slide-toggle";
import * as i10 from "../../_shared/filter/source-load/source-load.component";
import * as i11 from "@library/date";
import * as i12 from "../../dropdown/aggregation-duration/aggregation-duration.component";
import * as i13 from "../../dropdown/entity/entity.component";
import * as i14 from "@angular/material/form-field";
import * as i15 from "@angular/material/select";
import * as i16 from "@angular/material/core";
import * as i17 from "../../_shared/download-report/download-report.component";
import * as i18 from "@angular/forms";
import * as i19 from "@angular/common";
// /tsc-library/
export class BreakupReportComponent {
    constructor(router, storageService, toastService, parameterService, aggregateDataService, reportService, alertService, tscCommonService) {
        this.router = router;
        this.storageService = storageService;
        this.toastService = toastService;
        this.parameterService = parameterService;
        this.aggregateDataService = aggregateDataService;
        this.reportService = reportService;
        this.alertService = alertService;
        this.tscCommonService = tscCommonService;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.CUSTOM_RANGE_CONSTANT = CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.DropdownTypeEnum = DropdownTypeEnum;
        this.DateFormatEnum = DateFormatEnum;
        this.DateInputTypeEnum = DateInputTypeEnum;
        this.DateTypeEnum = DateTypeEnum;
        this.FormErrorEnum = FormErrorEnum;
        this.showAlert = false;
        this.showLoader = false;
        this.reportAlertObj = new Alert();
        this.parameterFC = new FormControl('', [Validators.required]);
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        if (this.applicationKeyID == ApplicationKeyID.ENERGY_KEY_ID) {
            this.pageTitle = "Energy Breakup Report";
        }
        else if (this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID) {
            this.pageTitle = "Water Breakup Report";
        }
        this.getConsumptionParameter();
    }
    getConsumptionParameter() {
        return __awaiter(this, void 0, void 0, function* () {
            const consumptionParamM = yield this.parameterService.getConsumptionParameter(this.orgID);
            this.consumptionParamM = consumptionParamM.consumptionParameter;
        });
    }
    sourceLoadInpChange() {
        this.category = this.sourceLoadInput.categoryFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    dateInpChange() {
        this.startDate = this.customDateInput.startDateFC.value;
        this.endDate = this.customDateInput.endDateFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    aggDurationInpChange() {
        this.aggDuration = this.aggDurationInput.aggDurationFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    entityInpChange() {
        this.entityID = this.entityInput.multipleEntityFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    viewReport() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = this.createDataRequest();
                this.reportData = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(item => item.data.length == 0))) {
                    this.timestamp = this.reportService.extractTimestamp(this.reportData);
                    this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.DateFormatEnum.DATE_TIME);
                }
                else {
                    this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.DATA_NOT_FOUND_LABEL, ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
            }
            catch (error) {
                console.error("Error in viewReport()", error);
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_ERROR_LABEL, ReportErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    createDataRequest() {
        var _a;
        if (((_a = this.entityID) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            this.entityID = this.tscCommonService.removeSelectAllID(this.entityID);
        }
        const requestData = new AggregateDataRequest();
        requestData.startTime = this.startDate;
        requestData.endTime = this.endDate;
        requestData.interval = this.aggDuration;
        requestData.entityID = this.entityID;
        requestData.params = [
            {
                name: this.parameterFC.value,
                dsAgg: "sum",
                agg: "sum",
                source_or_load: this.category,
                sourceLoadType: 'all'
            }
        ];
        requestData.nullifyParams();
        return requestData;
    }
    downloadReport(format) {
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = new DownloadReportRequest();
                requestData.request = this.createDataRequest();
                requestData.reportName = this.pageTitle;
                requestData.reportFormat = format;
                yield this.reportService.downloadReport(this.orgID, requestData);
            }
            catch (error) {
                console.error("Error in downloadReport()", error);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    isValidInputField() {
        const controls = [
            this.customDateInput.startDateFC,
            this.aggDurationInput.aggDurationFC,
            this.entityInput.multipleEntityFC,
            this.parameterFC
        ];
        controls.forEach(control => control.markAsTouched());
        return controls.some(control => control.invalid);
    }
    scheduleReport(value) {
        if (value) {
            const applicationName = this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID ? 'water' : 'energy';
            this.router.navigate([`schedule-report/${applicationName}-breakup`]);
        }
    }
}
BreakupReportComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: BreakupReportComponent, deps: [{ token: i1.Router }, { token: i2.StorageService }, { token: i3.ToastrService }, { token: i4.ParameterService }, { token: i5.AggregateDataService }, { token: i6.ReportService }, { token: i7.AlertService }, { token: i8.TSCCommonService }], target: i0.ɵɵFactoryTarget.Component });
BreakupReportComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: BreakupReportComponent, selector: "lib-breakup", viewQueries: [{ propertyName: "sourceLoadInput", first: true, predicate: ["sourceLoadInput"], descendants: true }, { propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "entityInput", first: true, predicate: ["entityInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ pageTitle }}</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <mat-slide-toggle (change)=\"scheduleReport($event.checked)\">Schedule report</mat-slide-toggle>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-4\">\n                <lib-source-load #sourceLoadInput (emitFilter)=\"sourceLoadInpChange()\"></lib-source-load>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"DateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"CUSTOM_RANGE_CONSTANT\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-entity #entityInput [dropdownTypeInp]=\"DropdownTypeEnum.MULTIPLE_DROPDOWN\"\n                    (emitFilter)=\"entityInpChange()\"></lib-entity>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select consumption parameter</mat-label>\n\n                    <mat-select [formControl]=\"parameterFC\" required>\n                        <ng-container\n                            *ngIf=\"consumptionParamM && consumptionParamM.length > 0 && consumptionParamM[0]['id']; else noConsumptionParamM\">\n                            <mat-option *ngFor=\"let param of consumptionParamM\" [value]=\"param.paramMetric\" (click)=\"selectedParameters()\">\n                                {{ param.label }}\n                            </mat-option>\n                        </ng-container>\n\n                        <ng-template #noConsumptionParamM>\n                            <mat-option disabled>\n                                {{ COMMON_CONSTANT.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n\n                    <mat-error *ngIf=\"parameterFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                        {{ ButtonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.entityName }}<br />\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i9.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i10.SourceLoadComponent, selector: "lib-source-load", inputs: ["defaultCategoryInp"], outputs: ["emitFilter"] }, { type: i11.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i12.AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i13.EntityComponent, selector: "lib-entity", inputs: ["dropdownTypeInp"], outputs: ["emitFilter"] }, { type: i14.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i15.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i16.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i17.DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i8.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i8.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i14.MatLabel, selector: "mat-label" }, { type: i18.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i18.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i18.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i19.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i19.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i14.MatError, selector: "mat-error", inputs: ["id"] }, { type: i16.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: BreakupReportComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-breakup',
                    templateUrl: './breakup.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.StorageService }, { type: i3.ToastrService }, { type: i4.ParameterService }, { type: i5.AggregateDataService }, { type: i6.ReportService }, { type: i7.AlertService }, { type: i8.TSCCommonService }]; }, propDecorators: { sourceLoadInput: [{
                type: ViewChild,
                args: ['sourceLoadInput']
            }], customDateInput: [{
                type: ViewChild,
                args: ['customDateInput']
            }], aggDurationInput: [{
                type: ViewChild,
                args: ['aggDurationInput']
            }], entityInput: [{
                type: ViewChild,
                args: ['entityInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWt1cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWJyYXJ5L3RzYy1saXRlL3NyYy9saWIvdHNjL2NvbXBvbmVudC9yZXBvcnQvYnJlYWt1cC9icmVha3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3JlcG9ydC9icmVha3VwL2JyZWFrdXAuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRy9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxLQUFLLEVBQVUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQVdwRSxjQUFjO0FBQ2QsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLGNBQWMsRUFBc0IsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFJLE9BQU8sRUFBRSxXQUFXLEVBQWlCLE1BQU0seUJBQXlCLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSwyQkFBMkIsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBb0IsTUFBTSxxQkFBcUIsQ0FBQztBQUNqTixP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QyxXQUFXO1NBQ25CLENBQUM7UUFFRixRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDckQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxjQUFjLENBQUMsS0FBSztRQUNoQixJQUFJLEtBQUssRUFBRTtZQUNQLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ3BHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsbUJBQW1CLGVBQWUsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUN4RTtJQUNMLENBQUM7O29IQWpOUSxzQkFBc0I7d0dBQXRCLHNCQUFzQixnZENuQ25DLDQ5TEF5SE07NEZEdEZPLHNCQUFzQjtrQkFObEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsV0FBVyxFQUFFLDBCQUEwQjtvQkFDdkMsTUFBTSxFQUFFLEVBQ1A7aUJBQ0o7OFNBdUNpQyxlQUFlO3NCQUE1QyxTQUFTO3VCQUFDLGlCQUFpQjtnQkFDRSxlQUFlO3NCQUE1QyxTQUFTO3VCQUFDLGlCQUFpQjtnQkFDRyxnQkFBZ0I7c0JBQTlDLFNBQVM7dUJBQUMsa0JBQWtCO2dCQUNILFdBQVc7c0JBQXBDLFNBQVM7dUJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgUmVwb3J0RXJyb3JFbnVtIH0gZnJvbSAnLi4vLi4vLi4vZW51bS9lcnJvci5lbnVtJztcbmltcG9ydCB7IERyb3Bkb3duVHlwZUVudW0gfSBmcm9tICcuLi8uLi8uLi9lbnVtL2Ryb3Bkb3duLmVudW0nO1xuXG5pbXBvcnQgeyBDb25zdW1wdGlvblBhcmFtZXRlck0gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9wYXJhbWV0ZXIubW9kZWwnO1xuaW1wb3J0IHsgQWdncmVnYXRlRGF0YVJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZ2dyZWdhdGUtZGF0YS5tb2RlbCc7XG5pbXBvcnQgeyBBbGVydCwgQWxlcnRNIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvYWxlcnQubW9kZWwnO1xuaW1wb3J0IHsgRG93bmxvYWRSZXBvcnRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcmVwb3J0Lm1vZGVsJztcblxuaW1wb3J0IHsgU291cmNlTG9hZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL19zaGFyZWQvZmlsdGVyL3NvdXJjZS1sb2FkL3NvdXJjZS1sb2FkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBZ2dyZWdhdGlvbkR1cmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZHJvcGRvd24vYWdncmVnYXRpb24tZHVyYXRpb24vYWdncmVnYXRpb24tZHVyYXRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IEVudGl0eUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Ryb3Bkb3duL2VudGl0eS9lbnRpdHkuY29tcG9uZW50JztcblxuaW1wb3J0IHsgQWdncmVnYXRlRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL2FnZ3JlZ2F0ZS1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFyYW1ldGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvcGFyYW1ldGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVwb3J0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvcmVwb3J0LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9hbGVydC5zZXJ2aWNlJztcblxuLy8gdHNjLWxpYnJhcnlcbmltcG9ydCB7IENVU1RPTV9SQU5HRV9DT05TVEFOVF9FWENMVVNJVkVfREFURSwgRGF0ZUZvcm1hdEVudW0sIERhdGVJbnB1dENvbXBvbmVudCwgRGF0ZUlucHV0VHlwZUVudW0sIERhdGVUeXBlRW51bSB9IGZyb20gJ0BsaWJyYXJ5L2RhdGUnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICdAbGlicmFyeS9zdG9yYWdlLXNlcnZpY2UnO1xuaW1wb3J0IHsgVG9hc3RyQ29sb3IsIFRvYXN0clNlcnZpY2UgfSBmcm9tICdAbGlicmFyeS90b2FzdHItc2VydmljZSc7XG5pbXBvcnQgeyBCdXR0b25MYWJlbEVudW0sIENPTU1PTl9DT05TVEFOVCwgRm9ybUVycm9yRW51bSwgSW52YWxpZEZvcm0sIE1BVEVSSUFMX0NPTlNUQU5ULCBNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2UsIE1lc3NhZ2VBbGVydEljb25FbnVtLCBNZXNzYWdlQWxlcnRUeXBlRW51bSwgVFNDQ29tbW9uU2VydmljZSB9IGZyb20gJ0BsaWJyYXJ5L3RzYy1jb21tb24nO1xuaW1wb3J0IHsgQXBwbGljYXRpb25LZXlJRCB9IGZyb20gJ0BsaWJyYXJ5L2FwcGxpY2F0aW9uLXNlcnZpY2UnO1xuLy8gL3RzYy1saWJyYXJ5L1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2xpYi1icmVha3VwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYnJlYWt1cC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVzOiBbXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBCcmVha3VwUmVwb3J0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIE1BVEVSSUFMX0NPTlNUQU5UID0gTUFURVJJQUxfQ09OU1RBTlQ7XG4gICAgQ09NTU9OX0NPTlNUQU5UID0gQ09NTU9OX0NPTlNUQU5UO1xuICAgIENVU1RPTV9SQU5HRV9DT05TVEFOVCA9IENVU1RPTV9SQU5HRV9DT05TVEFOVF9FWENMVVNJVkVfREFURTtcblxuICAgIE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZSA9IE1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZTtcbiAgICBCdXR0b25MYWJlbEVudW0gPSBCdXR0b25MYWJlbEVudW07XG4gICAgRHJvcGRvd25UeXBlRW51bSA9IERyb3Bkb3duVHlwZUVudW07XG4gICAgRGF0ZUZvcm1hdEVudW0gPSBEYXRlRm9ybWF0RW51bTtcbiAgICBEYXRlSW5wdXRUeXBlRW51bSA9IERhdGVJbnB1dFR5cGVFbnVtO1xuICAgIERhdGVUeXBlRW51bSA9IERhdGVUeXBlRW51bTtcbiAgICBGb3JtRXJyb3JFbnVtID0gRm9ybUVycm9yRW51bTtcblxuICAgIHBhZ2VUaXRsZTogc3RyaW5nO1xuXG4gICAgb3JnSUQ6IGFueTtcbiAgICBhcHBsaWNhdGlvbktleUlEOiBzdHJpbmc7XG4gICAgY29uc3VtcHRpb25QYXJhbU06IGFueTtcbiAgICBwYXJhbU1ldHJpYzogYW55O1xuICAgIHRpbWV6b25lOiBzdHJpbmc7XG4gICAgc3RhcnREYXRlOiBzdHJpbmc7XG4gICAgZW5kRGF0ZTogc3RyaW5nO1xuICAgIGFnZ0R1cmF0aW9uOiBzdHJpbmc7XG4gICAgY2F0ZWdvcnk6IHN0cmluZztcbiAgICBlbnRpdHlJRDogYW55O1xuXG4gICAgdGltZXN0YW1wOiBhbnk7XG4gICAgcmVuZGVyVGFibGU6IGFueTtcbiAgICByZXBvcnREYXRhOiBhbnk7XG5cbiAgICBzaG93QWxlcnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzaG93TG9hZGVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICByZXBvcnRBbGVydE9iajogQWxlcnRNID0gbmV3IEFsZXJ0KCk7XG5cbiAgICBwYXJhbWV0ZXJGQzogRm9ybUNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkXSk7XG5cbiAgICBAVmlld0NoaWxkKCdzb3VyY2VMb2FkSW5wdXQnKSBzb3VyY2VMb2FkSW5wdXQ6IFNvdXJjZUxvYWRDb21wb25lbnQ7XG4gICAgQFZpZXdDaGlsZCgnY3VzdG9tRGF0ZUlucHV0JykgY3VzdG9tRGF0ZUlucHV0OiBEYXRlSW5wdXRDb21wb25lbnQ7XG4gICAgQFZpZXdDaGlsZCgnYWdnRHVyYXRpb25JbnB1dCcpIGFnZ0R1cmF0aW9uSW5wdXQ6IEFnZ3JlZ2F0aW9uRHVyYXRpb25Db21wb25lbnQ7XG4gICAgQFZpZXdDaGlsZCgnZW50aXR5SW5wdXQnKSBlbnRpdHlJbnB1dDogRW50aXR5Q29tcG9uZW50O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHRvYXN0U2VydmljZTogVG9hc3RyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXJhbWV0ZXJTZXJ2aWNlOiBQYXJhbWV0ZXJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGFnZ3JlZ2F0ZURhdGFTZXJ2aWNlOiBBZ2dyZWdhdGVEYXRhU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZXBvcnRTZXJ2aWNlOiBSZXBvcnRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHRzY0NvbW1vblNlcnZpY2U6IFRTQ0NvbW1vblNlcnZpY2UsXG4gICAgKSB7IH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9yZ0lEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdjdXJyZW50T3JnSUQnKTtcbiAgICAgICAgdGhpcy50aW1lem9uZSA9IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0U3RvcmFnZSgndGltZXpvbmUnKTtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbktleUlEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdhcHBsaWNhdGlvbktleUlEJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuYXBwbGljYXRpb25LZXlJRCA9PSBBcHBsaWNhdGlvbktleUlELkVORVJHWV9LRVlfSUQpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlID0gXCJFbmVyZ3kgQnJlYWt1cCBSZXBvcnRcIjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFwcGxpY2F0aW9uS2V5SUQgPT0gQXBwbGljYXRpb25LZXlJRC5XQVRFUl9LRVlfSUQpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZVRpdGxlID0gXCJXYXRlciBCcmVha3VwIFJlcG9ydFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nZXRDb25zdW1wdGlvblBhcmFtZXRlcigpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENvbnN1bXB0aW9uUGFyYW1ldGVyKCkge1xuICAgICAgICBjb25zdCBjb25zdW1wdGlvblBhcmFtTSA9IDxDb25zdW1wdGlvblBhcmFtZXRlck0+YXdhaXQgdGhpcy5wYXJhbWV0ZXJTZXJ2aWNlLmdldENvbnN1bXB0aW9uUGFyYW1ldGVyKHRoaXMub3JnSUQpO1xuXG4gICAgICAgIHRoaXMuY29uc3VtcHRpb25QYXJhbU0gPSBjb25zdW1wdGlvblBhcmFtTS5jb25zdW1wdGlvblBhcmFtZXRlcjtcbiAgICB9XG5cbiAgICBzb3VyY2VMb2FkSW5wQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLmNhdGVnb3J5ID0gdGhpcy5zb3VyY2VMb2FkSW5wdXQuY2F0ZWdvcnlGQy52YWx1ZTtcblxuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5yZXNldEFsZXJ0UHJvcGVydGllcyh0aGlzLnJlcG9ydEFsZXJ0T2JqKTtcbiAgICB9XG5cbiAgICBkYXRlSW5wQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IHRoaXMuY3VzdG9tRGF0ZUlucHV0LnN0YXJ0RGF0ZUZDLnZhbHVlO1xuICAgICAgICB0aGlzLmVuZERhdGUgPSB0aGlzLmN1c3RvbURhdGVJbnB1dC5lbmREYXRlRkMudmFsdWU7XG5cbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UucmVzZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaik7XG4gICAgfVxuXG4gICAgYWdnRHVyYXRpb25JbnBDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuYWdnRHVyYXRpb24gPSB0aGlzLmFnZ0R1cmF0aW9uSW5wdXQuYWdnRHVyYXRpb25GQy52YWx1ZTtcblxuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5yZXNldEFsZXJ0UHJvcGVydGllcyh0aGlzLnJlcG9ydEFsZXJ0T2JqKTtcbiAgICB9XG5cbiAgICBlbnRpdHlJbnBDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuZW50aXR5SUQgPSB0aGlzLmVudGl0eUlucHV0Lm11bHRpcGxlRW50aXR5RkMudmFsdWU7XG5cbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UucmVzZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaik7XG4gICAgfVxuXG4gICAgYXN5bmMgdmlld1JlcG9ydCgpIHtcblxuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5yZXNldEFsZXJ0UHJvcGVydGllcyh0aGlzLnJlcG9ydEFsZXJ0T2JqKTtcblxuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkSW5wdXRGaWVsZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnRvYXN0U2VydmljZS5vcGVuVG9hc3QoSW52YWxpZEZvcm0uSU5WQUxJRF9GT1JNX1RJVExFLCBJbnZhbGlkRm9ybS5JTlZBTElEX0ZPUk1fTUVTU0FHRSwgVG9hc3RyQ29sb3IuRVJST1IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhcnREYXRlID09IHRoaXMuZW5kRGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc2V0QWxlcnRQcm9wZXJ0aWVzKHRoaXMucmVwb3J0QWxlcnRPYmosIFJlcG9ydEVycm9yRW51bS5JTlZBTElEX0RBVEVfTEFCRUwsIFJlcG9ydEVycm9yRW51bS5JTlZBTElEX0RBVEVfTUVTU0FHRSwgTWVzc2FnZUFsZXJ0VHlwZUVudW0uSU5GTywgTWVzc2FnZUFsZXJ0SWNvbkVudW0uSU5GT19JQ09OKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hvd0xvYWRlciA9IHRydWU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3REYXRhID0gdGhpcy5jcmVhdGVEYXRhUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICB0aGlzLnJlcG9ydERhdGEgPSBhd2FpdCB0aGlzLmFnZ3JlZ2F0ZURhdGFTZXJ2aWNlLmdldEFnZ3JlZ2F0ZURhdGEodGhpcy5vcmdJRCwgcmVxdWVzdERhdGEpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yZXBvcnREYXRhPy5sZW5ndGggPiAwICYmICF0aGlzLnJlcG9ydERhdGE/LmV2ZXJ5KGl0ZW0gPT4gaXRlbS5kYXRhLmxlbmd0aCA9PSAwKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXN0YW1wID0gdGhpcy5yZXBvcnRTZXJ2aWNlLmV4dHJhY3RUaW1lc3RhbXAodGhpcy5yZXBvcnREYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRhYmxlID0gdGhpcy5yZXBvcnRTZXJ2aWNlLnBvcHVsYXRlVGFibGUodGhpcy50aW1lc3RhbXAsIHRoaXMucmVwb3J0RGF0YSwgdGhpcy5EYXRlRm9ybWF0RW51bS5EQVRFX1RJTUUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaiwgUmVwb3J0RXJyb3JFbnVtLkRBVEFfTk9UX0ZPVU5EX0xBQkVMLCBSZXBvcnRFcnJvckVudW0uREFUQV9OT1RfRk9VTkRfTUVTU0FHRSwgTWVzc2FnZUFsZXJ0VHlwZUVudW0uV0FSTklORywgTWVzc2FnZUFsZXJ0SWNvbkVudW0uV0FSTklOR19JQ09OKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIHZpZXdSZXBvcnQoKVwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaiwgUmVwb3J0RXJyb3JFbnVtLklOVkFMSURfRVJST1JfTEFCRUwsIFJlcG9ydEVycm9yRW51bS5JTlZBTElEX0VSUk9SX01FU1NBR0UsIE1lc3NhZ2VBbGVydFR5cGVFbnVtLkRBTkdFUiwgTWVzc2FnZUFsZXJ0SWNvbkVudW0uREFOR0VSX0lDT04pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVEYXRhUmVxdWVzdCgpIHtcblxuICAgICAgICBpZiAodGhpcy5lbnRpdHlJRD8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlJRCA9IHRoaXMudHNjQ29tbW9uU2VydmljZS5yZW1vdmVTZWxlY3RBbGxJRCh0aGlzLmVudGl0eUlEKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlcXVlc3REYXRhID0gbmV3IEFnZ3JlZ2F0ZURhdGFSZXF1ZXN0KCk7XG5cbiAgICAgICAgcmVxdWVzdERhdGEuc3RhcnRUaW1lID0gdGhpcy5zdGFydERhdGU7XG4gICAgICAgIHJlcXVlc3REYXRhLmVuZFRpbWUgPSB0aGlzLmVuZERhdGU7XG4gICAgICAgIHJlcXVlc3REYXRhLmludGVydmFsID0gdGhpcy5hZ2dEdXJhdGlvbjtcbiAgICAgICAgcmVxdWVzdERhdGEuZW50aXR5SUQgPSB0aGlzLmVudGl0eUlEO1xuICAgICAgICByZXF1ZXN0RGF0YS5wYXJhbXMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5wYXJhbWV0ZXJGQy52YWx1ZSxcbiAgICAgICAgICAgICAgICBkc0FnZzogXCJzdW1cIixcbiAgICAgICAgICAgICAgICBhZ2c6IFwic3VtXCIsXG4gICAgICAgICAgICAgICAgc291cmNlX29yX2xvYWQ6IHRoaXMuY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgc291cmNlTG9hZFR5cGU6ICdhbGwnXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHJlcXVlc3REYXRhLm51bGxpZnlQYXJhbXMoKTtcblxuICAgICAgICByZXR1cm4gcmVxdWVzdERhdGE7XG4gICAgfVxuXG4gICAgYXN5bmMgZG93bmxvYWRSZXBvcnQoZm9ybWF0OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UucmVzZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaik7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZElucHV0RmllbGQoKSkge1xuICAgICAgICAgICAgdGhpcy50b2FzdFNlcnZpY2Uub3BlblRvYXN0KEludmFsaWRGb3JtLklOVkFMSURfRk9STV9USVRMRSwgSW52YWxpZEZvcm0uSU5WQUxJRF9GT1JNX01FU1NBR0UsIFRvYXN0ckNvbG9yLkVSUk9SKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0RGF0ZSA9PSB0aGlzLmVuZERhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnNldEFsZXJ0UHJvcGVydGllcyh0aGlzLnJlcG9ydEFsZXJ0T2JqLCBSZXBvcnRFcnJvckVudW0uSU5WQUxJRF9EQVRFX0xBQkVMLCBSZXBvcnRFcnJvckVudW0uSU5WQUxJRF9EQVRFX01FU1NBR0UsIE1lc3NhZ2VBbGVydFR5cGVFbnVtLklORk8sIE1lc3NhZ2VBbGVydEljb25FbnVtLklORk9fSUNPTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dMb2FkZXIgPSB0cnVlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0RGF0YSA9IG5ldyBEb3dubG9hZFJlcG9ydFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgcmVxdWVzdERhdGEucmVxdWVzdCA9IHRoaXMuY3JlYXRlRGF0YVJlcXVlc3QoKTtcbiAgICAgICAgICAgIHJlcXVlc3REYXRhLnJlcG9ydE5hbWUgPSB0aGlzLnBhZ2VUaXRsZTtcbiAgICAgICAgICAgIHJlcXVlc3REYXRhLnJlcG9ydEZvcm1hdCA9IGZvcm1hdDtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXBvcnRTZXJ2aWNlLmRvd25sb2FkUmVwb3J0KHRoaXMub3JnSUQsIHJlcXVlc3REYXRhKTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGRvd25sb2FkUmVwb3J0KClcIiwgZXJyb3IpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1ZhbGlkSW5wdXRGaWVsZCgpIHtcbiAgICAgICAgY29uc3QgY29udHJvbHMgPSBbXG4gICAgICAgICAgICB0aGlzLmN1c3RvbURhdGVJbnB1dC5zdGFydERhdGVGQyxcbiAgICAgICAgICAgIHRoaXMuYWdnRHVyYXRpb25JbnB1dC5hZ2dEdXJhdGlvbkZDLFxuICAgICAgICAgICAgdGhpcy5lbnRpdHlJbnB1dC5tdWx0aXBsZUVudGl0eUZDLFxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJGQ1xuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnRyb2xzLmZvckVhY2goY29udHJvbCA9PiBjb250cm9sLm1hcmtBc1RvdWNoZWQoKSk7XG4gICAgICAgIHJldHVybiBjb250cm9scy5zb21lKGNvbnRyb2wgPT4gY29udHJvbC5pbnZhbGlkKTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZVJlcG9ydCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uTmFtZSA9IHRoaXMuYXBwbGljYXRpb25LZXlJRCA9PSBBcHBsaWNhdGlvbktleUlELldBVEVSX0tFWV9JRCA/ICd3YXRlcicgOiAnZW5lcmd5JztcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgc2NoZWR1bGUtcmVwb3J0LyR7YXBwbGljYXRpb25OYW1lfS1icmVha3VwYF0pO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiPGRpdiBjbGFzcz1cImNhcmQgbWFpbi1jYXJkIGNhcmRPdmVyd3JpdGUgaDEwMFwiPlxuICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJDb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlckxlZnRDb250YWluZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWdlVGl0bGVcIj57eyBwYWdlVGl0bGUgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJSaWdodENvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclJpZ2h0Q29udGFpbmVySW5uZXJcIj5cbiAgICAgICAgICAgICAgICA8bWF0LXNsaWRlLXRvZ2dsZSAoY2hhbmdlKT1cInNjaGVkdWxlUmVwb3J0KCRldmVudC5jaGVja2VkKVwiPlNjaGVkdWxlIHJlcG9ydDwvbWF0LXNsaWRlLXRvZ2dsZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS00XCI+XG4gICAgICAgICAgICAgICAgPGxpYi1zb3VyY2UtbG9hZCAjc291cmNlTG9hZElucHV0IChlbWl0RmlsdGVyKT1cInNvdXJjZUxvYWRJbnBDaGFuZ2UoKVwiPjwvbGliLXNvdXJjZS1sb2FkPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbXQtM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+XG4gICAgICAgICAgICAgICAgPGxpYi1kYXRlLWlucHV0ICNjdXN0b21EYXRlSW5wdXQgKGVtaXRGaWx0ZXIpPVwiZGF0ZUlucENoYW5nZSgpXCIgW21hdGVyaWFsRmllbGRXaWR0aElucF09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgW21hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZUlucF09XCJNYXRlcmlhbEZvcm1GaWVsZEFwcGVhcmFuY2UuRk9STV9GSUVMRF9BUFBFQVJBTkNFXCJcbiAgICAgICAgICAgICAgICAgICAgW2lzTWFuZGF0b3J5RmllbGRJbnBdPVwidHJ1ZVwiIFtkYXRlSW5wdXRUeXBlSW5wXT1cIkRhdGVJbnB1dFR5cGVFbnVtLkNVU1RPTV9JTlBVVFwiXG4gICAgICAgICAgICAgICAgICAgIFtkYXRlVHlwZUlucF09XCJEYXRlVHlwZUVudW0uRVhDTFVTSVZFXCIgW3Nob3dEZWZhdWx0RHVyYXRpb25JbnBdPVwidHJ1ZVwiIFtzaG93Q2RyUmFuZ2VMYWJlbElucF09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgW2xhYmVsSW5wXT1cIidTZWxlY3QgZGF0ZSdcIiBbdGltZXpvbmVJbnBdPVwidGltZXpvbmVcIiBbcmFuZ2VJbnBdPVwiQ1VTVE9NX1JBTkdFX0NPTlNUQU5UXCIgW3Nob3dUaW1lSW5DRFJJbnBdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIFtzaG93UmFuZ2VJbnBdPVwidHJ1ZVwiIFtjZHJGb3JtYXRJbnBdPVwiJ1lZWVktTU0tREQgSEg6bW06c3MnXCI+PC9saWItZGF0ZS1pbnB1dD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICA8bGliLWFnZ3JlZ2F0aW9uLWR1cmF0aW9uICNhZ2dEdXJhdGlvbklucHV0XG4gICAgICAgICAgICAgICAgICAgIChlbWl0RmlsdGVyKT1cImFnZ0R1cmF0aW9uSW5wQ2hhbmdlKClcIj48L2xpYi1hZ2dyZWdhdGlvbi1kdXJhdGlvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICA8bGliLWVudGl0eSAjZW50aXR5SW5wdXQgW2Ryb3Bkb3duVHlwZUlucF09XCJEcm9wZG93blR5cGVFbnVtLk1VTFRJUExFX0RST1BET1dOXCJcbiAgICAgICAgICAgICAgICAgICAgKGVtaXRGaWx0ZXIpPVwiZW50aXR5SW5wQ2hhbmdlKClcIj48L2xpYi1lbnRpdHk+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+XG4gICAgICAgICAgICAgICAgPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwibWF0RmllbGRXaWR0aDEwMFwiIFthcHBlYXJhbmNlXT1cIk1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZS5GT1JNX0ZJRUxEX0FQUEVBUkFOQ0VcIj5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1sYWJlbD5TZWxlY3QgY29uc3VtcHRpb24gcGFyYW1ldGVyPC9tYXQtbGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1zZWxlY3QgW2Zvcm1Db250cm9sXT1cInBhcmFtZXRlckZDXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJjb25zdW1wdGlvblBhcmFtTSAmJiBjb25zdW1wdGlvblBhcmFtTS5sZW5ndGggPiAwICYmIGNvbnN1bXB0aW9uUGFyYW1NWzBdWydpZCddOyBlbHNlIG5vQ29uc3VtcHRpb25QYXJhbU1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiAqbmdGb3I9XCJsZXQgcGFyYW0gb2YgY29uc3VtcHRpb25QYXJhbU1cIiBbdmFsdWVdPVwicGFyYW0ucGFyYW1NZXRyaWNcIiAoY2xpY2spPVwic2VsZWN0ZWRQYXJhbWV0ZXJzKClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcGFyYW0ubGFiZWwgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNub0NvbnN1bXB0aW9uUGFyYW1NPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uIGRpc2FibGVkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBDT01NT05fQ09OU1RBTlQuTk9fREFUQV9GT1VORCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LW9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvbWF0LXNlbGVjdD5cblxuICAgICAgICAgICAgICAgICAgICA8bWF0LWVycm9yICpuZ0lmPVwicGFyYW1ldGVyRkMuaGFzRXJyb3IoJ3JlcXVpcmVkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IEZvcm1FcnJvckVudW0uUkVRVUlSRUQgfX1cbiAgICAgICAgICAgICAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgICAgICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsb2F0LWVuZFwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiIHR5cGU9XCJidXR0b25cIiAoY2xpY2spPVwidmlld1JlcG9ydCgpXCIgbWF0UmlwcGxlXG4gICAgICAgICAgICAgICAgICAgICAgICBbbWF0UmlwcGxlQ2VudGVyZWRdPVwiTUFURVJJQUxfQ09OU1RBTlQuTUFUX1JJUFBMRV9DRU5URVJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IEJ1dHRvbkxhYmVsRW51bS5SRUFEX0JUTl9MQUJFTCB9fVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGxpYi1kb3dubG9hZC1yZXBvcnQgKGZpbGVUeXBlRW1pdHRlZCk9XCJkb3dubG9hZFJlcG9ydCgkZXZlbnQpXCI+PC9saWItZG93bmxvYWQtcmVwb3J0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICA8bGliLW1lc3NhZ2UtYWxlcnQgKm5nSWY9XCJyZXBvcnRBbGVydE9iai5zaG93QWxlcnRcIiBbbGFiZWxJbnBdPVwicmVwb3J0QWxlcnRPYmouYWxlcnRMYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgIFtjb250ZW50SW5wXT1cInJlcG9ydEFsZXJ0T2JqLmFsZXJ0Q29udGVudFwiIFttZXNzYWdlQWxlcnRUeXBlSW5wXT1cInJlcG9ydEFsZXJ0T2JqLm1lc3NhZ2VBbGVydFR5cGVcIlxuICAgICAgICAgICAgICAgICAgICBbbWVzc2FnZUFsZXJ0SWNvbklucF09XCJyZXBvcnRBbGVydE9iai5tZXNzYWdlQWxlcnRJY29uXCI+XG4gICAgICAgICAgICAgICAgPC9saWItbWVzc2FnZS1hbGVydD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2VudGVyQWxpZ25cIj5cbiAgICAgICAgICAgICAgICA8bGliLXNrZWxldG9uLWxvYWRlciAqbmdJZj1cInNob3dMb2FkZXJcIiBbY291bnRdPVwiM1wiIFthcHBlYXJhbmNlXT1cIidjaXJjbGUnXCJcbiAgICAgICAgICAgICAgICAgICAgW3RoZW1lXT1cInsgaGVpZ2h0OiAnMTVweCcsIHdpZHRoOiAnMTVweCcsICdiYWNrZ3JvdW5kLWNvbG9yJzogJyNlN2ViZjMnIH1cIj48L2xpYi1za2VsZXRvbi1sb2FkZXI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtdC0zXCIgKm5nSWY9XCJyZW5kZXJUYWJsZSAmJiByZW5kZXJUYWJsZS5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmZsb3dYIGN1c3RvbVNjcm9sbEJhclwiPlxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cInRhYmxlSGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZnctYm9sZFwiPiBTci4gTm8uIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCIgY2xhc3M9XCJmdy1ib2xkXCI+IFRpbWUgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBkYXRhIG9mIHJlcG9ydERhdGE7IGxldCBpID0gaW5kZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCIgY2xhc3M9XCJmdy1ib2xkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBkYXRhLmVudGl0eU5hbWUgfX08YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGRhdGEucGFyYW1MYWJlbCB9fSAoe3sgZGF0YS51bml0IH19KSAoe3sgZGF0YS5kc0FnZyB9fSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciAqbmdGb3I9XCJsZXQgcm93IG9mIHJlbmRlclRhYmxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHJvdy5pbmRleCB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCIgY2xhc3M9XCJjb2xXaWR0aENvbnRhaW5pbmdEYXRlVGltZVwiPnt7IHJvdy50aW1lIH19PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249XCJjZW50ZXJcIiAqbmdGb3I9XCJsZXQgdmFsdWUgb2Ygcm93LmRhdGFcIj57eyB2YWx1ZSA/IHZhbHVlIDogY29tbW9uQ29uc3RhbnQuSFlQSEVOXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PiJdfQ==