import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { ReportErrorEnum } from '../../../enum/error.enum';
import { AggregateDataRequest } from '../../../model/aggregate-data.model';
import { DevicesWithEntities } from '../../../model/device.model';
import { Alert } from '../../../model/alert.model';
import { DownloadReportRequest } from '../../../model/report.model';
// tsc-library
import { CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE, DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import { ButtonLabelEnum, COMMON_CONSTANT, FormErrorEnum, InvalidForm, MATERIAL_CONSTANT, MatSelectSearchService, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import { ApplicationKeyID } from '@library/application-service';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@library/toastr-service";
import * as i3 from "@library/tsc-common";
import * as i4 from "../../../service/entity-device.service";
import * as i5 from "../../../service/aggregate-data.service";
import * as i6 from "../../../service/report.service";
import * as i7 from "../../../service/alert.service";
import * as i8 from "@library/date";
import * as i9 from "../../dropdown/aggregation-duration/aggregation-duration.component";
import * as i10 from "@angular/material/form-field";
import * as i11 from "@angular/material/select";
import * as i12 from "@angular/material/core";
import * as i13 from "ngx-mat-select-search";
import * as i14 from "../../dropdown/param-metric/param-metric.component";
import * as i15 from "../../_shared/download-report/download-report.component";
import * as i16 from "@angular/forms";
import * as i17 from "@angular/common";
// /tsc-library/
export class MeterReportComponent {
    constructor(storageService, toastService, tscCommonService, entityDeviceService, aggregateDataService, reportService, alertService) {
        this.storageService = storageService;
        this.toastService = toastService;
        this.tscCommonService = tscCommonService;
        this.entityDeviceService = entityDeviceService;
        this.aggregateDataService = aggregateDataService;
        this.reportService = reportService;
        this.alertService = alertService;
        this.materialConstant = MATERIAL_CONSTANT;
        this.commonConstant = COMMON_CONSTANT;
        this.customRangeConstant = CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
        this.materialFormFieldAppearance = MaterialFormFieldAppearance;
        this.buttonLabelEnum = ButtonLabelEnum;
        this.dateFormatEnum = DateFormatEnum;
        this.dateInputTypeEnum = DateInputTypeEnum;
        this.dateTypeEnum = DateTypeEnum;
        this.FormErrorEnum = FormErrorEnum;
        this.parameterList = [];
        this.showAlert = false;
        this.showLoader = false;
        this.entityDeviceM = [new DevicesWithEntities()];
        this.reportAlertObj = new Alert();
        this.meterFC = new FormControl();
        this.meterSearchUtil = new MatSelectSearchService(['name']);
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
        this.applicationKeyID = this.storageService.getStorage('applicationKeyID');
        if (this.applicationKeyID == ApplicationKeyID.ENERGY_KEY_ID) {
            this.paramMetric = "engEnergyUsed";
        }
        else if (this.applicationKeyID == ApplicationKeyID.WATER_KEY_ID) {
            this.paramMetric = "gwFlowTotalizer";
        }
        this.getDevicesWithEntitiesByParameter();
    }
    getDevicesWithEntitiesByParameter() {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            this.entityDeviceM = (yield this.entityDeviceService.getDevicesWithEntitiesByParameter(this.orgID, this.paramMetric));
            this.meterSearchUtil.entityArr = this.entityDeviceM;
            this.meterSearchUtil.createSubscription();
            if (this.entityDeviceM.length > 0 && ((_b = (_a = this.entityDeviceM) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id)) {
                const deviceID = (_f = (_e = (_d = (_c = this.entityDeviceM) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d['devices']) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f['id'];
                this.meterFC.patchValue(deviceID);
                this.entityID = this.getEntityIDByDeviceID(deviceID);
            }
        });
    }
    meterChange(selectedMeter) {
        var _a, _b;
        (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.reset();
        (_b = this.paramInput) === null || _b === void 0 ? void 0 : _b.parameterFC.updateValueAndValidity();
        this.meterFC.patchValue(selectedMeter);
        this.entityID = this.getEntityIDByDeviceID(selectedMeter);
    }
    getEntityIDByDeviceID(deviceID) {
        for (const entity of this.entityDeviceM) {
            for (const device of entity.devices) {
                if (device.id == deviceID) {
                    return entity.id;
                }
            }
        }
        return null;
    }
    dateInpChange() {
        this.startDate = this.customDateInput.startDateFC.value;
        this.endDate = this.customDateInput.endDateFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    aggDurationInpChange() {
        this.aggDuration = this.aggDurationInput.aggDurationFC.value;
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    paramInpChange() {
        var _a;
        let paramMetric = (_a = this.paramInput) === null || _a === void 0 ? void 0 : _a.parameterFC.value;
        if (paramMetric.length > 0) {
            this.parameterList = this.tscCommonService.removeSelectAllID(paramMetric);
        }
        this.alertService.resetAlertProperties(this.reportAlertObj);
    }
    viewReport() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = this.createDataRequest();
                this.reportData = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0 && !((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.every(item => item.data.length == 0))) {
                    this.timestamp = this.reportService.extractTimestamp(this.reportData);
                    this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                }
                else {
                    this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.DATA_NOT_FOUND_LABEL, ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
            }
            catch (error) {
                console.error("Error in viewReport()", error);
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_ERROR_LABEL, ReportErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    downloadReport(format) {
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = new DownloadReportRequest();
                requestData.request = this.createDataRequest();
                requestData.reportName = 'Meter Report';
                requestData.reportFormat = format;
                yield this.reportService.downloadReport(this.orgID, requestData);
            }
            catch (error) {
                console.error("Error in downloadReport()", error);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    createDataRequest() {
        const requestData = new AggregateDataRequest();
        requestData.startTime = this.startDate;
        requestData.endTime = this.endDate;
        requestData.interval = this.aggDuration;
        requestData.entityID = [this.entityID];
        requestData.deviceID = [this.meterFC.value];
        requestData.params = [];
        for (const paramMetric of this.parameterList) {
            requestData.params.push({
                name: paramMetric,
                dsAgg: "avg",
                agg: "avg"
            });
        }
        requestData.nullifyParams();
        return requestData;
    }
    isValidInputField() {
        const controls = [
            this.customDateInput.startDateFC,
            this.aggDurationInput.aggDurationFC,
            this.meterFC,
            this.paramInput.parameterFC
        ];
        controls.forEach(control => control.markAsTouched());
        return controls.some(control => control.invalid);
    }
}
MeterReportComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MeterReportComponent, deps: [{ token: i1.StorageService }, { token: i2.ToastrService }, { token: i3.TSCCommonService }, { token: i4.EntityDeviceService }, { token: i5.AggregateDataService }, { token: i6.ReportService }, { token: i7.AlertService }], target: i0.ɵɵFactoryTarget.Component });
MeterReportComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MeterReportComponent, selector: "lib-meter", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }, { propertyName: "paramInput", first: true, predicate: ["paramInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Meter Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select meter</mat-label>\n                    <mat-select (selectionChange)=\"meterChange($event.value)\" [formControl]=\"meterFC\" required>\n                        <ng-container *ngIf=\"entityDeviceM && entityDeviceM.length > 0 && entityDeviceM?.[0]?.id; else noDataFound\">\n                            <mat-option>\n                                <ngx-mat-select-search [formControl]=\"meterSearchUtil.filterFC\" placeholderLabel=\"Search by entity name\"\n                                    noEntriesFoundLabel=\"No matching name found.\">\n                                </ngx-mat-select-search>\n                            </mat-option>\n                            <mat-optgroup *ngFor=\"let entity of meterSearchUtil.filteredEntities | async\" [label]=\"entity.name\"\n                                [disabled]=\"entity.disabled\">\n                                <mat-option *ngFor=\"let device of entity.devices\" [value]=\"device.id\">\n                                    {{ device.name }}\n                                </mat-option>\n                            </mat-optgroup>\n                        </ng-container>\n                        <ng-template #noDataFound>\n                            <mat-option disabled>\n                                {{ commonConstant.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n                    <mat-error *ngIf=\"meterFC.touched && meterFC.hasError('required')\">\n                        {{ FormErrorEnum.REQUIRED }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-param-metric #paramInput [deviceInp]=\"meterFC.value\" (emitFilter)=\"paramInpChange()\"></lib-param-metric>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                    <lib-download-report (fileTypeEmitted)=\"downloadReport($event)\"></lib-download-report>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"renderTable && renderTable.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i8.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i9.AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i10.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i11.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i12.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i13.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i12.MatOptgroup, selector: "mat-optgroup", inputs: ["disabled"], exportAs: ["matOptgroup"] }, { type: i14.ParamMetricComponent, selector: "lib-param-metric", inputs: ["deviceInp"], outputs: ["emitFilter"] }, { type: i15.DownloadReportComponent, selector: "lib-download-report", inputs: ["excludeFileTypeInp"], outputs: ["fileTypeEmitted"] }, { type: i3.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp", "showCloseBtnInp"] }, { type: i3.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i10.MatLabel, selector: "mat-label" }, { type: i16.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i16.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i16.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i17.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i17.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.MatError, selector: "mat-error", inputs: ["id"] }, { type: i12.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }], pipes: { "async": i17.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MeterReportComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-meter',
                    templateUrl: './meter.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.ToastrService }, { type: i3.TSCCommonService }, { type: i4.EntityDeviceService }, { type: i5.AggregateDataService }, { type: i6.ReportService }, { type: i7.AlertService }]; }, propDecorators: { customDateInput: [{
                type: ViewChild,
                args: ['customDateInput']
            }], aggDurationInput: [{
                type: ViewChild,
                args: ['aggDurationInput']
            }], paramInput: [{
                type: ViewChild,
                args: ['paramInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,