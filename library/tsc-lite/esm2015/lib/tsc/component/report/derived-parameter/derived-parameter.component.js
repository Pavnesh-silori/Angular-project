import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { DropdownTypeEnum } from '../../../enum/dropdown.enum';
import { ReportErrorEnum } from '../../../enum/error.enum';
import { AggregateDataRequest } from '../../../model/aggregate-data.model';
import { Parameter } from '../../../model/parameter.model';
import { Entity } from '../../../model/entity.model';
import { Alert } from '../../../model/alert.model';
// tsc-library
import { CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE, DateFormatEnum, DateInputTypeEnum, DateTypeEnum } from '@library/date';
import { ToastrColor } from '@library/toastr-service';
import { ButtonLabelEnum, COMMON_CONSTANT, InvalidForm, MATERIAL_CONSTANT, MatSelectSearchService, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';
import * as i0 from "@angular/core";
import * as i1 from "@library/storage-service";
import * as i2 from "@library/toastr-service";
import * as i3 from "@library/tsc-common";
import * as i4 from "../../../service/aggregate-data.service";
import * as i5 from "../../../service/parameter.service";
import * as i6 from "../../../service/entity.service";
import * as i7 from "../../../service/report.service";
import * as i8 from "../../../service/alert.service";
import * as i9 from "@library/date";
import * as i10 from "../../dropdown/aggregation-duration/aggregation-duration.component";
import * as i11 from "@angular/material/form-field";
import * as i12 from "@angular/material/select";
import * as i13 from "ngx-mat-select-search";
import * as i14 from "@angular/material/core";
import * as i15 from "@angular/common";
import * as i16 from "@angular/forms";
// /tsc-library/
export class DerivedParameterComponent {
    constructor(storageService, toastService, tscCommonService, aggregateDataService, parameterService, entityService, reportService, alertService) {
        this.storageService = storageService;
        this.toastService = toastService;
        this.tscCommonService = tscCommonService;
        this.aggregateDataService = aggregateDataService;
        this.parameterService = parameterService;
        this.entityService = entityService;
        this.reportService = reportService;
        this.alertService = alertService;
        this.materialConstant = MATERIAL_CONSTANT;
        this.commonConstant = COMMON_CONSTANT;
        this.customRangeConstant = CUSTOM_RANGE_CONSTANT_EXCLUSIVE_DATE;
        this.materialFormFieldAppearance = MaterialFormFieldAppearance;
        this.buttonLabelEnum = ButtonLabelEnum;
        this.dropdownTypeEnum = DropdownTypeEnum;
        this.dateFormatEnum = DateFormatEnum;
        this.dateInputTypeEnum = DateInputTypeEnum;
        this.dateTypeEnum = DateTypeEnum;
        this.showAlert = false;
        this.showLoader = false;
        this.totalParameterCount = 0;
        this.allParameterID = [];
        this.parameterM = [new Parameter()];
        this.entityM = [new Entity()];
        this.parameterFC = new FormControl([], [Validators.required]);
        this.entityFC = new FormControl([], [Validators.required]);
        this.paramSearchUtil = new MatSelectSearchService(['label']);
        this.entitySearchUtil = new MatSelectSearchService(['name']);
        this.reportAlertObj = new Alert();
    }
    ngOnInit() {
        this.orgID = this.storageService.getStorage('currentOrgID');
        this.timezone = this.storageService.getStorage('timezone');
        this.getDerivedParameterByLayoutID();
    }
    dateInpChange() {
        this.startDate = this.customDateInput.startDateFC.value;
        this.endDate = this.customDateInput.endDateFC.value;
    }
    aggDurationInpChange() {
        this.aggDuration = this.aggDurationInput.aggDurationFC.value;
    }
    getDerivedParameterByLayoutID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.parameterM = (yield this.parameterService.getDerivedParameterByLayoutID(this.orgID));
            this.paramSearchUtil.entityArr = this.parameterM;
            this.paramSearchUtil.createSubscription();
            this.totalParameterCount = this.parameterM.length;
            this.parameterM.forEach(parameter => this.allParameterID.push(parameter['paramMetric']));
        });
    }
    selectAllParameters() {
        if (!this.parameterFC.value.includes(-1)) {
            this.parameterFC.reset([]);
            return;
        }
        this.parameterFC.setValue([-1, ...this.allParameterID]);
        this.getEntityByParameterID();
    }
    selectedParameters() {
        const selected = this.parameterFC.value;
        if (selected.includes(-1)) {
            selected.shift();
            this.parameterFC.patchValue(selected);
        }
        else if (this.parameterFC.value.length == this.totalParameterCount) {
            this.allParameterID.splice(0, 0, -1);
            this.parameterFC.patchValue(this.allParameterID);
        }
        else {
            const filteredSelected = selected.filter(s => s != -1);
            this.parameterFC.patchValue(filteredSelected);
        }
        this.getEntityByParameterID();
    }
    getEntityByParameterID() {
        return __awaiter(this, void 0, void 0, function* () {
            this.entityFC.reset();
            this.selectedParamMetric = this.tscCommonService.removeSelectAllID(this.parameterFC.value);
            let parameter = this.parameterM.filter(param => this.selectedParamMetric.includes(param.paramMetric));
            let parameterID = parameter.map(param => param.id);
            let requestBody = {};
            requestBody['parameterID'] = parameterID;
            this.entityM = (yield this.entityService.getEntityByParameterID(this.orgID, requestBody));
            this.entitySearchUtil.entityArr = this.entityM;
            this.entitySearchUtil.createSubscription();
        });
    }
    entityChange(selectedEntity) {
        this.entityFC.patchValue(selectedEntity);
    }
    viewReport() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.alertService.resetAlertProperties(this.reportAlertObj);
            if (this.isValidInputField()) {
                this.toastService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
                return;
            }
            if (this.startDate == this.endDate) {
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_DATE_LABEL, ReportErrorEnum.INVALID_DATE_MESSAGE, MessageAlertTypeEnum.INFO, MessageAlertIconEnum.INFO_ICON);
                return;
            }
            this.showLoader = true;
            try {
                const requestData = this.createDataRequest();
                this.reportData = yield this.aggregateDataService.getAggregateData(this.orgID, requestData);
                if (((_a = this.reportData) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    this.timestamp = this.reportService.extractTimestamp(this.reportData);
                    this.renderTable = this.reportService.populateTable(this.timestamp, this.reportData, this.dateFormatEnum.DATE_TIME);
                }
                else if (((_b = this.reportData) === null || _b === void 0 ? void 0 : _b.length) == 0) {
                    this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.DATA_NOT_FOUND_LABEL, ReportErrorEnum.DATA_NOT_FOUND_MESSAGE, MessageAlertTypeEnum.WARNING, MessageAlertIconEnum.WARNING_ICON);
                }
            }
            catch (error) {
                console.error("Error in viewReport()", error);
                this.alertService.setAlertProperties(this.reportAlertObj, ReportErrorEnum.INVALID_ERROR_LABEL, ReportErrorEnum.INVALID_ERROR_MESSAGE, MessageAlertTypeEnum.DANGER, MessageAlertIconEnum.DANGER_ICON);
            }
            finally {
                this.showLoader = false;
            }
        });
    }
    createDataRequest() {
        const requestData = new AggregateDataRequest();
        requestData.startTime = this.startDate;
        requestData.endTime = this.endDate;
        requestData.interval = this.aggDuration;
        requestData.entityID = [this.entityFC.value];
        requestData.params = [];
        for (const paramMetric of this.selectedParamMetric) {
            requestData.params.push({
                name: paramMetric,
                dsAgg: "sum",
                agg: "sum"
            });
        }
        requestData.nullifyParams();
        return requestData;
    }
    isValidInputField() {
        const controls = [
            this.customDateInput.startDateFC,
            this.aggDurationInput.aggDurationFC,
            this.parameterFC,
            this.entityFC
        ];
        controls.forEach(control => control.markAsTouched());
        return controls.some(control => control.invalid);
    }
}
DerivedParameterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DerivedParameterComponent, deps: [{ token: i1.StorageService }, { token: i2.ToastrService }, { token: i3.TSCCommonService }, { token: i4.AggregateDataService }, { token: i5.ParameterService }, { token: i6.EntityService }, { token: i7.ReportService }, { token: i8.AlertService }], target: i0.ɵɵFactoryTarget.Component });
DerivedParameterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DerivedParameterComponent, selector: "lib-derived-parameter", viewQueries: [{ propertyName: "customDateInput", first: true, predicate: ["customDateInput"], descendants: true }, { propertyName: "aggDurationInput", first: true, predicate: ["aggDurationInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Derived Parameter Report</div>\n        </div>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-sm-3\">\n                <lib-date-input #customDateInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                    [materialFormFieldAppearanceInp]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                    [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"dateInputTypeEnum.CUSTOM_INPUT\"\n                    [dateTypeInp]=\"dateTypeEnum.EXCLUSIVE\" [showDefaultDurationInp]=\"true\" [showCdrRangeLabelInp]=\"true\"\n                    [labelInp]=\"'Select date'\" [timezoneInp]=\"timezone\" [rangeInp]=\"customRangeConstant\" [showTimeInCDRInp]=\"true\"\n                    [showRangeInp]=\"true\" [cdrFormatInp]=\"'YYYY-MM-DD HH:mm:ss'\"></lib-date-input>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <lib-aggregation-duration #aggDurationInput\n                    (emitFilter)=\"aggDurationInpChange()\"></lib-aggregation-duration>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select parameter</mat-label>\n                    <ng-container *ngIf=\"parameterM && parameterM.length > 0 && parameterM[0]['id']; else noParameterFound\">\n                        <mat-select [formControl]=\"parameterFC\" multiple required>\n                            <ngx-mat-select-search [formControl]=\"paramSearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                                noEntriesFoundLabel=\"No matching name found.\">\n                            </ngx-mat-select-search>\n                            <mat-option [value]=\"-1\" (click)=\"selectAllParameters()\" [hidden]=\"paramSearchUtil.filterFC.value\">\n                                Select all\n                            </mat-option>\n                            <mat-option *ngFor=\"let parameter of paramSearchUtil.filteredEntities | async\"\n                                [value]=\"parameter.paramMetric\" (click)=\"selectedParameters()\">\n                                {{ parameter.label }}\n                            </mat-option>\n                        </mat-select>\n                    </ng-container>\n                    <ng-template #noParameterFound>\n                        <mat-select [formControl]=\"parameterFC\">\n                            <mat-option disabled>\n                                {{ commonConstant.NO_DATA_FOUND }}\n                            </mat-option>\n                        </mat-select>\n                    </ng-template>\n                    <mat-error *ngIf=\"parameterFC.touched && parameterFC.hasError('required')\">\n                        Select parameter\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-3\">\n                <mat-form-field class=\"matFieldWidth100\" [appearance]=\"materialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                    <mat-label>Select entity</mat-label>\n                    <mat-select (selectionChange)=\"entityChange($event.value)\" [formControl]=\"entityFC\" required>\n                        <ng-container *ngIf=\"entityM && entityM.length > 0 && entityM[0]['id']; else noEntityFound\">\n                            <mat-option>\n                                <ngx-mat-select-search [formControl]=\"entitySearchUtil.filterFC\" placeholderLabel=\"Search by name\"\n                                    noEntriesFoundLabel=\"No matching name found.\">\n                                </ngx-mat-select-search>\n                            </mat-option>\n                            <mat-option *ngFor=\"let entity of entitySearchUtil.filteredEntities | async\" [value]=\"entity.id\">\n                                {{ entity.name }}\n                            </mat-option>\n                        </ng-container>\n                        <ng-template #noEntityFound>\n                            <mat-option disabled>\n                                {{ commonConstant.NO_DATA_FOUND }}\n                            </mat-option>\n                        </ng-template>\n                    </mat-select>\n                    <mat-error *ngIf=\"entityFC.touched && entityFC.hasError('required')\">\n                        Select entity\n                    </mat-error>\n                </mat-form-field>\n            </div>\n\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"float-end\">\n                    <button class=\"btn btn-sm btn-primary\" type=\"button\" (click)=\"viewReport()\" matRipple\n                        [matRippleCentered]=\"materialConstant.MAT_RIPPLE_CENTER\">\n                        {{ buttonLabelEnum.READ_BTN_LABEL }}\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <lib-message-alert *ngIf=\"reportAlertObj.showAlert\" [labelInp]=\"reportAlertObj.alertLabel\"\n                    [contentInp]=\"reportAlertObj.alertContent\" [messageAlertTypeInp]=\"reportAlertObj.messageAlertType\"\n                    [messageAlertIconInp]=\"reportAlertObj.messageAlertIcon\">\n                </lib-message-alert>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"centerAlign\">\n                <lib-skeleton-loader *ngIf=\"showLoader\" [count]=\"3\" [appearance]=\"'circle'\"\n                    [theme]=\"{ height: '15px', width: '15px', 'background-color': '#e7ebf3' }\"></lib-skeleton-loader>\n            </div>\n        </div>\n\n        <div class=\"row mt-3\" *ngIf=\"reportData && reportData.length > 0\">\n            <div class=\"overflowX customScrollBar\">\n                <table class=\"table\">\n                    <tbody>\n                        <tr class=\"tableHeader\">\n                            <td class=\"fw-bold\"> Sr. No. </td>\n                            <td align=\"center\" class=\"fw-bold\"> Time </td>\n                            <ng-container *ngFor=\"let data of reportData; let i = index\">\n                                <td align=\"center\" class=\"fw-bold\">\n                                    {{ data.paramLabel }} ({{ data.unit }}) ({{ data.dsAgg }})\n                                </td>\n                            </ng-container>\n                        </tr>\n                    </tbody>\n                    <tbody>\n                        <tr *ngFor=\"let row of renderTable\">\n                            <td>{{ row.index }}</td>\n                            <td align=\"center\" class=\"colWidthContainingDateTime\">{{ row.time }}</td>\n                            <td align=\"center\" *ngFor=\"let value of row.data\">{{ value ? value : commonConstant.HYPHEN\n                                }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>", components: [{ type: i9.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }, { type: i10.AggregationDurationComponent, selector: "lib-aggregation-duration", outputs: ["emitFilter"] }, { type: i11.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i12.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i13.MatSelectSearchComponent, selector: "ngx-mat-select-search", inputs: ["placeholderLabel", "type", "closeIcon", "closeSvgIcon", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: i14.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i3.MessageAlertComponent, selector: "lib-message-alert", inputs: ["messageAlertTypeInp", "messageAlertIconInp", "labelInp", "contentInp"] }, { type: i3.SkeletonComponent, selector: "lib-skeleton-loader", inputs: ["count", "appearance", "theme"] }], directives: [{ type: i11.MatLabel, selector: "mat-label" }, { type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i16.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i16.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i16.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i15.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i11.MatError, selector: "mat-error", inputs: ["id"] }, { type: i14.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }], pipes: { "async": i15.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: DerivedParameterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-derived-parameter',
                    templateUrl: './derived-parameter.component.html',
                    styles: []
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }, { type: i2.ToastrService }, { type: i3.TSCCommonService }, { type: i4.AggregateDataService }, { type: i5.ParameterService }, { type: i6.EntityService }, { type: i7.ReportService }, { type: i8.AlertService }]; }, propDecorators: { customDateInput: [{
                type: ViewChild,
                args: ['customDateInput']
            }], aggDurationInput: [{
                type: ViewChild,
                args: ['aggDurationInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXZlZC1wYXJhbWV0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS90c2MtbGl0ZS9zcmMvbGliL3RzYy9jb21wb25lbnQvcmVwb3J0L2Rlcml2ZWQtcGFyYW1ldGVyL2Rlcml2ZWQtcGFyYW1ldGVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvdHNjLWxpdGUvc3JjL2xpYi90c2MvY29tcG9uZW50L3JlcG9ydC9kZXJpdmVkLXBhcmFtZXRlci9kZXJpdmVkLXBhcmFtZXRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUl6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFM0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBYyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxNQUFNLEVBQVcsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsS0FBSyxFQUFVLE1BQU0sNEJBQTRCLENBQUM7QUFVM0QsY0FBYztBQUNkLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxjQUFjLEVBQXNCLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxSSxPQUFPLEVBQUUsV0FBVyxFQUFpQixNQUFNLHlCQUF5QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLFdB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bml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50LXRpbWV6b25lJztcblxuaW1wb3J0IHsgRHJvcGRvd25UeXBlRW51bSB9IGZyb20gJy4uLy4uLy4uL2VudW0vZHJvcGRvd24uZW51bSc7XG5pbXBvcnQgeyBSZXBvcnRFcnJvckVudW0gfSBmcm9tICcuLi8uLi8uLi9lbnVtL2Vycm9yLmVudW0nO1xuXG5pbXBvcnQgeyBBZ2dyZWdhdGVEYXRhUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FnZ3JlZ2F0ZS1kYXRhLm1vZGVsJztcbmltcG9ydCB7IFBhcmFtZXRlciwgUGFyYW1ldGVyTSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3BhcmFtZXRlci5tb2RlbCc7XG5pbXBvcnQgeyBFbnRpdHksIEVudGl0eU0gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9lbnRpdHkubW9kZWwnO1xuaW1wb3J0IHsgQWxlcnQsIEFsZXJ0TSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FsZXJ0Lm1vZGVsJztcblxuaW1wb3J0IHsgQWdncmVnYXRpb25EdXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Ryb3Bkb3duL2FnZ3JlZ2F0aW9uLWR1cmF0aW9uL2FnZ3JlZ2F0aW9uLWR1cmF0aW9uLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IEFnZ3JlZ2F0ZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9hZ2dyZWdhdGUtZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IFBhcmFtZXRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL3BhcmFtZXRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEVudGl0eVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL2VudGl0eS5zZXJ2aWNlJztcbmltcG9ydCB7IFJlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL3JlcG9ydC5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvYWxlcnQuc2VydmljZSc7XG5cbi8vIHRzYy1saWJyYXJ5XG5pbXBvcnQgeyBDVVNUT01fUkFOR0VfQ09OU1RBTlRfRVhDTFVTSVZFX0RBVEUsIERhdGVGb3JtYXRFbnVtLCBEYXRlSW5wdXRDb21wb25lbnQsIERhdGVJbnB1dFR5cGVFbnVtLCBEYXRlVHlwZUVudW0gfSBmcm9tICdAbGlicmFyeS9kYXRlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvc3RvcmFnZS1zZXJ2aWNlJztcbmltcG9ydCB7IFRvYXN0ckNvbG9yLCBUb2FzdHJTZXJ2aWNlIH0gZnJvbSAnQGxpYnJhcnkvdG9hc3RyLXNlcnZpY2UnO1xuaW1wb3J0IHsgQnV0dG9uTGFiZWxFbnVtLCBDT01NT05fQ09OU1RBTlQsIEludmFsaWRGb3JtLCBNQVRFUklBTF9DT05TVEFOVCwgTWF0U2VsZWN0U2VhcmNoU2VydmljZSwgTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLCBNZXNzYWdlQWxlcnRJY29uRW51bSwgTWVzc2FnZUFsZXJ0VHlwZUVudW0sIFRTQ0NvbW1vblNlcnZpY2UgfSBmcm9tICdAbGlicmFyeS90c2MtY29tbW9uJztcbi8vIC90c2MtbGlicmFyeS9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdsaWItZGVyaXZlZC1wYXJhbWV0ZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kZXJpdmVkLXBhcmFtZXRlci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVzOiBbXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBEZXJpdmVkUGFyYW1ldGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIG1hdGVyaWFsQ29uc3RhbnQgPSBNQVRFUklBTF9DT05TVEFOVDtcbiAgICBjb21tb25Db25zdGFudCA9IENPTU1PTl9DT05TVEFOVDtcbiAgICBjdXN0b21SYW5nZUNvbnN0YW50ID0gQ1VTVE9NX1JBTkdFX0NPTlNUQU5UX0VYQ0xVU0lWRV9EQVRFO1xuXG4gICAgbWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlID0gTWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlO1xuICAgIGJ1dHRvbkxhYmVsRW51bSA9IEJ1dHRvbkxhYmVsRW51bTtcbiAgICBkcm9wZG93blR5cGVFbnVtID0gRHJvcGRvd25UeXBlRW51bTtcbiAgICBkYXRlRm9ybWF0RW51bSA9IERhdGVGb3JtYXRFbnVtO1xuICAgIGRhdGVJbnB1dFR5cGVFbnVtID0gRGF0ZUlucHV0VHlwZUVudW07XG4gICAgZGF0ZVR5cGVFbnVtID0gRGF0ZVR5cGVFbnVtO1xuXG4gICAgb3JnSUQ6IGFueTtcbiAgICB0aW1lem9uZTogc3RyaW5nO1xuICAgIHN0YXJ0RGF0ZTogc3RyaW5nO1xuICAgIGVuZERhdGU6IHN0cmluZztcbiAgICBhZ2dEdXJhdGlvbjogc3RyaW5nO1xuICAgIHRpbWVzdGFtcDogYW55O1xuICAgIHJlbmRlclRhYmxlOiBhbnk7XG4gICAgcmVwb3J0RGF0YTogYW55O1xuICAgIHNlbGVjdGVkUGFyYW1NZXRyaWM6IGFueTtcbiAgICBzaG93QWxlcnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzaG93TG9hZGVyOiBib29sZWFuID0gZmFsc2U7XG4gICAgdG90YWxQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gMDtcbiAgICBhbGxQYXJhbWV0ZXJJRDogYW55W10gPSBbXTtcblxuICAgIHBhcmFtZXRlck0gPSBbbmV3IFBhcmFtZXRlcigpXTtcbiAgICBlbnRpdHlNID0gW25ldyBFbnRpdHkoKV07XG5cbiAgICBwYXJhbWV0ZXJGQzogRm9ybUNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woW10sIFtWYWxpZGF0b3JzLnJlcXVpcmVkXSk7XG4gICAgZW50aXR5RkM6IEZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKFtdLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF0pO1xuXG4gICAgcGFyYW1TZWFyY2hVdGlsOiBNYXRTZWxlY3RTZWFyY2hTZXJ2aWNlID0gbmV3IE1hdFNlbGVjdFNlYXJjaFNlcnZpY2UoWydsYWJlbCddKTtcbiAgICBlbnRpdHlTZWFyY2hVdGlsOiBNYXRTZWxlY3RTZWFyY2hTZXJ2aWNlID0gbmV3IE1hdFNlbGVjdFNlYXJjaFNlcnZpY2UoWyduYW1lJ10pO1xuXG4gICAgcmVwb3J0QWxlcnRPYmo6IEFsZXJ0TSA9IG5ldyBBbGVydCgpO1xuXG4gICAgQFZpZXdDaGlsZCgnY3VzdG9tRGF0ZUlucHV0JykgY3VzdG9tRGF0ZUlucHV0OiBEYXRlSW5wdXRDb21wb25lbnQ7XG4gICAgQFZpZXdDaGlsZCgnYWdnRHVyYXRpb25JbnB1dCcpIGFnZ0R1cmF0aW9uSW5wdXQ6IEFnZ3JlZ2F0aW9uRHVyYXRpb25Db21wb25lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdG9hc3RTZXJ2aWNlOiBUb2FzdHJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHRzY0NvbW1vblNlcnZpY2U6IFRTQ0NvbW1vblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYWdncmVnYXRlRGF0YVNlcnZpY2U6IEFnZ3JlZ2F0ZURhdGFTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBhcmFtZXRlclNlcnZpY2U6IFBhcmFtZXRlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZW50aXR5U2VydmljZTogRW50aXR5U2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZXBvcnRTZXJ2aWNlOiBSZXBvcnRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlXG4gICAgKSB7IH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9yZ0lEID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRTdG9yYWdlKCdjdXJyZW50T3JnSUQnKTtcbiAgICAgICAgdGhpcy50aW1lem9uZSA9IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0U3RvcmFnZSgndGltZXpvbmUnKTtcblxuICAgICAgICB0aGlzLmdldERlcml2ZWRQYXJhbWV0ZXJCeUxheW91dElEKCk7XG4gICAgfVxuXG4gICAgZGF0ZUlucENoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zdGFydERhdGUgPSB0aGlzLmN1c3RvbURhdGVJbnB1dC5zdGFydERhdGVGQy52YWx1ZTtcbiAgICAgICAgdGhpcy5lbmREYXRlID0gdGhpcy5jdXN0b21EYXRlSW5wdXQuZW5kRGF0ZUZDLnZhbHVlO1xuICAgIH1cblxuICAgIGFnZ0R1cmF0aW9uSW5wQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLmFnZ0R1cmF0aW9uID0gdGhpcy5hZ2dEdXJhdGlvbklucHV0LmFnZ0R1cmF0aW9uRkMudmFsdWU7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RGVyaXZlZFBhcmFtZXRlckJ5TGF5b3V0SUQoKSB7XG4gICAgICAgIHRoaXMucGFyYW1ldGVyTSA9IDxQYXJhbWV0ZXJNW10+YXdhaXQgdGhpcy5wYXJhbWV0ZXJTZXJ2aWNlLmdldERlcml2ZWRQYXJhbWV0ZXJCeUxheW91dElEKHRoaXMub3JnSUQpO1xuXG4gICAgICAgIHRoaXMucGFyYW1TZWFyY2hVdGlsLmVudGl0eUFyciA9IHRoaXMucGFyYW1ldGVyTTtcbiAgICAgICAgdGhpcy5wYXJhbVNlYXJjaFV0aWwuY3JlYXRlU3Vic2NyaXB0aW9uKCk7XG5cbiAgICAgICAgdGhpcy50b3RhbFBhcmFtZXRlckNvdW50ID0gdGhpcy5wYXJhbWV0ZXJNLmxlbmd0aDtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJNLmZvckVhY2gocGFyYW1ldGVyID0+IHRoaXMuYWxsUGFyYW1ldGVySUQucHVzaChwYXJhbWV0ZXJbJ3BhcmFtTWV0cmljJ10pKTtcbiAgICB9XG5cbiAgICBzZWxlY3RBbGxQYXJhbWV0ZXJzKCkge1xuICAgICAgICBpZiAoIXRoaXMucGFyYW1ldGVyRkMudmFsdWUuaW5jbHVkZXMoLTEpKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlckZDLnJlc2V0KFtdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmFtZXRlckZDLnNldFZhbHVlKFstMSwgLi4udGhpcy5hbGxQYXJhbWV0ZXJJRF0pO1xuXG4gICAgICAgIHRoaXMuZ2V0RW50aXR5QnlQYXJhbWV0ZXJJRCgpO1xuICAgIH1cblxuICAgIHNlbGVjdGVkUGFyYW1ldGVycygpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnBhcmFtZXRlckZDLnZhbHVlO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZC5pbmNsdWRlcygtMSkpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlckZDLnBhdGNoVmFsdWUoc2VsZWN0ZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFyYW1ldGVyRkMudmFsdWUubGVuZ3RoID09IHRoaXMudG90YWxQYXJhbWV0ZXJDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5hbGxQYXJhbWV0ZXJJRC5zcGxpY2UoMCwgMCwgLTEpO1xuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJGQy5wYXRjaFZhbHVlKHRoaXMuYWxsUGFyYW1ldGVySUQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRTZWxlY3RlZCA9IHNlbGVjdGVkLmZpbHRlcihzID0+IHMgIT0gLTEpO1xuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJGQy5wYXRjaFZhbHVlKGZpbHRlcmVkU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nZXRFbnRpdHlCeVBhcmFtZXRlcklEKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RW50aXR5QnlQYXJhbWV0ZXJJRCgpIHtcblxuICAgICAgICB0aGlzLmVudGl0eUZDLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZFBhcmFtTWV0cmljID0gdGhpcy50c2NDb21tb25TZXJ2aWNlLnJlbW92ZVNlbGVjdEFsbElEKHRoaXMucGFyYW1ldGVyRkMudmFsdWUpO1xuICAgICAgICBsZXQgcGFyYW1ldGVyID0gdGhpcy5wYXJhbWV0ZXJNLmZpbHRlcihwYXJhbSA9PiB0aGlzLnNlbGVjdGVkUGFyYW1NZXRyaWMuaW5jbHVkZXMocGFyYW0ucGFyYW1NZXRyaWMpKTtcbiAgICAgICAgbGV0IHBhcmFtZXRlcklEID0gcGFyYW1ldGVyLm1hcChwYXJhbSA9PiBwYXJhbS5pZCk7XG5cbiAgICAgICAgbGV0IHJlcXVlc3RCb2R5ID0ge307XG4gICAgICAgIHJlcXVlc3RCb2R5WydwYXJhbWV0ZXJJRCddID0gcGFyYW1ldGVySUQ7XG5cbiAgICAgICAgdGhpcy5lbnRpdHlNID0gPEVudGl0eU1bXT5hd2FpdCB0aGlzLmVudGl0eVNlcnZpY2UuZ2V0RW50aXR5QnlQYXJhbWV0ZXJJRCh0aGlzLm9yZ0lELCByZXF1ZXN0Qm9keSk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHlTZWFyY2hVdGlsLmVudGl0eUFyciA9IHRoaXMuZW50aXR5TTtcbiAgICAgICAgdGhpcy5lbnRpdHlTZWFyY2hVdGlsLmNyZWF0ZVN1YnNjcmlwdGlvbigpO1xuICAgIH1cblxuICAgIGVudGl0eUNoYW5nZShzZWxlY3RlZEVudGl0eSkge1xuICAgICAgICB0aGlzLmVudGl0eUZDLnBhdGNoVmFsdWUoc2VsZWN0ZWRFbnRpdHkpO1xuICAgIH1cblxuICAgIGFzeW5jIHZpZXdSZXBvcnQoKSB7XG5cbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UucmVzZXRBbGVydFByb3BlcnRpZXModGhpcy5yZXBvcnRBbGVydE9iaik7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZElucHV0RmllbGQoKSkge1xuICAgICAgICAgICAgdGhpcy50b2FzdFNlcnZpY2Uub3BlblRvYXN0KEludmFsaWRGb3JtLklOVkFMSURfRk9STV9USVRMRSwgSW52YWxpZEZvcm0uSU5WQUxJRF9GT1JNX01FU1NBR0UsIFRvYXN0ckNvbG9yLkVSUk9SKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0RGF0ZSA9PSB0aGlzLmVuZERhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnNldEFsZXJ0UHJvcGVydGllcyh0aGlzLnJlcG9ydEFsZXJ0T2JqLCBSZXBvcnRFcnJvckVudW0uSU5WQUxJRF9EQVRFX0xBQkVMLCBSZXBvcnRFcnJvckVudW0uSU5WQUxJRF9EQVRFX01FU1NBR0UsIE1lc3NhZ2VBbGVydFR5cGVFbnVtLklORk8sIE1lc3NhZ2VBbGVydEljb25FbnVtLklORk9fSUNPTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dMb2FkZXIgPSB0cnVlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0RGF0YSA9IHRoaXMuY3JlYXRlRGF0YVJlcXVlc3QoKTtcblxuICAgICAgICAgICAgdGhpcy5yZXBvcnREYXRhID0gYXdhaXQgdGhpcy5hZ2dyZWdhdGVEYXRhU2VydmljZS5nZXRBZ2dyZWdhdGVEYXRhKHRoaXMub3JnSUQsIHJlcXVlc3REYXRhKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucmVwb3J0RGF0YT8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXN0YW1wID0gdGhpcy5yZXBvcnRTZXJ2aWNlLmV4dHJhY3RUaW1lc3RhbXAodGhpcy5yZXBvcnREYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRhYmxlID0gdGhpcy5yZXBvcnRTZXJ2aWNlLnBvcHVsYXRlVGFibGUodGhpcy50aW1lc3RhbXAsIHRoaXMucmVwb3J0RGF0YSwgdGhpcy5kYXRlRm9ybWF0RW51bS5EQVRFX1RJTUUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlcG9ydERhdGE/Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc2V0QWxlcnRQcm9wZXJ0aWVzKHRoaXMucmVwb3J0QWxlcnRPYmosIFJlcG9ydEVycm9yRW51bS5EQVRBX05PVF9GT1VORF9MQUJFTCwgUmVwb3J0RXJyb3JFbnVtLkRBVEFfTk9UX0ZPVU5EX01FU1NBR0UsIE1lc3NhZ2VBbGVydFR5cGVFbnVtLldBUk5JTkcsIE1lc3NhZ2VBbGVydEljb25FbnVtLldBUk5JTkdfSUNPTik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiB2aWV3UmVwb3J0KClcIiwgZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc2V0QWxlcnRQcm9wZXJ0aWVzKHRoaXMucmVwb3J0QWxlcnRPYmosIFJlcG9ydEVycm9yRW51bS5JTlZBTElEX0VSUk9SX0xBQkVMLCBSZXBvcnRFcnJvckVudW0uSU5WQUxJRF9FUlJPUl9NRVNTQUdFLCBNZXNzYWdlQWxlcnRUeXBlRW51bS5EQU5HRVIsIE1lc3NhZ2VBbGVydEljb25FbnVtLkRBTkdFUl9JQ09OKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlRGF0YVJlcXVlc3QoKSB7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSBuZXcgQWdncmVnYXRlRGF0YVJlcXVlc3QoKTtcblxuICAgICAgICByZXF1ZXN0RGF0YS5zdGFydFRpbWUgPSB0aGlzLnN0YXJ0RGF0ZTtcbiAgICAgICAgcmVxdWVzdERhdGEuZW5kVGltZSA9IHRoaXMuZW5kRGF0ZTtcbiAgICAgICAgcmVxdWVzdERhdGEuaW50ZXJ2YWwgPSB0aGlzLmFnZ0R1cmF0aW9uO1xuICAgICAgICByZXF1ZXN0RGF0YS5lbnRpdHlJRCA9IFt0aGlzLmVudGl0eUZDLnZhbHVlXTtcbiAgICAgICAgcmVxdWVzdERhdGEucGFyYW1zID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW1NZXRyaWMgb2YgdGhpcy5zZWxlY3RlZFBhcmFtTWV0cmljKSB7XG4gICAgICAgICAgICByZXF1ZXN0RGF0YS5wYXJhbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogcGFyYW1NZXRyaWMsXG4gICAgICAgICAgICAgICAgZHNBZ2c6IFwic3VtXCIsXG4gICAgICAgICAgICAgICAgYWdnOiBcInN1bVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0RGF0YS5udWxsaWZ5UGFyYW1zKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3REYXRhO1xuICAgIH1cblxuICAgIGlzVmFsaWRJbnB1dEZpZWxkKCkge1xuICAgICAgICBjb25zdCBjb250cm9scyA9IFtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0ZUlucHV0LnN0YXJ0RGF0ZUZDLFxuICAgICAgICAgICAgdGhpcy5hZ2dEdXJhdGlvbklucHV0LmFnZ0R1cmF0aW9uRkMsXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlckZDLFxuICAgICAgICAgICAgdGhpcy5lbnRpdHlGQ1xuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnRyb2xzLmZvckVhY2goY29udHJvbCA9PiBjb250cm9sLm1hcmtBc1RvdWNoZWQoKSk7XG4gICAgICAgIHJldHVybiBjb250cm9scy5zb21lKGNvbnRyb2wgPT4gY29udHJvbC5pbnZhbGlkKTtcbiAgICB9XG5cbn1cbiIsIjxkaXYgY2xhc3M9XCJjYXJkIG1haW4tY2FyZCBjYXJkT3ZlcndyaXRlIGgxMDBcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyQ29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJMZWZ0Q29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZVRpdGxlXCI+RGVyaXZlZCBQYXJhbWV0ZXIgUmVwb3J0PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICA8bGliLWRhdGUtaW5wdXQgI2N1c3RvbURhdGVJbnB1dCAoZW1pdEZpbHRlcik9XCJkYXRlSW5wQ2hhbmdlKClcIiBbbWF0ZXJpYWxGaWVsZFdpZHRoSW5wXT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBbbWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlSW5wXT1cIm1hdGVyaWFsRm9ybUZpZWxkQXBwZWFyYW5jZS5GT1JNX0ZJRUxEX0FQUEVBUkFOQ0VcIlxuICAgICAgICAgICAgICAgICAgICBbaXNNYW5kYXRvcnlGaWVsZElucF09XCJ0cnVlXCIgW2RhdGVJbnB1dFR5cGVJbnBdPVwiZGF0ZUlucHV0VHlwZUVudW0uQ1VTVE9NX0lOUFVUXCJcbiAgICAgICAgICAgICAgICAgICAgW2RhdGVUeXBlSW5wXT1cImRhdGVUeXBlRW51bS5FWENMVVNJVkVcIiBbc2hvd0RlZmF1bHREdXJhdGlvbklucF09XCJ0cnVlXCIgW3Nob3dDZHJSYW5nZUxhYmVsSW5wXT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBbbGFiZWxJbnBdPVwiJ1NlbGVjdCBkYXRlJ1wiIFt0aW1lem9uZUlucF09XCJ0aW1lem9uZVwiIFtyYW5nZUlucF09XCJjdXN0b21SYW5nZUNvbnN0YW50XCIgW3Nob3dUaW1lSW5DRFJJbnBdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIFtzaG93UmFuZ2VJbnBdPVwidHJ1ZVwiIFtjZHJGb3JtYXRJbnBdPVwiJ1lZWVktTU0tREQgSEg6bW06c3MnXCI+PC9saWItZGF0ZS1pbnB1dD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICA8bGliLWFnZ3JlZ2F0aW9uLWR1cmF0aW9uICNhZ2dEdXJhdGlvbklucHV0XG4gICAgICAgICAgICAgICAgICAgIChlbWl0RmlsdGVyKT1cImFnZ0R1cmF0aW9uSW5wQ2hhbmdlKClcIj48L2xpYi1hZ2dyZWdhdGlvbi1kdXJhdGlvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICA8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJtYXRGaWVsZFdpZHRoMTAwXCIgW2FwcGVhcmFuY2VdPVwibWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LWxhYmVsPlNlbGVjdCBwYXJhbWV0ZXI8L21hdC1sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInBhcmFtZXRlck0gJiYgcGFyYW1ldGVyTS5sZW5ndGggPiAwICYmIHBhcmFtZXRlck1bMF1bJ2lkJ107IGVsc2Ugbm9QYXJhbWV0ZXJGb3VuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1zZWxlY3QgW2Zvcm1Db250cm9sXT1cInBhcmFtZXRlckZDXCIgbXVsdGlwbGUgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5neC1tYXQtc2VsZWN0LXNlYXJjaCBbZm9ybUNvbnRyb2xdPVwicGFyYW1TZWFyY2hVdGlsLmZpbHRlckZDXCIgcGxhY2Vob2xkZXJMYWJlbD1cIlNlYXJjaCBieSBuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9FbnRyaWVzRm91bmRMYWJlbD1cIk5vIG1hdGNoaW5nIG5hbWUgZm91bmQuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZ3gtbWF0LXNlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gW3ZhbHVlXT1cIi0xXCIgKGNsaWNrKT1cInNlbGVjdEFsbFBhcmFtZXRlcnMoKVwiIFtoaWRkZW5dPVwicGFyYW1TZWFyY2hVdGlsLmZpbHRlckZDLnZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdCBhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IHBhcmFtZXRlciBvZiBwYXJhbVNlYXJjaFV0aWwuZmlsdGVyZWRFbnRpdGllcyB8IGFzeW5jXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3ZhbHVlXT1cInBhcmFtZXRlci5wYXJhbU1ldHJpY1wiIChjbGljayk9XCJzZWxlY3RlZFBhcmFtZXRlcnMoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBwYXJhbWV0ZXIubGFiZWwgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI25vUGFyYW1ldGVyRm91bmQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bWF0LXNlbGVjdCBbZm9ybUNvbnRyb2xdPVwicGFyYW1ldGVyRkNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiBkaXNhYmxlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY29tbW9uQ29uc3RhbnQuTk9fREFUQV9GT1VORCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LW9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LXNlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1lcnJvciAqbmdJZj1cInBhcmFtZXRlckZDLnRvdWNoZWQgJiYgcGFyYW1ldGVyRkMuaGFzRXJyb3IoJ3JlcXVpcmVkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdCBwYXJhbWV0ZXJcbiAgICAgICAgICAgICAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgICAgICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgICA8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJtYXRGaWVsZFdpZHRoMTAwXCIgW2FwcGVhcmFuY2VdPVwibWF0ZXJpYWxGb3JtRmllbGRBcHBlYXJhbmNlLkZPUk1fRklFTERfQVBQRUFSQU5DRVwiPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LWxhYmVsPlNlbGVjdCBlbnRpdHk8L21hdC1sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1zZWxlY3QgKHNlbGVjdGlvbkNoYW5nZSk9XCJlbnRpdHlDaGFuZ2UoJGV2ZW50LnZhbHVlKVwiIFtmb3JtQ29udHJvbF09XCJlbnRpdHlGQ1wiIHJlcXVpcmVkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImVudGl0eU0gJiYgZW50aXR5TS5sZW5ndGggPiAwICYmIGVudGl0eU1bMF1bJ2lkJ107IGVsc2Ugbm9FbnRpdHlGb3VuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmd4LW1hdC1zZWxlY3Qtc2VhcmNoIFtmb3JtQ29udHJvbF09XCJlbnRpdHlTZWFyY2hVdGlsLmZpbHRlckZDXCIgcGxhY2Vob2xkZXJMYWJlbD1cIlNlYXJjaCBieSBuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vRW50cmllc0ZvdW5kTGFiZWw9XCJObyBtYXRjaGluZyBuYW1lIGZvdW5kLlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25neC1tYXQtc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IGVudGl0eSBvZiBlbnRpdHlTZWFyY2hVdGlsLmZpbHRlcmVkRW50aXRpZXMgfCBhc3luY1wiIFt2YWx1ZV09XCJlbnRpdHkuaWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgZW50aXR5Lm5hbWUgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAjbm9FbnRpdHlGb3VuZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWF0LW9wdGlvbiBkaXNhYmxlZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY29tbW9uQ29uc3RhbnQuTk9fREFUQV9GT1VORCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LW9wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvbWF0LXNlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgPG1hdC1lcnJvciAqbmdJZj1cImVudGl0eUZDLnRvdWNoZWQgJiYgZW50aXR5RkMuaGFzRXJyb3IoJ3JlcXVpcmVkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdCBlbnRpdHlcbiAgICAgICAgICAgICAgICAgICAgPC9tYXQtZXJyb3I+XG4gICAgICAgICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXQtZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJ2aWV3UmVwb3J0KClcIiBtYXRSaXBwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIFttYXRSaXBwbGVDZW50ZXJlZF09XCJtYXRlcmlhbENvbnN0YW50Lk1BVF9SSVBQTEVfQ0VOVEVSXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBidXR0b25MYWJlbEVudW0uUkVBRF9CVE5fTEFCRUwgfX1cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMlwiPlxuICAgICAgICAgICAgICAgIDxsaWItbWVzc2FnZS1hbGVydCAqbmdJZj1cInJlcG9ydEFsZXJ0T2JqLnNob3dBbGVydFwiIFtsYWJlbElucF09XCJyZXBvcnRBbGVydE9iai5hbGVydExhYmVsXCJcbiAgICAgICAgICAgICAgICAgICAgW2NvbnRlbnRJbnBdPVwicmVwb3J0QWxlcnRPYmouYWxlcnRDb250ZW50XCIgW21lc3NhZ2VBbGVydFR5cGVJbnBdPVwicmVwb3J0QWxlcnRPYmoubWVzc2FnZUFsZXJ0VHlwZVwiXG4gICAgICAgICAgICAgICAgICAgIFttZXNzYWdlQWxlcnRJY29uSW5wXT1cInJlcG9ydEFsZXJ0T2JqLm1lc3NhZ2VBbGVydEljb25cIj5cbiAgICAgICAgICAgICAgICA8L2xpYi1tZXNzYWdlLWFsZXJ0PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjZW50ZXJBbGlnblwiPlxuICAgICAgICAgICAgICAgIDxsaWItc2tlbGV0b24tbG9hZGVyICpuZ0lmPVwic2hvd0xvYWRlclwiIFtjb3VudF09XCIzXCIgW2FwcGVhcmFuY2VdPVwiJ2NpcmNsZSdcIlxuICAgICAgICAgICAgICAgICAgICBbdGhlbWVdPVwieyBoZWlnaHQ6ICcxNXB4Jywgd2lkdGg6ICcxNXB4JywgJ2JhY2tncm91bmQtY29sb3InOiAnI2U3ZWJmMycgfVwiPjwvbGliLXNrZWxldG9uLWxvYWRlcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG10LTNcIiAqbmdJZj1cInJlcG9ydERhdGEgJiYgcmVwb3J0RGF0YS5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmZsb3dYIGN1c3RvbVNjcm9sbEJhclwiPlxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cInRhYmxlSGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZnctYm9sZFwiPiBTci4gTm8uIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCIgY2xhc3M9XCJmdy1ib2xkXCI+IFRpbWUgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBkYXRhIG9mIHJlcG9ydERhdGE7IGxldCBpID0gaW5kZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCIgY2xhc3M9XCJmdy1ib2xkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBkYXRhLnBhcmFtTGFiZWwgfX0gKHt7IGRhdGEudW5pdCB9fSkgKHt7IGRhdGEuZHNBZ2cgfX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dHIgKm5nRm9yPVwibGV0IHJvdyBvZiByZW5kZXJUYWJsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyByb3cuaW5kZXggfX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj1cImNlbnRlclwiIGNsYXNzPVwiY29sV2lkdGhDb250YWluaW5nRGF0ZVRpbWVcIj57eyByb3cudGltZSB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPVwiY2VudGVyXCIgKm5nRm9yPVwibGV0IHZhbHVlIG9mIHJvdy5kYXRhXCI+e3sgdmFsdWUgPyB2YWx1ZSA6IGNvbW1vbkNvbnN0YW50LkhZUEhFTlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L2Rpdj4iXX0=