import { ElementRef, OnInit } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatDialog } from "@angular/material/dialog";
import { FormControl } from '@angular/forms';
import { VehicleController } from '../../../controller/vehicle.controller';
import { VehicleService } from '../../../service/vehicle.service';
import { PreferenceService } from '../../../service/preference.service';
import { StorageService } from '@library/storage-service';
import { UnitM, UnitService } from '@library/unit-service';
import { ToastrService } from '@library/toastr-service';
import { ButtonTooltipEnum, FormAction, FunnelFilterComponent } from "@library/tsc-common";
import * as i0 from "@angular/core";
export declare class PageComponent implements OnInit {
    private dialog;
    private vehicleController;
    private storageService;
    private vehicleService;
    private preferenceService;
    private unitService;
    private toastrService;
    private constant;
    COMMON_CONSTANT: {
        PRIVACY: string;
        TERMS: string;
        PRICING: string;
        SUPPORT_EMAIL: string;
        HYPHEN: string;
        NO_DATA_FOUND: string;
        NO_DATA: string;
        EMAIL_PATTERN: string;
        ZIPCODE_PATTERN: string;
        GST_NUMBER_PATTERN: string;
        SPECIAL_CHARACTERS_PATTERN: string;
        ALLOWED_IMAGE_TYPES: string[];
        DECIMAL_PATTERN: string;
        MAX_IMAGE_SIZE: number;
        ASIAN_KOLKATA: string;
        VIEW_API_KEY_ID: string;
        NO_MATCH_FOUND: string;
    };
    MATERIAL_CONSTANT: {
        MAT_RIPPLE_CENTER: boolean;
    };
    TABLE_CONSTANT: {
        TABLE_NO_DATA: string;
        DEFAULT_PAGE_SIZE: number;
        PAGE_SIZE_OPTION: number[];
    };
    ButtonTooltipEnum: typeof ButtonTooltipEnum;
    FormAction: typeof FormAction;
    faPlus: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faEllipsisV: import("@fortawesome/fontawesome-common-types").IconDefinition;
    rootOrgID: any;
    currentOrgID: any;
    dataSource: any;
    resultLength: number;
    searchValue: any;
    displayedColumns: string[];
    searchFlag: boolean;
    bulkUploadResponse: any;
    title: any;
    response: any;
    message: any;
    error: boolean;
    isIpcc: boolean;
    isDataLoaded: boolean;
    duplicateData: string;
    mandatoryData: string;
    vehicleTypeList: any;
    vehicleTypeFc: FormControl;
    vehicleTypeFlag: boolean;
    vehicleCategoryList: any;
    vehicleCategoryFc: FormControl;
    vehicleCategoryFlag: boolean;
    odometerList: UnitM[];
    odometerFc: FormControl;
    odometerFlag: boolean;
    filterArr: Array<string>;
    paginator: MatPaginator;
    searchBar: ElementRef;
    refreshBtn: ElementRef;
    vehicleType: FunnelFilterComponent;
    vehicleCategory: FunnelFilterComponent;
    odometer: FunnelFilterComponent;
    constructor(dialog: MatDialog, vehicleController: VehicleController, storageService: StorageService, vehicleService: VehicleService, preferenceService: PreferenceService, unitService: UnitService, toastrService: ToastrService, constant: any);
    ngOnInit(): void;
    SearchFn($event: any): void;
    getVehicleCategory(): Promise<void>;
    getVehicleType(): Promise<void>;
    getUnit(): Promise<void>;
    ngAfterViewInit(): void;
    getVehicleByPage(): void;
    bulkUpload(): void;
    toFormData(): FormData;
    vehicleBulkUpload(): void;
    errorDialog(title: any, message: any, response: any): void;
    getErrorData(): void;
    refreshFn(): void;
    createUpdateVehicle: (actionP: any, row: any) => void;
    handleClick(func: Function, params: any[]): void;
    ipccFieldHandler(): Promise<void>;
    getMerge(): import("rxjs").Observable<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<PageComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PageComponent, "app-page", never, {}, {}, never, never>;
}
