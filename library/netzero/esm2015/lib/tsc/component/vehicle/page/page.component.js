import { __awaiter } from "tslib";
import { Component, ViewChild, Inject } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { FormControl } from '@angular/forms';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { catchError, map, startWith, switchMap } from 'rxjs/operators';
import { faPlus, faEllipsisV } from '@fortawesome/free-solid-svg-icons';
import { EMISSION_FACTOR_SOUREC_KEYID_ENUM } from '../../../enum/emission-factor.enum';
import { ACTIVITY_KEYID_ENUM } from '../../../enum/activity.enum';
import { CreateUpdateComponent } from '../create-update/create-update.component';
import { UnitTypeKeyID } from '@library/unit-service';
import { ToastrTitle } from '@library/toastr-service';
import { ApplicationKeyID } from '@library/application-service';
import { COMMON_CONSTANT, MATERIAL_CONSTANT, TABLE_CONSTANT, ButtonTooltipEnum, FormAction, BulkUploadDialogLib, DialogOneComponent, DialogOneEnum, VIEW_TYPE_ENUM, DialogEnum } from "@library/tsc-common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../../../controller/vehicle.controller";
import * as i3 from "@library/storage-service";
import * as i4 from "../../../service/vehicle.service";
import * as i5 from "../../../service/preference.service";
import * as i6 from "@library/unit-service";
import * as i7 from "@library/toastr-service";
import * as i8 from "@library/tsc-common";
import * as i9 from "@fortawesome/angular-fontawesome";
import * as i10 from "@angular/material/table";
import * as i11 from "@angular/material/paginator";
import * as i12 from "@angular/material/core";
import * as i13 from "@angular/material/tooltip";
import * as i14 from "@ng-bootstrap/ng-bootstrap";
import * as i15 from "@angular/common";
// /tsc-library/
export class PageComponent {
    constructor(dialog, vehicleController, storageService, vehicleService, preferenceService, unitService, toastrService, constant) {
        this.dialog = dialog;
        this.vehicleController = vehicleController;
        this.storageService = storageService;
        this.vehicleService = vehicleService;
        this.preferenceService = preferenceService;
        this.unitService = unitService;
        this.toastrService = toastrService;
        this.constant = constant;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.ButtonTooltipEnum = ButtonTooltipEnum;
        this.FormAction = FormAction;
        this.faPlus = faPlus;
        this.faEllipsisV = faEllipsisV;
        this.displayedColumns = ['vehicleNumber', 'vehicleName', 'vehicleType', 'vehicleCategory', 'engineStroke', 'year', 'odometer', 'option'];
        this.searchFlag = false;
        this.error = false;
        this.isIpcc = false;
        this.isDataLoaded = false;
        this.vehicleTypeList = [];
        this.vehicleTypeFc = new FormControl();
        this.vehicleTypeFlag = false;
        this.vehicleCategoryList = [];
        this.vehicleCategoryFc = new FormControl();
        this.vehicleCategoryFlag = false;
        this.odometerList = [];
        this.odometerFc = new FormControl();
        this.odometerFlag = false;
        this.filterArr = [];
        this.createUpdateVehicle = (actionP, row) => {
            let action = actionP;
            let dialogRef;
            let data;
            if (action == FormAction.CREATE) {
                data = {
                    action: FormAction.CREATE,
                    source: VIEW_TYPE_ENUM.DIALOG
                };
            }
            else if (action == FormAction.UPDATE) {
                data = {
                    action: FormAction.UPDATE,
                    source: VIEW_TYPE_ENUM.DIALOG,
                    vehicleID: row.id
                };
            }
            dialogRef = this.dialog.open(CreateUpdateComponent, {
                data: data,
                minWidth: '600px',
                maxWidth: '600px',
                height: '100%',
                position: { right: '-2px', top: '0px' },
                panelClass: 'matDialogContainerOverride'
            });
            dialogRef.afterClosed()
                .subscribe((result) => {
                if (result.status == DialogEnum.SUCCESS_DR) {
                    this.refreshBtn.nativeElement.click();
                }
            });
        };
    }
    ngOnInit() {
        this.rootOrgID = this.storageService.getStorage('rootOrgID');
        this.currentOrgID = this.storageService.getStorage('currentOrgID');
        this.getVehicleType();
        this.getVehicleCategory();
        this.getUnit();
    }
    SearchFn($event) {
        this.searchValue = $event;
        if (this.searchValue.length > 0) {
            this.searchFlag = true;
        }
        else {
            this.searchFlag = false;
        }
        this.vehicleCategoryFlag = false;
        this.vehicleTypeFlag = false;
        this.refreshBtn.nativeElement.click();
    }
    getVehicleCategory() {
        return __awaiter(this, void 0, void 0, function* () {
            this.vehicleCategoryList = yield this.vehicleService.getVehicleCategory();
            this.vehicleCategoryList.unshift({ id: 'all', name: 'All', keyID: 'all' });
        });
    }
    getVehicleType() {
        return __awaiter(this, void 0, void 0, function* () {
            this.vehicleTypeList = yield this.vehicleService.getVehicleType();
            this.vehicleTypeList.unshift({ id: 'all', name: 'All', keyID: 'all' });
        });
    }
    getUnit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.odometerList = yield this.unitService.getUnitUsingPublicUrl([`type:${UnitTypeKeyID.LENGTH}`]);
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    ngAfterViewInit() {
        this.ipccFieldHandler();
    }
    getVehicleByPage() {
        this.getMerge().pipe(startWith({}), switchMap(() => {
            this.filterArr = [];
            if (this.vehicleTypeFlag) {
                if (this.vehicleTypeFc.value == 'all') {
                    this.vehicleTypeFlag = false;
                }
                else {
                    this.filterArr.push('vehicleType:' + this.vehicleTypeFc.value);
                }
            }
            if (this.vehicleCategoryFlag) {
                if (this.vehicleCategoryFc.value == 'all') {
                    this.vehicleCategoryFlag = false;
                }
                else {
                    this.filterArr.push('vehicleCategory:' + this.vehicleCategoryFc.value);
                }
            }
            if (this.odometerFlag) {
                if (this.odometerFc.value == 'Select none') {
                    this.odometerFlag = false;
                }
                else {
                    this.filterArr.push('vehicleOdoMeterUnit:' + this.odometerFc.value);
                }
            }
            if (this.searchFlag) {
                this.filterArr.push('searchVehicleName:' + this.searchValue);
            }
            return this.vehicleController.getVehicleByPage(this.paginator.pageIndex, this.paginator.pageSize, this.currentOrgID, this.filterArr).pipe(catchError(() => observableOf(null)));
        }), map((dataSource) => {
            if (dataSource === null) {
                return [];
            }
            this.resultLength = dataSource.totalCount;
            return dataSource.vehicle;
        })).subscribe((dataSource) => (this.dataSource = dataSource));
    }
    bulkUpload() {
        const dialogRef = this.dialog.open(BulkUploadDialogLib, {
            data: { source: "assets/files/vehicle-upload.xlsx" },
            minWidth: "600px",
            maxWidth: "600px",
        });
        dialogRef.afterClosed().subscribe((response) => {
            this.bulkUploadResponse = response;
            if (response) {
                this.vehicleBulkUpload();
            }
        });
    }
    toFormData() {
        const formData = new FormData();
        formData.append('file', this.bulkUploadResponse);
        return formData;
    }
    vehicleBulkUpload() {
        this.vehicleController.vehicleBulkUpload(this.currentOrgID, this.toFormData())
            .subscribe((bulkUploadRes) => {
            if (bulkUploadRes['title'] == 'Success') {
                this.toastrService.openToast(ToastrTitle.SUCCESS, bulkUploadRes['message'], bulkUploadRes['result']);
            }
            else if (bulkUploadRes['title'] == 'Error') {
                this.error = true;
                this.title = bulkUploadRes['title'];
                this.message = bulkUploadRes['message'];
                this.response = bulkUploadRes['response'];
                this.errorDialog(this.title, this.message, this.response);
                this.getErrorData();
            }
        });
    }
    errorDialog(title, message, response) {
        const dialogRef = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '700px',
            data: {
                type: DialogOneEnum.CONFIRMATION,
                icon: 'warning',
                header: title,
                body: message,
                buttonOne: 'Cancel',
                buttonTwo: 'Try again'
            }
        });
        dialogRef.afterClosed()
            .subscribe((result) => {
            if (result) {
                this.bulkUpload();
            }
            else { }
        });
    }
    getErrorData() {
        if (this.response['duplicateDataInRows'].length != 0) {
            let dupDataInRows = this.response['duplicateDataInRows'];
            this.duplicateData = [dupDataInRows.slice(0, -1).join(', '), dupDataInRows.slice(-1)[0]].join(dupDataInRows.length < 2 ? '' : ' and ');
        }
        if (this.response['mandatoryDataMissingInRows'].length != 0) {
            let manDataMissingInRows = this.response['mandatoryDataMissingInRows'];
            this.mandatoryData = [manDataMissingInRows.slice(0, -1).join(', '), manDataMissingInRows.slice(-1)[0]].join(manDataMissingInRows.length < 2 ? '' : ' and ');
        }
    }
    refreshFn() {
        this.vehicleTypeFlag = false;
        this.vehicleCategoryFlag = false;
        this.odometerFlag = false;
        this.refreshBtn.nativeElement.click();
    }
    handleClick(func, params) {
        func(...params);
    }
    ipccFieldHandler() {
        return __awaiter(this, void 0, void 0, function* () {
            let preference;
            let activity;
            if (this.constant.CURRENT_APPLICATION_KEY_ID == ApplicationKeyID.NETZERO_KEY_ID) {
                preference = yield this.preferenceService.getOrgPreference(this.rootOrgID);
                if (preference.preferenceID != null) {
                    activity = preference.activity.find(item => item.activityKeyID == ACTIVITY_KEYID_ENUM.STATIONARY_COMBUSTION);
                    // if (activity.emissionFactorSourceKeyID == EMISSION_FACTOR_SOUREC_KEYID_ENUM.IPCC_GUIDELINES_FOR_NATIONAL_GREENHOUSE_GAS_INVENTORIES) {
                    //     this.isIpcc = true;
                    // }
                    if (activity) {
                        let calculationApproach = activity.calculationApproach.length > 0 ? activity.calculationApproach[0] : null;
                        if (calculationApproach) {
                            let emissionFactorSource = calculationApproach.emissionFactorSource.find(ef => ef.id == calculationApproach.emissionFactorSourceID);
                            if (emissionFactorSource) {
                                if (emissionFactorSource.keyID == EMISSION_FACTOR_SOUREC_KEYID_ENUM.IPCC_GUIDELINES_FOR_NATIONAL_GREENHOUSE_GAS_INVENTORIES) {
                                    this.isIpcc = true;
                                }
                                ;
                            }
                        }
                    }
                }
                this.getVehicleByPage();
            }
        });
    }
    getMerge() {
        if (this.isIpcc) {
            return merge(this.paginator.page, this.vehicleType.mono, this.odometer.mono, fromEvent(this.refreshBtn.nativeElement, 'click'));
        }
        else {
            return merge(this.paginator.page, this.vehicleType.mono, this.vehicleCategory.mono, this.odometer.mono, fromEvent(this.refreshBtn.nativeElement, 'click'));
        }
    }
}
PageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageComponent, deps: [{ token: i1.MatDialog }, { token: i2.VehicleController }, { token: i3.StorageService }, { token: i4.VehicleService }, { token: i5.PreferenceService }, { token: i6.UnitService }, { token: i7.ToastrService }, { token: 'constant' }], target: i0.ɵɵFactoryTarget.Component });
PageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageComponent, selector: "app-page", viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true, static: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true, static: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true, static: true }, { propertyName: "vehicleType", first: true, predicate: ["vehicleType"], descendants: true }, { propertyName: "vehicleCategory", first: true, predicate: ["vehicleCategory"], descendants: true }, { propertyName: "odometer", first: true, predicate: ["odometer"], descendants: true }], ngImport: i0, template: "<div class=\"card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Vehicles</div>\n            <div class=\"pageSubtitle\">Create company owned vehicles to track their emissions.</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one class=\"me-3\" #searchBar [searchBy]=\"'vehicle name'\"\n                    (emitSearch)=\"SearchFn($event)\"></lib-search-bar-one>\n\n                <button class=\"btn btn-sm btn-light centerAlign me-3 py-1 refreshBtn\" #refreshBtn matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.REFRESH\">\n                    <span class=\"material-symbols-outlined\">\n                        refresh\n                    </span>\n                </button>\n\n\n\n                <button type=\"button\" class=\"btn btn-sm btn-success btnRightRadiusZero\"\n                    (click)=\"createUpdateVehicle(FormAction.CREATE, '')\" matRipple\n                    [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.CREATE\">\n                    <fa-icon [icon]=\"faPlus\"></fa-icon>&nbsp;&nbsp;Vehicle\n                </button>\n\n                <div class=\"btn-group\" ngbDropdown placement=\"bottom-right\" matTooltipPosition=\"below\"\n                    [matTooltip]=\"ButtonTooltipEnum.MORE\">\n                    <button type=\"button\" ngbDropdownToggle class=\"btn btn-sm btn-success btnLeftRadiusZero\">\n                    </button>\n                    <div ngbDropdownMenu>\n                        <button class=\"dropdown-item\" (click)=\"bulkUpload()\" matRipple\n                            [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\">\n                            Import\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <table mat-table [dataSource]=\"dataSource\" #sort matSort matSortActive=\"employeeID\" matSortDirection=\"desc\"\n        matSortDisableClear>\n\n        <ng-container matColumnDef=\"vehicleNumber\">\n            <th mat-header-cell class=\"col-sm-2 \" *matHeaderCellDef disableClear> Vehicle Number </th>\n            <td mat-cell *matCellDef=\"let row\"> {{ row.vehicleNumber ? row.vehicleNumber : COMMON_CONSTANT.HYPHEN}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"vehicleName\">\n            <th mat-header-cell class=\"col-sm-2\" *matHeaderCellDef> Vehicle Name </th>\n            <td mat-cell *matCellDef=\"let row\"> {{row.vehicleName ? row.vehicleName : COMMON_CONSTANT.HYPHEN}}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"vehicleType\">\n            <th mat-header-cell class=\"vehicleType\" *matHeaderCellDef disableClear>\n                <funnel-filter #vehicleType header=\"Vehicle Type\" type=\"mono\" value=\"id\" [entityList]=\"vehicleTypeList\"\n                    [selectFC]=\"vehicleTypeFc\" [active]=\"vehicleTypeFlag\" (mono)=\"vehicleTypeFlag = true;\">\n                </funnel-filter>\n            </th>\n            <td mat-cell *matCellDef=\"let row\"> {{row.vehicleType.name ? row.vehicleType.name : COMMON_CONSTANT.HYPHEN}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"vehicleCategory\">\n            <th mat-header-cell class=\"vehicleCategory\" *matHeaderCellDef disableClear [ngClass]=\"{'d-none': isIpcc}\">\n                <funnel-filter #vehicleCategory header=\"Vehicle Category\" value=\"id\" type=\"mono\"\n                    [entityList]=\"vehicleCategoryList\" [selectFC]=\"vehicleCategoryFc\" [active]=\"vehicleCategoryFlag\"\n                    (mono)=\"vehicleCategoryFlag = true;\"></funnel-filter>\n            </th>\n\n            <td mat-cell *matCellDef=\"let row\" [ngClass]=\"{'d-none': isIpcc}\"> {{row.vehicleCategory ?\n                row.vehicleCategory.name :\n                COMMON_CONSTANT.HYPHEN}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"engineStroke\">\n            <th mat-header-cell class=\"col-sm-1\" *matHeaderCellDef [ngClass]=\"{'d-none': isIpcc}\"> Engine Stroke </th>\n            <td mat-cell *matCellDef=\"let row\" [ngClass]=\"{'d-none': isIpcc}\">\n                {{ row.engineStroke ? row.engineStroke.name : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"year\">\n            <th mat-header-cell class=\"col-sm-1\" *matHeaderCellDef [ngClass]=\"{'d-none': isIpcc}\"> Year </th>\n            <td mat-cell *matCellDef=\"let row;\" [ngClass]=\"{'d-none': isIpcc}\">\n                {{row.year ? row.year : COMMON_CONSTANT.HYPHEN}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"odometer\">\n            <th mat-header-cell class=\"col-sm-1\" *matHeaderCellDef> <funnel-filter #odometer header=\"Odometer\"\n                    type=\"mono\" value=\"id\" view=\"name\" [entityList]=\"odometerList\" [selectFC]=\"odometerFc\"\n                    [active]=\"odometerFlag\" (mono)=\"odometerFlag = true;\"></funnel-filter></th>\n            <td mat-cell *matCellDef=\"let row;\">\n                {{row.odoMeterUnit.uomCode ? row.odoMeterUnit.uomCode : COMMON_CONSTANT.HYPHEN}}\n            </td>\n            <td mat-cell *matCellDef=\"let row;\">\n                {{ row.odoMeterUnit.uomCode ? row.odoMeterUnit.uomName + \" (\" + row.odoMeterUnit.uomCode + \")\" :\n                COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"option\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let row\">\n                <div class=\"centerAlignVertical\">\n                    <ng-container *ngTemplateOutlet=\"icon; \n                    context: {\n                        icon: 'edit',\n                        tooltip: ButtonTooltipEnum.UPDATE,\n                        class: 'text-primary',\n                        function: createUpdateVehicle,\n                        functionParameter: [FormAction.UPDATE, row]\n                    }\">\n                    </ng-container>\n                </div>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"dataRow\"></tr>\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator class=\"roundedBorder\" #paginator [length]=\"resultLength\"\n        [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\" [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\"\n        showFirstLastButtons>\n    </mat-paginator>\n</div>\n\n<ng-template #icon let-icon=\"icon\" let-tooltip=\"tooltip\" let-class=\"class\" let-function=\"function\"\n    let-functionParameter=\"functionParameter\">\n    <button class=\"iconBtn centerAlign\" [class]=\"class\" matTooltipPosition=\"below\" [matTooltip]=\"tooltip\" matRipple\n        [matRippleCentered]=\"MATERIAL_CONSTANT.MAT_RIPPLE_CENTER\" (click)=\"handleClick(function, functionParameter)\">\n        <span class=\"material-symbols-outlined icon\">\n            {{ icon }}\n        </span>\n    </button>\n</ng-template>\n", styles: [".vehicleType{width:155px}.vehicleCategory{width:150px}\n"], components: [{ type: i8.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear", "emitValueOnChange"], outputs: ["emitSearch"] }, { type: i9.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i10.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i8.FunnelFilterComponent, selector: "funnel-filter", inputs: ["header", "active", "showSearchBar", "searchByPlaceholder", "searchBy", "selectAllLabel", "entityList", "view", "value", "type", "selectFC", "resetFlag"], outputs: ["mono", "multi", "selected"] }, { type: i10.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i10.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i11.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i12.MatRipple, selector: "[mat-ripple], [matRipple]", inputs: ["matRippleRadius", "matRippleDisabled", "matRippleTrigger", "matRippleColor", "matRippleUnbounded", "matRippleCentered", "matRippleAnimation"], exportAs: ["matRipple"] }, { type: i13.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i14.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i14.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i14.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i10.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i10.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i10.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i10.MatCellDef, selector: "[matCellDef]" }, { type: i10.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i15.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i15.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i10.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i10.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i10.MatNoDataRow, selector: "ng-template[matNoDataRow]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-page',
                    templateUrl: './page.component.html',
                    styleUrls: ['./page.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.VehicleController }, { type: i3.StorageService }, { type: i4.VehicleService }, { type: i5.PreferenceService }, { type: i6.UnitService }, { type: i7.ToastrService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['constant']
                }] }]; }, propDecorators: { paginator: [{
                type: ViewChild,
                args: [MatPaginator, { static: true }]
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar', { static: true }]
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn', { static: true }]
            }], vehicleType: [{
                type: ViewChild,
                args: ['vehicleType']
            }], vehicleCategory: [{
                type: ViewChild,
                args: ['vehicleCategory']
            }], odometer: [{
                type: ViewChild,
                args: ['odometer']
            }] } });
//# sourceMappingURL=data:application/json;base64,