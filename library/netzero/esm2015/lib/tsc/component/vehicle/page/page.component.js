import { __awaiter } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { FormControl } from '@angular/forms';
import { merge, fromEvent, of as observableOf } from 'rxjs';
import { catchError, map, startWith, switchMap } from 'rxjs/operators';
import { faPlus, faEllipsisV } from '@fortawesome/free-solid-svg-icons';
import { CreateUpdateComponent } from '../create-update/create-update.component';
import { UnitTypeKeyID } from '@library/unit-service';
import { ToastrTitle } from '@library/toastr-service';
import { COMMON_CONSTANT, TABLE_CONSTANT, FormAction, BulkUploadDialogLib, DialogOneComponent, DialogOneEnum, ComponentSourceEnum, DialogEnum } from "@library/tsc-common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../../../controller/vehicle.controller";
import * as i3 from "@library/storage-service";
import * as i4 from "../../../service/vehicle.service";
import * as i5 from "@library/unit-service";
import * as i6 from "@library/toastr-service";
import * as i7 from "@library/tsc-common";
import * as i8 from "@fortawesome/angular-fontawesome";
import * as i9 from "@angular/material/table";
import * as i10 from "@angular/material/paginator";
import * as i11 from "@ng-bootstrap/ng-bootstrap";
// /tsc-library/
export class PageComponent {
    constructor(dialog, vehicleController, storageService, vehicleService, unitService, toastrService) {
        this.dialog = dialog;
        this.vehicleController = vehicleController;
        this.storageService = storageService;
        this.vehicleService = vehicleService;
        this.unitService = unitService;
        this.toastrService = toastrService;
        this.COMMON_CONSTANT = COMMON_CONSTANT;
        this.TABLE_CONSTANT = TABLE_CONSTANT;
        this.FormAction = FormAction;
        this.faPlus = faPlus;
        this.faEllipsisV = faEllipsisV;
        this.displayedColumns = ['vehicleNumber', 'vehicleName', 'vehicleType', 'vehicleCategory', 'engineStroke', 'year', 'odometer', 'actions'];
        this.searchFlag = false;
        this.error = false;
        this.vehicleTypeList = [];
        this.vehicleTypeFc = new FormControl();
        this.vehicleTypeFlag = false;
        this.vehicleCategoryList = [];
        this.vehicleCategoryFc = new FormControl();
        this.vehicleCategoryFlag = false;
        this.odometerList = [];
        this.odometerFc = new FormControl();
        this.odometerFlag = false;
        this.filterArr = [];
    }
    ngOnInit() {
        this.currentOrgID = this.storageService.getStorage('currentOrgID');
        this.getVehicleType();
        this.getVehicleCategory();
        this.getUnit();
    }
    SearchFn($event) {
        this.searchValue = $event;
        if (this.searchValue.length > 0) {
            this.searchFlag = true;
        }
        else {
            this.searchFlag = false;
        }
        this.vehicleCategoryFlag = false;
        this.vehicleTypeFlag = false;
        this.refreshBtn.nativeElement.click();
    }
    getVehicleCategory() {
        return __awaiter(this, void 0, void 0, function* () {
            this.vehicleCategoryList = yield this.vehicleService.getVehicleCategory();
            this.vehicleCategoryList.unshift({ id: 'all', name: 'All', keyID: 'all' });
        });
    }
    getVehicleType() {
        return __awaiter(this, void 0, void 0, function* () {
            this.vehicleTypeList = yield this.vehicleService.getVehicleType();
            this.vehicleTypeList.unshift({ id: 'all', name: 'All', keyID: 'all' });
        });
    }
    getUnit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.odometerList = yield this.unitService.getUnitUsingPublicUrl([`type:${UnitTypeKeyID.LENGTH}`]);
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    ngAfterViewInit() {
        merge(this.paginator.page, this.vehicleType.mono, this.vehicleCategory.mono, this.odometer.mono, fromEvent(this.refreshBtn.nativeElement, 'click')).pipe(startWith({}), switchMap(() => {
            this.filterArr = [];
            if (this.vehicleTypeFlag) {
                if (this.vehicleTypeFc.value == 'all') {
                    this.vehicleTypeFlag = false;
                }
                else {
                    this.filterArr.push('vehicleType:' + this.vehicleTypeFc.value);
                }
            }
            if (this.vehicleCategoryFlag) {
                if (this.vehicleCategoryFc.value == 'all') {
                    this.vehicleCategoryFlag = false;
                }
                else {
                    this.filterArr.push('vehicleCategory:' + this.vehicleCategoryFc.value);
                }
            }
            if (this.odometerFlag) {
                if (this.odometerFc.value == 'Select none') {
                    this.odometerFlag = false;
                }
                else {
                    this.filterArr.push('vehicleOdoMeterUnit:' + this.odometerFc.value);
                }
            }
            if (this.searchFlag) {
                this.filterArr.push('searchVehicleName:' + this.searchValue);
            }
            return this.vehicleController.getVehicleByPage(this.paginator.pageIndex, this.paginator.pageSize, this.currentOrgID, this.filterArr).pipe(catchError(() => observableOf(null)));
        }), map((dataSource) => {
            if (dataSource === null) {
                return [];
            }
            this.resultLength = dataSource.totalCount;
            return dataSource.vehicle;
        })).subscribe((dataSource) => (this.dataSource = dataSource));
    }
    bulkUpload() {
        const dialogRef = this.dialog.open(BulkUploadDialogLib, {
            data: { source: "assets/files/vehicle-upload.xlsx" },
            minWidth: "600px",
            maxWidth: "600px",
        });
        dialogRef.afterClosed().subscribe((response) => {
            this.bulkUploadResponse = response;
            if (response) {
                this.vehicleBulkUpload();
            }
        });
    }
    toFormData() {
        const formData = new FormData();
        formData.append('file', this.bulkUploadResponse);
        return formData;
    }
    vehicleBulkUpload() {
        this.vehicleController.vehicleBulkUpload(this.currentOrgID, this.toFormData())
            .subscribe((bulkUploadRes) => {
            if (bulkUploadRes['title'] == 'Success') {
                this.toastrService.openToast(ToastrTitle.SUCCESS, bulkUploadRes['message'], bulkUploadRes['result']);
            }
            else if (bulkUploadRes['title'] == 'Error') {
                this.error = true;
                this.title = bulkUploadRes['title'];
                this.message = bulkUploadRes['message'];
                this.response = bulkUploadRes['response'];
                this.errorDialog(this.title, this.message, this.response);
                this.getErrorData();
            }
        });
    }
    errorDialog(title, message, response) {
        const dialogRef = this.dialog.open(DialogOneComponent, {
            minWidth: '450px',
            maxWidth: '700px',
            data: {
                type: DialogOneEnum.CONFIRMATION,
                icon: 'warning',
                header: title,
                body: message,
                buttonOne: 'Cancel',
                buttonTwo: 'Try again'
            }
        });
        dialogRef.afterClosed()
            .subscribe((result) => {
            if (result) {
                this.bulkUpload();
            }
            else { }
        });
    }
    getErrorData() {
        if (this.response['duplicateDataInRows'].length != 0) {
            let dupDataInRows = this.response['duplicateDataInRows'];
            this.duplicateData = [dupDataInRows.slice(0, -1).join(', '), dupDataInRows.slice(-1)[0]].join(dupDataInRows.length < 2 ? '' : ' and ');
        }
        if (this.response['mandatoryDataMissingInRows'].length != 0) {
            let manDataMissingInRows = this.response['mandatoryDataMissingInRows'];
            this.mandatoryData = [manDataMissingInRows.slice(0, -1).join(', '), manDataMissingInRows.slice(-1)[0]].join(manDataMissingInRows.length < 2 ? '' : ' and ');
        }
    }
    refreshFn() {
        this.vehicleTypeFlag = false;
        this.vehicleCategoryFlag = false;
        this.odometerFlag = false;
        this.refreshBtn.nativeElement.click();
    }
    createUpdateVehicle(actionP, row) {
        let action = actionP;
        let dialogRef;
        let data;
        if (action == FormAction.CREATE) {
            data = {
                action: FormAction.CREATE,
                source: ComponentSourceEnum.DIALOG
            };
        }
        else if (action == FormAction.UPDATE) {
            data = {
                action: FormAction.UPDATE,
                source: ComponentSourceEnum.DIALOG,
                vehicleID: row.id
            };
        }
        dialogRef = this.dialog.open(CreateUpdateComponent, {
            data: data,
            minWidth: '600px',
            maxWidth: '600px',
            height: '100%',
            position: { right: '-2px', top: '0px' },
            panelClass: 'matDialogContainerOverride'
        });
        dialogRef.afterClosed()
            .subscribe((result) => {
            if (result.status == DialogEnum.SUCCESS_DR) {
                this.refreshBtn.nativeElement.click();
            }
        });
    }
}
PageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageComponent, deps: [{ token: i1.MatDialog }, { token: i2.VehicleController }, { token: i3.StorageService }, { token: i4.VehicleService }, { token: i5.UnitService }, { token: i6.ToastrService }], target: i0.ɵɵFactoryTarget.Component });
PageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageComponent, selector: "app-page", viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true, static: true }, { propertyName: "searchBar", first: true, predicate: ["searchBar"], descendants: true, static: true }, { propertyName: "refreshBtn", first: true, predicate: ["refreshBtn"], descendants: true, static: true }, { propertyName: "vehicleType", first: true, predicate: ["vehicleType"], descendants: true }, { propertyName: "vehicleCategory", first: true, predicate: ["vehicleCategory"], descendants: true }, { propertyName: "odometer", first: true, predicate: ["odometer"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">Vehicles</div>\n            <div class=\"pageSubtitle\">Create company owned vehicles to track their emissions.</div>\n        </div>\n        <div class=\"headerRightContainer\">\n            <div class=\"headerRightContainerInner\">\n                <lib-search-bar-one #searchBar [searchBy]=\"'vehicle name'\" (emitSearch)=\"SearchFn($event)\"></lib-search-bar-one>\n            </div>\n            <div class=\"float-end\">\n                <button type=\"button\" class=\"button ms-4 btn btn-success\" (click)=\"createUpdateVehicle(FormAction.CREATE, '')\">\n                    <fa-icon [icon]=\"faPlus\" class=\"me-2\"></fa-icon>Vehicle\n                </button>\n                <div class=\"ms-1 btn-group\" ngbDropdown placement=\"bottom-right\">\n                    <button type=\"button\" ngbDropdownToggle class=\"btn btn-success\">\n                    </button>\n                    <div ngbDropdownMenu>\n                        <button class=\"dropdown-item\" (click)=\"bulkUpload()\">\n                            Import\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"d-none\" #refreshBtn>refresh</button>\n\n    <table mat-table [dataSource]=\"dataSource\" #sort matSort matSortActive=\"employeeID\" matSortDirection=\"desc\"\n        matSortDisableClear>\n\n        <ng-container matColumnDef=\"vehicleNumber\">\n            <th mat-header-cell class=\"col-sm-2 \" *matHeaderCellDef disableClear> Vehicle Number </th>\n            <td mat-cell *matCellDef=\"let row\"> {{ row.vehicleNumber ? row.vehicleNumber : COMMON_CONSTANT.HYPHEN}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"vehicleName\">\n            <th mat-header-cell class=\"col-sm-2\" *matHeaderCellDef> Vehicle Name </th>\n            <td mat-cell *matCellDef=\"let row\"> {{row.vehicleName ? row.vehicleName : COMMON_CONSTANT.HYPHEN}}</td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"vehicleType\">\n            <th mat-header-cell class=\"vehicleType\" *matHeaderCellDef disableClear>\n                <funnel-filter #vehicleType header=\"Vehicle Type\" type=\"mono\" value=\"id\" \n                    [entityList]=\"vehicleTypeList\" [selectFC]=\"vehicleTypeFc\" [active]=\"vehicleTypeFlag\"\n                    (mono)=\"vehicleTypeFlag = true;\">\n                </funnel-filter>\n            </th>\n            <td mat-cell *matCellDef=\"let row\"> {{row.vehicleType.name ? row.vehicleType.name : COMMON_CONSTANT.HYPHEN}} </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"vehicleCategory\">\n            <th mat-header-cell class=\"vehicleCategory\" *matHeaderCellDef disableClear>\n                <funnel-filter #vehicleCategory\n                    header=\"Vehicle Category\" value=\"id\" type=\"mono\" [entityList]=\"vehicleCategoryList\"\n                    [selectFC]=\"vehicleCategoryFc\" [active]=\"vehicleCategoryFlag\"\n                    (mono)=\"vehicleCategoryFlag = true;\"></funnel-filter></th>\n            <td mat-cell *matCellDef=\"let row\"> {{row.vehicleCategory.name ? row.vehicleCategory.name : COMMON_CONSTANT.HYPHEN}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"engineStroke\">\n            <th mat-header-cell class=\"col-sm-1\" *matHeaderCellDef> Engine Stroke </th>\n            <td mat-cell *matCellDef=\"let row\"> \n                {{ row.engineStroke ? row.engineStroke.name : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"year\">\n            <th mat-header-cell class=\"col-sm-1\" *matHeaderCellDef> Year </th>\n            <td mat-cell *matCellDef=\"let row;\">\n                {{row.year ? row.year : COMMON_CONSTANT.HYPHEN}}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"odometer\">\n            <th mat-header-cell class=\"col-sm-1\" *matHeaderCellDef> <funnel-filter #odometer header=\"Odometer\"\n                    type=\"mono\" value=\"id\" view=\"name\" [entityList]=\"odometerList\" [selectFC]=\"odometerFc\"\n                    [active]=\"odometerFlag\" (mono)=\"odometerFlag = true;\"></funnel-filter></th>\n            <td mat-cell *matCellDef=\"let row;\">\n                {{row.odoMeterUnit.uomCode ? row.odoMeterUnit.uomCode : COMMON_CONSTANT.HYPHEN}}\n            </td>\n            <td mat-cell *matCellDef=\"let row;\">\n                {{ row.odoMeterUnit.uomCode ? row.odoMeterUnit.uomName + \" (\" + row.odoMeterUnit.uomCode + \")\" : COMMON_CONSTANT.HYPHEN }}\n            </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"actions\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td class=\"text-center\" mat-cell *matCellDef=\"let row\">\n                <div class=\"mt-2 btn-group\" ngbDropdown placement=\"left\">\n                    <button type=\"button\" ngbDropdownToggle class=\"dropdown-after dropdownAfter btn\">\n                        <fa-icon [icon]=\"faEllipsisV\" class=\"me-2\"></fa-icon>\n                    </button>\n                    <div ngbDropdownMenu>\n                        <button class=\"dropdown-item\" (click)=\"createUpdateVehicle(FormAction.UPDATE, row)\">\n                            Edit\n                        </button>\n                    </div>\n                </div>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\n                {{ TABLE_CONSTANT.TABLE_NO_DATA }}\n            </td>\n        </tr>\n    </table>\n\n    <mat-paginator class=\"roundedBorder\" #paginator [length]=\"resultLength\"\n        [pageSizeOptions]=\"TABLE_CONSTANT.PAGE_SIZE_OPTION\" [pageSize]=\"TABLE_CONSTANT.DEFAULT_PAGE_SIZE\"\n        showFirstLastButtons>\n    </mat-paginator>\n</div>", styles: [".vehicleType{width:155px}.vehicleCategory{width:150px}\n"], components: [{ type: i7.SearchBarOneComponent, selector: "lib-search-bar-one", inputs: ["type", "searchBy", "clear"], outputs: ["emitSearch"] }, { type: i8.FaIconComponent, selector: "fa-icon", inputs: ["classes", "icon", "title", "spin", "pulse", "mask", "styles", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { type: i9.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i7.FunnelFilterComponent, selector: "funnel-filter", inputs: ["view", "value", "type", "entityList", "selectFC", "header", "headerWidth", "width", "active"], outputs: ["mono", "multi", "selected"] }, { type: i9.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i9.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i10.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }], directives: [{ type: i11.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i11.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i11.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i9.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i9.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i9.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i9.MatCellDef, selector: "[matCellDef]" }, { type: i9.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i9.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i9.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i9.MatNoDataRow, selector: "ng-template[matNoDataRow]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-page',
                    templateUrl: './page.component.html',
                    styleUrls: ['./page.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.VehicleController }, { type: i3.StorageService }, { type: i4.VehicleService }, { type: i5.UnitService }, { type: i6.ToastrService }]; }, propDecorators: { paginator: [{
                type: ViewChild,
                args: [MatPaginator, { static: true }]
            }], searchBar: [{
                type: ViewChild,
                args: ['searchBar', { static: true }]
            }], refreshBtn: [{
                type: ViewChild,
                args: ['refreshBtn', { static: true }]
            }], vehicleType: [{
                type: ViewChild,
                args: ['vehicleType']
            }], vehicleCategory: [{
                type: ViewChild,
                args: ['vehicleCategory']
            }], odometer: [{
                type: ViewChild,
                args: ['odometer']
            }] } });
//# sourceMappingURL=data:application/json;base64,