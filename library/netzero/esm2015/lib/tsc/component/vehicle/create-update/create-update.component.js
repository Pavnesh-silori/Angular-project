import { __awaiter } from "tslib";
import { Component, Inject, ViewChild, Optional } from '@angular/core';
import { Validators } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { forkJoin } from 'rxjs';
import { isEqual } from 'lodash';
import { VehicleTypeEnum } from '../../../enum/vechile-type.enum';
import { PagePathEnum } from '../../../enum/page-path.enum';
import { EMISSION_FACTOR_SOUREC_KEYID_ENUM } from '../../../enum/emission-factor.enum';
import { ACTIVITY_KEYID_ENUM } from '../../../enum/activity.enum';
// tsc-library
import { MaterialFormFieldAppearance, InvalidForm, ButtonLabelEnum, FormAction, PageTitleEnum, VIEW_TYPE_ENUM, FormErrorEnum, DialogEnum } from '@library/tsc-common';
import { UnitTypeKeyID } from '@library/unit-service';
import { ToastrColor } from '@library/toastr-service';
import { ApplicationKeyID } from '@library/application-service';
import { DateInputTypeEnum } from '@library/date';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/router";
import * as i3 from "@angular/forms";
import * as i4 from "@library/toastr-service";
import * as i5 from "@library/unit-service";
import * as i6 from "../../../controller/vehicle.controller";
import * as i7 from "../../../service/vehicle.service";
import * as i8 from "../../../service/preference.service";
import * as i9 from "@library/storage-service";
import * as i10 from "@library/tsc-common";
import * as i11 from "@angular/material/form-field";
import * as i12 from "@angular/material/radio";
import * as i13 from "@angular/material/select";
import * as i14 from "@angular/material/core";
import * as i15 from "@library/date";
import * as i16 from "@angular/common";
import * as i17 from "@angular/material/input";
// /tsc-library/
export class CreateUpdateComponent {
    constructor(dialogData, dialogRef, activatedRoute, router, formBuilder, toastrService, unitService, vehicleController, vehicleService, preferenceService, storageService, tSCCommonService, constant) {
        this.dialogData = dialogData;
        this.dialogRef = dialogRef;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.formBuilder = formBuilder;
        this.toastrService = toastrService;
        this.unitService = unitService;
        this.vehicleController = vehicleController;
        this.vehicleService = vehicleService;
        this.preferenceService = preferenceService;
        this.storageService = storageService;
        this.tSCCommonService = tSCCommonService;
        this.constant = constant;
        this.FormAction = FormAction;
        this.FormErrorEnum = FormErrorEnum;
        this.ButtonLabelEnum = ButtonLabelEnum;
        this.PageTitleEnum = PageTitleEnum;
        this.VIEW_TYPE_ENUM = VIEW_TYPE_ENUM;
        this.VehicleTypeEnum = VehicleTypeEnum;
        this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;
        this.DateInputTypeEnum = DateInputTypeEnum;
        this.isEngineStroke = false;
        this.isEqual = true;
        this.isIpcc = false;
        this.errorHandling = (control, error) => {
            return this.vehicleFG.get(control).hasError(error);
        };
    }
    ngOnInit() {
        this.rootOrgID = this.storageService.getStorage('rootOrgID');
        this.userID = this.storageService.getStorage('userID');
        this.vehicleFGInit();
        this.ipccFieldHandler();
        if (this.dialogData) {
            this.action = this.dialogData.action;
            this.source = this.dialogData.source;
            if (this.action == FormAction.UPDATE) {
                this.vehicleID = this.dialogData.vehicleID;
            }
        }
        else {
            this.activatedRoute.data.subscribe(data => {
                this.action = data.action;
                this.source = data.source;
            });
            this.activatedRoute.params.subscribe(params => {
                if (this.action == FormAction.UPDATE) {
                    this.vehicleID = params.vehicleID;
                }
            });
        }
    }
    vehicleFGInit() {
        this.vehicleFG = this.formBuilder.group({
            vehicleName: [, Validators.required],
            vehicleNumber: [, Validators.required],
            vehicleTypeID: [, Validators.required],
            vehicleCategoryID: [],
            engineStrokeId: [],
            odoMeterUnitID: [, Validators.required],
            year: []
        });
    }
    dateInpChange() {
        let duration = this.yearInput.durationFC.value;
        this.vehicleFG.get('year').patchValue(duration);
    }
    getVehicleType() {
        return __awaiter(this, void 0, void 0, function* () {
            this.vehicleTypeM = (yield this.vehicleService.getVehicleType());
        });
    }
    getVehicleCategory() {
        return __awaiter(this, void 0, void 0, function* () {
            this.vehicleCategoryM = (yield this.vehicleService.getVehicleCategory());
            this.vehicleCategoryOR = this.vehicleCategoryM.filter(item => item['vehicleType']['keyID'] == VehicleTypeEnum.ON_ROAD);
            this.vehicleCategoryNR = this.vehicleCategoryM.filter(item => item['vehicleType']['keyID'] == VehicleTypeEnum.NON_ROAD);
        });
    }
    getEngineStroke() {
        return __awaiter(this, void 0, void 0, function* () {
            this.engineStrokeM = (yield this.vehicleService.getEngineStroke());
        });
    }
    getUnit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.unitM = (yield this.unitService.getUnitUsingPublicUrl([`type:${UnitTypeKeyID.LENGTH}`]));
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    onVehicleTypeChange(vehicleType) {
        this.vehicleFG.patchValue({
            vehicleCategoryID: null,
            engineStrokeId: null
        });
        if (vehicleType.keyID == VehicleTypeEnum.ON_ROAD) {
            this.isEngineStroke = false;
            this.vehicleCategory = this.vehicleCategoryOR;
        }
        else {
            this.isEngineStroke = true;
            this.vehicleCategory = this.vehicleCategoryNR;
        }
    }
    vehicleExist() {
        let vehicleNumber = this.vehicleFG.get('vehicleNumber').value;
        this.vehicleController.vehicleExist(this.rootOrgID, vehicleNumber).subscribe((res) => {
            if (res.status == false) {
                if (this.constant.CURRENT_APPLICATION_KEY_ID == ApplicationKeyID.NETZERO_KEY_ID) {
                    this.createVehicle();
                }
                else if (this.constant.CURRENT_APPLICATION_KEY_ID == ApplicationKeyID.EMPLOYEE_KEY_ID) {
                    this.createVehicleForEmployee();
                }
            }
            else {
                let toast;
                toast = this.toastrService.getToastStatus(res.status);
                this.toastrService.openToast(toast.title, res.message, toast.color);
            }
        });
    }
    vechileSubmit() {
        if (this.vehicleFG.invalid) {
            this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);
            return;
        }
        else {
            if (this.action == FormAction.CREATE) {
                this.vehicleExist();
            }
            else if (this.action == FormAction.UPDATE) {
                this.updateVehicle();
            }
        }
    }
    createVehicle() {
        this.vehicleController.createVehicle(this.rootOrgID, this.vehicleFG.value).subscribe((res) => {
            let toast;
            toast = this.toastrService.getToastStatus(res.status);
            this.toastrService.openToast(toast.title, res.message, toast.color);
            this.createUpdateVehiclePostAction(res);
        }, error => {
            console.log('error in createVehicle -', error);
        });
    }
    createVehicleForEmployee() {
        this.vehicleController.createVehicleForEmployee(this.rootOrgID, this.userID, this.vehicleFG.value).subscribe((res) => {
            let toast;
            toast = this.toastrService.getToastStatus(res.status);
            this.toastrService.openToast(toast.title, res.message, toast.color);
            this.createUpdateVehiclePostAction(res);
        }, error => {
            console.log('error in createVehicleForEmployee -', error);
        });
    }
    getVehicleByIDHandler() {
        forkJoin([this.getVehicleType(), this.getVehicleCategory(), this.getEngineStroke(), this.getUnit()]).subscribe(([]) => {
            if (this.action == FormAction.UPDATE) {
                this.getVehicleByID();
            }
        }, error => {
            console.error('error in forkJoin -', error);
        });
    }
    getVehicleByID() {
        this.vehicleController.getVehicleByID(this.rootOrgID, this.vehicleID).subscribe((res) => {
            this.vehicle = res;
            this.patchVehicle();
        }, error => {
            console.log(error);
        });
    }
    patchVehicle() {
        var _a, _b;
        this.onVehicleTypeChange(this.vehicle['vehicleType']);
        this.vehicleFG.patchValue({
            vehicleName: this.vehicle['vehicleName'],
            vehicleTypeID: this.vehicle['vehicleType'].id,
            vehicleNumber: this.vehicle['vehicleNumber'],
            odoMeterUnitID: this.vehicle['odoMeterUnit'].unitID,
            vehicleCategoryID: (_a = this.vehicle.vehicleCategory) === null || _a === void 0 ? void 0 : _a.id,
            year: (_b = this.vehicle) === null || _b === void 0 ? void 0 : _b.year
        });
        if (!this.isIpcc) {
            let durationToPatch = this.vehicleFG.get('year').value;
            this.yearInput.durationFC.patchValue(durationToPatch.toString());
        }
        if (this.vehicle['engineStroke'] !== null) {
            this.isEngineStroke = true;
            this.vehicleFG.patchValue({
                engineStrokeId: this.vehicle['engineStroke'].id
            });
        }
        this.intialObject = this.vehicleFG.value;
        this.vehicleFG.valueChanges.subscribe(() => {
            this.isEqual = isEqual(this.intialObject, this.vehicleFG.value);
        });
    }
    updateVehicle() {
        this.vehicleController.updateVehicle(this.rootOrgID, this.vehicleFG.value, this.vehicleID).subscribe((res) => {
            let toast;
            toast = this.toastrService.getToastStatus(res.status);
            this.toastrService.openToast(toast.title, res.message, toast.color);
            this.createUpdateVehiclePostAction(res);
        }, error => {
            console.log('error in updateVehicle -', error);
        });
    }
    createUpdateVehiclePostAction(res) {
        if (this.source == VIEW_TYPE_ENUM.PAGE) {
            this.router.navigate([PagePathEnum.VEHICLE_LIST_PAGE]);
        }
        else if (this.source == VIEW_TYPE_ENUM.DIALOG) {
            let result = {
                status: DialogEnum.SUCCESS_DR,
                res
            };
            this.dialogRef.close(result);
        }
    }
    cancelButtonClick() {
        if (this.source == VIEW_TYPE_ENUM.PAGE) {
            this.tSCCommonService.back();
        }
        else if (this.source == VIEW_TYPE_ENUM.DIALOG) {
            this.dialogRef.close();
        }
    }
    ipccFieldHandler() {
        return __awaiter(this, void 0, void 0, function* () {
            let preference;
            let activity;
            if (this.constant.CURRENT_APPLICATION_KEY_ID == ApplicationKeyID.NETZERO_KEY_ID) {
                preference = yield this.preferenceService.getOrgPreference(this.rootOrgID);
                if (preference.preferenceID != null) {
                    activity = preference.activity.find(item => item.activityKeyID == ACTIVITY_KEYID_ENUM.STATIONARY_COMBUSTION);
                    // if (activity.emissionFactorSourceKeyID == EMISSION_FACTOR_SOUREC_KEYID_ENUM.IPCC_GUIDELINES_FOR_NATIONAL_GREENHOUSE_GAS_INVENTORIES) {
                    //     this.isIpcc = true;
                    // }
                    if (activity) {
                        let calculationApproach = activity.calculationApproach.length > 0 ? activity.calculationApproach[0] : null;
                        if (calculationApproach) {
                            let emissionFactorSource = calculationApproach.emissionFactorSource.find(ef => ef.id == calculationApproach.emissionFactorSourceID);
                            if (emissionFactorSource) {
                                if (emissionFactorSource.keyID == EMISSION_FACTOR_SOUREC_KEYID_ENUM.IPCC_GUIDELINES_FOR_NATIONAL_GREENHOUSE_GAS_INVENTORIES) {
                                    this.isIpcc = true;
                                }
                                ;
                            }
                        }
                    }
                }
                this.getVehicleByIDHandler();
            }
            else {
                this.getVehicleByIDHandler();
            }
        });
    }
}
CreateUpdateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateComponent, deps: [{ token: MAT_DIALOG_DATA, optional: true }, { token: i1.MatDialogRef, optional: true }, { token: i2.ActivatedRoute }, { token: i2.Router }, { token: i3.FormBuilder }, { token: i4.ToastrService }, { token: i5.UnitService }, { token: i6.VehicleController }, { token: i7.VehicleService }, { token: i8.PreferenceService }, { token: i9.StorageService }, { token: i10.TSCCommonService }, { token: 'constant' }], target: i0.ɵɵFactoryTarget.Component });
CreateUpdateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreateUpdateComponent, selector: "app-create-update", viewQueries: [{ propertyName: "yearInput", first: true, predicate: ["yearInput"], descendants: true }], ngImport: i0, template: "<div class=\"card main-card cardOverwrite h100\">\n    <div class=\"headerContainer\">\n        <div class=\"headerLeftContainer\">\n            <div class=\"pageTitle\">{{ action == FormAction.CREATE ? PageTitleEnum.CREATE :\n                PageTitleEnum.UPDATE }} vehicle\n            </div>\n            <div class=\"pageSubtitle\">\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card-body\" [ngClass]=\"{ 'vechileCreateUpdateForm' : source == VIEW_TYPE_ENUM.PAGE }\">\n        <form [formGroup]=\"vehicleFG\" (ngSubmit)=\"vechileSubmit()\">\n\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label class=\"formLabel\">Vehicle number</mat-label>\n                        <input class=\"formPlaceholder\" matInput type=\"text\" placeholder=\"Vehicle number\"\n                            formControlName=\"vehicleNumber\" required />\n                        <mat-error *ngIf=\"errorHandling('vehicleNumber', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n\n                <div class=\"col-sm-6\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label class=\"formLabel\">Vehicle name</mat-label>\n                        <input class=\"formPlaceholder\" matInput type=\"text\" placeholder=\"Vehicle name\"\n                            formControlName=\"vehicleName\" required />\n                        <mat-error *ngIf=\"errorHandling('vehicleName', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div class=\"radioBtnGroupLabel\">Select a vehicle type</div>\n                    <mat-radio-group formControlName=\"vehicleTypeID\">\n                        <div class=\"row mt-1\">\n                            <div class=\"col-sm-6\" *ngFor=\"let data of vehicleTypeM\">\n                                <mat-radio-button class=\"radioBtnLabel\" [value]=\"data.id\"\n                                    (change)=\"onVehicleTypeChange(data)\">\n                                    {{ data.name }}\n                                </mat-radio-button>\n                            </div>\n                        </div>\n                    </mat-radio-group>\n                </div>\n            </div>\n\n            <div class=\"row mt-3\" *ngIf=\"!isIpcc\">\n                <div class=\"col-sm-6\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label class=\"formLabel\">Select vehicle category\n                        </mat-label>\n                        <mat-select formControlName=\"vehicleCategoryID\" required>\n                            <mat-option *ngFor=\"let method of vehicleCategory\" [value]=\"method.id\">\n                                {{ method.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling('vehicleCategoryID', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n\n                <div class=\"col-sm-6\">\n                    <mat-form-field *ngIf=\"isEngineStroke\" class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label class=\"formLabel\">Select engine stroke</mat-label>\n                        <mat-select formControlName=\"engineStrokeId\" required>\n                            <mat-option *ngFor=\"let data of engineStrokeM\" [value]=\"data.id\">\n                                <span class=\"d-flex justify-content-between\">{{ data.name }}\n                                </span>\n                            </mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling('engineStrokeId', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-sm-6\" *ngIf=\"!isIpcc\">\n                    <lib-date-input class=\"cursorPointer\"  #yearInput (emitFilter)=\"dateInpChange()\" [materialFieldWidthInp]=\"true\"\n                        [materialFormFieldAppearanceInp]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\"\n                        [isMandatoryFieldInp]=\"true\" [dateInputTypeInp]=\"DateInputTypeEnum.YEAR_INPUT\"\n                        [labelInp]=\"'Vehicle Year'\"></lib-date-input>\n                </div>\n\n                <div class=\"col-sm-6\">\n                    <mat-form-field class=\"matFieldWidth100\"\n                        [appearance]=\"MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE\">\n                        <mat-label class=\"formLabel\">Select odometer unit</mat-label>\n                        <mat-select formControlName=\"odoMeterUnitID\" required>\n                            <mat-option *ngFor=\"let units of unitM\" [value]=\"units.id\">\n                                <span class=\"d-flex justify-content-between\">{{ units.name }}\n                                    <span>{{ units.uomCode }} </span></span>\n                            </mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"errorHandling('odoMeterUnitID', 'required')\">\n                            {{ FormErrorEnum.REQUIRED }}\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <div class=\"float-end\">\n                <button class=\"btn btn-sm btn-secondary me-2\" type=\"button\" (click)=\"cancelButtonClick()\">\n                    Cancel\n                </button>\n\n                <button class=\"btn btn-sm btn-success\" [ngClass]=\"{\n                        'btn-success' : action == FormAction.CREATE,\n                        'btn-primary' : action == FormAction.UPDATE,\n                        'disabled' : action == FormAction.UPDATE && isEqual\n                    }\" type=\"submit\">{{ action ==\n                    FormAction.CREATE ? ButtonLabelEnum.CREATE_BTN_LABEL :\n                    ButtonLabelEnum.UPDATE_BTN_LABEL }}\n                </button>\n            </div>\n        </form>\n    </div>\n</div>", styles: [".vechileCreateUpdateForm{width:600px}\n"], components: [{ type: i11.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i12.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i13.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i14.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i15.DateInputComponent, selector: "lib-date-input", inputs: ["materialFormFieldAppearanceInp", "materialFieldWidthInp", "frequencyInp", "dateInputTypeInp", "dateTypeInp", "timezoneInp", "labelInp", "rangeInp", "cdrFormatInp", "isMandatoryFieldInp", "showRangeInp", "showCdrRangeLabelInp", "showDefaultDurationInp", "showTimeInCDRInp"], outputs: ["emitFilter"] }], directives: [{ type: i16.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i11.MatLabel, selector: "mat-label" }, { type: i17.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i16.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.MatError, selector: "mat-error", inputs: ["id"] }, { type: i12.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i16.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CreateUpdateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-create-update',
                    templateUrl: './create-update.component.html',
                    styleUrls: ['./create-update.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef, decorators: [{
                    type: Optional
                }] }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: i3.FormBuilder }, { type: i4.ToastrService }, { type: i5.UnitService }, { type: i6.VehicleController }, { type: i7.VehicleService }, { type: i8.PreferenceService }, { type: i9.StorageService }, { type: i10.TSCCommonService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['constant']
                }] }]; }, propDecorators: { yearInput: [{
                type: ViewChild,
                args: ['yearInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,