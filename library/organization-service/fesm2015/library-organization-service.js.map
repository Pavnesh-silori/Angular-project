{"version":3,"file":"library-organization-service.js","sources":["../../../projects/library/organization-service/src/lib/organization-service.service.ts","../../../projects/library/organization-service/src/lib/organization-service.component.ts","../../../projects/library/organization-service/src/lib/organization-service.module.ts","../../../projects/library/organization-service/src/lib/tsc/enum/organization.enum.ts","../../../projects/library/organization-service/src/lib/tsc/model/organization.model.ts","../../../projects/library/organization-service/src/lib/tsc/controller/organization.controller.ts","../../../projects/library/organization-service/src/lib/tsc/service/organization.service.ts","../../../projects/library/organization-service/src/lib/tsc/guard/org-type.guard.ts","../../../projects/library/organization-service/src/public-api.ts","../../../projects/library/organization-service/src/library-organization-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrganizationServiceService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-organization-service',\n  template: `\n    <p>\n      organization-service works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class OrganizationServiceComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { OrganizationServiceComponent } from './organization-service.component';\n\n\n\n@NgModule({\n  declarations: [\n    OrganizationServiceComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    OrganizationServiceComponent\n  ]\n})\nexport class OrganizationServiceModule {\n  static forRoot(environment: any): ModuleWithProviders<OrganizationServiceModule> {\n    return {\n      ngModule: OrganizationServiceModule,\n      providers: [\n        { provide: 'environment', useValue: environment }\n      ]\n    };\n  }\n}\n","export enum OrgType {\n    SITE = 'SITE',\n    ORGANIZATION = 'ORG',\n    ORGANIZAION_GROUP = 'ORG_GROUP'\n}\n\nexport enum OrgStatus {\n    ACTIVE_STATUS = 'ACTIVE',\n    INACTIVE_STATUS = 'INACTIVE',\n    SETUP_PENDING_STATUS = 'SETUP_PENDING'\n}\n\nexport enum OrgSiteAccessType {\n    ORG = 'ORG',\n    SITE = 'SITE',\n    ORG_SITE = 'ORG_SITE'\n}\n\nexport enum OrganizationStatus {\n    ACTIVE = 'ACTIVE',\n    INACTIVE = 'INACTIVE',\n    PENDING_SETUP = 'PENDING_SETUP'\n}\n","export interface OrganizationM {\n    id: number;\n    name: string;\n    type: string;\n    logoUrl: string;\n    imgID: number;\n    status: string;\n    stateCode: string;\n    stateName: string;\n    countryCode: string;\n    countryName: string;\n    city: string;\n    zipCode: string;\n    address1: string;\n    timeZoneID: number;\n    timeZoneName: string;\n    fiscalStartMonth: string;\n    facilityCount: number;\n}\n\nexport class Organization implements OrganizationM {\n    id;\n    name;\n    type;\n    logoUrl;\n    imgID;\n    status;\n    stateCode;\n    stateName;\n    countryCode;\n    countryName;\n    city;\n    zipCode;\n    address1;\n    timeZoneID;\n    timeZoneName;\n    fiscalStartMonth;\n    facilityCount;\n}\n\nexport interface OrgAccessM {\n    id: number;\n    name: string;\n    logo: string;\n}\n\nexport class OrgAccess implements OrgAccessM {\n    id;\n    name;\n    logo;\n}\nexport interface OrgSiteAccessM {\n    totalCount: number;\n    pageNo: number;\n    records: OrgSiteRecord[];\n}\n\nexport interface OrgSiteRecord {\n    orgID: number;\n    orgName: string;\n    id: number;\n    name: string;\n    logo: string;\n    subscriptionStatus: string;\n}\n\nexport class OrgSiteAccess implements OrgSiteAccessM {\n    totalCount;\n    pageNo;\n    records;\n}","import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\n\nimport { OrgAccessM, OrgSiteAccessM, OrganizationM } from \"../model/organization.model\";\n\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class OrganizationController {\n    constructor(\n        private http: HttpClient,\n        @Inject('environment') private environment: any\n    ) { }\n\n    getOrganizationByID(orgID): Observable<OrganizationM> {\n        return this.http.get<OrganizationM>(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}`);\n    }\n\n    getOrgByAccess(userID): Observable<OrgAccessM[]> {\n        return this.http.get<OrgAccessM[]>(`${this.environment.ORGANIZATION_API_URL}users/${userID}/organizations-sites/access`);\n    }\n\n    getOrganizations(orgID): Observable<OrgAccessM[]> {\n        return this.http.get<OrgAccessM[]>(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}/org-facility`);\n    }\n\n    getOrgSiteWithUserAccess(userID): Observable<OrgSiteAccessM> {\n        return this.http.get<OrgSiteAccessM>(`${this.environment.ORGANIZATION_API_URL}users/${userID}/organizations-sites/access-new`);\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { OrgType, OrganizationStatus } from \"../enum/organization.enum\";\n\nimport { OrgAccessM, OrgSiteAccessM, Organization, OrganizationM } from \"../model/organization.model\";\n\nimport { OrganizationController } from \"../controller/organization.controller\";\n\nimport { StorageService } from \"@library/storage-service\";\nimport { ApplicationService } from \"@library/application-service\";\nimport { Facility, FacilityM, FacilityService } from \"@library/facility-service\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class OrganizationService {\n\n    OrgType: OrgType;\n\n    currentOrgType: any;\n    rootOrgID: any;\n    currentOrgID: any;\n\n    organizationM = new Organization();\n    facilityM = new Facility();\n\n    redirectUrl: string = '';\n\n    constructor(\n        private router: Router,\n        private storageService: StorageService,\n        private applicationService: ApplicationService,\n        private organizationController: OrganizationController,\n        private facilityService: FacilityService,\n    ) { }\n\n    orgSwitch(orgID, orgSwitchRedirect: string) {\n        let applicationKeyID: string;\n        let token: string;\n        let userID: any;\n        let queryParam: string;\n        let currentUrl: string = '';\n\n\n        applicationKeyID = this.storageService.getStorage('applicationKeyID');\n        token = this.storageService.getStorage('token');\n        userID = this.storageService.getStorage('userID');\n\n        if (orgSwitchRedirect == 'NO') {\n            currentUrl = '';\n        } else {\n            currentUrl = this.router.url;\n        }\n\n        queryParam = `login?token=${token}&userID=${userID}&orgID=${orgID}&redirectUrl=${currentUrl}`;\n        window.location.href = this.applicationService.appRedirect(applicationKeyID) + queryParam;\n    }\n\n    async getOrganizationByID(orgID: number): Promise<OrganizationM> {\n        let organizationM: OrganizationM;\n        let organization = new Organization();\n\n        try {\n            organizationM = await this.organizationController.getOrganizationByID(orgID).toPromise();\n\n            if (organizationM) {\n                return organizationM;\n            } else {\n                return organization;\n            }\n        } catch (error) {\n            console.error('Error -', error);\n            return organization;\n        }\n    }\n\n    async getOrgByAccess(userID: number): Promise<OrgAccessM[]> {\n        let orgAccessM: OrgAccessM[];\n        try {\n            orgAccessM = await this.organizationController.getOrgByAccess(userID).toPromise();\n            return orgAccessM;\n        } catch (error) {\n            console.error('Error -', error);\n        }\n    }\n\n    async getOrganizations(orgID): Promise<OrgAccessM[]> {\n        let orgAccessM: OrgAccessM[];\n        try {\n            orgAccessM = await this.organizationController.getOrganizations(orgID).toPromise();\n            return orgAccessM;\n        } catch (error) {\n            console.error('Error -', error);\n        }\n    }\n\n    async getOrgSiteWithUserAccess(userID: number): Promise<OrgSiteAccessM> {\n        let orgSiteAccessM: OrgSiteAccessM;\n        try {\n            orgSiteAccessM = await this.organizationController.getOrgSiteWithUserAccess(userID).toPromise();\n            return orgSiteAccessM;\n        } catch (error) {\n            console.error('Error -', error);\n        }\n    }\n\n    getOrgStatus(status) {\n        switch (status) {\n            case OrganizationStatus.ACTIVE:\n                return 'Active';\n            case OrganizationStatus.INACTIVE:\n                return 'Inactive';\n            case OrganizationStatus.PENDING_SETUP:\n                return 'Pending setup';\n            default:\n                console.log('Invalid organization status');\n        }\n    }\n\n    async getOrgTimezone(): Promise<string> {\n        this.currentOrgType = this.storageService.getStorage('currentOrgType');\n        this.rootOrgID = this.storageService.getStorage('rootOrgID');\n        this.currentOrgID = this.storageService.getStorage('currentOrgID');\n\n        let timezone: string = null;\n\n        if (this.currentOrgType == OrgType.ORGANIZATION) {\n            this.organizationM = <OrganizationM>await this.getOrganizationByID(this.currentOrgID);\n\n            if (this.organizationM.timeZoneName) {\n                timezone = this.organizationM.timeZoneName;\n            }\n        } else if (this.currentOrgType == OrgType.SITE) {\n            this.facilityM = <FacilityM>await this.facilityService.getFacilityByID(this.rootOrgID, this.currentOrgID);\n\n            if (this.facilityM.timeZoneName) {\n                timezone = this.facilityM.timeZoneName;\n            } else {\n                this.organizationM = <OrganizationM>await this.getOrganizationByID(this.rootOrgID);\n\n                if (this.organizationM.timeZoneName) {\n                    timezone = this.organizationM.timeZoneName;\n                }\n            }\n        }\n        return timezone;\n    }\n\n}","import { Injectable } from '@angular/core';\n\nimport {\n    CanActivate,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    Router\n} from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport {\n    OrgType,\n    OrgSiteAccessType\n} from '../enum/organization.enum';\n\nimport { StorageService } from '@library/storage-service';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class OrgTypeGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private storageService: StorageService,\n    ) { }\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n        let currentOrgType: string;\n        let orgTypeAccess: string;\n\n        currentOrgType = this.storageService.getStorage('currentOrgType');\n        orgTypeAccess = route.data.orgTypeAccess;\n\n        if (currentOrgType == OrgType.SITE && (orgTypeAccess == OrgSiteAccessType.SITE || orgTypeAccess == OrgSiteAccessType.ORG_SITE)) {\n            return true;\n        } else if (currentOrgType == OrgType.ORGANIZATION && (orgTypeAccess == OrgSiteAccessType.ORG || orgTypeAccess == OrgSiteAccessType.ORG_SITE)) {\n            return true;\n        } else {\n            return this.router.navigate(['/']);\n            return false;\n        }\n    }\n}\n","/*\n * Public API Surface of organization-service\n */\n\nexport * from './lib/organization-service.service';\nexport * from './lib/organization-service.component';\nexport * from './lib/organization-service.module';\n\nexport * from './lib/tsc/enum/organization.enum';\nexport * from './lib/tsc/model/organization.model';\nexport * from './lib/tsc/controller/organization.controller';\nexport * from './lib/tsc/service/organization.service';\nexport * from './lib/tsc/guard/org-type.guard';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i4.OrganizationController"],"mappings":"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"}