/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/load-image.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { getTransformationsFromExifData, supportsAutomaticRotation } from '../utils/exif.utils';
import * as i0 from "@angular/core";
/**
 * @record
 */
import * as Éµngcc0 from '@angular/core';
function LoadImageBase64() { }
if (false) {
    /** @type {?} */
    LoadImageBase64.prototype.originalImage;
    /** @type {?} */
    LoadImageBase64.prototype.originalBase64;
}
var LoadImageService = /** @class */ (function () {
    function LoadImageService() {
        this.autoRotateSupported = supportsAutomaticRotation();
    }
    /**
     * @param {?} file
     * @param {?} cropperSettings
     * @return {?}
     */
    LoadImageService.prototype.loadImageFile = /**
     * @param {?} file
     * @param {?} cropperSettings
     * @return {?}
     */
    function (file, cropperSettings) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var fileReader = new FileReader();
            fileReader.onload = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.loadImage(event.target.result, file.type, cropperSettings)
                    .then(resolve)
                    .catch(reject);
            });
            fileReader.readAsDataURL(file);
        }));
    };
    /**
     * @private
     * @param {?} imageBase64
     * @param {?} imageType
     * @param {?} cropperSettings
     * @return {?}
     */
    LoadImageService.prototype.loadImage = /**
     * @private
     * @param {?} imageBase64
     * @param {?} imageType
     * @param {?} cropperSettings
     * @return {?}
     */
    function (imageBase64, imageType, cropperSettings) {
        if (!this.isValidImageType(imageType)) {
            return Promise.reject(new Error('Invalid image type'));
        }
        return this.loadBase64Image(imageBase64, cropperSettings);
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    LoadImageService.prototype.isValidImageType = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return /image\/(png|jpg|jpeg|bmp|gif|tiff|webp)/.test(type);
    };
    /**
     * @param {?} url
     * @param {?} cropperSettings
     * @return {?}
     */
    LoadImageService.prototype.loadImageFromURL = /**
     * @param {?} url
     * @param {?} cropperSettings
     * @return {?}
     */
    function (url, cropperSettings) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var img = new Image();
            img.onerror = (/**
             * @return {?}
             */
            function () { return reject; });
            img.onload = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var canvas = document.createElement('canvas');
                /** @type {?} */
                var context = canvas.getContext('2d');
                canvas.width = img.width;
                canvas.height = img.height;
                context.drawImage(img, 0, 0);
                _this.loadBase64Image(canvas.toDataURL(), cropperSettings).then(resolve);
            });
            img.crossOrigin = 'anonymous';
            img.src = url;
        }));
    };
    /**
     * @param {?} imageBase64
     * @param {?} cropperSettings
     * @return {?}
     */
    LoadImageService.prototype.loadBase64Image = /**
     * @param {?} imageBase64
     * @param {?} cropperSettings
     * @return {?}
     */
    function (imageBase64, cropperSettings) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var originalImage = new Image();
            originalImage.onload = (/**
             * @return {?}
             */
            function () { return resolve({
                originalImage: originalImage,
                originalBase64: imageBase64
            }); });
            originalImage.onerror = reject;
            originalImage.src = imageBase64;
        })).then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.transformImageBase64(res, cropperSettings); }));
    };
    /**
     * @private
     * @param {?} res
     * @param {?} cropperSettings
     * @return {?}
     */
    LoadImageService.prototype.transformImageBase64 = /**
     * @private
     * @param {?} res
     * @param {?} cropperSettings
     * @return {?}
     */
    function (res, cropperSettings) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var autoRotate, exifTransform, loadedImage;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.autoRotateSupported];
                    case 1:
                        autoRotate = _a.sent();
                        return [4 /*yield*/, getTransformationsFromExifData(autoRotate ? -1 : res.originalBase64)];
                    case 2:
                        exifTransform = _a.sent();
                        if (!res.originalImage || !res.originalImage.complete) {
                            return [2 /*return*/, Promise.reject(new Error('No image loaded'))];
                        }
                        loadedImage = {
                            original: {
                                base64: res.originalBase64,
                                image: res.originalImage,
                                size: {
                                    width: res.originalImage.naturalWidth,
                                    height: res.originalImage.naturalHeight
                                }
                            },
                            exifTransform: exifTransform
                        };
                        return [2 /*return*/, this.transformLoadedImage(loadedImage, cropperSettings)];
                }
            });
        });
    };
    /**
     * @param {?} loadedImage
     * @param {?} cropperSettings
     * @return {?}
     */
    LoadImageService.prototype.transformLoadedImage = /**
     * @param {?} loadedImage
     * @param {?} cropperSettings
     * @return {?}
     */
    function (loadedImage, cropperSettings) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var canvasRotation, originalSize, transformedSize, canvas, ctx, transformedBase64, transformedImage;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        canvasRotation = cropperSettings.canvasRotation + loadedImage.exifTransform.rotate;
                        originalSize = {
                            width: loadedImage.original.image.naturalWidth,
                            height: loadedImage.original.image.naturalHeight
                        };
                        if (canvasRotation === 0 && !loadedImage.exifTransform.flip && !cropperSettings.containWithinAspectRatio) {
                            return [2 /*return*/, {
                                    original: {
                                        base64: loadedImage.original.base64,
                                        image: loadedImage.original.image,
                                        size: tslib_1.__assign({}, originalSize)
                                    },
                                    transformed: {
                                        base64: loadedImage.original.base64,
                                        image: loadedImage.original.image,
                                        size: tslib_1.__assign({}, originalSize)
                                    },
                                    exifTransform: loadedImage.exifTransform
                                }];
                        }
                        transformedSize = this.getTransformedSize(originalSize, loadedImage.exifTransform, cropperSettings);
                        canvas = document.createElement('canvas');
                        canvas.width = transformedSize.width;
                        canvas.height = transformedSize.height;
                        ctx = canvas.getContext('2d');
                        ctx.setTransform(loadedImage.exifTransform.flip ? -1 : 1, 0, 0, 1, canvas.width / 2, canvas.height / 2);
                        ctx.rotate(Math.PI * (canvasRotation / 2));
                        ctx.drawImage(loadedImage.original.image, -originalSize.width / 2, -originalSize.height / 2);
                        transformedBase64 = canvas.toDataURL();
                        return [4 /*yield*/, this.loadImageFromBase64(transformedBase64)];
                    case 1:
                        transformedImage = _a.sent();
                        return [2 /*return*/, {
                                original: {
                                    base64: loadedImage.original.base64,
                                    image: loadedImage.original.image,
                                    size: tslib_1.__assign({}, originalSize)
                                },
                                transformed: {
                                    base64: transformedBase64,
                                    image: transformedImage,
                                    size: {
                                        width: transformedImage.width,
                                        height: transformedImage.height
                                    }
                                },
                                exifTransform: loadedImage.exifTransform
                            }];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} imageBase64
     * @return {?}
     */
    LoadImageService.prototype.loadImageFromBase64 = /**
     * @private
     * @param {?} imageBase64
     * @return {?}
     */
    function (imageBase64) {
        return new Promise(((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var image = new Image();
            image.onload = (/**
             * @return {?}
             */
            function () { return resolve(image); });
            image.onerror = reject;
            image.src = imageBase64;
        })));
    };
    /**
     * @private
     * @param {?} originalSize
     * @param {?} exifTransform
     * @param {?} cropperSettings
     * @return {?}
     */
    LoadImageService.prototype.getTransformedSize = /**
     * @private
     * @param {?} originalSize
     * @param {?} exifTransform
     * @param {?} cropperSettings
     * @return {?}
     */
    function (originalSize, exifTransform, cropperSettings) {
        /** @type {?} */
        var canvasRotation = cropperSettings.canvasRotation + exifTransform.rotate;
        if (cropperSettings.containWithinAspectRatio) {
            if (canvasRotation % 2) {
                /** @type {?} */
                var minWidthToContain = originalSize.width * cropperSettings.aspectRatio;
                /** @type {?} */
                var minHeightToContain = originalSize.height / cropperSettings.aspectRatio;
                return {
                    width: Math.max(originalSize.height, minWidthToContain),
                    height: Math.max(originalSize.width, minHeightToContain)
                };
            }
            else {
                /** @type {?} */
                var minWidthToContain = originalSize.height * cropperSettings.aspectRatio;
                /** @type {?} */
                var minHeightToContain = originalSize.width / cropperSettings.aspectRatio;
                return {
                    width: Math.max(originalSize.width, minWidthToContain),
                    height: Math.max(originalSize.height, minHeightToContain)
                };
            }
        }
        if (canvasRotation % 2) {
            return {
                height: originalSize.width,
                width: originalSize.height
            };
        }
        return {
            width: originalSize.width,
            height: originalSize.height
        };
    };
    /** @nocollapse */ LoadImageService.ngInjectableDef = i0.ÉµÉµdefineInjectable({ factory: function LoadImageService_Factory() { return new LoadImageService(); }, token: LoadImageService, providedIn: "root" });
LoadImageService.Éµfac = function LoadImageService_Factory(t) { return new (t || LoadImageService)(); };
LoadImageService.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: LoadImageService, factory: function (t) { return LoadImageService.Éµfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(LoadImageService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return LoadImageService;
}());
export { LoadImageService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoadImageService.prototype.autoRotateSupported;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,