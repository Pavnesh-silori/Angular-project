import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, Input, Output, HostListener } from "@angular/core";
import { FormArray, FormControl, FormGroup } from "@angular/forms";
import * as ɵngcc0 from '@angular/core';
let FormValidationDirective = class FormValidationDirective {
    constructor() {
        this.validSubmit = new EventEmitter();
    }
    onSubmit() {
        this.markAsTouchedAndDirty(this.formGroup);
        if (this.formGroup.valid) {
            this.validSubmit.emit(this.formGroup.value);
        }
    }
    markAsTouchedAndDirty(control) {
        if (control instanceof FormGroup) {
            Object.keys(control.controls).forEach(key => this.markAsTouchedAndDirty(control.controls[key]));
        }
        else if (control instanceof FormArray) {
            control.controls.forEach(c => this.markAsTouchedAndDirty(c));
        }
        else if (control instanceof FormControl && control.enabled) {
            control.markAsDirty();
            control.markAsTouched();
            control.updateValueAndValidity();
        }
    }
};
FormValidationDirective.ɵfac = function FormValidationDirective_Factory(t) { return new (t || FormValidationDirective)(); };
FormValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FormValidationDirective, selectors: [["", "formGroup", ""]], hostBindings: function FormValidationDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("submit", function FormValidationDirective_submit_HostBindingHandler() { return ctx.onSubmit(); });
    } }, inputs: { formGroup: "formGroup" }, outputs: { validSubmit: "validSubmit" } });
__decorate([
    Input(),
    __metadata("design:type", FormGroup)
], FormValidationDirective.prototype, "formGroup", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FormValidationDirective.prototype, "validSubmit", void 0);
__decorate([
    HostListener("submit"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FormValidationDirective.prototype, "onSubmit", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormValidationDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: "[formGroup]"
            }]
    }], function () { return []; }, { validSubmit: [{
            type: Output
        }], onSubmit: [{
            type: HostListener,
            args: ["submit"]
        }], formGroup: [{
            type: Input
        }] }); })();
export { FormValidationDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbi9saWIvRGlyZWN0aXZlcy9mb3JtLXZhbGlkYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBRUwsU0FBUyxFQUNULFdBQVcsRUFDWCxTQUFTLEVBQ1YsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFNeEIsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7QUFDcEMsSUFEQTtBQUFnQixRQUlkLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUN4QyxJQXNCQSxDQUFDO0FBQ0QsSUFyQkUsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQyxRQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFDOUIsWUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLHFCQUFxQixDQUFDLE9BQXdCO0FBQ2hELFFBQUksSUFBSSxPQUFPLFlBQVksU0FBUyxFQUFFO0FBQ3RDLFlBQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQzFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2xELENBQUM7QUFDUixTQUFLO0FBQUMsYUFBSyxJQUFJLE9BQU8sWUFBWSxTQUFTLEVBQUU7QUFDN0MsWUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25FLFNBQUs7QUFBQyxhQUFLLElBQUksT0FBTyxZQUFZLFdBQVcsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQ2xFLFlBQU0sT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzVCLFlBQU0sT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzlCLFlBQU0sT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDdkMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILENBQUM7Ozs7d0ZBQUE7QUF6QkM7QUFBYSxJQURaLEtBQUssRUFBRTtBQUNULDhCQUFZLFNBQVM7QUFDdEIsMERBRHVCO0FBRXJCO0FBQWEsSUFEWixNQUFNLEVBQUU7QUFDVjtBQUFzQyw0REFBQztBQUd0QztBQUNGLElBRkcsWUFBWSxDQUFDLFFBQVEsQ0FBQztBQUN4QjtBQUMwQjtBQUNQO0FBQ1ksdURBRTdCO0FBWlUsdUJBQXVCLG9CQUpuQyxTQUFTLENBQUMsVUFDVCw4Q0FBOEMsU0FDOUM7T0FBUSxFQUFFLGFBQWE7R0FDeEIsQ0FBQyxJQUNXO2NBQXVCLENBMkJuQzs7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBNUJZLHVCQUF1QjtBQUNuQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBIb3N0TGlzdGVuZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCxcbiAgRm9ybUFycmF5LFxuICBGb3JtQ29udHJvbCxcbiAgRm9ybUdyb3VwXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogXCJbZm9ybUdyb3VwXVwiXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1WYWxpZGF0aW9uRGlyZWN0aXZlIHtcbiAgQElucHV0KClcbiAgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gIEBPdXRwdXQoKVxuICB2YWxpZFN1Ym1pdCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBIb3N0TGlzdGVuZXIoXCJzdWJtaXRcIilcbiAgb25TdWJtaXQoKSB7XG4gICAgdGhpcy5tYXJrQXNUb3VjaGVkQW5kRGlydHkodGhpcy5mb3JtR3JvdXApO1xuICAgIGlmICh0aGlzLmZvcm1Hcm91cC52YWxpZCkge1xuICAgICAgdGhpcy52YWxpZFN1Ym1pdC5lbWl0KHRoaXMuZm9ybUdyb3VwLnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBtYXJrQXNUb3VjaGVkQW5kRGlydHkoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSB7XG4gICAgaWYgKGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtR3JvdXApIHtcbiAgICAgIE9iamVjdC5rZXlzKGNvbnRyb2wuY29udHJvbHMpLmZvckVhY2goa2V5ID0+XG4gICAgICAgIHRoaXMubWFya0FzVG91Y2hlZEFuZERpcnR5KGNvbnRyb2wuY29udHJvbHNba2V5XSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XG4gICAgICBjb250cm9sLmNvbnRyb2xzLmZvckVhY2goYyA9PiB0aGlzLm1hcmtBc1RvdWNoZWRBbmREaXJ0eShjKSk7XG4gICAgfSBlbHNlIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUNvbnRyb2wgJiYgY29udHJvbC5lbmFibGVkKSB7XG4gICAgICBjb250cm9sLm1hcmtBc0RpcnR5KCk7XG4gICAgICBjb250cm9sLm1hcmtBc1RvdWNoZWQoKTtcbiAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgIH1cbiAgfVxufVxuIl19