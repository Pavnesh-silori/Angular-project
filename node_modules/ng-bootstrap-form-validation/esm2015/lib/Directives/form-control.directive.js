import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, HostBinding, Optional, Host, SkipSelf, Inject } from "@angular/core";
import { ControlContainer, FormControl } from "@angular/forms";
import { BootstrapVersion } from "../Enums/BootstrapVersion";
import { BOOTSTRAP_VERSION } from "../Tokens/tokens";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
export function controlPath(name, parent) {
    // tslint:disable-next-line:no-non-null-assertion
    return [...parent.path, name];
}
let FormControlDirective = class FormControlDirective {
    constructor(
    // this value might be null, but we union type it as such until
    // this issue is resolved: https://github.com/angular/angular/issues/25544
    parent, bootstrapVersion) {
        this.parent = parent;
        this.bootstrapVersion = bootstrapVersion;
    }
    get validClass() {
        if (!this.control) {
            return false;
        }
        return (this.bootstrapFour &&
            this.control.valid &&
            (this.control.touched || this.control.dirty));
    }
    get invalidClass() {
        if (!this.control) {
            return false;
        }
        return (this.bootstrapFour &&
            this.control.invalid &&
            this.control.touched &&
            this.control.dirty);
    }
    get path() {
        return controlPath(this.formControlName, this.parent);
    }
    get control() {
        return this.formDirective && this.formDirective.getControl(this);
    }
    get formDirective() {
        return this.parent ? this.parent.formDirective : null;
    }
    get bootstrapFour() {
        return this.bootstrapVersion === BootstrapVersion.Four;
    }
};
FormControlDirective.ɵfac = function FormControlDirective_Factory(t) { return new (t || FormControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(BOOTSTRAP_VERSION)); };
FormControlDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FormControlDirective, selectors: [["", 8, "form-control"], ["", 8, "form-check-input"], ["", 8, "custom-control-input"]], hostVars: 4, hostBindings: function FormControlDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-valid", ctx.validClass)("is-invalid", ctx.invalidClass);
    } }, inputs: { formControlName: "formControlName", formControl: "formControl" } });
FormControlDirective.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },
    { type: undefined, decorators: [{ type: Inject, args: [BOOTSTRAP_VERSION,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], FormControlDirective.prototype, "formControlName", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FormControlDirective.prototype, "formControl", void 0);
__decorate([
    HostBinding("class.is-valid"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormControlDirective.prototype, "validClass", null);
__decorate([
    HostBinding("class.is-invalid"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormControlDirective.prototype, "invalidClass", null);
FormControlDirective = __decorate([ __param(0, Optional()),
    __param(0, Host()),
    __param(0, SkipSelf()),
    __param(1, Inject(BOOTSTRAP_VERSION)),
    __metadata("design:paramtypes", [ControlContainer, Number])
], FormControlDirective);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormControlDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: ".form-control,.form-check-input,.custom-control-input"
            }]
    }], function () { return [{ type: ɵngcc1.ControlContainer, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: SkipSelf
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [BOOTSTRAP_VERSION]
            }] }]; }, { validClass: [{
            type: HostBinding,
            args: ["class.is-valid"]
        }], invalidClass: [{
            type: HostBinding,
            args: ["class.is-invalid"]
        }], formControlName: [{
            type: Input
        }], formControl: [{
            type: Input
        }] }); })();
export { FormControlDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmctYm9vdHN0cmFwLWZvcm0tdmFsaWRhdGlvbi9saWIvRGlyZWN0aXZlcy9mb3JtLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsUUFBUSxFQUNSLElBQUksRUFDSixRQUFRLEVBQ1IsTUFBTSxFQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7O0FBRXJELE1BQU0sVUFBVSxXQUFXLENBQUMsSUFBWSxFQUFFLE1BQXdCO0FBQUksSUFDcEUsaURBQWlEO0FBQ25ELElBQUUsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBTUQsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7QUFDakMsSUE4Q0U7QUFDRixJQUFJLCtEQUErRDtBQUNuRSxJQUFJLDBFQUEwRTtBQUM5RSxJQUdZLE1BQXdCLEVBQ0csZ0JBQWtDO0FBQ3RFLFFBRlMsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7QUFBQyxRQUNFLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFDekUsSUFBSyxDQUFDO0FBQ04sSUFqREUsSUFBSSxVQUFVO0FBQ2hCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdkIsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFBSSxPQUFPLENBQ0wsSUFBSSxDQUFDLGFBQWE7QUFDeEIsWUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7QUFDeEIsWUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQzdDLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUVFLElBQUksWUFBWTtBQUNsQixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsU0FBSztBQUNMLFFBQUksT0FBTyxDQUNMLElBQUksQ0FBQyxhQUFhO0FBQ3hCLFlBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO0FBQzFCLFlBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO0FBQzFCLFlBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQ25CLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksSUFBSTtBQUNWLFFBQUksT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLE9BQU87QUFBSyxRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyRSxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksYUFBYTtBQUFLLFFBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMxRCxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksYUFBYTtBQUNuQixRQUFJLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixLQUFLLGdCQUFnQixDQUFDLElBQUksQ0FBQztBQUMzRCxJQUFFLENBQUM7QUFDSCxDQVVDOzs7O3VGQUFBO0FBQ0Q7QUFBOEMsWUFKMUIsZ0JBQWdCLHVCQUgvQixRQUFRLFlBQ1IsSUFBSSxZQUNKLFFBQVE7QUFDVCw0Q0FDQyxNQUFNLFNBQUMsaUJBQWlCO0FBQVE7QUFwRG5DO0FBQWEsSUFEWixLQUFLLEVBQUU7QUFDVDtBQUVBLDZEQUZ5QjtBQUV4QjtBQUFhLElBRFosS0FBSyxFQUFFO0FBQ1Q7QUFFYyx5REFGTztBQUdwQjtBQUFhLElBRFosV0FBVyxDQUFDLGdCQUFnQixDQUFDO0FBQy9CO0FBQ2tCO0FBR1gsc0RBS0w7QUFHRDtBQUFhLElBRFosV0FBVyxDQUFDLGtCQUFrQixDQUFDO0FBQ2pDO0FBQ2dCO0FBR1gsd0RBTUg7QUE3QlUsb0JBQW9CLG9CQUpoQyxTQUFTLENBQUMsZkFJUCxDQWtEQyxXQUFBLFFBQVEsRUFBRSxDQUFBO0FBckRiLEFBc0RELElBQUksV0FBQSxJQUFJLEVBQUUsQ0FBQTtzQkF0RHFDLHRCQXVEL0MsSUFBSSxXQUFBLFFBQVEsRUFBRSxDQUFBO0dBdERiLFFBQVEsRUFBRSxiQXVEWCxJQUNJLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7eUJBeERxQyxNQUNsRSxDQUFDLGhDQXVEOEIscUNBRFosZ0JBQWdCO0FBQzNCLEdBdERJLG9CQUFvQixDQXdEaEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsU0F6RFksb0JBQW9CO0FBQ2hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgSG9zdEJpbmRpbmcsXG4gIE9wdGlvbmFsLFxuICBIb3N0LFxuICBTa2lwU2VsZixcbiAgSW5qZWN0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb250cm9sQ29udGFpbmVyLCBGb3JtQ29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQm9vdHN0cmFwVmVyc2lvbiB9IGZyb20gXCIuLi9FbnVtcy9Cb290c3RyYXBWZXJzaW9uXCI7XG5pbXBvcnQgeyBCT09UU1RSQVBfVkVSU0lPTiB9IGZyb20gXCIuLi9Ub2tlbnMvdG9rZW5zXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250cm9sUGF0aChuYW1lOiBzdHJpbmcsIHBhcmVudDogQ29udHJvbENvbnRhaW5lcik6IHN0cmluZ1tdIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW5vbi1udWxsLWFzc2VydGlvblxuICByZXR1cm4gWy4uLnBhcmVudC5wYXRoISwgbmFtZV07XG59XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiBcIi5mb3JtLWNvbnRyb2wsLmZvcm0tY2hlY2staW5wdXQsLmN1c3RvbS1jb250cm9sLWlucHV0XCJcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUNvbnRyb2xEaXJlY3RpdmUge1xuICBASW5wdXQoKVxuICBmb3JtQ29udHJvbE5hbWU6IHN0cmluZztcbiAgQElucHV0KClcbiAgZm9ybUNvbnRyb2w6IHN0cmluZztcblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5pcy12YWxpZFwiKVxuICBnZXQgdmFsaWRDbGFzcygpIHtcbiAgICBpZiAoIXRoaXMuY29udHJvbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5ib290c3RyYXBGb3VyICYmXG4gICAgICB0aGlzLmNvbnRyb2wudmFsaWQgJiZcbiAgICAgICh0aGlzLmNvbnRyb2wudG91Y2hlZCB8fCB0aGlzLmNvbnRyb2wuZGlydHkpXG4gICAgKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZyhcImNsYXNzLmlzLWludmFsaWRcIilcbiAgZ2V0IGludmFsaWRDbGFzcygpIHtcbiAgICBpZiAoIXRoaXMuY29udHJvbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5ib290c3RyYXBGb3VyICYmXG4gICAgICB0aGlzLmNvbnRyb2wuaW52YWxpZCAmJlxuICAgICAgdGhpcy5jb250cm9sLnRvdWNoZWQgJiZcbiAgICAgIHRoaXMuY29udHJvbC5kaXJ0eVxuICAgICk7XG4gIH1cblxuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gY29udHJvbFBhdGgodGhpcy5mb3JtQ29udHJvbE5hbWUsIHRoaXMucGFyZW50KTtcbiAgfVxuXG4gIGdldCBjb250cm9sKCk6IEZvcm1Db250cm9sIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtRGlyZWN0aXZlICYmIHRoaXMuZm9ybURpcmVjdGl2ZS5nZXRDb250cm9sKHRoaXMpO1xuICB9XG5cbiAgZ2V0IGZvcm1EaXJlY3RpdmUoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5mb3JtRGlyZWN0aXZlIDogbnVsbDtcbiAgfVxuXG4gIGdldCBib290c3RyYXBGb3VyKCkge1xuICAgIHJldHVybiB0aGlzLmJvb3RzdHJhcFZlcnNpb24gPT09IEJvb3RzdHJhcFZlcnNpb24uRm91cjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIHRoaXMgdmFsdWUgbWlnaHQgYmUgbnVsbCwgYnV0IHdlIHVuaW9uIHR5cGUgaXQgYXMgc3VjaCB1bnRpbFxuICAgIC8vIHRoaXMgaXNzdWUgaXMgcmVzb2x2ZWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzI1NTQ0XG4gICAgQE9wdGlvbmFsKClcbiAgICBASG9zdCgpXG4gICAgQFNraXBTZWxmKClcbiAgICBwcml2YXRlIHBhcmVudDogQ29udHJvbENvbnRhaW5lcixcbiAgICBASW5qZWN0KEJPT1RTVFJBUF9WRVJTSU9OKSBwcml2YXRlIGJvb3RzdHJhcFZlcnNpb246IEJvb3RzdHJhcFZlcnNpb25cbiAgKSB7fVxufVxuIl19