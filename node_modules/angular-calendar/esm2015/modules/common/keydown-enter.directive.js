import { __decorate, __metadata } from "tslib";
import { Directive, Output, EventEmitter, ElementRef, NgZone, Renderer2, OnInit, OnDestroy, } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let KeydownEnterDirective = class KeydownEnterDirective {
    constructor(host, ngZone, renderer) {
        this.host = host;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.keydown = new EventEmitter(); // tslint:disable-line
        this.keydownListener = null;
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.keydownListener = this.renderer.listen(this.host.nativeElement, 'keydown', (event) => {
                if (event.keyCode === 13 ||
                    event.which === 13 ||
                    event.key === 'Enter') {
                    event.preventDefault();
                    event.stopPropagation();
                    this.ngZone.run(() => {
                        this.keydown.emit(event);
                    });
                }
            });
        });
    }
    ngOnDestroy() {
        if (this.keydownListener !== null) {
            this.keydownListener();
            this.keydownListener = null;
        }
    }
};
KeydownEnterDirective.ɵfac = function KeydownEnterDirective_Factory(t) { return new (t || KeydownEnterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
KeydownEnterDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: KeydownEnterDirective, selectors: [["", "mwlKeydownEnter", ""]], outputs: { keydown: "mwlKeydownEnter" } });
KeydownEnterDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
__decorate([
    Output('mwlKeydownEnter'),
    __metadata("design:type", Object)
], KeydownEnterDirective.prototype, "keydown", void 0);
KeydownEnterDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
        NgZone,
        Renderer2])
], KeydownEnterDirective);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KeydownEnterDirective, [{
        type: Directive,
        args: [{ selector: '[mwlKeydownEnter]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }]; }, { keydown: [{
            type: Output,
            args: ['mwlKeydownEnter']
        }] }); })();
export { KeydownEnterDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5ZG93bi1lbnRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItY2FsZW5kYXIvbW9kdWxlcy9jb21tb24va2V5ZG93bi1lbnRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFlBQVksRUFDWixVQUFVLEVBQ1YsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDOztBQUd2QixJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtBQUFHLElBS25DLFlBQ1UsSUFBNkIsRUFDN0IsTUFBYyxFQUNkLFFBQW1CO0FBQzVCLFFBSFMsU0FBSSxHQUFKLElBQUksQ0FBeUI7QUFBQyxRQUM5QixXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFDZixhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQy9CLFFBUjZCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsc0JBQXNCO0FBQ3RGLFFBQ1Usb0JBQWUsR0FBd0IsSUFBSSxDQUFDO0FBQ3RELElBS0ssQ0FBQztBQUNOLElBQ0UsUUFBUTtBQUFLLFFBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7QUFDdkMsWUFBTSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFDdkIsU0FBUyxFQUNULENBQUMsS0FBSyxFQUFFLEVBQUU7QUFDbEIsZ0JBQVUsSUFDRSxLQUFLLENBQUMsT0FBTyxLQUFLLEVBQUU7QUFDaEMsb0JBQVksS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFO0FBQzlCLG9CQUFZLEtBQUssQ0FBQyxHQUFHLEtBQUssT0FBTyxFQUNyQjtBQUNaLG9CQUFZLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNuQyxvQkFBWSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDcEMsb0JBQ1ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO0FBQ2pDLHdCQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLG9CQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsaUJBQVc7QUFDWCxZQUFRLENBQUMsQ0FDRixDQUFDO0FBQ1IsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUFLLFFBQ2QsSUFBSSxJQUFJLENBQUMsZUFBZSxLQUFLLElBQUksRUFBRTtBQUN2QyxZQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUM3QixZQUFNLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0FBQ2xDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxDQUFDOzt3TEFBQTtBQUNEO0FBQStDLFlBbkM3QixVQUFVO0FBQUksWUFDWixNQUFNO0FBQ3hCLFlBQW9CLFNBQVM7QUFDN0I7QUFSMkI7QUFBYSxJQUF2QyxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFBRTtBQUFzQyxzREFBTDtBQURsRCxxQkFBcUIsb0JBRGpDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSwzQkFDbkIsa0NBTWMsVUFBVTtBQVBjLEVBQUUsQ0FBQyxIQU9mLFFBQ1YsTUFBTTtBQUMxQixRQUFzQixTQUFTO0FBQzdCLEdBVFcscUJBQXFCLENBd0NqQzs7Ozs7OztvQkFDRDtBQUFDLFNBekNZLHFCQUFxQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgRWxlbWVudFJlZixcbiAgTmdab25lLFxuICBSZW5kZXJlcjIsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW213bEtleWRvd25FbnRlcl0nIH0pXG5leHBvcnQgY2xhc3MgS2V5ZG93bkVudGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAT3V0cHV0KCdtd2xLZXlkb3duRW50ZXInKSBrZXlkb3duID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcblxuICBwcml2YXRlIGtleWRvd25MaXN0ZW5lcjogVm9pZEZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBob3N0OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5rZXlkb3duTGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgICAgdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZXZlbnQua2V5Q29kZSA9PT0gMTMgfHxcbiAgICAgICAgICAgIGV2ZW50LndoaWNoID09PSAxMyB8fFxuICAgICAgICAgICAgZXZlbnQua2V5ID09PSAnRW50ZXInXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMua2V5ZG93bi5lbWl0KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmtleWRvd25MaXN0ZW5lciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5rZXlkb3duTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMua2V5ZG93bkxpc3RlbmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==