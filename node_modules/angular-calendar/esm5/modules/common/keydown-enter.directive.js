import { __decorate, __metadata } from "tslib";
import { Directive, Output, EventEmitter, ElementRef, NgZone, Renderer2, OnInit, OnDestroy, } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var KeydownEnterDirective = /** @class */ (function () {
    function KeydownEnterDirective(host, ngZone, renderer) {
        this.host = host;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.keydown = new EventEmitter(); // tslint:disable-line
        this.keydownListener = null;
    }
    KeydownEnterDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.keydownListener = _this.renderer.listen(_this.host.nativeElement, 'keydown', function (event) {
                if (event.keyCode === 13 ||
                    event.which === 13 ||
                    event.key === 'Enter') {
                    event.preventDefault();
                    event.stopPropagation();
                    _this.ngZone.run(function () {
                        _this.keydown.emit(event);
                    });
                }
            });
        });
    };
    KeydownEnterDirective.prototype.ngOnDestroy = function () {
        if (this.keydownListener !== null) {
            this.keydownListener();
            this.keydownListener = null;
        }
    };
    KeydownEnterDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    __decorate([
        Output('mwlKeydownEnter'),
        __metadata("design:type", Object)
    ], KeydownEnterDirective.prototype, "keydown", void 0);
    KeydownEnterDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
            NgZone,
            Renderer2])
    ], KeydownEnterDirective);
KeydownEnterDirective.ɵfac = function KeydownEnterDirective_Factory(t) { return new (t || KeydownEnterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
KeydownEnterDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: KeydownEnterDirective, selectors: [["", "mwlKeydownEnter", ""]], outputs: { keydown: "mwlKeydownEnter" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KeydownEnterDirective, [{
        type: Directive,
        args: [{ selector: '[mwlKeydownEnter]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }]; }, { keydown: [{
            type: Output,
            args: ['mwlKeydownEnter']
        }] }); })();
    return KeydownEnterDirective;
}());
export { KeydownEnterDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5ZG93bi1lbnRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItY2FsZW5kYXIvbW9kdWxlcy9jb21tb24va2V5ZG93bi1lbnRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFlBQVksRUFDWixVQUFVLEVBQ1YsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDOztBQUd2QjtBQUF5RCxJQUt2RCwrQkFDVSxJQUE2QixFQUM3QixNQUFjLEVBQ2QsUUFBbUI7QUFDNUIsUUFIUyxTQUFJLEdBQUosSUFBSSxDQUF5QjtBQUFDLFFBQzlCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxRQUNmLGFBQVEsR0FBUixRQUFRLENBQVc7QUFDL0IsUUFSNkIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUMsQ0FBQyxzQkFBc0I7QUFDdEYsUUFDVSxvQkFBZSxHQUF3QixJQUFJLENBQUM7QUFDdEQsSUFLSyxDQUFDO0FBQ04sSUFDRSx3Q0FBUSxHQUFSO0FBQWMsUUFBZCxpQkFxQkM7QUFDSCxRQXJCSSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0FBQzVCLFlBQUEsS0FBSSxDQUFDLGVBQWUsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDekMsS0FBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQ3ZCLFNBQVMsRUFDVCxVQUFDLEtBQUs7QUFBSSxnQkFDUixJQUNFLEtBQUssQ0FBQyxPQUFPLEtBQUssRUFBRTtBQUNoQyxvQkFBWSxLQUFLLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDOUIsb0JBQVksS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQ3JCO0FBQ1osb0JBQVksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ25DLG9CQUFZLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNwQyxvQkFDWSxLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUN0Qix3QkFBUSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QyxvQkFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLGlCQUFXO0FBQ1gsWUFBUSxDQUFDLENBQ0YsQ0FBQztBQUNSLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFFSCxJQUFFLDJDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxJQUFJLEVBQUU7QUFDdkMsWUFBTSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDN0IsWUFBTSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztBQUNsQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0Y7QUFDZ0UsZ0JBbkMvQyxVQUFVO0FBQUksZ0JBQ1osTUFBTTtBQUN4QixnQkFBb0IsU0FBUztBQUM3QjtBQUVFLElBVnlCO0FBQWEsUUFBdkMsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0FBQUU7QUFBMEMsMERBQVQ7QUFBRSxJQURwRCxxQkFBcUIsd0JBRGpDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSwvQkFDZixrQ0FNVSxVQUFVO0lBUGMsRUFBRSxDQUFDLFBBT2YsWUFDVixNQUFNO0FBQzFCLFlBQXNCLFNBQVM7QUFDN0IsT0FUVyxxQkFBcUIsQ0F3Q2pDOzs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELDRCQUFDO0FBQ0EsQ0FEQSxBQXhDRCxJQXdDQztBQUNELFNBekNhLHFCQUFxQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgRWxlbWVudFJlZixcbiAgTmdab25lLFxuICBSZW5kZXJlcjIsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW213bEtleWRvd25FbnRlcl0nIH0pXG5leHBvcnQgY2xhc3MgS2V5ZG93bkVudGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAT3V0cHV0KCdtd2xLZXlkb3duRW50ZXInKSBrZXlkb3duID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcblxuICBwcml2YXRlIGtleWRvd25MaXN0ZW5lcjogVm9pZEZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBob3N0OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5rZXlkb3duTGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgICAgdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZXZlbnQua2V5Q29kZSA9PT0gMTMgfHxcbiAgICAgICAgICAgIGV2ZW50LndoaWNoID09PSAxMyB8fFxuICAgICAgICAgICAgZXZlbnQua2V5ID09PSAnRW50ZXInXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMua2V5ZG93bi5lbWl0KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmtleWRvd25MaXN0ZW5lciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5rZXlkb3duTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMua2V5ZG93bkxpc3RlbmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==