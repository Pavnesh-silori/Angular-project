{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/service/consolidation-approach.service\";\nimport * as i2 from \"@library/storage-service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/select\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/checkbox\";\nimport * as i8 from \"@angular/material/core\";\nfunction CarbonFilterComponent_mat_checkbox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 5);\n    i0.ɵɵlistener(\"change\", function CarbonFilterComponent_mat_checkbox_0_Template_mat_checkbox_change_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.isIncludeFacility();\n    });\n    i0.ɵɵtext(1, \"Include facilities\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formControl\", ctx_r0.facilityFC);\n  }\n}\nfunction CarbonFilterComponent_mat_checkbox_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 5);\n    i0.ɵɵlistener(\"change\", function CarbonFilterComponent_mat_checkbox_1_Template_mat_checkbox_change_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.isIncludeSubsidiary();\n    });\n    i0.ɵɵtext(1, \"Include subsidiaries\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formControl\", ctx_r1.subsidiaryFC);\n  }\n}\nfunction CarbonFilterComponent_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const consolidationApproaches_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", consolidationApproaches_r7[\"keyID\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", consolidationApproaches_r7.name, \" \");\n  }\n}\n// /tsc-library/\nexport let CarbonFilterComponent = /*#__PURE__*/(() => {\n  class CarbonFilterComponent {\n    constructor(consolidationApproachService,\n    // tsc-library\n    storageService\n    // /tsc-library/\n    ) {\n      this.consolidationApproachService = consolidationApproachService;\n      this.emitFilter = new EventEmitter();\n      this.have_default_consolidation_approach = false;\n      this.facilityFC = new FormControl(false);\n      this.subsidiaryFC = new FormControl(false);\n      this.consolidationApproachFC = new FormControl();\n      this.includeFacility = false;\n      this.includeSubsidiary = false;\n      this.consolidationApproach = null;\n      this.rootOrgID = storageService.getStorage('rootOrgID');\n      this.currentOrgType = storageService.getStorage('currentOrgType');\n    }\n    ngOnInit() {\n      this.getConsolidationAppraoches();\n    }\n    isIncludeFacility() {\n      this.emitFilter.emit();\n    }\n    isIncludeSubsidiary() {\n      this.emitFilter.emit();\n    }\n    getConsolidationAppraoches() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.consolidationApproach = yield this.consolidationApproachService.getAllConsolidationApproachByOrgID(this.rootOrgID);\n        if (!this.have_default_consolidation_approach) {\n          if (this.consolidationApproach.length) {\n            this.consolidationApproachFC.patchValue(this.consolidationApproach[0].keyID);\n          }\n        }\n        this.emitFilter.emit();\n      });\n    }\n    selectConsolidationApproach(event) {\n      this.consolidationApproachFC.patchValue(event.value, {\n        emitEvent: false\n      });\n      this.emitFilter.emit();\n    }\n  }\n  CarbonFilterComponent.ɵfac = function CarbonFilterComponent_Factory(t) {\n    return new (t || CarbonFilterComponent)(i0.ɵɵdirectiveInject(i1.ConsolidationApproachService), i0.ɵɵdirectiveInject(i2.StorageService));\n  };\n  CarbonFilterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CarbonFilterComponent,\n    selectors: [[\"app-filter-carbon\"]],\n    inputs: {\n      module: \"module\",\n      have_default_consolidation_approach: \"have_default_consolidation_approach\"\n    },\n    outputs: {\n      emitFilter: \"emitFilter\"\n    },\n    decls: 7,\n    vars: 4,\n    consts: [[\"class\", \"ms-3\", 3, \"formControl\", \"change\", 4, \"ngIf\"], [1, \"ms-3\"], [1, \"formLabel\"], [3, \"formControl\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"ms-3\", 3, \"formControl\", \"change\"], [3, \"value\"]],\n    template: function CarbonFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CarbonFilterComponent_mat_checkbox_0_Template, 2, 1, \"mat-checkbox\", 0);\n        i0.ɵɵtemplate(1, CarbonFilterComponent_mat_checkbox_1_Template, 2, 1, \"mat-checkbox\", 0);\n        i0.ɵɵelementStart(2, \"mat-form-field\", 1);\n        i0.ɵɵelementStart(3, \"mat-label\", 2);\n        i0.ɵɵtext(4, \"Select consolidation approach\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-select\", 3);\n        i0.ɵɵlistener(\"selectionChange\", function CarbonFilterComponent_Template_mat_select_selectionChange_5_listener($event) {\n          return ctx.selectConsolidationApproach($event);\n        });\n        i0.ɵɵtemplate(6, CarbonFilterComponent_mat_option_6_Template, 2, 2, \"mat-option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.module == \"dashboard\" && ctx.currentOrgType == \"ORG\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentOrgType == \"ORG\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControl\", ctx.consolidationApproachFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.consolidationApproach);\n      }\n    },\n    directives: [i3.NgIf, i4.MatFormField, i4.MatLabel, i5.MatSelect, i6.NgControlStatus, i6.FormControlDirective, i3.NgForOf, i7.MatCheckbox, i8.MatOption],\n    encapsulation: 2\n  });\n  return CarbonFilterComponent;\n})();\nexport let CarbonFilterModule = /*#__PURE__*/(() => {\n  class CarbonFilterModule {}\n  CarbonFilterModule.ɵfac = function CarbonFilterModule_Factory(t) {\n    return new (t || CarbonFilterModule)();\n  };\n  CarbonFilterModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: CarbonFilterModule\n  });\n  CarbonFilterModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatSelectModule, MatCheckboxModule]]\n  });\n  return CarbonFilterModule;\n})();","map":null,"metadata":{},"sourceType":"module"}