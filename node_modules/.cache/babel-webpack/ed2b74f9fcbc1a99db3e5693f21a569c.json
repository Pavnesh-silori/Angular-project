{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AssetController = /*#__PURE__*/(() => {\n  class AssetController {\n    constructor(http) {\n      this.http = http;\n    }\n    getAsset(pageNo, pazeSize, sortBy, orderBy, filter, currentOrgID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('filter', filter);\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${currentOrgID}/assets/page`, {\n        params: params\n      });\n    }\n    /* for {id: number, name: string} type response */\n    getAllAssetList(orgID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${orgID}/asset-list`);\n    }\n    getAllAsset(orgID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${orgID}/assets`);\n    }\n    createAsset(asset, currentOrgID) {\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${currentOrgID}/assets`, asset);\n    }\n    getAssetByID(assetID, currentOrgID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${currentOrgID}/assets/${assetID}`);\n    }\n    updateAsset(asset, assetID, currentOrgID) {\n      return this.http.patch(`${environment.COMMON_API_URL}organizations/${currentOrgID}/assets/${assetID}`, asset);\n    }\n    deleteAsset(assetID, currentOrgID) {\n      return this.http.delete(`${environment.COMMON_API_URL}organizations/${currentOrgID}/assets/${assetID}`);\n    }\n    bulkUpload(currentOrgID, file) {\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${currentOrgID}/assets/bulk-upload`, file);\n    }\n  }\n  AssetController.ɵfac = function AssetController_Factory(t) {\n    return new (t || AssetController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AssetController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AssetController,\n    factory: AssetController.ɵfac,\n    providedIn: 'root'\n  });\n  return AssetController;\n})();","map":null,"metadata":{},"sourceType":"module"}