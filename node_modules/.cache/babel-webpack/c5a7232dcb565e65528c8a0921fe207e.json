{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { cloneDeep } from 'lodash-es';\nimport * as i1 from 'ngx-toastr';\nclass ToastrServiceService {\n  constructor() {}\n}\nToastrServiceService.ɵfac = function ToastrServiceService_Factory(t) {\n  return new (t || ToastrServiceService)();\n};\nToastrServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ToastrServiceService,\n  factory: ToastrServiceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrServiceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass ToastrServiceComponent {\n  constructor() {}\n  ngOnInit() {}\n}\nToastrServiceComponent.ɵfac = function ToastrServiceComponent_Factory(t) {\n  return new (t || ToastrServiceComponent)();\n};\nToastrServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ToastrServiceComponent,\n  selectors: [[\"lib-toastr-service\"]],\n  decls: 2,\n  vars: 0,\n  template: function ToastrServiceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \" toastr-service works! \");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrServiceComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-toastr-service',\n      template: `\n    <p>\n      toastr-service works!\n    </p>\n  `,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass ToastrServiceModule {}\nToastrServiceModule.ɵfac = function ToastrServiceModule_Factory(t) {\n  return new (t || ToastrServiceModule)();\n};\nToastrServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastrServiceModule\n});\nToastrServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrServiceModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ToastrServiceComponent],\n      imports: [],\n      exports: [ToastrServiceComponent]\n    }]\n  }], null, null);\n})();\nvar ToastrTitle;\n(function (ToastrTitle) {\n  ToastrTitle[\"SUCCESS\"] = \"Success\";\n  ToastrTitle[\"WARNING\"] = \"Warning\";\n  ToastrTitle[\"ERROR\"] = \"Error\";\n  ToastrTitle[\"INFO\"] = \"Info\";\n})(ToastrTitle || (ToastrTitle = {}));\nvar ToastrColor;\n(function (ToastrColor) {\n  ToastrColor[\"SUCCESS\"] = \"success\";\n  ToastrColor[\"WARNING\"] = \"warning\";\n  ToastrColor[\"ERROR\"] = \"error\";\n  ToastrColor[\"INFO\"] = \"info\";\n})(ToastrColor || (ToastrColor = {}));\nclass ToastrService {\n  constructor(ngxToastrService) {\n    this.ngxToastrService = ngxToastrService;\n  }\n  openToast(title, message, notiType) {\n    // Clone current config so it doesn't change when ngModel updates\n    const opt = cloneDeep(this.ngxToastrService.toastrConfig);\n    const inserted = this.ngxToastrService.show(message, title, opt, this.ngxToastrService.toastrConfig.iconClasses[notiType]);\n    return inserted;\n  }\n  getToastStatus(status) {\n    let toast = {\n      title: '',\n      color: ''\n    };\n    switch (status) {\n      case \"error\":\n        toast.title = ToastrTitle.ERROR;\n        toast.color = ToastrColor.ERROR;\n        break;\n      case 'warning':\n        toast.title = ToastrTitle.WARNING;\n        toast.color = ToastrColor.WARNING;\n        break;\n      case 'info':\n        toast.title = ToastrTitle.INFO;\n        toast.color = ToastrColor.INFO;\n        break;\n      case 'success':\n        toast.title = ToastrTitle.SUCCESS;\n        toast.color = ToastrColor.SUCCESS;\n        break;\n      default:\n        toast.title = ToastrTitle.ERROR;\n        toast.color = ToastrColor.ERROR;\n    }\n    return toast;\n  }\n}\nToastrService.ɵfac = function ToastrService_Factory(t) {\n  return new (t || ToastrService)(i0.ɵɵinject(i1.ToastrService));\n};\nToastrService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ToastrService,\n  factory: ToastrService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ToastrService\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of toastr-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ToastrColor, ToastrService, ToastrServiceComponent, ToastrServiceModule, ToastrServiceService, ToastrTitle };","map":{"version":3,"names":["i0","Injectable","Component","NgModule","cloneDeep","i1","ToastrServiceService","constructor","ɵfac","ToastrServiceService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","ToastrServiceComponent","ngOnInit","ToastrServiceComponent_Factory","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","ToastrServiceComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","encapsulation","selector","styles","ToastrServiceModule","ToastrServiceModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ToastrTitle","ToastrColor","ToastrService","ngxToastrService","openToast","title","message","notiType","opt","toastrConfig","inserted","show","iconClasses","getToastStatus","status","toast","color","ERROR","WARNING","INFO","SUCCESS","ToastrService_Factory","ɵɵinject"],"sources":["/home/silori/projects/gitClones/netzero-ui/library/toastr-service/fesm2015/library-toastr-service.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { cloneDeep } from 'lodash-es';\nimport * as i1 from 'ngx-toastr';\n\nclass ToastrServiceService {\n    constructor() { }\n}\nToastrServiceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nToastrServiceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass ToastrServiceComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n}\nToastrServiceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nToastrServiceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: ToastrServiceComponent, selector: \"lib-toastr-service\", ngImport: i0, template: `\n    <p>\n      toastr-service works!\n    </p>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-toastr-service',\n                    template: `\n    <p>\n      toastr-service works!\n    </p>\n  `,\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass ToastrServiceModule {\n}\nToastrServiceModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nToastrServiceModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceModule, declarations: [ToastrServiceComponent], exports: [ToastrServiceComponent] });\nToastrServiceModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrServiceModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ToastrServiceComponent\n                    ],\n                    imports: [],\n                    exports: [\n                        ToastrServiceComponent\n                    ]\n                }]\n        }] });\n\nvar ToastrTitle;\n(function (ToastrTitle) {\n    ToastrTitle[\"SUCCESS\"] = \"Success\";\n    ToastrTitle[\"WARNING\"] = \"Warning\";\n    ToastrTitle[\"ERROR\"] = \"Error\";\n    ToastrTitle[\"INFO\"] = \"Info\";\n})(ToastrTitle || (ToastrTitle = {}));\nvar ToastrColor;\n(function (ToastrColor) {\n    ToastrColor[\"SUCCESS\"] = \"success\";\n    ToastrColor[\"WARNING\"] = \"warning\";\n    ToastrColor[\"ERROR\"] = \"error\";\n    ToastrColor[\"INFO\"] = \"info\";\n})(ToastrColor || (ToastrColor = {}));\n\nclass ToastrService {\n    constructor(ngxToastrService) {\n        this.ngxToastrService = ngxToastrService;\n    }\n    openToast(title, message, notiType) {\n        // Clone current config so it doesn't change when ngModel updates\n        const opt = cloneDeep(this.ngxToastrService.toastrConfig);\n        const inserted = this.ngxToastrService.show(message, title, opt, this.ngxToastrService.toastrConfig.iconClasses[notiType]);\n        return inserted;\n    }\n    getToastStatus(status) {\n        let toast = {\n            title: '',\n            color: '',\n        };\n        switch (status) {\n            case \"error\":\n                toast.title = ToastrTitle.ERROR;\n                toast.color = ToastrColor.ERROR;\n                break;\n            case 'warning':\n                toast.title = ToastrTitle.WARNING;\n                toast.color = ToastrColor.WARNING;\n                break;\n            case 'info':\n                toast.title = ToastrTitle.INFO;\n                toast.color = ToastrColor.INFO;\n                break;\n            case 'success':\n                toast.title = ToastrTitle.SUCCESS;\n                toast.color = ToastrColor.SUCCESS;\n                break;\n            default:\n                toast.title = ToastrTitle.ERROR;\n                toast.color = ToastrColor.ERROR;\n        }\n        return toast;\n    }\n}\nToastrService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrService, deps: [{ token: i1.ToastrService }], target: i0.ɵɵFactoryTarget.Injectable });\nToastrService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ToastrService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ToastrService }]; } });\n\n/*\n * Public API Surface of toastr-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ToastrColor, ToastrService, ToastrServiceComponent, ToastrServiceModule, ToastrServiceService, ToastrTitle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}