{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Component, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport * as i4 from '@library/application-service';\nimport { ApplicationKeyID } from '@library/application-service';\nimport { OrgStatus } from '@library/organization-service';\nimport * as i1$1 from '@angular/router';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i3 from '@library/storage-service';\nimport * as i5 from '@library/authentication-service';\nimport * as i6 from '@library/subscription-service';\nimport * as i7 from '@library/rbac-service';\nimport * as i8 from '@library/feature-service';\nlet AuthorizationController = /*#__PURE__*/(() => {\n  class AuthorizationController {\n    constructor(http, environment) {\n      this.http = http;\n      this.environment = environment;\n    }\n    getAuthorizationByApp(applicationKeyID, orgID) {\n      let headers = new HttpHeaders();\n      headers = headers.set('applicationKeyID', applicationKeyID);\n      let params = new HttpParams();\n      params = params.append('orgID', orgID);\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}authorization`, {\n        params: params,\n        headers: headers\n      });\n    }\n  }\n  AuthorizationController.ɵfac = function AuthorizationController_Factory(t) {\n    return new (t || AuthorizationController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n  };\n  AuthorizationController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthorizationController,\n    factory: AuthorizationController.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizationController;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AuthorizationService = /*#__PURE__*/(() => {\n  class AuthorizationService {\n    constructor(authorizationController) {\n      this.authorizationController = authorizationController;\n    }\n    getAuthorizationByApp(applicationKeyID, orgID = '') {\n      return __awaiter(this, void 0, void 0, function* () {\n        let authorizationM;\n        try {\n          authorizationM = yield this.authorizationController.getAuthorizationByApp(applicationKeyID, orgID).toPromise();\n          return authorizationM;\n        } catch (error) {\n          console.error('Error -', error);\n        }\n      });\n    }\n  }\n  AuthorizationService.ɵfac = function AuthorizationService_Factory(t) {\n    return new (t || AuthorizationService)(i0.ɵɵinject(AuthorizationController));\n  };\n  AuthorizationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthorizationService,\n    factory: AuthorizationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizationService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// /tsc-library/\nlet AuthorizationComponent = /*#__PURE__*/(() => {\n  class AuthorizationComponent {\n    constructor(router, activatedRoute, authorizationService, storageService, applicationService, authenticationService, subscriptionService, rbacService, featureService) {\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.authorizationService = authorizationService;\n      this.storageService = storageService;\n      this.applicationService = applicationService;\n      this.authenticationService = authenticationService;\n      this.subscriptionService = subscriptionService;\n      this.rbacService = rbacService;\n      this.featureService = featureService;\n      this.redirectUrl = '';\n      this.token = '';\n    }\n    ngOnInit() {\n      this.activatedRoute.data.subscribe(data => {\n        this.applicationKeyID = data.applicationKeyID;\n      });\n      this.activatedRoute.queryParams.subscribe(queryParam => {\n        this.token = queryParam.token;\n        this.userID = queryParam.userID;\n        if (queryParam.redirectUrl) {\n          this.redirectUrl = queryParam.redirectUrl;\n        }\n        if (queryParam.orgID) {\n          this.orgID = queryParam.orgID;\n        }\n        this.storageService.setStorage('token', this.token);\n        this.storageService.setStorage('userID', this.userID);\n        this.storageService.setStorage('applicationKeyID', this.applicationKeyID);\n        this.getAuthorizationByApp(this.applicationKeyID, this.orgID);\n      });\n    }\n    getAuthorizationByApp(applicationKeyID, orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let authorizationM;\n        let permissionResult = null;\n        let featureResult = null;\n        authorizationM = yield this.authorizationService.getAuthorizationByApp(applicationKeyID, orgID);\n        this.storageService.setStorage('currentOrgID', authorizationM.orgID);\n        this.storageService.setStorage('rootOrgID', authorizationM.rootOrgID);\n        this.storageService.setStorage('currentOrgType', authorizationM.orgType);\n        this.storageService.setStorage('userUID', authorizationM.userUID);\n        this.storageService.setStorage('applicationID', authorizationM.applicationID);\n        this.storageService.setStorage('enableModule', authorizationM.enableModule);\n        // permissionResult = <any>await this.rbacService.getResourcePermissionByOrgIDAndUserID(authorizationM.rootOrgID, authorizationM.userID);\n        // this.storageService.setStorage(ApplicationResourcePermission.ADMIN_RESOURCE_PERMISSION, JSON.stringify(permissionResult));\n        // featureResult = <any>await this.featureService.getFeatureByOrgID(authorizationM.rootOrgID);\n        // this.storageService.setStorage(ApplicationFeature.ADMIN_FEATURE, JSON.stringify(featureResult));\n        // if (permissionResult && featureResult) {\n        if (authorizationM.orgStatus == OrgStatus.SETUP_PENDING_STATUS) {\n          if (this.applicationKeyID == ApplicationKeyID.ADMIN_KEY_ID) {\n            this.router.navigate(['/organization', authorizationM.orgID, 'setup'], {\n              queryParams: {\n                subscriptionStatus: authorizationM.subscriptionStatus\n              }\n            });\n          } else {\n            this.storageService.clearStorage();\n            window.location.href = `${this.applicationService.appRedirect(ApplicationKeyID.ADMIN_KEY_ID)}login?token=${this.token}&userID=${this.userID}&orgID=${authorizationM.orgID}`;\n          }\n        } else if (authorizationM.subscriptionStatus != 'ACTIVE') {\n          if (this.applicationKeyID == ApplicationKeyID.ADMIN_KEY_ID) {\n            this.router.navigate([`/subscription-new/active`]);\n          } else {\n            this.storageService.clearStorage();\n            window.location.href = `${this.applicationService.appRedirect(ApplicationKeyID.ADMIN_KEY_ID)}login?token=${this.token}&userID=${this.userID}&orgID=${authorizationM.orgID}`;\n          }\n        } else if (authorizationM.subscriptionStatus == 'ACTIVE') {\n          this.router.navigate(['/authorization/success'], {\n            queryParams: {\n              redirectUrl: this.redirectUrl\n            }\n          });\n        } else {\n          this.authenticationService.logout('', '', '');\n        }\n        // } else {\n        //     console.error('Error in permissionResult or featureResult');\n        //     console.log('permissionResult', permissionResult);\n        //     console.log('permissionResult', permissionResult);\n        //     this.authenticationService.logout('', '', '');\n        // }\n      });\n    }\n  }\n\n  AuthorizationComponent.ɵfac = function AuthorizationComponent_Factory(t) {\n    return new (t || AuthorizationComponent)(i0.ɵɵdirectiveInject(i1$1.Router), i0.ɵɵdirectiveInject(i1$1.ActivatedRoute), i0.ɵɵdirectiveInject(AuthorizationService), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.ApplicationService), i0.ɵɵdirectiveInject(i5.AuthenticationService), i0.ɵɵdirectiveInject(i6.SubscriptionService), i0.ɵɵdirectiveInject(i7.RBACService), i0.ɵɵdirectiveInject(i8.FeatureService));\n  };\n  AuthorizationComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: AuthorizationComponent,\n    selectors: [[\"lib-authorization\"]],\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"d-flex\", \"h-100\", \"justify-content-center\", \"align-items-center\"], [1, \"text-center\", \"fs-4\"], [\"src\", \"assets/images/application-logo/tsc-with-name.png\", 1, \"appAuthImg\"], [1, \"spinner-border\", \"spinner-border-sm\", \"text-success\"]],\n    template: function AuthorizationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"img\", 2);\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelement(5, \"span\", 3);\n        i0.ɵɵtext(6, \" .. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".appAuthImg[_ngcontent-%COMP%]{height:55px}\"]\n  });\n  return AuthorizationComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AuthorizationModule = /*#__PURE__*/(() => {\n  class AuthorizationModule {\n    static forRoot(environment) {\n      return {\n        ngModule: AuthorizationModule,\n        providers: [{\n          provide: 'environment',\n          useValue: environment\n        }]\n      };\n    }\n  }\n  AuthorizationModule.ɵfac = function AuthorizationModule_Factory(t) {\n    return new (t || AuthorizationModule)();\n  };\n  AuthorizationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AuthorizationModule\n  });\n  AuthorizationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return AuthorizationModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of authorization\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AuthorizationComponent, AuthorizationController, AuthorizationModule, AuthorizationService };\n//# sourceMappingURL=library-authorization.js.map","map":null,"metadata":{},"sourceType":"module"}