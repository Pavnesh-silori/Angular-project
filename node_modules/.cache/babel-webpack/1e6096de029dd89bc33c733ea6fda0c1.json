{"ast":null,"code":"\"use strict\";\n\nvar ɵngcc0 = require('@angular/core');\nvar ɵngcc1 = require('./ng-redux');\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar ng_redux_1 = require(\"./ng-redux\");\nvar core_2 = require(\"@angular/core\");\nvar environment = typeof window !== 'undefined' ? window : {};\n/**\n * An angular-2-ified version of the Redux DevTools chrome extension.\n */\nvar DevToolsExtension = /** @class */function () {\n  /** @hidden */\n  function DevToolsExtension(appRef, ngRedux) {\n    var _this = this;\n    this.appRef = appRef;\n    this.ngRedux = ngRedux;\n    /**\n     * A wrapper for the Chrome Extension Redux DevTools.\n     * Makes sure state changes triggered by the extension\n     * trigger Angular2's change detector.\n     *\n     * @argument options: dev tool options; same\n     * format as described here:\n     * [zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md]\n     */\n    this.enhancer = function (options) {\n      var subscription;\n      if (!_this.isEnabled()) {\n        return null;\n      }\n      // Make sure changes from dev tools update angular's view.\n      environment.devToolsExtension.listen(function (_a) {\n        var type = _a.type;\n        if (type === 'START') {\n          subscription = _this.ngRedux.subscribe(function () {\n            if (!core_2.NgZone.isInAngularZone()) {\n              _this.appRef.tick();\n            }\n          });\n        } else if (type === 'STOP') {\n          subscription();\n        }\n      });\n      return environment.devToolsExtension(options);\n    };\n    /**\n     * Returns true if the extension is installed and enabled.\n     */\n    this.isEnabled = function () {\n      return environment && environment.devToolsExtension;\n    };\n  }\n  DevToolsExtension = __decorate([__metadata(\"design:paramtypes\", [core_1.ApplicationRef, ng_redux_1.NgRedux])], DevToolsExtension);\n  DevToolsExtension.ɵfac = function DevToolsExtension_Factory(t) {\n    return new (t || DevToolsExtension)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc1.NgRedux));\n  };\n  DevToolsExtension.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DevToolsExtension,\n    factory: function (t) {\n      return DevToolsExtension.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return DevToolsExtension;\n}();\nexports.DevToolsExtension = DevToolsExtension;\n\n//# sourceMappingURL=dev-tools.js.map","map":null,"metadata":{},"sourceType":"script"}