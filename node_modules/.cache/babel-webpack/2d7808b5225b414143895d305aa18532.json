{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ActivityKeyIDEnum } from \"@carbon/enum/activity.enum\";\nimport { ActivityConfigEnum } from \"@carbon/enum/activity-config.enum\";\nimport { ACTIVITY_FORM_TYPE_KEYID_ENUM } from \"@carbon/enum/activity-form-enum\";\nimport { ACTIVITY_CONFIG_VIEW_PAGE_CONSTANT } from \"@carbon/constant/activity.constant\";\nconst CREATE_AD_HOC_SUBTITLE = 'Create a new record with details and activity data.';\nexport class CreateConfig {\n  constructor(activityService, activityConfigController, router, userService, adHocController, tscCommonService) {\n    this.activityService = activityService;\n    this.activityConfigController = activityConfigController;\n    this.router = router;\n    this.userService = userService;\n    this.adHocController = adHocController;\n    this.tscCommonService = tscCommonService;\n    this.ActivityConfigEnum = ActivityConfigEnum;\n    this.ACTIVITY_FORM_TYPE_KEYID_ENUM = ACTIVITY_FORM_TYPE_KEYID_ENUM;\n    this.title = 'Title';\n    this.subTitle = '';\n    this.origin = '';\n    this.action = '';\n    this.usePFF = 'NO';\n    this.tabView = 'NO';\n    this.activityDataTabView = 'NO';\n    this.showActivitySelection = 'YES';\n    this.showActivityDataError = 'YES';\n    this.from = 'NO';\n    this.isPFFUpdate = false;\n    this.isAdHocCreateUsingPFF = false;\n    this.users = [];\n    this.dataEntryMethod = [];\n    this.estimationMethod = [];\n    this.isWorkflowValid = true;\n    // @ViewChild('schedulerWorkflow') schedulerWorkflow: SchedulerWorkflowComponent;\n    // @ViewChild('configCreate') configCreate: ConfigCreateComponent;/* ACTIVITY_CONFIG_COMPONENT */\n    this.isApiValid = true;\n    // @ViewChild('api') api: ApiComponent;\n    this.isConfigValid = true;\n    // component: any; \n    this.isActivityDataValid = true;\n    this.docFileList = []; /* get upload file value */\n    this.saveAdHocAsPff = false;\n    this.createAdHocJson = {\n      configData: undefined,\n      activityData: undefined\n    };\n    this.isEqual = false;\n    this.approveBtn = false;\n    this.saveBtn = true;\n    this.submitBtn = false;\n    this.activityDataAction = 'APPROVED';\n    this.vehicles = [];\n  }\n  handleQueryParams(queryParams) {\n    const {\n      activityID,\n      action,\n      origin,\n      tabView,\n      from,\n      usePFF,\n      activityConfigID\n    } = queryParams;\n    this.activityID = activityID !== null && activityID !== void 0 ? activityID : this.activityID;\n    this.action = action !== null && action !== void 0 ? action : this.action;\n    this.origin = origin !== null && origin !== void 0 ? origin : this.origin;\n    this.tabView = tabView !== null && tabView !== void 0 ? tabView : this.tabView;\n    this.from = from !== null && from !== void 0 ? from : this.from;\n    this.usePFF = usePFF !== null && usePFF !== void 0 ? usePFF : this.usePFF;\n    this.activityConfigID = activityConfigID !== null && activityConfigID !== void 0 ? activityConfigID : this.activityConfigID;\n    if (this.from === 'reminder' || this.from === 'record') {\n      this.showActivitySelection = 'NO';\n    }\n    if (this.origin === ActivityConfigEnum.PFF) {\n      this.setupPFFConfig();\n    } else if (this.origin === ActivityConfigEnum.AD_HOC) {\n      this.setupAdHocConfig();\n    }\n  }\n  handleParams(params) {\n    if (params['activityConfigID']) {\n      this.isPFFUpdate = true;\n      this.activityConfigID = params['activityConfigID'];\n    }\n  }\n  setupPFFConfig() {\n    this.redirectUrl = `/carbon-setting/activity-config/page`;\n    this.selectedTab = 0;\n    if (this.action === 'create') {\n      this.activityDataTabView = 'NO';\n      this.titlePrefix = `Create`;\n      this.titleSuffix = `Activity Form`;\n    } else if (this.action === 'update') {\n      this.showActivitySelection = 'NO';\n      this.titlePrefix = `Update`;\n      this.titleSuffix = `Activity Form`;\n    }\n  }\n  setupAdHocConfig() {\n    this.redirectUrl = `/activity-data`;\n    this.activityDataTabView = 'YES';\n    this.titlePrefix = `Create`;\n    this.titleSuffix = `New Record`;\n    this.subTitle = CREATE_AD_HOC_SUBTITLE;\n    this.selectedTab = 0;\n    if (this.usePFF === 'YES') {\n      this.showActivityDataError = 'NO';\n      this.selectedTab = 1;\n      if (this.action === 'create') {\n        this.isAdHocCreateUsingPFF = true;\n      }\n    }\n  }\n  getActivityByID(activityID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.activity = yield this.activityService.getActivityByID(activityID);\n      this.activityKeyID = this.activity.keyID;\n      this.activityName = this.activity.name;\n      this.title = `${this.titlePrefix} ${this.activityName} ${this.titleSuffix}`;\n      this.subTitle = this.activity.description;\n      //update case\n      if (this.isPFFUpdate || this.isAdHocCreateUsingPFF) {\n        this.getActivityConfigByID(this.currentOrgID, this.activityKeyID, this.activityConfigID);\n      }\n      /* sets which route should we redirects to after creation or updation of an entity */\n      this.setRedirectUrl();\n    });\n  }\n  getUsersByOrg() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.users = yield this.userService.getUserListByOrgIDAndAppID(this.currentOrgID, this.currentApplicationID);\n    });\n  }\n  getActivityConfigByID(orgID, activityKeyID, activityConfigID) {\n    this.configuration = null;\n    this.activityConfigController.getActivityConfigByID(orgID, activityKeyID, activityConfigID).subscribe(config => {\n      this.configuration = config;\n      if (this.isPFFUpdate) {\n        console.log(this.configuration);\n        this.patchConfiguration(this.configuration);\n      }\n      if (this.isAdHocCreateUsingPFF) {\n        this.checkApprover(this.configuration);\n        this.activityDataComp.getConfiguration(this.configuration);\n        this.patchConfigForAdHoc(this.configuration);\n      }\n    }, error => {\n      console.log('error in getConfigurationByID() -', error);\n    });\n  }\n  patchConfiguration(configuration) {\n    console.log('pathch config called');\n    this.isEqual = true;\n    let activityConfig = configuration['activityConfig'];\n    console.log('component', this.component);\n    this.component.patchConfiguration(configuration);\n    this.schedulerWorkflow.patchWorkflow(activityConfig['workflowEnabled'], configuration['workflow'], activityConfig['reminderEnabled'], configuration['schedular']);\n    this.api.patchApi(activityConfig['apiEnabled'], configuration['activityConfigApi']);\n  }\n  patchConfigForAdHoc(configuration) {\n    this.component.patchConfiguration(configuration);\n    this.component.readOnlyForm();\n  }\n  checkApprover(configuration) {\n    var _a, _b, _c, _d;\n    if ((configuration === null || configuration === void 0 ? void 0 : configuration['workflowEnabled']) == null) {\n      this.saveBtn = true;\n    } else if (configuration['workflow'] != null) {\n      if ((_b = (_a = configuration['workflow']) === null || _a === void 0 ? void 0 : _a['activityConfigApprover']) === null || _b === void 0 ? void 0 : _b['isApprover']) {\n        this.approveBtn = true;\n        this.saveBtn = false;\n      } else if (((_d = (_c = configuration['workflow']) === null || _c === void 0 ? void 0 : _c['activityConfigWorkflow']) === null || _d === void 0 ? void 0 : _d['autoApprove']) == 'YES') {\n        this.approveBtn = true;\n        this.saveBtn = false;\n      } else {\n        this.submitBtn = true;\n        this.saveBtn = false;\n        this.activityDataAction = 'SUBMITTED';\n      }\n    }\n  }\n  setRedirectUrl() {\n    const nonGhgFormKeyID = [ActivityKeyIDEnum.CHP_ATTRIBUTION, ActivityKeyIDEnum.PROCESS_ELECTRICITY_CONSUMPTION, ActivityKeyIDEnum.PROCESS_HEAT_CONSUMPTION, ActivityKeyIDEnum.PROCESS_FUEL_CONSUMPTION, ActivityKeyIDEnum.PURCHASED_PRECURSOR, ActivityKeyIDEnum.PROCESS_PRECURSOR_CONSUMPTION, ActivityKeyIDEnum.PROCESS_ELECTRICITY_EXPORT, ActivityKeyIDEnum.PROCESS_HEAT_EXPORT, ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT, ActivityKeyIDEnum.PROCESS_WASTE_GAS_EXPORT, ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT, ActivityKeyIDEnum.PROCESS_PRODUCTION_LEVEL, ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT];\n    if (this.origin == ActivityConfigEnum.PFF) {\n      this.redirectUrl = `/carbon-setting/activity-config/page`;\n    } else if (this.origin == ActivityConfigEnum.AD_HOC) {\n      this.redirectUrl = `/activity-data`;\n      // this.saveAdHocAsPff = this.component.saveAdHocAsPff;\n      if (nonGhgFormKeyID.includes(this.activityKeyID)) {\n        this.redirectUrl = '/cbam/activity-data/activity';\n      }\n    }\n    if (this.router.url.includes('sustainability-accounting')) {\n      this.redirectUrl = `/sustainability-accounting/carbon/page`;\n    }\n  }\n  isUpdateValid() {\n    var _a;\n    let configUpdate;\n    (_a = this.component) === null || _a === void 0 ? void 0 : _a.isEqual.subscribe(isEqual => {\n      configUpdate = isEqual;\n      this.updateEqual(configUpdate, workflowUpdate, apiUpdate);\n    });\n    let workflowUpdate;\n    this.schedulerWorkflow.isEqual.subscribe(isEqual => {\n      workflowUpdate = isEqual;\n      this.updateEqual(configUpdate, workflowUpdate, apiUpdate);\n    });\n    let apiUpdate;\n    this.api.isEqual.subscribe(isEqual => {\n      apiUpdate = isEqual;\n      this.updateEqual(configUpdate, workflowUpdate, apiUpdate);\n    });\n  }\n  updateEqual(configUpdate, workflowUpdate, apiUpdate) {\n    this.isEqual = configUpdate && workflowUpdate && apiUpdate;\n  }\n  patchChildren() {\n    this.activityConfigJson = this.component.configuration;\n    this.activityConfigJson['activityConfig']['activityID'] = this.activityID;\n    this.activityConfigJson['activityConfig']['activityKeyID'] = this.activityKeyID;\n    if (this.origin == ActivityConfigEnum.PFF) {\n      this.activityConfigJson['activityConfig']['workflowEnabled'] = this.schedulerWorkflow.enableWorkflowFC.value;\n      this.activityConfigJson['activityConfig']['reminderEnabled'] = this.schedulerWorkflow.isReminderSetAC.value && this.schedulerWorkflow.enableWorkflowFC.value;\n      this.activityConfigJson['activityConfig']['apiEnabled'] = this.api.enableApiFC.value;\n      this.activityConfigJson['activityConfigApi'] = this.api.enableApiFC.value ? this.api.apiFG.getRawValue() : null;\n      this.activityConfigJson['workflow'] = this.schedulerWorkflow.enableWorkflowFC.value ? this.schedulerWorkflow.workflowAC.getRawValue() : null;\n      this.activityConfigJson['schedular'] = this.schedulerWorkflow.isReminderSetAC.value ? this.schedulerWorkflow.schedulerAC.value : null;\n    }\n    if (this.origin == ActivityConfigEnum.PFF) {\n      if (this.isPFFUpdate) {\n        this.updateActivityConfig();\n      } else {\n        this.createActivityConfig();\n      }\n    } else if (this.origin == ActivityConfigEnum.AD_HOC) {\n      // this.saveAdHocAsPff = this.component.saveAdHocAsPff;\n      if (this.saveAdHocAsPff) {\n        /* not yet configured/ not known if it will be used further */\n        this.createActivityDataAndActivityConfig();\n      } else {\n        this.createActivityData();\n      }\n    }\n  }\n  createActivityConfig() {\n    this.activityConfigController.createActivityConfig(this.currentOrgID, this.activityKeyID, this.activityConfigJson).subscribe(response => {\n      if (ACTIVITY_CONFIG_VIEW_PAGE_CONSTANT.includes(this.activityKeyID)) {\n        this.router.navigate(['/carbon-setting/activity-config', response.response.activityConfig.activityConfigID, 'activity', this.activityKeyID, {\n          outlets: {\n            activityConfig: ['view']\n          }\n        }], {\n          queryParams: {\n            activityKeyID: this.activityKeyID\n          }\n        });\n      } else {\n        this.router.navigate([this.redirectUrl], {\n          queryParams: {\n            origin: this.origin\n          }\n        });\n      }\n    }, error => {\n      console.log('error in createActivityConfig() -', error);\n    });\n  }\n  updateActivityConfig() {\n    this.activityConfigController.updateActivityConfig(this.currentOrgID, this.activityKeyID, this.activityConfigID, this.activityConfigJson).subscribe(response => {\n      if (ACTIVITY_CONFIG_VIEW_PAGE_CONSTANT.includes(this.activityKeyID)) {\n        this.router.navigate(['/carbon-setting/activity-config', response.response.activityConfig.activityConfigID, 'activity', this.activityKeyID, {\n          outlets: {\n            activityConfig: ['view']\n          }\n        }], {\n          queryParams: {\n            activityKeyID: this.activityKeyID\n          }\n        });\n      } else {\n        this.router.navigate([this.redirectUrl], {\n          queryParams: {\n            origin: this.origin\n          }\n        });\n      }\n    }, error => {\n      console.log('error in updateActivityConfig() -', error);\n    });\n  }\n  createActivityDataAndActivityConfig() {\n    this.adHocController.createActivityDataAndActivityConfig(this.currentOrgID, this.activityKeyID, this.toFormData()).subscribe(res => {\n      if (this.router.url.includes('sustainability-accounting')) {\n        this.router.navigate([this.redirectUrl], {\n          queryParams: {\n            activityID: this.activityID,\n            activityKeyID: this.activityKeyID\n          }\n        });\n      } else {\n        this.router.navigate([this.redirectUrl, this.activityKeyID], {\n          queryParams: {\n            activityID: this.activityID,\n            activityKeyID: this.activityKeyID\n          }\n        });\n      }\n      this.tscCommonService.back();\n    }, error => {\n      console.log('error in createAdHocWithActivityConfig() -', error);\n    });\n  }\n  createActivityData() {\n    this.adHocController.createActivityData(this.currentOrgID, this.activityKeyID, this.activityConfigID, this.toFormData(), this.usePFF, this.activityDataAction).subscribe(res => {\n      if (this.router.url.includes('sustainability-accounting')) {\n        this.router.navigate([this.redirectUrl], {\n          queryParams: {\n            activityID: this.activityID,\n            activityKeyID: this.activityKeyID\n          }\n        });\n      } else {\n        this.router.navigate([this.redirectUrl, this.activityKeyID, 'page'], {\n          queryParams: {\n            activityID: this.activityID,\n            activityKeyID: this.activityKeyID\n          }\n        });\n      }\n      this.tscCommonService.back();\n    }, error => {\n      console.log('error in createAdHocWithoutActivityConfig() -', error);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}