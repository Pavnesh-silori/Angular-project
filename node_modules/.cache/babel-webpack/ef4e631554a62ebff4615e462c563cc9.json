{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AssignmentController = /*#__PURE__*/(() => {\n  class AssignmentController {\n    constructor(http) {\n      this.http = http;\n    }\n    getSectionAndGroupList(orgID, reportFrameworkID, searchFlag, searchValue, configID, configIntervalID) {\n      let params = new HttpParams();\n      if (searchFlag) {\n        params = params.append('searchBy', searchValue);\n      }\n      if (configID != null) {\n        params = params.append('configID', configID);\n      }\n      if (configIntervalID != null) {\n        params = params.append('configIntervalID', configIntervalID);\n      }\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-framework/${reportFrameworkID}/section-group`, {\n        params: params\n      });\n    }\n    getSectionAndGroupForDataList(orgID, configIntervalID, sortBy, orderBy, searchValue, filter) {\n      let body = {\n        sortBy: sortBy,\n        orderBy: orderBy,\n        searchBy: searchValue,\n        filter: filter\n      };\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config-interval/${configIntervalID}/section-group`, body);\n    }\n    getSchedularDetails(orgID, reportConfigID, reportConfigIntervalID) {\n      let url = `${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-framework/report-config/assignment`;\n      if (reportConfigID !== null) {\n        url += `/${reportConfigID}`;\n      }\n      if (reportConfigIntervalID !== null) {\n        url += `/interval/${reportConfigIntervalID}`;\n      }\n      return this.http.get(url);\n    }\n    createSchedular(orgID, reportConfigID, reportConfigIntervalID, value, reportID) {\n      let url = null;\n      if (reportConfigID != null) {\n        url = this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config/${reportConfigID}/assignment`, value);\n      } else {\n        url = this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config-interval/${reportConfigIntervalID}/assignment`, value);\n      }\n      return url;\n    }\n    unassignedConfigSectionGroup(orgID, reportingConfigID, formData) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config/${reportingConfigID}/unassign`, formData);\n    }\n    unassignedConfigIntervalSectionGroup(orgID, reportingConfigIntervalID, formData) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config-interval/${reportingConfigIntervalID}/unassign`, formData);\n    }\n    unassingedSectionOrgGroup(orgID, reportingConfigID, reportingConfigIntervalID, formData) {\n      let url = null;\n      if (reportingConfigID != null) {\n        url = this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config/${reportingConfigID}/unassign`, formData);\n      } else {\n        url = this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config-interval/${reportingConfigIntervalID}/unassign`, formData);\n      }\n      return url;\n    }\n    sendReminderAssignee(orgID, configIntervalID, metricList) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config-interval/${configIntervalID}/reminder/assignee`, metricList);\n    }\n    sendReminderApprover(orgID, configIntervalID, metricList) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config-interval/${configIntervalID}/reminder/approver`, metricList);\n    }\n    workflowExist(orgID, configID) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config/${configID}/workflow-exists`);\n    }\n    saveWorkflow(orgID, configID, configIntervalID) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config/${configID}/previous-config-interval/${configIntervalID}/assignment`, '');\n    }\n    download() {\n      return this.http.get(`http://192.168.1.102:9600/public/organizations/100050079/reporting-framework/sasb/config-interval/7/download`);\n    }\n  }\n  AssignmentController.ɵfac = function AssignmentController_Factory(t) {\n    return new (t || AssignmentController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AssignmentController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AssignmentController,\n    factory: AssignmentController.ɵfac,\n    providedIn: \"root\"\n  });\n  return AssignmentController;\n})();","map":null,"metadata":{},"sourceType":"module"}