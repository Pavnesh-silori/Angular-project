{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Input } from '@angular/core';\nimport { COMMON_CONSTANT } from '@library/tsc-common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from 'ngx-echarts';\nimport { NgxEchartsModule } from 'ngx-echarts';\nclass EchartService {\n  constructor() {}\n}\nEchartService.ɵfac = function EchartService_Factory(t) {\n  return new (t || EchartService)();\n};\nEchartService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EchartService,\n  factory: EchartService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EchartService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass EchartComponent {\n  constructor() {}\n  ngOnInit() {}\n}\nEchartComponent.ɵfac = function EchartComponent_Factory(t) {\n  return new (t || EchartComponent)();\n};\nEchartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: EchartComponent,\n  selectors: [[\"lib-echart\"]],\n  decls: 2,\n  vars: 0,\n  template: function EchartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \" echart works! \");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EchartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-echart',\n      template: `\n    <p>\n      echart works!\n    </p>\n  `,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass EchartModule {}\nEchartModule.ɵfac = function EchartModule_Factory(t) {\n  return new (t || EchartModule)();\n};\nEchartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EchartModule\n});\nEchartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EchartModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [EchartComponent],\n      imports: [],\n      exports: [EchartComponent]\n    }]\n  }], null, null);\n})();\n\n// tsc-library\n// /tsc-library/\nconst LOADING_GRAPHIC = {\n  graphic: {\n    elements: [{\n      type: 'group',\n      left: 'center',\n      top: 'center',\n      children: new Array(7).fill(0).map((val, i) => ({\n        type: 'rect',\n        x: i * 20,\n        shape: {\n          x: 0,\n          y: -40,\n          width: 10,\n          height: 80\n        },\n        style: {\n          fill: '#0E2F44'\n        },\n        keyframeAnimation: {\n          duration: 1000,\n          delay: i * 200,\n          loop: true,\n          keyframes: [{\n            percent: 0.5,\n            scaleY: 0.3,\n            easing: 'cubicIn'\n          }, {\n            percent: 1,\n            scaleY: 1,\n            easing: 'cubicOut'\n          }]\n        }\n      }))\n    }]\n  }\n};\nconst NO_DATA_GRAPHIC = {\n  type: 'text',\n  left: 'center',\n  top: 'middle',\n  style: {\n    fill: '#6c757d',\n    fontSize: 25,\n    text: COMMON_CONSTANT.NO_DATA\n  }\n};\nvar ChartTypeEnum;\n(function (ChartTypeEnum) {\n  ChartTypeEnum[\"BASIC_LINE_CHART\"] = \"BASIC_LINE_CHART\";\n  ChartTypeEnum[\"BASIC_AREA_CHART\"] = \"BASIC_AREA_CHART\";\n  ChartTypeEnum[\"BASIC_BAR_CHART\"] = \"BASIC_BAR_CHART\";\n})(ChartTypeEnum || (ChartTypeEnum = {}));\nvar ChartViewStateEnum;\n(function (ChartViewStateEnum) {\n  ChartViewStateEnum[\"HAS_DATA\"] = \"HAS_DATA\";\n  ChartViewStateEnum[\"NO_DATA\"] = \"NO_DATA\";\n  ChartViewStateEnum[\"LOADING\"] = \"LOADING\";\n})(ChartViewStateEnum || (ChartViewStateEnum = {}));\nclass ChartTitle {\n  constructor() {\n    this.name = '';\n    this.color = 'black';\n  }\n}\nclass BasicAreaLineBarChart {\n  constructor() {\n    this.chartTitle = {\n      name: '',\n      color: 'black'\n    };\n    this.metaData = [];\n    this.unit = {\n      name: '',\n      code: ''\n    };\n    this.markLine = [];\n    this.xAxisLabel = '';\n    this.yAxisLabel = '';\n    this.xAxisNameGap = 40;\n    this.yAxisNameGap = 40;\n    this.showDataZoomSlider = false;\n    this.showDataView = false;\n    this.showMagicType = false;\n    this.showRestore = false;\n    this.showDownloadImage = false;\n  }\n}\nclass DoughnutChart {\n  constructor() {\n    this.metaData = [];\n    this.showDataView = false;\n    this.showRestore = false;\n    this.showDownloadImage = false;\n  }\n}\nclass StackBarChart {\n  constructor() {\n    this.metaData = [];\n    this.tooltipHeaderLabel = '';\n    this.totalDataLabel = '';\n    this.xAxisLabel = '';\n    this.yAxisLabel = '';\n    this.xAxisNameGap = 40;\n    this.yAxisNameGap = 40;\n    this.showDataZoomSlider = false;\n    this.showDataView = false;\n    this.showMagicType = false;\n    this.showRestore = false;\n    this.showDownloadImage = false;\n  }\n}\n\n// /tsc-library/\nclass BasicAreaLineBarComponent {\n  constructor() {\n    this.chartType = ChartTypeEnum.BASIC_LINE_CHART;\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes.viewStateInp && this.viewStateInp) {\n      this.viewState = this.viewStateInp;\n    }\n    if (changes.chartTitleInp && this.chartTitleInp) {\n      this.chartTitle = this.chartTitleInp;\n    }\n    if (changes.chartTypeInp && this.chartTypeInp) {\n      this.chartType = this.chartTypeInp;\n    }\n    if (changes.dataInp && this.dataInp) {\n      this.chartData = this.dataInp;\n    }\n    this.noDataOption = {\n      title: {\n        text: this.chartTitle.name,\n        textStyle: {\n          color: this.chartTitle.color\n        },\n        padding: [7, 0, 0, 20]\n      },\n      graphic: NO_DATA_GRAPHIC,\n      xAxis: {\n        show: false\n      },\n      yAxis: {\n        show: false\n      }\n    };\n    this.checkData();\n  }\n  checkData() {\n    if (this.viewState == ChartViewStateEnum.LOADING) {\n      this.dataOption = LOADING_GRAPHIC;\n    } else if (this.viewState == ChartViewStateEnum.HAS_DATA) {\n      this.drawChart();\n    } else if (this.viewState == ChartViewStateEnum.NO_DATA) {\n      this.dataOption = this.noDataOption;\n    }\n  }\n  drawChart() {\n    var _a, _b;\n    const unit = this.chartData.unit.code;\n    this.dataOption = {\n      toolbox: {\n        feature: {\n          dataView: {\n            show: this.chartData.showDataView,\n            readOnly: true\n          },\n          magicType: {\n            show: this.chartData.showMagicType,\n            type: ['line', 'bar']\n          },\n          restore: {\n            show: this.chartData.showRestore\n          },\n          saveAsImage: {\n            show: this.chartData.showDownloadImage\n          }\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        formatter: function (params) {\n          let tooltip = '';\n          tooltip += '<b><span class=\"text-primary\">' + params[0].name + '</span></b><br />';\n          tooltip += 'Value: <b><span style=\"float: right; margin-left:15px;\">' + (params[0].value != null ? params[0].value + ' ' + unit : COMMON_CONSTANT.HYPHEN) + '</span></b>';\n          return tooltip;\n        }\n      },\n      grid: {\n        top: '10%',\n        left: '7%',\n        right: '5%',\n        bottom: '10%',\n        containLabel: true\n      },\n      dataZoom: [{\n        type: 'slider',\n        filterMode: 'none',\n        show: this.chartData.showDataZoomSlider\n      }, {\n        type: 'inside',\n        filterMode: 'none',\n        show: this.chartData.showDataZoomSlider\n      }],\n      title: {\n        show: true,\n        text: `${this.chartTitle.name}`,\n        textStyle: {\n          color: this.chartTitle.color\n        },\n        padding: [7, 0, 0, 20]\n      },\n      xAxis: {\n        type: 'category',\n        boundaryGap: this.chartType == ChartTypeEnum.BASIC_BAR_CHART ? true : false,\n        data: this.chartData.metaData.map(item => item.name),\n        name: this.chartData.xAxisLabel,\n        nameLocation: 'middle',\n        nameGap: this.chartData.xAxisNameGap\n      },\n      yAxis: {\n        type: 'value',\n        name: this.chartData.yAxisLabel,\n        nameLocation: 'middle',\n        nameGap: this.chartData.yAxisNameGap\n      },\n      series: [{\n        barWidth: '40%',\n        label: {\n          show: this.chartType == ChartTypeEnum.BASIC_BAR_CHART ? true : false,\n          position: 'top'\n        },\n        data: this.chartData.metaData.map(item => item.value),\n        type: this.chartType == ChartTypeEnum.BASIC_BAR_CHART ? 'bar' : 'line',\n        areaStyle: this.chartType == ChartTypeEnum.BASIC_AREA_CHART ? {} : null,\n        markLine: {\n          data: (_b = (_a = this.chartData) === null || _a === void 0 ? void 0 : _a.markLine) === null || _b === void 0 ? void 0 : _b.map(item => ({\n            lineStyle: {\n              type: 'dashed',\n              color: `${item.color}`\n            },\n            label: {\n              formatter: `${item.label} : ${item.value}`,\n              position: 'middle',\n              offset: [0, 5]\n            },\n            yAxis: item.value\n          }))\n        }\n      }]\n    };\n  }\n}\nBasicAreaLineBarComponent.ɵfac = function BasicAreaLineBarComponent_Factory(t) {\n  return new (t || BasicAreaLineBarComponent)();\n};\nBasicAreaLineBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BasicAreaLineBarComponent,\n  selectors: [[\"lib-basic-area-line-bar\"]],\n  inputs: {\n    chartTypeInp: \"chartTypeInp\",\n    viewStateInp: \"viewStateInp\",\n    chartTitleInp: \"chartTitleInp\",\n    dataInp: \"dataInp\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"echarts\", \"\", 3, \"options\"]],\n  template: function BasicAreaLineBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"options\", ctx.dataOption);\n    }\n  },\n  directives: [i1.NgxEchartsDirective],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BasicAreaLineBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-basic-area-line-bar',\n      templateUrl: './basic-area-line-bar.component.html',\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, {\n    chartTypeInp: [{\n      type: Input\n    }],\n    viewStateInp: [{\n      type: Input\n    }],\n    chartTitleInp: [{\n      type: Input\n    }],\n    dataInp: [{\n      type: Input\n    }]\n  });\n})();\nclass BasicAreaLineBarModule {}\nBasicAreaLineBarModule.ɵfac = function BasicAreaLineBarModule_Factory(t) {\n  return new (t || BasicAreaLineBarModule)();\n};\nBasicAreaLineBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BasicAreaLineBarModule\n});\nBasicAreaLineBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, NgxEchartsModule.forRoot({\n    echarts: () => import('echarts')\n  })]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BasicAreaLineBarModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [BasicAreaLineBarComponent],\n      imports: [CommonModule, NgxEchartsModule.forRoot({\n        echarts: () => import('echarts')\n      })],\n      exports: [BasicAreaLineBarComponent]\n    }]\n  }], null, null);\n})();\n\n// /tsc-library/\nclass DoughnutComponent {\n  constructor() {}\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes.viewStateInp && this.viewStateInp) {\n      this.viewState = this.viewStateInp;\n    }\n    if (changes.chartTitleInp && this.chartTitleInp) {\n      this.chartTitle = this.chartTitleInp;\n    }\n    if (changes.dataInp && this.dataInp) {\n      this.chartData = this.dataInp;\n    }\n    this.noDataOption = {\n      title: {\n        text: this.chartTitle.name,\n        textStyle: {\n          color: this.chartTitle.color\n        },\n        padding: [7, 0, 0, 20]\n      },\n      graphic: NO_DATA_GRAPHIC,\n      xAxis: {\n        show: false\n      },\n      yAxis: {\n        show: false\n      }\n    };\n    this.checkData();\n  }\n  checkData() {\n    if (this.viewState == ChartViewStateEnum.LOADING) {\n      this.dataOption = LOADING_GRAPHIC;\n    } else if (this.viewState == ChartViewStateEnum.HAS_DATA) {\n      this.drawChart();\n    } else if (this.viewState == ChartViewStateEnum.NO_DATA) {\n      this.dataOption = this.noDataOption;\n    }\n  }\n  drawChart() {\n    this.dataOption = {\n      toolbox: {\n        feature: {\n          dataView: {\n            show: this.chartData.showDataView,\n            readOnly: true\n          },\n          restore: {\n            show: this.chartData.showRestore\n          },\n          saveAsImage: {\n            show: this.chartData.showDownloadImage\n          }\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        formatter: function (params) {\n          let tooltip = '';\n          tooltip += '<b><span class=\"text-primary\">' + params.data.name + '</span></b><br />';\n          tooltip += 'Value: <b><span style=\"float: right; margin-left:15px;\">' + (params.data.value != null ? params.data.value + ' ' + params.data.unit.code : COMMON_CONSTANT.HYPHEN) + '</span></b>';\n          return tooltip;\n        }\n      },\n      title: {\n        show: true,\n        text: `${this.chartTitle.name}`,\n        textStyle: {\n          color: this.chartTitle.color\n        },\n        padding: [7, 0, 0, 20]\n      },\n      legend: {\n        bottom: '1%',\n        left: 'center'\n      },\n      series: [{\n        name: '',\n        type: 'pie',\n        radius: ['40%', '70%'],\n        avoidLabelOverlap: false,\n        itemStyle: {\n          borderRadius: 10,\n          borderColor: '#fff',\n          borderWidth: 2\n        },\n        label: {\n          show: false,\n          position: 'center'\n        },\n        emphasis: {\n          label: {\n            show: false,\n            fontSize: 40,\n            fontWeight: 'bold'\n          }\n        },\n        labelLine: {\n          show: false\n        },\n        data: this.chartData.metaData\n      }]\n    };\n  }\n}\nDoughnutComponent.ɵfac = function DoughnutComponent_Factory(t) {\n  return new (t || DoughnutComponent)();\n};\nDoughnutComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DoughnutComponent,\n  selectors: [[\"lib-doughnut\"]],\n  inputs: {\n    viewStateInp: \"viewStateInp\",\n    chartTitleInp: \"chartTitleInp\",\n    dataInp: \"dataInp\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"echarts\", \"\", 3, \"options\"]],\n  template: function DoughnutComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"options\", ctx.dataOption);\n    }\n  },\n  directives: [i1.NgxEchartsDirective],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DoughnutComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-doughnut',\n      templateUrl: './doughnut.component.html',\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, {\n    viewStateInp: [{\n      type: Input\n    }],\n    chartTitleInp: [{\n      type: Input\n    }],\n    dataInp: [{\n      type: Input\n    }]\n  });\n})();\nclass DoughnutModule {}\nDoughnutModule.ɵfac = function DoughnutModule_Factory(t) {\n  return new (t || DoughnutModule)();\n};\nDoughnutModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DoughnutModule\n});\nDoughnutModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, NgxEchartsModule.forRoot({\n    echarts: () => import('echarts')\n  })]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DoughnutModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [DoughnutComponent],\n      imports: [CommonModule, NgxEchartsModule.forRoot({\n        echarts: () => import('echarts')\n      })],\n      exports: [DoughnutComponent]\n    }]\n  }], null, null);\n})();\n\n// /tsc-library/\nclass StackBarComponent {\n  constructor() {}\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes.viewStateInp && this.viewStateInp) {\n      this.viewState = this.viewStateInp;\n    }\n    if (changes.chartTitleInp && this.chartTitleInp) {\n      this.chartTitle = this.chartTitleInp;\n    }\n    if (changes.dataInp && this.dataInp) {\n      this.chartData = this.dataInp;\n    }\n    this.noDataOption = {\n      title: {\n        text: this.chartTitle.name,\n        textStyle: {\n          color: this.chartTitle.color\n        },\n        padding: [7, 0, 0, 20]\n      },\n      graphic: NO_DATA_GRAPHIC,\n      xAxis: {\n        show: false\n      },\n      yAxis: {\n        show: false\n      }\n    };\n    this.checkData();\n  }\n  checkData() {\n    if (this.viewState == ChartViewStateEnum.LOADING) {\n      this.dataOption = LOADING_GRAPHIC;\n    } else if (this.viewState == ChartViewStateEnum.HAS_DATA) {\n      this.drawChart();\n    } else if (this.viewState == ChartViewStateEnum.NO_DATA) {\n      this.dataOption = this.noDataOption;\n    }\n  }\n  drawChart() {\n    let seriesData = [];\n    this.chartData.metaData.forEach(item => {\n      item.barData.forEach(bar => {\n        let seriesIndex = seriesData.findIndex(series => series.name == bar.name);\n        if (seriesIndex == -1) {\n          seriesData.push({\n            name: bar.name,\n            type: 'bar',\n            stack: 'ad',\n            data: []\n          });\n          seriesIndex = seriesData.length - 1;\n        }\n        seriesData[seriesIndex].data.push(bar.value);\n      });\n    });\n    let chartData = this.chartData;\n    let tooltipHeaderLabel = this.chartData.tooltipHeaderLabel;\n    let totalDataLabel = this.chartData.totalDataLabel;\n    let totalDataValue = this.chartData.metaData.map(item => item.totalData.value);\n    let totalDataUnit = this.chartData.metaData.map(item => item.totalData.unitCode);\n    this.dataOption = {\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        formatter: function (params) {\n          const dataIndex = params[0].dataIndex;\n          let tooltip = '';\n          params.forEach(function (param) {\n            tooltip += '<b><span class=\"text-primary\">' + param.name + '</span></b><br />';\n          });\n          if (tooltipHeaderLabel.trim() != '') {\n            tooltip += '<b style=\"font-size: 18px;\">' + tooltipHeaderLabel + '</b><br />';\n          }\n          tooltip += totalDataLabel + ': <b><span style=\"float:right; margin-left:15px;\">' + (totalDataValue[dataIndex] != null ? totalDataValue[dataIndex] + ' ' + totalDataUnit[dataIndex] : COMMON_CONSTANT.HYPHEN) + '</span></b><br />';\n          params.forEach(function (param) {\n            const barData = chartData.metaData[param.seriesIndex].barData.find(bar => bar.name == param.seriesName);\n            const unit = barData ? barData.unit.code : '';\n            tooltip += param.seriesName + ': <b><span style=\"float:right; margin-left:15px;\">' + (param.value != null ? param.value + ' ' + unit : COMMON_CONSTANT.HYPHEN) + '</span></b><br />';\n          });\n          return tooltip;\n        }\n      },\n      toolbox: {\n        feature: {\n          dataView: {\n            show: this.chartData.showDataView,\n            readOnly: true\n          },\n          magicType: {\n            show: this.chartData.showMagicType,\n            type: ['line']\n          },\n          restore: {\n            show: this.chartData.showRestore\n          },\n          saveAsImage: {\n            show: this.chartData.showDownloadImage\n          }\n        }\n      },\n      legend: {},\n      grid: {\n        top: '10%',\n        left: '7%',\n        right: '5%',\n        bottom: '10%',\n        containLabel: true\n      },\n      title: {\n        show: true,\n        text: `${this.chartTitle.name}`,\n        textStyle: {\n          color: this.chartTitle.color\n        },\n        padding: [7, 0, 0, 20]\n      },\n      xAxis: {\n        type: 'category',\n        data: this.chartData.metaData.map(item => item.xAxisSeries),\n        name: this.chartData.xAxisLabel,\n        nameLocation: 'middle',\n        nameGap: this.chartData.xAxisNameGap\n      },\n      yAxis: {\n        type: 'value',\n        name: this.chartData.yAxisLabel,\n        nameLocation: 'middle',\n        nameGap: this.chartData.yAxisNameGap\n      },\n      series: seriesData\n    };\n  }\n}\nStackBarComponent.ɵfac = function StackBarComponent_Factory(t) {\n  return new (t || StackBarComponent)();\n};\nStackBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: StackBarComponent,\n  selectors: [[\"lib-stack-bar\"]],\n  inputs: {\n    viewStateInp: \"viewStateInp\",\n    chartTitleInp: \"chartTitleInp\",\n    dataInp: \"dataInp\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"echarts\", \"\", 3, \"options\"]],\n  template: function StackBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"options\", ctx.dataOption);\n    }\n  },\n  directives: [i1.NgxEchartsDirective],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StackBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-stack-bar',\n      templateUrl: './stack-bar.component.html',\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, {\n    viewStateInp: [{\n      type: Input\n    }],\n    chartTitleInp: [{\n      type: Input\n    }],\n    dataInp: [{\n      type: Input\n    }]\n  });\n})();\nclass StackBarModule {}\nStackBarModule.ɵfac = function StackBarModule_Factory(t) {\n  return new (t || StackBarModule)();\n};\nStackBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StackBarModule\n});\nStackBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, NgxEchartsModule.forRoot({\n    echarts: () => import('echarts')\n  })]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StackBarModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [StackBarComponent],\n      imports: [CommonModule, NgxEchartsModule.forRoot({\n        echarts: () => import('echarts')\n      })],\n      exports: [StackBarComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of echart\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasicAreaLineBarChart, BasicAreaLineBarComponent, BasicAreaLineBarModule, ChartTitle, ChartTypeEnum, ChartViewStateEnum, DoughnutChart, DoughnutComponent, DoughnutModule, EchartComponent, EchartModule, EchartService, LOADING_GRAPHIC, NO_DATA_GRAPHIC, StackBarChart, StackBarComponent, StackBarModule };","map":{"version":3,"names":["i0","Injectable","Component","NgModule","Input","COMMON_CONSTANT","CommonModule","i1","NgxEchartsModule","EchartService","constructor","ɵfac","EchartService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","EchartComponent","ngOnInit","EchartComponent_Factory","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","EchartComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","encapsulation","selector","styles","EchartModule","EchartModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","LOADING_GRAPHIC","graphic","elements","left","top","children","Array","fill","map","val","i","x","shape","y","width","height","style","keyframeAnimation","duration","delay","loop","keyframes","percent","scaleY","easing","NO_DATA_GRAPHIC","fontSize","text","NO_DATA","ChartTypeEnum","ChartViewStateEnum","ChartTitle","name","color","BasicAreaLineBarChart","chartTitle","metaData","unit","code","markLine","xAxisLabel","yAxisLabel","xAxisNameGap","yAxisNameGap","showDataZoomSlider","showDataView","showMagicType","showRestore","showDownloadImage","DoughnutChart","StackBarChart","tooltipHeaderLabel","totalDataLabel","BasicAreaLineBarComponent","chartType","BASIC_LINE_CHART","ngOnChanges","changes","viewStateInp","viewState","chartTitleInp","chartTypeInp","dataInp","chartData","noDataOption","title","textStyle","padding","xAxis","show","yAxis","checkData","LOADING","dataOption","HAS_DATA","drawChart","_a","_b","toolbox","feature","dataView","readOnly","magicType","restore","saveAsImage","tooltip","trigger","axisPointer","formatter","params","value","HYPHEN","grid","right","bottom","containLabel","dataZoom","filterMode","boundaryGap","BASIC_BAR_CHART","data","item","nameLocation","nameGap","series","barWidth","label","position","areaStyle","BASIC_AREA_CHART","lineStyle","offset","BasicAreaLineBarComponent_Factory","inputs","features","ɵɵNgOnChangesFeature","consts","BasicAreaLineBarComponent_Template","ɵɵelement","ɵɵproperty","directives","NgxEchartsDirective","templateUrl","BasicAreaLineBarModule","BasicAreaLineBarModule_Factory","forRoot","echarts","DoughnutComponent","legend","radius","avoidLabelOverlap","itemStyle","borderRadius","borderColor","borderWidth","emphasis","fontWeight","labelLine","DoughnutComponent_Factory","DoughnutComponent_Template","DoughnutModule","DoughnutModule_Factory","StackBarComponent","seriesData","forEach","barData","bar","seriesIndex","findIndex","push","stack","length","totalDataValue","totalData","totalDataUnit","unitCode","dataIndex","param","trim","find","seriesName","xAxisSeries","StackBarComponent_Factory","StackBarComponent_Template","StackBarModule","StackBarModule_Factory"],"sources":["/home/silori/projects/gitClones/netzero-ui/library/echart/fesm2015/library-echart.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Input } from '@angular/core';\nimport { COMMON_CONSTANT } from '@library/tsc-common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from 'ngx-echarts';\nimport { NgxEchartsModule } from 'ngx-echarts';\n\nclass EchartService {\n    constructor() { }\n}\nEchartService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nEchartService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass EchartComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n}\nEchartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEchartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: EchartComponent, selector: \"lib-echart\", ngImport: i0, template: `\n    <p>\n      echart works!\n    </p>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-echart',\n                    template: `\n    <p>\n      echart works!\n    </p>\n  `,\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass EchartModule {\n}\nEchartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nEchartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartModule, declarations: [EchartComponent], exports: [EchartComponent] });\nEchartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: EchartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        EchartComponent\n                    ],\n                    imports: [],\n                    exports: [\n                        EchartComponent\n                    ]\n                }]\n        }] });\n\n// tsc-library\n// /tsc-library/\nconst LOADING_GRAPHIC = {\n    graphic: {\n        elements: [\n            {\n                type: 'group',\n                left: 'center',\n                top: 'center',\n                children: new Array(7).fill(0).map((val, i) => ({\n                    type: 'rect',\n                    x: i * 20,\n                    shape: {\n                        x: 0,\n                        y: -40,\n                        width: 10,\n                        height: 80\n                    },\n                    style: { fill: '#0E2F44' },\n                    keyframeAnimation: {\n                        duration: 1000,\n                        delay: i * 200,\n                        loop: true,\n                        keyframes: [\n                            {\n                                percent: 0.5,\n                                scaleY: 0.3,\n                                easing: 'cubicIn'\n                            },\n                            {\n                                percent: 1,\n                                scaleY: 1,\n                                easing: 'cubicOut'\n                            }\n                        ]\n                    }\n                }))\n            }\n        ]\n    }\n};\nconst NO_DATA_GRAPHIC = {\n    type: 'text',\n    left: 'center',\n    top: 'middle',\n    style: {\n        fill: '#6c757d',\n        fontSize: 25,\n        text: COMMON_CONSTANT.NO_DATA,\n    }\n};\n\nvar ChartTypeEnum;\n(function (ChartTypeEnum) {\n    ChartTypeEnum[\"BASIC_LINE_CHART\"] = \"BASIC_LINE_CHART\";\n    ChartTypeEnum[\"BASIC_AREA_CHART\"] = \"BASIC_AREA_CHART\";\n    ChartTypeEnum[\"BASIC_BAR_CHART\"] = \"BASIC_BAR_CHART\";\n})(ChartTypeEnum || (ChartTypeEnum = {}));\nvar ChartViewStateEnum;\n(function (ChartViewStateEnum) {\n    ChartViewStateEnum[\"HAS_DATA\"] = \"HAS_DATA\";\n    ChartViewStateEnum[\"NO_DATA\"] = \"NO_DATA\";\n    ChartViewStateEnum[\"LOADING\"] = \"LOADING\";\n})(ChartViewStateEnum || (ChartViewStateEnum = {}));\n\nclass ChartTitle {\n    constructor() {\n        this.name = '';\n        this.color = 'black';\n    }\n}\n\nclass BasicAreaLineBarChart {\n    constructor() {\n        this.chartTitle = {\n            name: '',\n            color: 'black',\n        };\n        this.metaData = [];\n        this.unit = {\n            name: '',\n            code: '',\n        };\n        this.markLine = [];\n        this.xAxisLabel = '';\n        this.yAxisLabel = '';\n        this.xAxisNameGap = 40;\n        this.yAxisNameGap = 40;\n        this.showDataZoomSlider = false;\n        this.showDataView = false;\n        this.showMagicType = false;\n        this.showRestore = false;\n        this.showDownloadImage = false;\n    }\n}\n\nclass DoughnutChart {\n    constructor() {\n        this.metaData = [];\n        this.showDataView = false;\n        this.showRestore = false;\n        this.showDownloadImage = false;\n    }\n}\n\nclass StackBarChart {\n    constructor() {\n        this.metaData = [];\n        this.tooltipHeaderLabel = '';\n        this.totalDataLabel = '';\n        this.xAxisLabel = '';\n        this.yAxisLabel = '';\n        this.xAxisNameGap = 40;\n        this.yAxisNameGap = 40;\n        this.showDataZoomSlider = false;\n        this.showDataView = false;\n        this.showMagicType = false;\n        this.showRestore = false;\n        this.showDownloadImage = false;\n    }\n}\n\n// /tsc-library/\nclass BasicAreaLineBarComponent {\n    constructor() {\n        this.chartType = ChartTypeEnum.BASIC_LINE_CHART;\n    }\n    ngOnInit() {\n    }\n    ngOnChanges(changes) {\n        if (changes.viewStateInp && this.viewStateInp) {\n            this.viewState = this.viewStateInp;\n        }\n        if (changes.chartTitleInp && this.chartTitleInp) {\n            this.chartTitle = this.chartTitleInp;\n        }\n        if (changes.chartTypeInp && this.chartTypeInp) {\n            this.chartType = this.chartTypeInp;\n        }\n        if (changes.dataInp && this.dataInp) {\n            this.chartData = this.dataInp;\n        }\n        this.noDataOption = {\n            title: {\n                text: this.chartTitle.name,\n                textStyle: {\n                    color: this.chartTitle.color\n                },\n                padding: [7, 0, 0, 20],\n            },\n            graphic: NO_DATA_GRAPHIC,\n            xAxis: { show: false },\n            yAxis: { show: false },\n        };\n        this.checkData();\n    }\n    checkData() {\n        if (this.viewState == ChartViewStateEnum.LOADING) {\n            this.dataOption = LOADING_GRAPHIC;\n        }\n        else if (this.viewState == ChartViewStateEnum.HAS_DATA) {\n            this.drawChart();\n        }\n        else if (this.viewState == ChartViewStateEnum.NO_DATA) {\n            this.dataOption = this.noDataOption;\n        }\n    }\n    drawChart() {\n        var _a, _b;\n        const unit = this.chartData.unit.code;\n        this.dataOption = {\n            toolbox: {\n                feature: {\n                    dataView: { show: this.chartData.showDataView, readOnly: true },\n                    magicType: { show: this.chartData.showMagicType, type: ['line', 'bar'] },\n                    restore: { show: this.chartData.showRestore },\n                    saveAsImage: { show: this.chartData.showDownloadImage },\n                }\n            },\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    type: 'shadow'\n                },\n                formatter: function (params) {\n                    let tooltip = '';\n                    tooltip += '<b><span class=\"text-primary\">' + params[0].name + '</span></b><br />';\n                    tooltip += 'Value: <b><span style=\"float: right; margin-left:15px;\">' + (params[0].value != null ? (params[0].value) + ' ' + unit : COMMON_CONSTANT.HYPHEN) + '</span></b>';\n                    return tooltip;\n                }\n            },\n            grid: {\n                top: '10%',\n                left: '7%',\n                right: '5%',\n                bottom: '10%',\n                containLabel: true\n            },\n            dataZoom: [\n                {\n                    type: 'slider',\n                    filterMode: 'none',\n                    show: this.chartData.showDataZoomSlider\n                },\n                {\n                    type: 'inside',\n                    filterMode: 'none',\n                    show: this.chartData.showDataZoomSlider\n                }\n            ],\n            title: {\n                show: true,\n                text: `${this.chartTitle.name}`,\n                textStyle: {\n                    color: this.chartTitle.color\n                },\n                padding: [7, 0, 0, 20],\n            },\n            xAxis: {\n                type: 'category',\n                boundaryGap: this.chartType == ChartTypeEnum.BASIC_BAR_CHART ? true : false,\n                data: this.chartData.metaData.map(item => item.name),\n                name: this.chartData.xAxisLabel,\n                nameLocation: 'middle',\n                nameGap: this.chartData.xAxisNameGap\n            },\n            yAxis: {\n                type: 'value',\n                name: this.chartData.yAxisLabel,\n                nameLocation: 'middle',\n                nameGap: this.chartData.yAxisNameGap\n            },\n            series: [\n                {\n                    barWidth: '40%',\n                    label: {\n                        show: this.chartType == ChartTypeEnum.BASIC_BAR_CHART ? true : false,\n                        position: 'top'\n                    },\n                    data: this.chartData.metaData.map(item => item.value),\n                    type: this.chartType == ChartTypeEnum.BASIC_BAR_CHART ? 'bar' : 'line',\n                    areaStyle: this.chartType == ChartTypeEnum.BASIC_AREA_CHART ? {} : null,\n                    markLine: {\n                        data: (_b = (_a = this.chartData) === null || _a === void 0 ? void 0 : _a.markLine) === null || _b === void 0 ? void 0 : _b.map(item => ({\n                            lineStyle: {\n                                type: 'dashed',\n                                color: `${item.color}`,\n                            },\n                            label: {\n                                formatter: `${item.label} : ${item.value}`,\n                                position: 'middle',\n                                offset: [0, 5]\n                            },\n                            yAxis: item.value\n                        }))\n                    },\n                }\n            ]\n        };\n    }\n}\nBasicAreaLineBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: BasicAreaLineBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBasicAreaLineBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: BasicAreaLineBarComponent, selector: \"lib-basic-area-line-bar\", inputs: { chartTypeInp: \"chartTypeInp\", viewStateInp: \"viewStateInp\", chartTitleInp: \"chartTitleInp\", dataInp: \"dataInp\" }, usesOnChanges: true, ngImport: i0, template: \"<div echarts [options]=\\\"dataOption\\\"></div>\", directives: [{ type: i1.NgxEchartsDirective, selector: \"echarts, [echarts]\", inputs: [\"options\", \"theme\", \"loading\", \"initOpts\", \"merge\", \"autoResize\", \"loadingType\", \"loadingOpts\"], outputs: [\"chartInit\", \"optionsError\", \"chartClick\", \"chartDblClick\", \"chartMouseDown\", \"chartMouseMove\", \"chartMouseUp\", \"chartMouseOver\", \"chartMouseOut\", \"chartGlobalOut\", \"chartContextMenu\", \"chartLegendSelectChanged\", \"chartLegendSelected\", \"chartLegendUnselected\", \"chartLegendScroll\", \"chartDataZoom\", \"chartDataRangeSelected\", \"chartTimelineChanged\", \"chartTimelinePlayChanged\", \"chartRestore\", \"chartDataViewChanged\", \"chartMagicTypeChanged\", \"chartPieSelectChanged\", \"chartPieSelected\", \"chartPieUnselected\", \"chartMapSelectChanged\", \"chartMapSelected\", \"chartMapUnselected\", \"chartAxisAreaSelected\", \"chartFocusNodeAdjacency\", \"chartUnfocusNodeAdjacency\", \"chartBrush\", \"chartBrushEnd\", \"chartBrushSelected\", \"chartRendered\", \"chartFinished\"], exportAs: [\"echarts\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: BasicAreaLineBarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-basic-area-line-bar',\n                    templateUrl: './basic-area-line-bar.component.html',\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { chartTypeInp: [{\n                type: Input\n            }], viewStateInp: [{\n                type: Input\n            }], chartTitleInp: [{\n                type: Input\n            }], dataInp: [{\n                type: Input\n            }] } });\n\nclass BasicAreaLineBarModule {\n}\nBasicAreaLineBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: BasicAreaLineBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBasicAreaLineBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: BasicAreaLineBarModule, declarations: [BasicAreaLineBarComponent], imports: [CommonModule, i1.NgxEchartsModule], exports: [BasicAreaLineBarComponent] });\nBasicAreaLineBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: BasicAreaLineBarModule, imports: [[\n            CommonModule,\n            NgxEchartsModule.forRoot({\n                echarts: () => import('echarts')\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: BasicAreaLineBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        BasicAreaLineBarComponent\n                    ],\n                    imports: [\n                        CommonModule,\n                        NgxEchartsModule.forRoot({\n                            echarts: () => import('echarts')\n                        }),\n                    ],\n                    exports: [\n                        BasicAreaLineBarComponent\n                    ]\n                }]\n        }] });\n\n// /tsc-library/\nclass DoughnutComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n    ngOnChanges(changes) {\n        if (changes.viewStateInp && this.viewStateInp) {\n            this.viewState = this.viewStateInp;\n        }\n        if (changes.chartTitleInp && this.chartTitleInp) {\n            this.chartTitle = this.chartTitleInp;\n        }\n        if (changes.dataInp && this.dataInp) {\n            this.chartData = this.dataInp;\n        }\n        this.noDataOption = {\n            title: {\n                text: this.chartTitle.name,\n                textStyle: {\n                    color: this.chartTitle.color\n                },\n                padding: [7, 0, 0, 20],\n            },\n            graphic: NO_DATA_GRAPHIC,\n            xAxis: { show: false },\n            yAxis: { show: false },\n        };\n        this.checkData();\n    }\n    checkData() {\n        if (this.viewState == ChartViewStateEnum.LOADING) {\n            this.dataOption = LOADING_GRAPHIC;\n        }\n        else if (this.viewState == ChartViewStateEnum.HAS_DATA) {\n            this.drawChart();\n        }\n        else if (this.viewState == ChartViewStateEnum.NO_DATA) {\n            this.dataOption = this.noDataOption;\n        }\n    }\n    drawChart() {\n        this.dataOption = {\n            toolbox: {\n                feature: {\n                    dataView: { show: this.chartData.showDataView, readOnly: true },\n                    restore: { show: this.chartData.showRestore },\n                    saveAsImage: { show: this.chartData.showDownloadImage },\n                }\n            },\n            tooltip: {\n                trigger: 'item',\n                formatter: function (params) {\n                    let tooltip = '';\n                    tooltip += '<b><span class=\"text-primary\">' + params.data.name + '</span></b><br />';\n                    tooltip += 'Value: <b><span style=\"float: right; margin-left:15px;\">' + (params.data.value != null ? (params.data.value) + ' ' + params.data.unit.code : COMMON_CONSTANT.HYPHEN) + '</span></b>';\n                    return tooltip;\n                }\n            },\n            title: {\n                show: true,\n                text: `${this.chartTitle.name}`,\n                textStyle: {\n                    color: this.chartTitle.color\n                },\n                padding: [7, 0, 0, 20],\n            },\n            legend: {\n                bottom: '1%',\n                left: 'center'\n            },\n            series: [\n                {\n                    name: '',\n                    type: 'pie',\n                    radius: ['40%', '70%'],\n                    avoidLabelOverlap: false,\n                    itemStyle: {\n                        borderRadius: 10,\n                        borderColor: '#fff',\n                        borderWidth: 2\n                    },\n                    label: {\n                        show: false,\n                        position: 'center'\n                    },\n                    emphasis: {\n                        label: {\n                            show: false,\n                            fontSize: 40,\n                            fontWeight: 'bold'\n                        }\n                    },\n                    labelLine: {\n                        show: false\n                    },\n                    data: this.chartData.metaData,\n                }\n            ]\n        };\n    }\n}\nDoughnutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DoughnutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDoughnutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: DoughnutComponent, selector: \"lib-doughnut\", inputs: { viewStateInp: \"viewStateInp\", chartTitleInp: \"chartTitleInp\", dataInp: \"dataInp\" }, usesOnChanges: true, ngImport: i0, template: \"<div echarts [options]=\\\"dataOption\\\"></div>\", directives: [{ type: i1.NgxEchartsDirective, selector: \"echarts, [echarts]\", inputs: [\"options\", \"theme\", \"loading\", \"initOpts\", \"merge\", \"autoResize\", \"loadingType\", \"loadingOpts\"], outputs: [\"chartInit\", \"optionsError\", \"chartClick\", \"chartDblClick\", \"chartMouseDown\", \"chartMouseMove\", \"chartMouseUp\", \"chartMouseOver\", \"chartMouseOut\", \"chartGlobalOut\", \"chartContextMenu\", \"chartLegendSelectChanged\", \"chartLegendSelected\", \"chartLegendUnselected\", \"chartLegendScroll\", \"chartDataZoom\", \"chartDataRangeSelected\", \"chartTimelineChanged\", \"chartTimelinePlayChanged\", \"chartRestore\", \"chartDataViewChanged\", \"chartMagicTypeChanged\", \"chartPieSelectChanged\", \"chartPieSelected\", \"chartPieUnselected\", \"chartMapSelectChanged\", \"chartMapSelected\", \"chartMapUnselected\", \"chartAxisAreaSelected\", \"chartFocusNodeAdjacency\", \"chartUnfocusNodeAdjacency\", \"chartBrush\", \"chartBrushEnd\", \"chartBrushSelected\", \"chartRendered\", \"chartFinished\"], exportAs: [\"echarts\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DoughnutComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-doughnut',\n                    templateUrl: './doughnut.component.html',\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { viewStateInp: [{\n                type: Input\n            }], chartTitleInp: [{\n                type: Input\n            }], dataInp: [{\n                type: Input\n            }] } });\n\nclass DoughnutModule {\n}\nDoughnutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DoughnutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDoughnutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DoughnutModule, declarations: [DoughnutComponent], imports: [CommonModule, i1.NgxEchartsModule], exports: [DoughnutComponent] });\nDoughnutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DoughnutModule, imports: [[\n            CommonModule,\n            NgxEchartsModule.forRoot({\n                echarts: () => import('echarts')\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DoughnutModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        DoughnutComponent\n                    ],\n                    imports: [\n                        CommonModule,\n                        NgxEchartsModule.forRoot({\n                            echarts: () => import('echarts')\n                        }),\n                    ],\n                    exports: [\n                        DoughnutComponent\n                    ]\n                }]\n        }] });\n\n// /tsc-library/\nclass StackBarComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n    ngOnChanges(changes) {\n        if (changes.viewStateInp && this.viewStateInp) {\n            this.viewState = this.viewStateInp;\n        }\n        if (changes.chartTitleInp && this.chartTitleInp) {\n            this.chartTitle = this.chartTitleInp;\n        }\n        if (changes.dataInp && this.dataInp) {\n            this.chartData = this.dataInp;\n        }\n        this.noDataOption = {\n            title: {\n                text: this.chartTitle.name,\n                textStyle: {\n                    color: this.chartTitle.color\n                },\n                padding: [7, 0, 0, 20],\n            },\n            graphic: NO_DATA_GRAPHIC,\n            xAxis: { show: false },\n            yAxis: { show: false },\n        };\n        this.checkData();\n    }\n    checkData() {\n        if (this.viewState == ChartViewStateEnum.LOADING) {\n            this.dataOption = LOADING_GRAPHIC;\n        }\n        else if (this.viewState == ChartViewStateEnum.HAS_DATA) {\n            this.drawChart();\n        }\n        else if (this.viewState == ChartViewStateEnum.NO_DATA) {\n            this.dataOption = this.noDataOption;\n        }\n    }\n    drawChart() {\n        let seriesData = [];\n        this.chartData.metaData.forEach(item => {\n            item.barData.forEach(bar => {\n                let seriesIndex = seriesData.findIndex(series => series.name == bar.name);\n                if (seriesIndex == -1) {\n                    seriesData.push({\n                        name: bar.name,\n                        type: 'bar',\n                        stack: 'ad',\n                        data: []\n                    });\n                    seriesIndex = seriesData.length - 1;\n                }\n                seriesData[seriesIndex].data.push(bar.value);\n            });\n        });\n        let chartData = this.chartData;\n        let tooltipHeaderLabel = this.chartData.tooltipHeaderLabel;\n        let totalDataLabel = this.chartData.totalDataLabel;\n        let totalDataValue = this.chartData.metaData.map(item => item.totalData.value);\n        let totalDataUnit = this.chartData.metaData.map(item => item.totalData.unitCode);\n        this.dataOption = {\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    type: 'shadow'\n                },\n                formatter: function (params) {\n                    const dataIndex = params[0].dataIndex;\n                    let tooltip = '';\n                    params.forEach(function (param) {\n                        tooltip += '<b><span class=\"text-primary\">' + param.name + '</span></b><br />';\n                    });\n                    if (tooltipHeaderLabel.trim() != '') {\n                        tooltip += '<b style=\"font-size: 18px;\">' + tooltipHeaderLabel + '</b><br />';\n                    }\n                    tooltip += totalDataLabel + ': <b><span style=\"float:right; margin-left:15px;\">' + (totalDataValue[dataIndex] != null ? (totalDataValue[dataIndex]) + ' ' + totalDataUnit[dataIndex] : COMMON_CONSTANT.HYPHEN) + '</span></b><br />';\n                    params.forEach(function (param) {\n                        const barData = chartData.metaData[param.seriesIndex].barData.find(bar => bar.name == param.seriesName);\n                        const unit = barData ? barData.unit.code : '';\n                        tooltip += param.seriesName + ': <b><span style=\"float:right; margin-left:15px;\">' + (param.value != null ? (param.value) + ' ' + unit : COMMON_CONSTANT.HYPHEN) + '</span></b><br />';\n                    });\n                    return tooltip;\n                }\n            },\n            toolbox: {\n                feature: {\n                    dataView: { show: this.chartData.showDataView, readOnly: true },\n                    magicType: { show: this.chartData.showMagicType, type: ['line'] },\n                    restore: { show: this.chartData.showRestore },\n                    saveAsImage: { show: this.chartData.showDownloadImage },\n                }\n            },\n            legend: {},\n            grid: {\n                top: '10%',\n                left: '7%',\n                right: '5%',\n                bottom: '10%',\n                containLabel: true\n            },\n            title: {\n                show: true,\n                text: `${this.chartTitle.name}`,\n                textStyle: {\n                    color: this.chartTitle.color\n                },\n                padding: [7, 0, 0, 20],\n            },\n            xAxis: {\n                type: 'category',\n                data: this.chartData.metaData.map(item => item.xAxisSeries),\n                name: this.chartData.xAxisLabel,\n                nameLocation: 'middle',\n                nameGap: this.chartData.xAxisNameGap\n            },\n            yAxis: {\n                type: 'value',\n                name: this.chartData.yAxisLabel,\n                nameLocation: 'middle',\n                nameGap: this.chartData.yAxisNameGap\n            },\n            series: seriesData\n        };\n    }\n}\nStackBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: StackBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nStackBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: StackBarComponent, selector: \"lib-stack-bar\", inputs: { viewStateInp: \"viewStateInp\", chartTitleInp: \"chartTitleInp\", dataInp: \"dataInp\" }, usesOnChanges: true, ngImport: i0, template: \"<div echarts [options]=\\\"dataOption\\\"></div>\", directives: [{ type: i1.NgxEchartsDirective, selector: \"echarts, [echarts]\", inputs: [\"options\", \"theme\", \"loading\", \"initOpts\", \"merge\", \"autoResize\", \"loadingType\", \"loadingOpts\"], outputs: [\"chartInit\", \"optionsError\", \"chartClick\", \"chartDblClick\", \"chartMouseDown\", \"chartMouseMove\", \"chartMouseUp\", \"chartMouseOver\", \"chartMouseOut\", \"chartGlobalOut\", \"chartContextMenu\", \"chartLegendSelectChanged\", \"chartLegendSelected\", \"chartLegendUnselected\", \"chartLegendScroll\", \"chartDataZoom\", \"chartDataRangeSelected\", \"chartTimelineChanged\", \"chartTimelinePlayChanged\", \"chartRestore\", \"chartDataViewChanged\", \"chartMagicTypeChanged\", \"chartPieSelectChanged\", \"chartPieSelected\", \"chartPieUnselected\", \"chartMapSelectChanged\", \"chartMapSelected\", \"chartMapUnselected\", \"chartAxisAreaSelected\", \"chartFocusNodeAdjacency\", \"chartUnfocusNodeAdjacency\", \"chartBrush\", \"chartBrushEnd\", \"chartBrushSelected\", \"chartRendered\", \"chartFinished\"], exportAs: [\"echarts\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: StackBarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-stack-bar',\n                    templateUrl: './stack-bar.component.html',\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { viewStateInp: [{\n                type: Input\n            }], chartTitleInp: [{\n                type: Input\n            }], dataInp: [{\n                type: Input\n            }] } });\n\nclass StackBarModule {\n}\nStackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: StackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nStackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: StackBarModule, declarations: [StackBarComponent], imports: [CommonModule, i1.NgxEchartsModule], exports: [StackBarComponent] });\nStackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: StackBarModule, imports: [[\n            CommonModule,\n            NgxEchartsModule.forRoot({\n                echarts: () => import('echarts')\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: StackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        StackBarComponent\n                    ],\n                    imports: [\n                        CommonModule,\n                        NgxEchartsModule.forRoot({\n                            echarts: () => import('echarts')\n                        }),\n                    ],\n                    exports: [\n                        StackBarComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of echart\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasicAreaLineBarChart, BasicAreaLineBarComponent, BasicAreaLineBarModule, ChartTitle, ChartTypeEnum, ChartViewStateEnum, DoughnutChart, DoughnutComponent, DoughnutModule, EchartComponent, EchartModule, EchartService, LOADING_GRAPHIC, NO_DATA_GRAPHIC, StackBarChart, StackBarComponent, StackBarModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}