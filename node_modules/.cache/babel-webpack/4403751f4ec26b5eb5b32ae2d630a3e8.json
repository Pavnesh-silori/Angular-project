{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport * as i1$1 from '@library/storage-service';\nimport * as i1 from '@angular/common/http';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MATERIAL_CONSTANT } from '@library/tsc-common';\nfunction ExpiryAlertComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function ExpiryAlertComponent_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.hideSubscriptionMessage();\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRippleCentered\", ctx_r0.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"showSubscriptionMessage\": a0\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nlet SubscriptionServiceService = /*#__PURE__*/(() => {\n  class SubscriptionServiceService {\n    constructor() {}\n  }\n  SubscriptionServiceService.ɵfac = function SubscriptionServiceService_Factory(t) {\n    return new (t || SubscriptionServiceService)();\n  };\n  SubscriptionServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SubscriptionServiceService,\n    factory: SubscriptionServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubscriptionServiceService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SubscriptionServiceComponent = /*#__PURE__*/(() => {\n  class SubscriptionServiceComponent {\n    constructor() {}\n    ngOnInit() {}\n  }\n  SubscriptionServiceComponent.ɵfac = function SubscriptionServiceComponent_Factory(t) {\n    return new (t || SubscriptionServiceComponent)();\n  };\n  SubscriptionServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SubscriptionServiceComponent,\n    selectors: [[\"lib-subscription-service\"]],\n    decls: 2,\n    vars: 0,\n    template: function SubscriptionServiceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" subscription-service works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return SubscriptionServiceComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SubscriptionServiceModule = /*#__PURE__*/(() => {\n  class SubscriptionServiceModule {\n    static forRoot(environment) {\n      return {\n        ngModule: SubscriptionServiceModule,\n        providers: [{\n          provide: 'environment',\n          useValue: environment\n        }]\n      };\n    }\n  }\n  SubscriptionServiceModule.ɵfac = function SubscriptionServiceModule_Factory(t) {\n    return new (t || SubscriptionServiceModule)();\n  };\n  SubscriptionServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SubscriptionServiceModule\n  });\n  SubscriptionServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return SubscriptionServiceModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SUBSCRIPTION_CONSTANT = {\n  BILLING_PROFILE_DELETE: 'BILLING_PROFILE_DELETE'\n};\nvar PlanPriceType = /*#__PURE__*/(() => {\n  (function (PlanPriceType) {\n    PlanPriceType[\"PLAN_PRICE_TYPE_FREE\"] = \"FREE\";\n    PlanPriceType[\"PLAN_PRICE_TYPE_PAID\"] = \"PAID\";\n  })(PlanPriceType || (PlanPriceType = {}));\n  return PlanPriceType;\n})();\nvar PlanGroupType = /*#__PURE__*/(() => {\n  (function (PlanGroupType) {\n    PlanGroupType[\"PLAN_STANDALONE\"] = \"STANDALONE\";\n    PlanGroupType[\"PLAN_BUNDLED\"] = \"BUNDLED\";\n  })(PlanGroupType || (PlanGroupType = {}));\n  return PlanGroupType;\n})();\nclass ExpiringSubscriptionM {}\nlet SubscriptionController = /*#__PURE__*/(() => {\n  class SubscriptionController {\n    constructor(http, environment) {\n      this.http = http;\n      this.environment = environment;\n    }\n    orgPlanType(orgID) {\n      return this.http.get(`${this.environment.SUBSCRIPTION_API_URL}organizations/${orgID}/plan-type`);\n    }\n    getExpiringSubscription(orgID, applicationID) {\n      return this.http.get(`${this.environment.SUBSCRIPTION_API_URL}organizations/${orgID}/applications/${applicationID}/subscription/expiring`);\n    }\n  }\n  SubscriptionController.ɵfac = function SubscriptionController_Factory(t) {\n    return new (t || SubscriptionController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n  };\n  SubscriptionController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SubscriptionController,\n    factory: SubscriptionController.ɵfac,\n    providedIn: 'root'\n  });\n  return SubscriptionController;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SubscriptionService = /*#__PURE__*/(() => {\n  class SubscriptionService {\n    constructor(environment, storageService, subscriptionController) {\n      this.environment = environment;\n      this.storageService = storageService;\n      this.subscriptionController = subscriptionController;\n    }\n    orgPlanType(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let res;\n        try {\n          res = yield this.subscriptionController.orgPlanType(orgID).toPromise();\n          return res;\n        } catch (error) {\n          console.error('error in orgPlanType -', error);\n          return res;\n        }\n      });\n    }\n    redirectOnSubscriptionExpire() {\n      this.storageService.clearStorage();\n      window.location.href = this.environment.ADMIN_URL + 'subscription-new/active';\n    }\n    getExpiringSubscribtion(orgID, applicationID) {\n      let expiringSubscriptionM = new ExpiringSubscriptionM();\n      let expiringSubscription = new ExpiringSubscriptionM();\n      return new Promise(resolve => {\n        this.subscriptionController.getExpiringSubscription(orgID, applicationID).subscribe(res => {\n          expiringSubscriptionM = res;\n        }, error => {\n          expiringSubscriptionM = expiringSubscription;\n          console.error('error in getExpiringSubscribtion -', error);\n        }).add(() => {\n          resolve(expiringSubscriptionM);\n        });\n      });\n    }\n  }\n  SubscriptionService.ɵfac = function SubscriptionService_Factory(t) {\n    return new (t || SubscriptionService)(i0.ɵɵinject('environment'), i0.ɵɵinject(i1$1.StorageService), i0.ɵɵinject(SubscriptionController));\n  };\n  SubscriptionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SubscriptionService,\n    factory: SubscriptionService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubscriptionService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ExpiryAlertComponent = /*#__PURE__*/(() => {\n  class ExpiryAlertComponent {\n    constructor(\n    // public globals: ThemeOptions,\n    environment, subscriptionService, storageService) {\n      this.environment = environment;\n      this.subscriptionService = subscriptionService;\n      this.storageService = storageService;\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      this.showSubscriptionMessage = false;\n      this.message = '';\n      this.buyLink = this.environment.ADMIN_URL + 'subscription-new/active';\n      this.buyLinkMsg = \"Click <a href='\" + this.buyLink + \"' target='blank'>here</a> to buy a subscription.\";\n      this.expiredSubscribtionMsg = \"Your subscription is expired. \" + this.buyLinkMsg;\n      this.subscriptionM = new ExpiringSubscriptionM();\n    }\n    ngOnInit() {\n      this.rootOrgID = this.storageService.getStorage(['rootOrgID']);\n      this.applicationID = this.storageService.getStorage(['applicationID']);\n      this.getMessage(this.rootOrgID, this.applicationID);\n    }\n    getMessage(rootOrgID, applicationID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.subscriptionM = yield this.subscriptionService.getExpiringSubscribtion(rootOrgID, applicationID);\n        if (this.storageService.getStorage('hideSubscriptionMessage') != 'YES') {\n          if (this.subscriptionM.subscriptionDayLeft <= 10 || this.subscriptionM.priceType == PlanPriceType.PLAN_PRICE_TYPE_FREE) {\n            if (this.subscriptionM.subscriptionDayLeft == 0) {\n              this.message = `Your ${this.subscriptionM.planName} subscription expires today. ${this.buyLinkMsg}`;\n            } else if (this.subscriptionM.subscriptionDayLeft == 1) {\n              this.message = `Your ${this.subscriptionM.planName} subscription expires in ${this.subscriptionM.subscriptionDayLeft} day. ${this.buyLinkMsg}`;\n            } else if (this.subscriptionM.priceType == PlanPriceType.PLAN_PRICE_TYPE_FREE && this.subscriptionM.subscriptionDayLeft > 10) {\n              this.message = `You are currently on the ${this.subscriptionM.planName} subscription. ${this.buyLinkMsg}`;\n            } else if (this.subscriptionM.subscriptionDayLeft <= 10 && this.subscriptionM.subscriptionDayLeft >= 0) {\n              this.message = `Your ${this.subscriptionM.planName} subscription expires in ${this.subscriptionM.subscriptionDayLeft} days. ${this.buyLinkMsg}`;\n            } else if (this.subscriptionM.subscriptionDayLeft < 0) {\n              this.message = `Your ${this.subscriptionM.planName} subscription has expired. ${this.buyLinkMsg}`;\n            }\n            if (this.subscriptionM.priceType == PlanPriceType.PLAN_PRICE_TYPE_FREE) {\n              this.showCloseBtn = false;\n            } else if (this.subscriptionM.subscriptionDayLeft < 0) {\n              this.showCloseBtn = false;\n            } else {\n              this.showCloseBtn = true;\n            }\n            this.showSubscriptionMessage = true;\n            // this.globals.toggleSubscriptionExpiring = true;\n          }\n        }\n\n        if (this.subscriptionM.priceType == null) {\n          this.showSubscriptionMessage = false;\n        }\n      });\n    }\n    hideSubscriptionMessage() {\n      // this.globals.toggleSubscriptionExpiring = false;\n      this.storageService.setStorage('hideSubscriptionMessage', 'YES');\n      this.showSubscriptionMessage = !('YES' == this.storageService.getStorage('hideSubscriptionMessage'));\n    }\n  }\n  ExpiryAlertComponent.ɵfac = function ExpiryAlertComponent_Factory(t) {\n    return new (t || ExpiryAlertComponent)(i0.ɵɵdirectiveInject('environment'), i0.ɵɵdirectiveInject(SubscriptionService), i0.ɵɵdirectiveInject(i1$1.StorageService));\n  };\n  ExpiryAlertComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ExpiryAlertComponent,\n    selectors: [[\"lib-expiry-alert\"]],\n    decls: 4,\n    vars: 8,\n    consts: [[3, \"ngClass\"], [1, \"alert\", \"alert-danger\", \"subscriptionExpiringMessage\", \"centerAlign\", 3, \"ngClass\"], [1, \"text-light\", 3, \"innerHTML\"], [\"matRipple\", \"\", \"type\", \"button\", \"class\", \"btn-close rounded-circle btnCloseCustom pt-2\", 3, \"matRippleCentered\", \"click\", 4, \"ngIf\"], [\"matRipple\", \"\", \"type\", \"button\", 1, \"btn-close\", \"rounded-circle\", \"btnCloseCustom\", \"pt-2\", 3, \"matRippleCentered\", \"click\"]],\n    template: function ExpiryAlertComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"span\", 2);\n        i0.ɵɵtemplate(3, ExpiryAlertComponent_button_3_Template, 1, 1, \"button\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c0, ctx.showSubscriptionMessage));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c1, !ctx.showSubscriptionMessage));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"innerHTML\", ctx.message, i0.ɵɵsanitizeHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showCloseBtn);\n      }\n    },\n    directives: [i3.NgClass, i3.NgIf, i4.MatRipple],\n    styles: [\".showSubscriptionMessage[_ngcontent-%COMP%]{margin-bottom:50px!important}.subscriptionExpiringMessage[_ngcontent-%COMP%]{background-color:#b3261e;z-index:10;position:fixed;height:50px;width:100%;margin:0;border:none;border-radius:0}.btnCloseCustom[_ngcontent-%COMP%]{font-size:.7rem;position:absolute;right:12px}\"]\n  });\n  return ExpiryAlertComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ExpiryAlertModule = /*#__PURE__*/(() => {\n  class ExpiryAlertModule {}\n  ExpiryAlertModule.ɵfac = function ExpiryAlertModule_Factory(t) {\n    return new (t || ExpiryAlertModule)();\n  };\n  ExpiryAlertModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ExpiryAlertModule\n  });\n  ExpiryAlertModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatRippleModule, NgbModule]]\n  });\n  return ExpiryAlertModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of subscription-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ExpiryAlertComponent, ExpiryAlertModule, PlanGroupType, PlanPriceType, SUBSCRIPTION_CONSTANT, SubscriptionService, SubscriptionServiceComponent, SubscriptionServiceModule, SubscriptionServiceService };\n//# sourceMappingURL=library-subscription-service.js.map","map":null,"metadata":{},"sourceType":"module"}