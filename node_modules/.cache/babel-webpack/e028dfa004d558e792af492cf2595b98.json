{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\nimport { MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@carbon/service/activity.service\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/cdk/clipboard\";\nimport * as i11 from \"@angular/material/tooltip\";\nexport let ApiComponent = /*#__PURE__*/(() => {\n  class ApiComponent {\n    constructor(storageService, formBuilder, activatedRoute, activityService) {\n      this.formBuilder = formBuilder;\n      this.activatedRoute = activatedRoute;\n      this.activityService = activityService;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.enableApiFC = new FormControl(true);\n      this.apiKey = [];\n      this.validity = new EventEmitter();\n      this.apiKeySearchUtility = new MatSelectSearchService(['activityApiKey']);\n      this.isEqual = new EventEmitter();\n      this.hideApiKey = true;\n      this.currentOrgID = storageService.getStorage(['currentOrgID']);\n    }\n    ngOnInit() {\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        this.activityID = queryParams['activityID'];\n        this.getActivityByID(this.activityID);\n      });\n      this.apiFGInit();\n      // this.createApiEnabledSubscription();\n    }\n\n    valueUpdated(value) {\n      this.enableApiFC.patchValue(value);\n    }\n    createApiEnabledSubscription() {\n      this.enableApiFC.valueChanges.subscribe(enable => {\n        this.apiEnabledAC.patchValue(enable);\n        if (enable) this.apiFG.enable();else this.apiFG.disable();\n      });\n    }\n    apiFGInit() {\n      this.apiFG = this.formBuilder.group({\n        apiEnabled: [true],\n        apiKey: [{\n          value: uuidv4(),\n          disabled: true\n        }, Validators.required]\n      });\n    }\n    get apiEnabledAC() {\n      return this.apiFG.get('apiEnabled');\n    }\n    get apiKeyAC() {\n      return this.apiFG.get('apiKey');\n    }\n    getActivityByID(activityID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.activity = yield this.activityService.getActivityByID(activityID);\n        this.activityKeyID = this.activity['keyID'];\n      });\n    }\n    apiValidity() {\n      this.apiFG.valueChanges.subscribe(() => this.validity.emit(!this.apiFG.invalid));\n    }\n    patchApi(apiEnabled, api) {\n      this.apiFG.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.apiFG.getRawValue()));\n      });\n      this.enableApiFC.patchValue(apiEnabled);\n      if (apiEnabled && api != null) {\n        this.apiFG.patchValue({\n          apiKey: api['apiKey']\n        });\n      }\n      this.isEqual.next(true);\n      this.initialObject = this.apiFG.getRawValue();\n    }\n    isValidForm() {\n      if (this.apiFG.invalid) {\n        this.apiFG.markAllAsTouched();\n        console.log('invalid form -', this.apiFG);\n        return false;\n      }\n      return true;\n    }\n  }\n  ApiComponent.ɵfac = function ApiComponent_Factory(t) {\n    return new (t || ApiComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.ActivityService));\n  };\n  ApiComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ApiComponent,\n    selectors: [[\"app-api\"]],\n    outputs: {\n      isEqual: \"isEqual\"\n    },\n    decls: 16,\n    vars: 5,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-3\"], [1, \"row\"], [1, \"col-sm-7\"], [3, \"formGroup\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [\"matInput\", \"\", \"placeholder\", \"Api key id\", \"formControlName\", \"apiKey\", 1, \"formPlaceholder\", 3, \"type\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matSuffix\", \"\", 1, \"text-secondary\", \"eyeIcon\", 3, \"click\"], [\"matIcon\", \"\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matSuffix\", \"\", 1, \"ms-1\", \"text-secondary\", \"eyeIcon\", 3, \"cdkCopyToClipboard\"], [\"matIcon\", \"\", \"matTooltipPosition\", \"above\", \"matTooltip\", \"copy to clipboard\"]],\n    template: function ApiComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Automate Data Sharing via API \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"form\", 4);\n        i0.ɵɵelementStart(6, \"mat-form-field\", 5);\n        i0.ɵɵelementStart(7, \"mat-label\");\n        i0.ɵɵtext(8, \" Api key id \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 6);\n        i0.ɵɵelementStart(10, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function ApiComponent_Template_button_click_10_listener() {\n          return ctx.hideApiKey = !ctx.hideApiKey;\n        });\n        i0.ɵɵelementStart(11, \"mat-icon\", 8);\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 9);\n        i0.ɵɵelementStart(14, \"mat-icon\", 10);\n        i0.ɵɵtext(15, \" content_copy \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.apiFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"type\", ctx.hideApiKey ? \"password\" : \"text\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.hideApiKey ? \"visibility_off\" : \"visibility\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"cdkCopyToClipboard\", ctx.apiKeyAC.value);\n      }\n    },\n    directives: [i5.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i6.MatFormField, i6.MatLabel, i7.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i8.MatButton, i6.MatSuffix, i9.MatIcon, i10.CdkCopyToClipboard, i11.MatTooltip],\n    encapsulation: 2\n  });\n  return ApiComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}