{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { ActivityConfig } from '@carbon/component/activity-config/activity-config';\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\nimport { DataInputMethod, DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport { PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM, PROCESS_OUTPUT_ENUM } from '@netzero/enum/process.enum';\n// tsc-library\nimport { COMMON_CONSTANT, MatSelectSearchService } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@carbon/service/data-input-method.service\";\nimport * as i4 from \"@carbon/service/process.service\";\nimport * as i5 from \"@library/storage-service\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@library/unit-service\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"ngx-mat-select-search\";\nimport * as i14 from \"@angular/material/radio\";\nimport * as i15 from \"@angular/material/input\";\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_6_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 20);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 7);\n    i0.ɵɵelementStart(2, \"mat-label\", 8);\n    i0.ɵɵtext(3, \"Activity Form Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 21);\n    i0.ɵɵtemplate(5, ProductionLevelActivityConfigCreateComponent_ng_container_6_mat_error_5_Template, 2, 1, \"mat-error\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandling(ctx_r0.activityConfigFG, \"activityConfig.configName\", \"required\"));\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const process_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", process_r10.recordID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", process_r10.name, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_23_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 24);\n    i0.ɵɵelementStart(3, \"li\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entities_r12 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(entities_r12.name);\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProductionLevelActivityConfigCreateComponent_ng_container_23_div_1_Template, 5, 1, \"div\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.entity);\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_mat_radio_button_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-radio-button\", 25);\n    i0.ɵɵlistener(\"change\", function ProductionLevelActivityConfigCreateComponent_mat_radio_button_28_Template_mat_radio_button_change_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const input_r14 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.dataInputMethodChange(input_r14.keyID);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", input_r14.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r14.name, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.FormErrorEnum.NEGATIVE, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r18.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r21 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r21.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r21.name, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_container_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 26);\n    i0.ɵɵelementStart(2, \"div\", 27);\n    i0.ɵɵelementStart(3, \"mat-form-field\", 7);\n    i0.ɵɵelementStart(4, \"mat-label\", 8);\n    i0.ɵɵtext(5, \"Meter Rollover Value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 28);\n    i0.ɵɵtemplate(7, ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_error_7_Template, 2, 1, \"mat-error\", 12);\n    i0.ɵɵtemplate(8, ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_error_8_Template, 2, 1, \"mat-error\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 13);\n    i0.ɵɵelementStart(10, \"mat-form-field\", 7);\n    i0.ɵɵelementStart(11, \"mat-label\", 8);\n    i0.ɵɵtext(12, \"Select Meter Unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-select\", 29);\n    i0.ɵɵelementStart(14, \"mat-option\");\n    i0.ɵɵelement(15, \"ngx-mat-select-search\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_option_16_Template, 2, 2, \"mat-option\", 11);\n    i0.ɵɵpipe(17, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(18, ProductionLevelActivityConfigCreateComponent_ng_container_30_mat_error_18_Template, 2, 1, \"mat-error\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r6.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(ctx_r6.activityConfigFG, \"activityConfigData.meterRolloverValue\", \"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(ctx_r6.activityConfigFG, \"activityConfigData.meterRolloverValue\", \"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r6.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r6.unitSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx_r6.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 8, ctx_r6.unitSelectSearch.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(ctx_r6.activityConfigFG, \"activityConfigData.meterRolloverUnitID\", \"required\"));\n  }\n}\nfunction ProductionLevelActivityConfigCreateComponent_ng_template_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.COMMON_CONSTANT.HYPHEN, \"\\n\");\n  }\n}\n// /tsc-library/\nexport let ProductionLevelActivityConfigCreateComponent = /*#__PURE__*/(() => {\n  class ProductionLevelActivityConfigCreateComponent extends ActivityConfig {\n    constructor(activatedRoute, formBuilder, dataInputMethodService, processService,\n    // tsc-library\n    storageService, toastrService, unitService) {\n      super();\n      this.activatedRoute = activatedRoute;\n      this.formBuilder = formBuilder;\n      this.dataInputMethodService = dataInputMethodService;\n      this.processService = processService;\n      this.toastrService = toastrService;\n      this.unitService = unitService;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.ActivityConfigEnum = ActivityConfigEnum;\n      this.origin = 'default';\n      this.isMeterReading = false;\n      this.entityTypeLabel = 'Entity';\n      this.noEntityFoundError = 'Please select valid process for this activity form.';\n      this.entity = [];\n      this.allProcess = [];\n      this.dataInputMethod = [];\n      this.unit = [];\n      this.processSelectSearch = new MatSelectSearchService(['name']);\n      this.unitSelectSearch = new MatSelectSearchService(['name']);\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n    }\n    ngOnInit() {\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        this.activityKeyID = this.activatedRoute.snapshot.data.activityKeyID;\n        if (queryParams['activityID']) {\n          this.activityID = queryParams['activityID'];\n        }\n        if (queryParams['origin']) {\n          this.origin = queryParams['origin'];\n        }\n      });\n      this.formGroupInit();\n      this.getAllProcess(this.currentOrgID);\n      this.getDataInputMethodByActivityID(this.activityID, DataInputMethod.STANDARD);\n      this.getUnit([`type:${UnitTypeKeyID.MASS}`]);\n      this.setEntityTypeLabel(this.activityKeyID);\n    }\n    formGroupInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: this.activityID,\n          activityKeyID: this.activityKeyID,\n          configName: [, Validators.required],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          processID: [, Validators.required],\n          processRecordID: [, Validators.required],\n          dataInputMethodStdID: [, Validators.required],\n          meterRolloverValue: [],\n          meterRolloverUnitID: []\n        })\n      });\n    }\n    getDataInputMethodByActivityID(activityID, dataInputMethodType) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.dataInputMethod = yield this.dataInputMethodService.getDataInputMethodByActivityAndType(activityID, dataInputMethodType);\n      });\n    }\n    getUnit(filter) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.unit = yield this.unitService.getUnit(filter);\n        this.unitSelectSearch.entityArr = this.unit;\n        this.unitSelectSearch.createSubscription();\n      });\n    }\n    getAllProcess(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let filterProcess;\n        this.allProcess = yield this.processService.getProcessList(orgID);\n        filterProcess = this.allProcess.filter(source => source.isCBAMProcess == true);\n        this.allProcess = filterProcess;\n        this.processSelectSearch.entityArr = this.allProcess;\n        this.processSelectSearch.createSubscription();\n      });\n    }\n    processChange(orgID, processID, isLatest) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.process = yield this.processService.getProcessByID(orgID, processID, isLatest);\n        this.patchControl(this.activityConfigFG, 'activityConfigData.processID', this.process.processID);\n        this.createEntitySource(this.process);\n      });\n    }\n    getProcessByID(orgID, processID, isLatest) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.process = yield this.processService.getProcessByID(orgID, processID, isLatest);\n        this.createEntitySource(this.process);\n      });\n    }\n    dataInputMethodChange(dataInputMethodKeyID) {\n      if (dataInputMethodKeyID == DataInputMethodKeyIDEnum.METER_READING) {\n        this.isMeterReading = true;\n        this.addMeterRolloverValidator();\n      } else {\n        this.isMeterReading = false;\n        this.removeMeterRolloverValidator();\n      }\n    }\n    addMeterRolloverValidator() {\n      this.activityConfigDataAC.get('meterRolloverValue').setValidators([Validators.required, Validators.min(0)]);\n      this.activityConfigDataAC.get('meterRolloverUnitID').setValidators([Validators.required]);\n      this.activityConfigDataAC.get('meterRolloverValue').updateValueAndValidity();\n      this.activityConfigDataAC.get('meterRolloverUnitID').updateValueAndValidity();\n    }\n    removeMeterRolloverValidator() {\n      this.activityConfigDataAC.get('meterRolloverValue').reset();\n      this.activityConfigDataAC.get('meterRolloverUnitID').reset();\n      this.activityConfigDataAC.get('meterRolloverValue').clearValidators();\n      this.activityConfigDataAC.get('meterRolloverUnitID').clearValidators();\n      this.activityConfigDataAC.get('meterRolloverValue').updateValueAndValidity();\n      this.activityConfigDataAC.get('meterRolloverUnitID').updateValueAndValidity();\n    }\n    patchControl(formGroup, controlPath, value) {\n      formGroup.get(controlPath).patchValue(value);\n    }\n    createEntitySource(process) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      let inputOutput;\n      let coProduct;\n      let finishProduct;\n      this.entity = [];\n      switch (this.activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_WASTE_GAS_EXPORT:\n          {\n            inputOutput = (_a = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.WASTE_GAS_STREAM && output.entitySource.some(source => source.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.VENTED_OR_FLARED || source.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_TO_NON_CBAM_INSTALLATION || source.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_TO_CBAM_INSTALLATION))) === null || _a === void 0 ? void 0 : _a.entitySource;\n            break;\n          }\n        case ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT:\n          {\n            let entityID = null;\n            entityID = [...((_d = new Set((_c = (_b = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT)) === null || _b === void 0 ? void 0 : _b.entitySource.filter(entity => entity.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_FROM_THIS_PROCESS)) === null || _c === void 0 ? void 0 : _c.map(entity => entity.entityID))) !== null && _d !== void 0 ? _d : [])];\n            if ((entityID === null || entityID === void 0 ? void 0 : entityID.length) > 0) {\n              inputOutput = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT).entities.filter(entity => entityID.includes(entity.id));\n            }\n            break;\n          }\n        case ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT:\n          {\n            let entityID = null;\n            entityID = [...((_g = new Set((_f = (_e = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT)) === null || _e === void 0 ? void 0 : _e.entitySource.filter(entity => entity.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_FROM_THIS_PROCESS)) === null || _f === void 0 ? void 0 : _f.map(entity => entity.entityID))) !== null && _g !== void 0 ? _g : [])];\n            if ((entityID === null || entityID === void 0 ? void 0 : entityID.length) > 0) {\n              inputOutput = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT).entities.filter(entity => entityID.includes(entity.id));\n            }\n            break;\n          }\n        case ActivityKeyIDEnum.PROCESS_PRODUCTION_LEVEL:\n          {\n            this.entityTypeLabel = 'Product';\n            coProduct = (_h = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.CO_PRODUCT)) === null || _h === void 0 ? void 0 : _h.entities;\n            finishProduct = (_j = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT)) === null || _j === void 0 ? void 0 : _j.entities;\n            if (coProduct) {\n              inputOutput = coProduct;\n              this.entityTypeLabel = 'Co-product';\n            } else if (finishProduct) {\n              inputOutput = finishProduct;\n              this.entityTypeLabel = 'Finished Product';\n            } else {\n              inputOutput = null;\n              this.entityTypeLabel = 'Product';\n            }\n            break;\n          }\n      }\n      if (inputOutput) {\n        this.entity = inputOutput;\n        // if (this.entityActivity.includes(this.activityKeyID)) {\n        //     this.entity = inputOutput.entities;\n        // } else if (this.entitySourceActivity.includes(this.activityKeyID)) {\n        //     this.entity = inputOutput.entitySource;\n        // }\n      } else {\n        this.entity = [];\n        this.patchControl(this.activityConfigFG, 'activityConfigData.processID', null);\n        this.toastrService.error(this.noEntityFoundError);\n      }\n    }\n    setEntityTypeLabel(activityKeyID) {\n      switch (activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_WASTE_GAS_EXPORT:\n          this.entityTypeLabel = 'Waste Gas Source';\n          this.noEntityFoundError = 'Waste gas output is not found in this process';\n          break;\n        case ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT:\n          this.entityTypeLabel = 'Precursor Source';\n          this.noEntityFoundError = 'No precursor is exported from this process';\n          break;\n        case ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT:\n          this.entityTypeLabel = 'Intermediate Product';\n          this.noEntityFoundError = 'No intermediate product is exported from this process';\n          break;\n        case ActivityKeyIDEnum.PROCESS_PRODUCTION_LEVEL:\n          this.entityTypeLabel = 'Product';\n          this.noEntityFoundError = 'No co-product or finished product is produced from this process';\n          break;\n      }\n    }\n    patchConfiguration(configuration) {\n      var _a, _b;\n      let activityConfig;\n      let activityConfigData;\n      activityConfig = configuration.activityConfig != null ? configuration['activityConfig'] : null;\n      activityConfigData = configuration['activityConfigData'];\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig.configName\n        });\n      } else {\n        this.readOnlyForm();\n      }\n      this.activityConfigDataAC.patchValue({\n        processID: activityConfigData.process.id,\n        processRecordID: activityConfigData.process.recordID,\n        dataInputMethodStdID: activityConfigData.dataInputMethod.id,\n        meterRolloverValue: (_a = activityConfigData.meterRollover) === null || _a === void 0 ? void 0 : _a.value,\n        meterRolloverUnitID: (_b = activityConfigData.meterRollover) === null || _b === void 0 ? void 0 : _b.unit.unitID\n      });\n      this.dataInputMethodChange(activityConfigData.dataInputMethod.keyID);\n      this.getProcessByID(this.currentOrgID, activityConfigData.process.id, false);\n      this.updateInitialObject();\n    }\n  }\n  ProductionLevelActivityConfigCreateComponent.ɵfac = function ProductionLevelActivityConfigCreateComponent_Factory(t) {\n    return new (t || ProductionLevelActivityConfigCreateComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.DataInputMethodService), i0.ɵɵdirectiveInject(i4.ProcessService), i0.ɵɵdirectiveInject(i5.StorageService), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.UnitService));\n  };\n  ProductionLevelActivityConfigCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductionLevelActivityConfigCreateComponent,\n    selectors: [[\"app-production-level-activity-config-create\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 33,\n    vars: 15,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-sm-8\"], [\"formGroupName\", \"activityConfig\", \"class\", \"col-sm-8\", 4, \"ngIf\"], [\"formGroupName\", \"activityConfigData\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"processRecordID\", \"required\", \"\", 3, \"selectionChange\"], [\"placeholderLabel\", \"Search by process name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"col-sm-3\"], [1, \"col-sm-9\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"row\", \"pt-2\"], [\"formControlName\", \"dataInputMethodStdID\"], [\"class\", \"col-sm-3 pt-1\", 3, \"value\", \"change\", 4, \"ngFor\", \"ngForOf\"], [\"noEntity\", \"\"], [\"formGroupName\", \"activityConfig\", 1, \"col-sm-8\"], [\"type\", \"text\", \"placeholder\", \"Activity form name\", \"matInput\", \"\", \"formControlName\", \"configName\", \"required\", \"\", 1, \"formPlaceholder\"], [3, \"value\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-sm-12\", \"fw-bold\"], [1, \"col-sm-3\", \"pt-1\", 3, \"value\", \"change\"], [1, \"row\", \"pt-3\"], [1, \"col-sm-5\"], [\"type\", \"number\", \"placeholder\", \"Meter Rollover Value\", \"matInput\", \"\", \"formControlName\", \"meterRolloverValue\", \"min\", \"0\", \"required\", \"\", 1, \"formPlaceholder\"], [\"formControlName\", \"meterRolloverUnitID\"], [\"placeholderLabel\", \"Search by unit name\", 3, \"formControl\", \"noEntriesFoundLabel\"]],\n    template: function ProductionLevelActivityConfigCreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, ProductionLevelActivityConfigCreateComponent_ng_container_6_Template, 6, 2, \"ng-container\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 3);\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵelementStart(10, \"mat-form-field\", 7);\n        i0.ɵɵelementStart(11, \"mat-label\", 8);\n        i0.ɵɵtext(12, \"Select Process\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-select\", 9);\n        i0.ɵɵlistener(\"selectionChange\", function ProductionLevelActivityConfigCreateComponent_Template_mat_select_selectionChange_13_listener($event) {\n          return ctx.processChange(ctx.currentOrgID, $event.value, true);\n        });\n        i0.ɵɵelementStart(14, \"mat-option\");\n        i0.ɵɵelement(15, \"ngx-mat-select-search\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, ProductionLevelActivityConfigCreateComponent_mat_option_16_Template, 2, 2, \"mat-option\", 11);\n        i0.ɵɵpipe(17, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, ProductionLevelActivityConfigCreateComponent_mat_error_18_Template, 2, 1, \"mat-error\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 3);\n        i0.ɵɵelementStart(20, \"div\", 13);\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 14);\n        i0.ɵɵtemplate(23, ProductionLevelActivityConfigCreateComponent_ng_container_23_Template, 2, 1, \"ng-container\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 16);\n        i0.ɵɵelementStart(25, \"mat-label\", 8);\n        i0.ɵɵtext(26, \"Enter Data Using\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-radio-group\", 17);\n        i0.ɵɵtemplate(28, ProductionLevelActivityConfigCreateComponent_mat_radio_button_28_Template, 2, 2, \"mat-radio-button\", 18);\n        i0.ɵɵtemplate(29, ProductionLevelActivityConfigCreateComponent_mat_error_29_Template, 2, 1, \"mat-error\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(30, ProductionLevelActivityConfigCreateComponent_ng_container_30_Template, 19, 10, \"ng-container\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(31, ProductionLevelActivityConfigCreateComponent_ng_template_31_Template, 1, 1, \"ng-template\", null, 19, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r7 = i0.ɵɵreference(32);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == ctx.ActivityConfigEnum.PFF);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.processSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 13, ctx.processSelectSearch.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfigData.processRecordID\", \"required\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.entityTypeLabel);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.entity.length > 0)(\"ngIfElse\", _r7);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dataInputMethod);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandlingForRadio(ctx.activityConfigFG, \"activityConfigData.dataInputMethodStdID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isMeterReading);\n      }\n    },\n    directives: [i8.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i9.NgIf, i2.FormGroupName, i10.MatFormField, i10.MatLabel, i11.MatSelect, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i12.MatOption, i13.MatSelectSearchComponent, i2.FormControlDirective, i9.NgForOf, i14.MatRadioGroup, i15.MatInput, i2.DefaultValueAccessor, i10.MatError, i14.MatRadioButton, i2.NumberValueAccessor, i2.MinValidator],\n    pipes: [i9.AsyncPipe],\n    encapsulation: 2\n  });\n  return ProductionLevelActivityConfigCreateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}