{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nimport * as i5 from '@library/facility-service';\nimport { Facility } from '@library/facility-service';\nimport * as i1$1 from '@angular/router';\nimport * as i2 from '@library/storage-service';\nimport * as i3 from '@library/application-service';\nlet OrganizationServiceService = /*#__PURE__*/(() => {\n  class OrganizationServiceService {\n    constructor() {}\n  }\n  OrganizationServiceService.ɵfac = function OrganizationServiceService_Factory(t) {\n    return new (t || OrganizationServiceService)();\n  };\n  OrganizationServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrganizationServiceService,\n    factory: OrganizationServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationServiceService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrganizationServiceComponent = /*#__PURE__*/(() => {\n  class OrganizationServiceComponent {\n    constructor() {}\n    ngOnInit() {}\n  }\n  OrganizationServiceComponent.ɵfac = function OrganizationServiceComponent_Factory(t) {\n    return new (t || OrganizationServiceComponent)();\n  };\n  OrganizationServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: OrganizationServiceComponent,\n    selectors: [[\"lib-organization-service\"]],\n    decls: 2,\n    vars: 0,\n    template: function OrganizationServiceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" organization-service works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return OrganizationServiceComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrganizationServiceModule = /*#__PURE__*/(() => {\n  class OrganizationServiceModule {\n    static forRoot(environment) {\n      return {\n        ngModule: OrganizationServiceModule,\n        providers: [{\n          provide: 'environment',\n          useValue: environment\n        }]\n      };\n    }\n  }\n  OrganizationServiceModule.ɵfac = function OrganizationServiceModule_Factory(t) {\n    return new (t || OrganizationServiceModule)();\n  };\n  OrganizationServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OrganizationServiceModule\n  });\n  OrganizationServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return OrganizationServiceModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar OrgType = /*#__PURE__*/(() => {\n  (function (OrgType) {\n    OrgType[\"SITE\"] = \"SITE\";\n    OrgType[\"ORGANIZATION\"] = \"ORG\";\n    OrgType[\"NETZERO_ADMIN\"] = \"NETZEROADMIN\";\n    OrgType[\"ORGANIZAION_GROUP\"] = \"ORG_GROUP\";\n  })(OrgType || (OrgType = {}));\n  return OrgType;\n})();\nvar OrgStatus = /*#__PURE__*/(() => {\n  (function (OrgStatus) {\n    OrgStatus[\"ACTIVE_STATUS\"] = \"ACTIVE\";\n    OrgStatus[\"INACTIVE_STATUS\"] = \"INACTIVE\";\n    OrgStatus[\"SETUP_PENDING_STATUS\"] = \"SETUP_PENDING\";\n  })(OrgStatus || (OrgStatus = {}));\n  return OrgStatus;\n})();\nvar OrgSiteAccessType = /*#__PURE__*/(() => {\n  (function (OrgSiteAccessType) {\n    OrgSiteAccessType[\"ORG\"] = \"ORG\";\n    OrgSiteAccessType[\"SITE\"] = \"SITE\";\n    OrgSiteAccessType[\"ORG_SITE\"] = \"ORG_SITE\";\n  })(OrgSiteAccessType || (OrgSiteAccessType = {}));\n  return OrgSiteAccessType;\n})();\nvar OrganizationStatus = /*#__PURE__*/(() => {\n  (function (OrganizationStatus) {\n    OrganizationStatus[\"ACTIVE\"] = \"ACTIVE\";\n    OrganizationStatus[\"INACTIVE\"] = \"INACTIVE\";\n    OrganizationStatus[\"PENDING_SETUP\"] = \"PENDING_SETUP\";\n  })(OrganizationStatus || (OrganizationStatus = {}));\n  return OrganizationStatus;\n})();\nclass Organization {}\nclass OrgAccess {}\nclass OrgSiteAccess {}\nlet OrganizationController = /*#__PURE__*/(() => {\n  class OrganizationController {\n    constructor(http, environment) {\n      this.http = http;\n      this.environment = environment;\n    }\n    getOrganizationByID(orgID) {\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}`);\n    }\n    getOrgByAccess(userID) {\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}users/${userID}/organizations-sites/access`);\n    }\n    getOrganizations(orgID) {\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}/org-facility`);\n    }\n    getOrganizationsByType(orgID, type) {\n      let params = new HttpParams();\n      params = params.append('type', type);\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}/org-facility`, {\n        params: params\n      });\n    }\n    getOrgSiteWithUserAccess(userID) {\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}users/${userID}/organizations-sites/access-new`);\n    }\n  }\n  OrganizationController.ɵfac = function OrganizationController_Factory(t) {\n    return new (t || OrganizationController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n  };\n  OrganizationController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrganizationController,\n    factory: OrganizationController.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationController;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrganizationService = /*#__PURE__*/(() => {\n  class OrganizationService {\n    constructor(router, storageService, applicationService, organizationController, facilityService) {\n      this.router = router;\n      this.storageService = storageService;\n      this.applicationService = applicationService;\n      this.organizationController = organizationController;\n      this.facilityService = facilityService;\n      this.organizationM = new Organization();\n      this.facilityM = new Facility();\n      this.redirectUrl = '';\n    }\n    orgSwitch(orgID, orgSwitchRedirect) {\n      let applicationKeyID;\n      let token;\n      let userID;\n      let queryParam;\n      let currentUrl = '';\n      applicationKeyID = this.storageService.getStorage('applicationKeyID');\n      token = this.storageService.getStorage('token');\n      userID = this.storageService.getStorage('userID');\n      if (orgSwitchRedirect == 'NO') {\n        currentUrl = '';\n      } else {\n        currentUrl = this.router.url;\n      }\n      queryParam = `login?token=${token}&userID=${userID}&orgID=${orgID}&redirectUrl=${currentUrl}`;\n      window.location.href = this.applicationService.appRedirect(applicationKeyID) + queryParam;\n    }\n    getOrganizationByID(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let organizationM;\n        let organization = new Organization();\n        try {\n          organizationM = yield this.organizationController.getOrganizationByID(orgID).toPromise();\n          if (organizationM) {\n            return organizationM;\n          } else {\n            return organization;\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return organization;\n        }\n      });\n    }\n    getOrgByAccess(userID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let orgAccessM;\n        try {\n          orgAccessM = yield this.organizationController.getOrgByAccess(userID).toPromise();\n          return orgAccessM;\n        } catch (error) {\n          console.error('Error -', error);\n        }\n      });\n    }\n    getOrganizations(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let orgAccessM;\n        try {\n          orgAccessM = yield this.organizationController.getOrganizations(orgID).toPromise();\n          return orgAccessM;\n        } catch (error) {\n          console.error('Error -', error);\n        }\n      });\n    }\n    getOrganizationsByType(orgID, type) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let orgAccessM;\n        try {\n          orgAccessM = yield this.organizationController.getOrganizationsByType(orgID, type).toPromise();\n          return orgAccessM;\n        } catch (error) {\n          console.error('Error in getOrganizationsByType -', error);\n        }\n      });\n    }\n    getOrgSiteWithUserAccess(userID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let orgSiteAccessM;\n        try {\n          orgSiteAccessM = yield this.organizationController.getOrgSiteWithUserAccess(userID).toPromise();\n          return orgSiteAccessM;\n        } catch (error) {\n          console.error('Error -', error);\n        }\n      });\n    }\n    getOrgStatus(status) {\n      switch (status) {\n        case OrganizationStatus.ACTIVE:\n          return 'Active';\n        case OrganizationStatus.INACTIVE:\n          return 'Inactive';\n        case OrganizationStatus.PENDING_SETUP:\n          return 'Pending setup';\n        default:\n          console.log('Invalid organization status');\n      }\n    }\n    getOrgTimezone() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.currentOrgType = this.storageService.getStorage('currentOrgType');\n        this.rootOrgID = this.storageService.getStorage('rootOrgID');\n        this.currentOrgID = this.storageService.getStorage('currentOrgID');\n        let timezone = null;\n        if (this.currentOrgType == OrgType.ORGANIZATION) {\n          this.organizationM = yield this.getOrganizationByID(this.currentOrgID);\n          if (this.organizationM.timeZoneName) {\n            timezone = this.organizationM.timeZoneName;\n          }\n        } else if (this.currentOrgType == OrgType.SITE) {\n          this.facilityM = yield this.facilityService.getFacilityByID(this.rootOrgID, this.currentOrgID);\n          if (this.facilityM.timeZoneName) {\n            timezone = this.facilityM.timeZoneName;\n          } else {\n            this.organizationM = yield this.getOrganizationByID(this.rootOrgID);\n            if (this.organizationM.timeZoneName) {\n              timezone = this.organizationM.timeZoneName;\n            }\n          }\n        }\n        return timezone;\n      });\n    }\n  }\n  OrganizationService.ɵfac = function OrganizationService_Factory(t) {\n    return new (t || OrganizationService)(i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.ApplicationService), i0.ɵɵinject(OrganizationController), i0.ɵɵinject(i5.FacilityService));\n  };\n  OrganizationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrganizationService,\n    factory: OrganizationService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrgTypeGuard = /*#__PURE__*/(() => {\n  class OrgTypeGuard {\n    constructor(router, storageService) {\n      this.router = router;\n      this.storageService = storageService;\n    }\n    canActivate(route, state) {\n      let currentOrgType;\n      let orgTypeAccess;\n      currentOrgType = this.storageService.getStorage('currentOrgType');\n      orgTypeAccess = route.data.orgTypeAccess;\n      if (currentOrgType == OrgType.SITE && (orgTypeAccess == OrgSiteAccessType.SITE || orgTypeAccess == OrgSiteAccessType.ORG_SITE)) {\n        return true;\n      } else if (currentOrgType == OrgType.ORGANIZATION && (orgTypeAccess == OrgSiteAccessType.ORG || orgTypeAccess == OrgSiteAccessType.ORG_SITE)) {\n        return true;\n      } else {\n        return this.router.navigate(['/']);\n        return false;\n      }\n    }\n  }\n  OrgTypeGuard.ɵfac = function OrgTypeGuard_Factory(t) {\n    return new (t || OrgTypeGuard)(i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(i2.StorageService));\n  };\n  OrgTypeGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrgTypeGuard,\n    factory: OrgTypeGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return OrgTypeGuard;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of organization-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { OrgAccess, OrgSiteAccess, OrgSiteAccessType, OrgStatus, OrgType, OrgTypeGuard, Organization, OrganizationController, OrganizationService, OrganizationServiceComponent, OrganizationServiceModule, OrganizationServiceService, OrganizationStatus };\n//# sourceMappingURL=library-organization-service.js.map","map":null,"metadata":{},"sourceType":"module"}