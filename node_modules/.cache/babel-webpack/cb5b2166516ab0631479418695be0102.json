{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { isEqual } from \"lodash\";\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { faPlus, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\nimport { SupplierTypeKeyIDEnum } from '@netzero/enum/supplier.enum';\n// tsc-library\nimport { COMMON_CONSTANT, InvalidForm, MaterialFormFieldAppearance, MatSelectSearchService } from '@library/tsc-common';\nimport { ToastrTitle, ToastrColor } from '@library/toastr-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@netzero/controller/supplier.controller\";\nimport * as i4 from \"@library/storage-service\";\nimport * as i5 from \"@library/toastr-service\";\nimport * as i6 from \"@library/organization-service\";\nimport * as i7 from \"@library/tsc-common\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/tooltip\";\nimport * as i13 from \"@angular/material/core\";\nimport * as i14 from \"ngx-mat-select-search\";\nfunction CreateUpdateComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Supplier name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Supplier Code already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const supplierTypes_r11 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", supplierTypes_r11[\"typeID\"])(\"disabled\", ctx_r2.supplierTypeId == null ? false : ctx_r2.contains(supplierTypes_r11[\"typeID\"]))(\"matTooltip\", ctx_r2.showTooltip ? \"Here you can add new supplier type but not remove created supplier type.\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", supplierTypes_r11.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Supplier type is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_form_field_25_mat_error_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_form_field_25_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter valid email id \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_form_field_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 6);\n    i0.ɵɵelementStart(1, \"mat-label\", 7);\n    i0.ɵɵtext(2, \" Email \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 26);\n    i0.ɵɵtemplate(4, CreateUpdateComponent_mat_form_field_25_mat_error_4_Template, 2, 0, \"mat-error\", 9);\n    i0.ɵɵtemplate(5, CreateUpdateComponent_mat_form_field_25_mat_error_5_Template, 2, 0, \"mat-error\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"appearance\", ctx_r4.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.errorHandling(\"email\", \"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.errorHandling(\"email\", \"email\"));\n  }\n}\nfunction CreateUpdateComponent_mat_option_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 27);\n    i0.ɵɵelementStart(1, \"span\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const country_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", country_r14.countryCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", country_r14.countryName, \" - \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r14.countryCode);\n  }\n}\nfunction CreateUpdateComponent_mat_error_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Country is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_form_field_39_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const grid_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", grid_r17.gridID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", grid_r17.gridName, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_form_field_39_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Grid is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_form_field_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 6);\n    i0.ɵɵelementStart(1, \"mat-label\", 7);\n    i0.ɵɵtext(2, \"Select Grid\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-select\", 29);\n    i0.ɵɵelementStart(4, \"mat-option\");\n    i0.ɵɵelement(5, \"ngx-mat-select-search\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, CreateUpdateComponent_mat_form_field_39_mat_option_6_Template, 2, 2, \"mat-option\", 18);\n    i0.ɵɵpipe(7, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, CreateUpdateComponent_mat_form_field_39_mat_error_8_Template, 2, 0, \"mat-error\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"appearance\", ctx_r7.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r7.gridSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx_r7.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 5, ctx_r7.gridSelectSearch.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.errorHandling(\"gridID\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_button_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_button_45_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.checkSupplierCodeAvailability(\"CREATE\");\n    });\n    i0.ɵɵtext(1, \" Create \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_button_46_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_button_46_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.createUpdateSupplierForm(\"UPDATE\");\n    });\n    i0.ɵɵtext(1, \" Update \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_button_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 32);\n  }\n}\n// /tsc-library/\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(formBuilder, dialog, supplierController, dialogRef, data, storageService, toastrService, organizationService, countryService) {\n      this.formBuilder = formBuilder;\n      this.dialog = dialog;\n      this.supplierController = supplierController;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.storageService = storageService;\n      this.toastrService = toastrService;\n      this.organizationService = organizationService;\n      this.countryService = countryService;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.faPlus = faPlus;\n      this.faCheckCircle = faCheckCircle;\n      this.supplierType = [];\n      this.isAWasteDisposalSupplier = false;\n      this.isEnergySupplier = false;\n      this.Title = 'Create';\n      this.action = 'create';\n      this.supplierTypeId = null;\n      this.countryM = [];\n      this.countrySelectSearch = new MatSelectSearchService(['countryName', 'countryCode']);\n      this.grid = [];\n      this.gridSelectSearch = new MatSelectSearchService(['gridName']);\n      this.isGridAvailable = false;\n      this.showTooltip = false;\n      this.errorHandling = (control, error) => {\n        return this.supplierFG.get(control).hasError(error);\n      };\n      this.action = data['action'];\n      this.currentOrgID = data['currentOrgID'];\n      this.dialogRef.disableClose = true;\n    }\n    ngOnInit() {\n      this.supplierFGInit();\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.getOrgByID(this.currentOrgID);\n      this.getCountry();\n      this.getSupplierType();\n      if (this.action === 'update') {\n        this.Title = 'Update';\n        this.supplierID = this.data['supplier'].supplierID;\n        this.getSupplierByID(this.data['supplier']);\n      }\n    }\n    supplierFGInit() {\n      this.supplierFG = this.formBuilder.group({\n        name: [, Validators.required],\n        supplierCode: [],\n        supplierTypeIDs: [, Validators.required],\n        email: [],\n        address: [],\n        countryCode: [, Validators.required],\n        gridID: []\n      });\n    }\n    resetAndClearControl(control, reset = '') {\n      this.supplierFG.get(control).reset('', {\n        onlySelf: true,\n        emitEvent: false\n      });\n      this.supplierFG.get(control).clearValidators();\n      this.supplierFG.get(control).updateValueAndValidity({\n        onlySelf: true,\n        emitEvent: false\n      });\n    }\n    addValidators(control, validators) {\n      this.supplierFG.get(control).addValidators(validators);\n      this.supplierFG.get(control).updateValueAndValidity({\n        onlySelf: true,\n        emitEvent: false\n      });\n    }\n    ngAfterViewInit() {\n      this.supplierFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.supplierFG.value));\n    }\n    getSupplierType() {\n      this.supplierController.getSupplierType().subscribe(supplierRes => {\n        this.supplierType = supplierRes;\n        // WASTE_DISPOSAL_TYPE_SUPPLIER'S ID\n        let wasteDisposalSupplier = this.supplierType.find(sType => sType['keyID'] === SupplierTypeKeyIDEnum.WASTE_DISPOSAL_AND_TREATMENT);\n        // comment for prod development because WASTE_DISPOSAL_AND_TREATMENT_KEY_ID is not use..\n        // this.wasteDisposalSupplierID = wasteDisposalSupplier['typeID'];\n        // ENERGY_TYPE_SUPPLIER'S ID\n        let energySupplier = this.supplierType.find(sType => sType['keyID'] === SupplierTypeKeyIDEnum.ENERGY_SUPPLIER);\n        this.energySupplierID = energySupplier['typeID'];\n      }, error => {\n        console.log('error in getSupplierType -', error);\n        this.toastrService.openToast(ToastrTitle.ERROR, 'Error in getting supplier types', ToastrColor.ERROR);\n      });\n    }\n    getCountry() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.countryM = yield this.countryService.getCountry();\n        this.countrySelectSearch.entityArr = this.countryM;\n        this.countrySelectSearch.createSubscription();\n      });\n    }\n    getOrgByID(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.organization = yield this.organizationService.getOrganizationByID(orgID);\n        if (this.action != 'update') {\n          this.supplierFG.patchValue({\n            countryCode: this.organization['countryCode']\n          });\n        }\n      });\n    }\n    getSupplierByID(supplier) {\n      this.supplierController.getSupplierByID(supplier['supplierID'], this.currentOrgID).subscribe(supplierRes => {\n        this.supplierTypeId = supplierRes['supplierTypeIDs'];\n        this.supplier = supplierRes;\n        this.patchSupplier(supplierRes);\n      }, error => {\n        console.log('error in getSupplier -', error);\n        this.toastrService.openToast(ToastrTitle.ERROR, 'Error in getting supplier', ToastrColor.ERROR);\n      });\n    }\n    patchSupplier(supplier) {\n      this.supplierFG.patchValue({\n        supplierCode: supplier['supplierCode'],\n        name: supplier['name'],\n        email: supplier['email'],\n        address: supplier['address'],\n        countryCode: supplier['countryCode'],\n        supplierTypeIDs: supplier['supplierTypeIDs'],\n        gridID: supplier['gridID']\n      });\n      this.checkSupplierType(supplier['supplierTypeIDs']);\n    }\n    checkSupplierType(supplierTypeIDs) {\n      if (supplierTypeIDs.find(id => id == this.wasteDisposalSupplierID)) {\n        this.isAWasteDisposalSupplier = true;\n        this.addValidators('email', [Validators.required, Validators.email]);\n      } else {\n        if (this.isAWasteDisposalSupplier) {\n          this.isAWasteDisposalSupplier = false;\n          this.resetAndClearControl('email');\n        }\n      }\n      if (supplierTypeIDs.find(id => id == this.energySupplierID)) {\n        if (!this.isEnergySupplier) {\n          this.isEnergySupplier = true;\n          this.getGrid(this.supplierFG.get('countryCode').value);\n        }\n      } else {\n        this.isEnergySupplier = false;\n        this.resetAndClearControl('gridID');\n      }\n    }\n    countryChange(countryCode) {\n      this.supplierFG.get('gridID').reset(null);\n      this.getGrid(countryCode);\n    }\n    getGrid(countryCode) {\n      this.supplierController.getGrid(countryCode).subscribe(gridRes => {\n        this.grid = gridRes;\n        if (this.grid.length < 1) {\n          this.isGridAvailable = false;\n          this.supplierFG.get('gridID').clearValidators();\n        } else {\n          this.isGridAvailable = true;\n          if (this.isEnergySupplier) {\n            this.supplierFG.get('gridID').addValidators(Validators.required);\n          }\n        }\n        this.supplierFG.get('gridID').updateValueAndValidity();\n        this.gridSelectSearch.entityArr = this.grid;\n        this.gridSelectSearch.createSubscription();\n      }, error => {\n        console.log('error in getGrid() -', error);\n        this.toastrService.openToast(ToastrTitle.ERROR, 'Error in getting grids', ToastrColor.ERROR);\n      });\n    }\n    createUpdateSupplierForm(action) {\n      if (this.supplierFG.invalid) {\n        this.supplierFG.markAllAsTouched();\n        console.log('invalid form -', this.supplierFG);\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      if (action == 'CREATE') {\n        if (this.isAWasteDisposalSupplier) {\n          // this.InviteScopeThreeSupplier(action);\n        } else {\n          this.createSupplier();\n        }\n      } else if (action == 'UPDATE') {\n        this.updateSupplier();\n      } else {\n        console.log('error in create/update supplier');\n      }\n    }\n    checkSupplierCodeAvailability(action) {\n      if (this.supplierFG.invalid) {\n        this.supplierFG.markAllAsTouched();\n        console.log('invalid form -', this.supplierFG.value);\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return [];\n      }\n      let supplierCode = this.supplierFG.controls['supplierCode'].value;\n      if (supplierCode !== null && supplierCode !== '' && supplierCode.trim() !== '') {\n        this.supplierController.isSupplierCodeExist(this.currentOrgID, supplierCode).subscribe(isAvailableRes => {\n          if (isAvailableRes['isSupplierCodeExist'] == 'NO') {\n            this.createUpdateSupplierForm(action);\n          } else {\n            this.supplierFG.get('supplierCode').setErrors({\n              'duplicate_supplier_code': true\n            });\n            this.toastrService.openToast(ToastrTitle.ERROR, 'Supplier Code already exists!', ToastrColor.ERROR);\n            return [];\n          }\n        }, error => {\n          console.log('error in supplierCodValidity -', error);\n          this.toastrService.openToast(ToastrTitle.ERROR, 'Error in validating supplier code', ToastrColor.ERROR);\n        });\n      } else {\n        this.createUpdateSupplierForm(action);\n      }\n    }\n    contains(supplierID) {\n      if (this.supplierTypeId.indexOf(supplierID) > -1) {\n        this.showTooltip = true;\n        return true;\n      } else {\n        return false;\n      }\n    }\n    createSupplier() {\n      this.supplierController.createSupplier(this.supplierFG.value, this.currentOrgID).subscribe(supplierRes => {\n        this.dialogRef.close('opSuccess');\n      }, error => {\n        console.log('error in createSupplier -', error);\n      });\n    }\n    updateSupplier() {\n      this.supplierController.updateSupplier(this.supplierFG.value, this.supplierID, this.currentOrgID).subscribe(supplierRes => {\n        this.dialogRef.close('opSuccess');\n      }, error => {\n        console.log('error in updateSupplier -', error);\n      });\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.SupplierController), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i4.StorageService), i0.ɵɵdirectiveInject(i5.ToastrService), i0.ɵɵdirectiveInject(i6.OrganizationService), i0.ɵɵdirectiveInject(i7.CountryService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create-update\"]],\n    decls: 48,\n    vars: 23,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogHeader\"], [\"mat-dialog-content\", \"\", 1, \"matDialogContent\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-sm-12\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Name\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"supplierCode\", \"placeholder\", \"Supplier code\", 1, \"formPlaceholder\"], [\"formControlName\", \"supplierTypeIDs\", \"multiple\", \"\", \"required\", \"\", \"matTooltipPosition\", \"below\", 3, \"matTooltip\", \"selectionChange\"], [\"disabled\", \"\", 1, \"hideCheckbox\"], [\"class\", \"multiSelect\", \"matTooltipPosition\", \"below\", 3, \"value\", \"disabled\", \"matTooltip\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"matFieldWidth100\", 3, \"appearance\", 4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"Address\", \"matTextareaAutosize\", \"\", \"matAutosizeMinRows\", \"1\", \"matAutosizeMaxRows\", \"5\", \"formControlName\", \"address\"], [\"formControlName\", \"countryCode\", \"required\", \"\", 3, \"selectionChange\"], [\"placeholderLabel\", \"Search by country name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-dialog-footer\", \"\"], [\"align\", \"end\"], [\"type\", \"button\", \"mat-dialog-close\", \"\", 1, \"button\", \"btn\", \"btn-secondary\", \"me-2\"], [1, \"d-inline\", 3, \"ngSwitch\"], [\"type\", \"button\", \"class\", \"button btn btn-success\", 3, \"click\", 4, \"ngSwitchCase\"], [\"class\", \"d-none\", 4, \"ngSwitchDefault\"], [\"matTooltipPosition\", \"below\", 1, \"multiSelect\", 3, \"value\", \"disabled\", \"matTooltip\"], [\"matInput\", \"\", \"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\", \"required\", \"\", 1, \"formPlaceholder\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [\"formControlName\", \"gridID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by grid name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [\"type\", \"button\", 1, \"button\", \"btn\", \"btn-success\", 3, \"click\"], [1, \"d-none\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h6\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"form\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(8, \"mat-label\", 7);\n        i0.ɵɵtext(9, \" Name \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵtemplate(11, CreateUpdateComponent_mat_error_11_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(13, \"mat-label\", 7);\n        i0.ɵɵtext(14, \" Supplier code \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 10);\n        i0.ɵɵtemplate(16, CreateUpdateComponent_mat_error_16_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(18, \"mat-label\", 7);\n        i0.ɵɵtext(19, \" Select supplier type \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-select\", 11);\n        i0.ɵɵlistener(\"selectionChange\", function CreateUpdateComponent_Template_mat_select_selectionChange_20_listener($event) {\n          return ctx.checkSupplierType($event.value);\n        });\n        i0.ɵɵelementStart(21, \"mat-option\", 12);\n        i0.ɵɵtext(22, \" Select supplier type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, CreateUpdateComponent_mat_option_23_Template, 2, 4, \"mat-option\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, CreateUpdateComponent_mat_error_24_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, CreateUpdateComponent_mat_form_field_25_Template, 6, 3, \"mat-form-field\", 14);\n        i0.ɵɵelementStart(26, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(27, \"mat-label\", 7);\n        i0.ɵɵtext(28, \"Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"textarea\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(31, \"mat-label\", 7);\n        i0.ɵɵtext(32, \"Select Country\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"mat-select\", 16);\n        i0.ɵɵlistener(\"selectionChange\", function CreateUpdateComponent_Template_mat_select_selectionChange_33_listener($event) {\n          return ctx.countryChange($event.value);\n        });\n        i0.ɵɵelementStart(34, \"mat-option\");\n        i0.ɵɵelement(35, \"ngx-mat-select-search\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(36, CreateUpdateComponent_mat_option_36_Template, 5, 3, \"mat-option\", 18);\n        i0.ɵɵpipe(37, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(38, CreateUpdateComponent_mat_error_38_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(39, CreateUpdateComponent_mat_form_field_39_Template, 9, 7, \"mat-form-field\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"div\", 19);\n        i0.ɵɵelementStart(41, \"div\", 20);\n        i0.ɵɵelementStart(42, \"button\", 21);\n        i0.ɵɵtext(43, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"div\", 22);\n        i0.ɵɵtemplate(45, CreateUpdateComponent_button_45_Template, 2, 0, \"button\", 23);\n        i0.ɵɵtemplate(46, CreateUpdateComponent_button_46_Template, 2, 0, \"button\", 23);\n        i0.ɵɵtemplate(47, CreateUpdateComponent_button_47_Template, 1, 0, \"button\", 24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.Title, \" Supplier \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.supplierFG);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"name\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"supplierCode\", \"duplicate_supplier_code\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matTooltip\", ctx.showTooltip ? \"Here you can add new supplier type but not remove created supplier type.\" : \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.supplierType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"supplierTypeIDs\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isAWasteDisposalSupplier);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.countrySelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(37, 21, ctx.countrySelectSearch.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"countryCode\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGridAvailable && ctx.isEnergySupplier);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.action);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"create\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"update\");\n      }\n    },\n    directives: [i2.MatDialogTitle, i2.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i8.MatFormField, i8.MatLabel, i9.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i10.NgIf, i11.MatSelect, i12.MatTooltip, i13.MatOption, i10.NgForOf, i9.MatTextareaAutosize, i14.MatSelectSearchComponent, i1.FormControlDirective, i2.MatDialogClose, i10.NgSwitch, i10.NgSwitchCase, i10.NgSwitchDefault, i8.MatError],\n    pipes: [i10.AsyncPipe],\n    encapsulation: 2\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}