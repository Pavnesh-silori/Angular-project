{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { forkJoin } from 'rxjs';\nimport { cloneDeep } from 'lodash-es';\nimport { environment } from 'src/environments/environment';\nimport { LookupCodeEnum } from '@report-framework/enum/lookup-code.enum';\nimport { ReportingFrameworkKeyIDEnum } from '@report-framework/enum/reporting-framework.enum';\nimport { ReportingFramework } from '@report-framework/model/reporting-framework.model';\nimport { ReportPreference } from '@report-framework/model/reporting-preference.model';\nimport { Sector } from '@report-framework/model/sector.model';\nimport { ToastrColor } from '@library/toastr-service';\nimport { ButtonLabelEnum, COMMON_CONSTANT, DialogOneComponent, DialogOneEnum, InvalidForm, MatSelectSearchService, MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@report-framework/controller/report-framework.controller\";\nimport * as i4 from \"@report-framework/controller/reporting-preference.controller\";\nimport * as i5 from \"@report-framework/service/reporting-preference.service\";\nimport * as i6 from \"@report-framework/service/sector.service\";\nimport * as i7 from \"@library/storage-service\";\nimport * as i8 from \"@library/tsc-common\";\nimport * as i9 from \"@library/toastr-service\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/card\";\nimport * as i12 from \"@angular/material/checkbox\";\nimport * as i13 from \"@angular/material/tooltip\";\nimport * as i14 from \"@angular/material/form-field\";\nimport * as i15 from \"@angular/material/select\";\nimport * as i16 from \"@angular/material/core\";\nimport * as i17 from \"ngx-mat-select-search\";\nfunction ReportingPreferenceComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelement(2, \"lib-message-alert\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"messageAlertTypeInp\", ctx_r0.messageAlertTypeEnum.SUCCESS)(\"messageAlertIconInp\", ctx_r0.messageAlertIconEnum.SUCCESS_ICON);\n  }\n}\nfunction ReportingPreferenceComponent_div_21_div_11_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 35);\n    i0.ɵɵelementStart(1, \"span\", 36);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const sector_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", sector_r10.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", sector_r10.name, \" \");\n  }\n}\nfunction ReportingPreferenceComponent_div_21_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 29);\n    i0.ɵɵelementStart(2, \"mat-label\", 30);\n    i0.ɵɵtext(3, \"Select sector\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 33);\n    i0.ɵɵelementStart(5, \"mat-option\");\n    i0.ɵɵelement(6, \"ngx-mat-select-search\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ReportingPreferenceComponent_div_21_div_11_mat_option_7_Template, 3, 2, \"mat-option\", 32);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-error\");\n    i0.ɵɵtext(10, \" Reporting sector is required field \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r5 = i0.ɵɵnextContext().index;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r6.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r6.searchList[i_r5][\"filterFC\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx_r6.searchList[i_r5][\"filteredEntities\"]));\n  }\n}\nfunction ReportingPreferenceComponent_div_21_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 37);\n    i0.ɵɵelementStart(1, \"div\", 38);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.COMMON_CONSTANT.HYPHEN, \" \");\n  }\n}\nfunction ReportingPreferenceComponent_div_21_mat_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 35);\n    i0.ɵɵelementStart(1, \"span\", 36);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const interval_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", interval_r12.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", interval_r12.name, \" \");\n  }\n}\nfunction ReportingPreferenceComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelementStart(2, \"div\", 21);\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵelementStart(4, \"div\", 22);\n    i0.ɵɵelementStart(5, \"mat-checkbox\", 23);\n    i0.ɵɵlistener(\"change\", function ReportingPreferenceComponent_div_21_Template_mat_checkbox_change_5_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const i_r5 = restoredCtx.index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.enableDisableRowControl($event, i_r5);\n    });\n    i0.ɵɵelementStart(6, \"span\", 24);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 25);\n    i0.ɵɵelementStart(9, \"span\", 26);\n    i0.ɵɵtext(10, \" info \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, ReportingPreferenceComponent_div_21_div_11_Template, 11, 5, \"div\", 27);\n    i0.ɵɵtemplate(12, ReportingPreferenceComponent_div_21_div_12_Template, 3, 1, \"div\", 28);\n    i0.ɵɵelementStart(13, \"div\", 11);\n    i0.ɵɵelementStart(14, \"mat-form-field\", 29);\n    i0.ɵɵelementStart(15, \"mat-label\", 30);\n    i0.ɵɵtext(16, \"Select interval\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"mat-select\", 31);\n    i0.ɵɵtemplate(18, ReportingPreferenceComponent_div_21_mat_option_18_Template, 3, 2, \"mat-option\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"mat-error\");\n    i0.ɵɵtext(20, \" Reporting interval is required field \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const preferenceData_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r5);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", preferenceData_r4.get(\"reportingFrameworkName\").value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r1.showInfo(preferenceData_r4.get(\"reportingFrameworkKeyID\").value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showSectorField(preferenceData_r4.get(\"reportingFrameworkKeyID\").value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.clearSectorValidatorAndShowHyphen(preferenceData_r4.get(\"reportingFrameworkKeyID\").value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r1.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", preferenceData_r4.get(\"intervalList\").value);\n  }\n}\nfunction ReportingPreferenceComponent_button_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function ReportingPreferenceComponent_button_23_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onSubmit();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.ButtonLabelEnum.SAVE_BTN_LABEL, \" \");\n  }\n}\nfunction ReportingPreferenceComponent_button_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function ReportingPreferenceComponent_button_24_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onSubmit();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.ButtonLabelEnum.UPDATE_BTN_LABEL, \" \");\n  }\n}\n// /tsc-library\nconst reporting_framework_lookup_url = environment.REPORTING_FRAMEWORK_API_URL;\nexport let ReportingPreferenceComponent = /*#__PURE__*/(() => {\n  class ReportingPreferenceComponent {\n    constructor(dialog, formBuilder, reportFrameworkController, reportingPreferenceController, reportingPreferenceService, sectorService, stroageService, lookupService, toastrService) {\n      this.dialog = dialog;\n      this.formBuilder = formBuilder;\n      this.reportFrameworkController = reportFrameworkController;\n      this.reportingPreferenceController = reportingPreferenceController;\n      this.reportingPreferenceService = reportingPreferenceService;\n      this.sectorService = sectorService;\n      this.stroageService = stroageService;\n      this.lookupService = lookupService;\n      this.toastrService = toastrService;\n      this.ButtonLabelEnum = ButtonLabelEnum;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.messageAlertTypeEnum = MessageAlertTypeEnum;\n      this.messageAlertIconEnum = MessageAlertIconEnum;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.ReportingFrameworkKeyIDEnum = ReportingFrameworkKeyIDEnum;\n      this.reportingFrameworkList = [new ReportingFramework()];\n      this.reportingPreferenceM = new ReportPreference();\n      this.isUpdate = false;\n      this.sectorList = [new Sector()];\n      this.intervalList = [];\n      this.submit = false;\n      this.frameworkInfo = [{\n        \"keyID\": ReportingFrameworkKeyIDEnum.BRSR,\n        \"info\": 'Indian Framework for assurance and ESG disclosures for value chain'\n      }, {\n        \"keyID\": ReportingFrameworkKeyIDEnum.SASB,\n        \"info\": 'Global framework for disclosing relevant sustainability risk and opportunities to investors through industry-specific standards.'\n      }, {\n        \"keyID\": ReportingFrameworkKeyIDEnum.CDP,\n        \"info\": 'Carbon Disclosure Project, a global disclosure system for managing environmenta impacts, particularly related to carbon emissions and climate change.'\n      }, {\n        \"keyID\": ReportingFrameworkKeyIDEnum.IFRS_S1,\n        \"info\": 'International Financial Reporting Standards on Sustainability-related Financial Information, providing guidelines for sustainability-related financial disclosures.'\n      }, {\n        \"keyID\": ReportingFrameworkKeyIDEnum.IFRS_S2,\n        \"info\": 'International Financial Reporting Standards on Climate-related Disclosures, focusing on disclosures related to climate-related risks and opportunities.'\n      }, {\n        \"keyID\": ReportingFrameworkKeyIDEnum.GRI,\n        \"info\": 'Global Reporting Initiative, a widely used international standards organization for sustainability reporting.'\n      }, {\n        \"keyID\": ReportingFrameworkKeyIDEnum.CSRD,\n        \"info\": 'Corporate Sustainability Reporting Directive, an EU regulation requiring large companies to disclose information on how they operate and manage social and environmental challenges.'\n      }];\n      this.searchList = [];\n      this.disabledControlsForRow = ['sectorID', 'reportingIntervalID'];\n    }\n    ngOnInit() {\n      this.rootOrgID = this.stroageService.getStorage('rootOrgID');\n      this.FormDataInit();\n      this.formControlInitialization();\n    }\n    FormDataInit() {\n      this.formDataFG = this.formBuilder.group({\n        reportingPreference: this.formBuilder.array([])\n      });\n    }\n    get preferenceDataArray() {\n      return this.formDataFG.get('reportingPreference');\n    }\n    formArrayInit() {\n      this.preferenceDataArray.controls = [];\n      this.searchList = [];\n      this.reportingFrameworkList.map(framework => {\n        let sectorList = this.sectorList.filter(sector => sector.reportFrameworkID == framework.id);\n        let formGroup = this.getFormGroup(framework, sectorList, null);\n        this.disabledFramewrok(framework, formGroup);\n        if (framework.keyID != ReportingFrameworkKeyIDEnum.CDP) {\n          this.disabledControlsForRow.forEach(controlName => {\n            formGroup.get(controlName).disable();\n          });\n        }\n        this.preferenceDataArray.push(formGroup);\n        this.createSearchList(sectorList);\n      });\n    }\n    getFormGroup(framework, sectorList, preference) {\n      return this.formBuilder.group({\n        reportingFrameworkKeyID: [framework.keyID],\n        reportingFrameworkName: [framework.name],\n        reportingFrameworkID: [framework.id],\n        sectorList: [sectorList],\n        isEnabled: [preference != null ? preference.isEnabled : false],\n        sectorID: [preference != null ? preference.sectorID : null],\n        reportingIntervalID: [preference != null ? preference.reportingIntervalID : null],\n        intervalList: [this.intervalList]\n      });\n    }\n    patchFormGroup() {\n      this.preferenceDataArray.controls = [];\n      this.searchList = [];\n      this.reportingFrameworkList.map(framework => {\n        let pref = this.reportingPreferenceM.reportingPreference.find(p => p.reportingFrameworkKeyID == framework.keyID);\n        let sectorList = this.sectorList.filter(sector => sector.reportFrameworkID == framework.id);\n        let formGroup = this.getFormGroup(framework, sectorList, pref);\n        this.disabledFramewrok(framework, formGroup);\n        if (framework.keyID != ReportingFrameworkKeyIDEnum.CDP) {\n          if (!formGroup.controls['isEnabled'].value) {\n            this.disabledControlsForRow.forEach(controlName => {\n              formGroup.get(controlName).disable();\n            });\n          }\n        }\n        this.preferenceDataArray.push(formGroup);\n        this.createSearchList(sectorList);\n      });\n      // this.initialObject = this.formDataFG.value;\n      // this.isEqual = true;\n    }\n\n    createSearchList(sectorList) {\n      let sectorSearchUtil = new MatSelectSearchService(['name']);\n      sectorSearchUtil.entityArr = sectorList;\n      sectorSearchUtil.createSubscription();\n      this.searchList.push(sectorSearchUtil);\n    }\n    disabledFramewrok(framework, formGroup) {\n      if (framework.keyID == ReportingFrameworkKeyIDEnum.CDP) {\n        formGroup.disable();\n      }\n    }\n    disableControlsInRow(index, disabledControlsForRow) {\n      const row = this.preferenceDataArray.at(index);\n      disabledControlsForRow.forEach(controlName => {\n        row.get(controlName).reset(null);\n        row.get(controlName).disable();\n        row.get(controlName).clearValidators();\n        row.get(controlName).updateValueAndValidity();\n      });\n    }\n    enableDisableRowControl(event, index) {\n      const row = this.preferenceDataArray.at(index);\n      if (event.checked) {\n        this.disabledControlsForRow.forEach(controlName => {\n          row.get(controlName).enable();\n          row.get(controlName).addValidators([Validators.required]);\n          row.get(controlName).updateValueAndValidity();\n        });\n        if (this.clearSectorValidatorAndShowHyphen(row.get('reportingFrameworkKeyID').value)) {\n          row.get('sectorID').clearValidators();\n          row.get('sectorID').updateValueAndValidity();\n        }\n        if (row.get('reportingFrameworkKeyID').value == ReportingFrameworkKeyIDEnum.IFRS_S2) {\n          this.getIfrsFormGroup(true);\n        }\n      } else {\n        this.disableControlsInRow(index, this.disabledControlsForRow);\n        if (row.get('reportingFrameworkKeyID').value == ReportingFrameworkKeyIDEnum.IFRS_S2) {\n          this.getIfrsFormGroup(false);\n        }\n      }\n    }\n    clearSectorValidatorAndShowHyphen(formControlValue) {\n      if (formControlValue == ReportingFrameworkKeyIDEnum.BRSR || formControlValue == ReportingFrameworkKeyIDEnum.GRI || formControlValue == ReportingFrameworkKeyIDEnum.IFRS_S1 || formControlValue == ReportingFrameworkKeyIDEnum.CSRD) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    showSectorField(formControlValue) {\n      if (formControlValue != ReportingFrameworkKeyIDEnum.BRSR && formControlValue != ReportingFrameworkKeyIDEnum.GRI && formControlValue != ReportingFrameworkKeyIDEnum.IFRS_S1 && formControlValue != ReportingFrameworkKeyIDEnum.CSRD) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    getIfrsFormGroup(validator) {\n      const formGroup = this.preferenceDataArray.controls.find(control => control.value.reportingFrameworkKeyID === ReportingFrameworkKeyIDEnum.IFRS_S1);\n      if (validator) {\n        formGroup.get('isEnabled').patchValue(true);\n        this.disabledControlsForRow.forEach(controlName => {\n          formGroup.get(controlName).enable();\n          formGroup.get(controlName).addValidators([Validators.required]);\n          formGroup.get(controlName).updateValueAndValidity();\n        });\n        formGroup.get('sectorID').clearValidators();\n        formGroup.get('sectorID').updateValueAndValidity();\n      } else {\n        formGroup.get('isEnabled').reset(null);\n        formGroup.get('isEnabled').clearValidators();\n        formGroup.get('isEnabled').updateValueAndValidity();\n        this.disabledControlsForRow.forEach(controlName => {\n          formGroup.get(controlName).reset(null);\n          formGroup.get(controlName).disable();\n          formGroup.get(controlName).clearValidators();\n          formGroup.get(controlName).updateValueAndValidity();\n        });\n      }\n    }\n    formControlInitialization() {\n      let lookup = [{\n        lookupCode: [LookupCodeEnum.REPORT_INTERVAL],\n        lookupKey: []\n      }];\n      forkJoin([this.reportFrameworkController.getAllReportingFramework(this.rootOrgID), this.sectorService.getAllSectors(this.rootOrgID), this.lookupService.getLookup(reporting_framework_lookup_url, lookup)]).subscribe(([reportingFrameworkM, sectorM, intervalM]) => {\n        this.reportingFrameworkList = reportingFrameworkM;\n        this.sectorList = sectorM;\n        this.intervalList = intervalM;\n        this.getReportingPreference();\n      }, error => {\n        console.error('error in formInitialization -', error);\n      });\n    }\n    showInfo(keyID) {\n      let framework = this.frameworkInfo.find(info => info.keyID == keyID);\n      return framework.info;\n    }\n    getReportingPreference() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.reportingPreferenceM = yield this.reportingPreferenceService.getReportingPreferenceByOrgID(this.rootOrgID);\n        if (this.reportingPreferenceM.reportingPreference.length > 0) {\n          this.isUpdate = true;\n          this.patchFormGroup();\n        } else {\n          this.formArrayInit();\n        }\n      });\n    }\n    createReportingPreference() {\n      if (this.formDataFG.invalid || this.preferenceDataArray.controls.every(formGroup => formGroup.get('isEnabled').value == false)) {\n        this.formDataFG.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.reportingPreferenceController.createReportingPreference(this.rootOrgID, this.getValueJson()).subscribe(response => {\n        this.getReportingPreference();\n      }, error => {\n        console.log('error in createReportingPreference() -', error);\n      });\n    }\n    validateReportingPreference() {\n      if (this.formDataFG.invalid) {\n        this.formDataFG.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.confirmationDialog();\n    }\n    updateReportingPreference() {\n      this.reportingPreferenceController.updateReportingPreference(this.rootOrgID, this.getValueJson()).subscribe(response => {\n        this.getReportingPreference();\n      }, error => {\n        console.log('error in updateReportingPreference() -', error);\n      });\n    }\n    onSubmit() {\n      if (this.isUpdate) {\n        this.validateReportingPreference();\n      } else {\n        this.createReportingPreference();\n      }\n    }\n    getValueJson() {\n      let formGroupRawValue = cloneDeep(this.formDataFG.getRawValue());\n      let value_json = formGroupRawValue.reportingPreference.map(({\n        reportingFrameworkKeyID,\n        isEnabled,\n        sectorID,\n        reportingIntervalID\n      }) => ({\n        reportingFrameworkKeyID,\n        isEnabled,\n        sectorID,\n        reportingIntervalID\n      }));\n      formGroupRawValue['reportingPreference'] = value_json;\n      return formGroupRawValue;\n    }\n    confirmationDialog() {\n      const dialogRef = this.dialog.open(DialogOneComponent, {\n        minWidth: '450px',\n        maxWidth: '700px',\n        data: {\n          type: DialogOneEnum.CONFIRMATION,\n          icon: 'warning',\n          header: 'Edit reporting preference',\n          body: 'These changes will be applied for new reports.\\n Are you sure?',\n          buttonOne: 'Cancel',\n          buttonTwo: 'Update'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.updateReportingPreference();\n        }\n      });\n    }\n  }\n  ReportingPreferenceComponent.ɵfac = function ReportingPreferenceComponent_Factory(t) {\n    return new (t || ReportingPreferenceComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ReportFrameworkController), i0.ɵɵdirectiveInject(i4.ReportingPreferenceController), i0.ɵɵdirectiveInject(i5.ReportingPreferenceService), i0.ɵɵdirectiveInject(i6.SectorService), i0.ɵɵdirectiveInject(i7.StorageService), i0.ɵɵdirectiveInject(i8.LookupService), i0.ɵɵdirectiveInject(i9.ToastrService));\n  };\n  ReportingPreferenceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ReportingPreferenceComponent,\n    selectors: [[\"app-reporting-preference\"]],\n    decls: 25,\n    vars: 5,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\", \"h100\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"pageSubtitle\"], [\"class\", \"extraInfoCard pt-2 px-3\", 4, \"ngIf\"], [1, \"card-body\"], [1, \"row\"], [1, \"col-sm-11\"], [1, \"border\", \"cardOverwrite\"], [1, \"row\", \"fs-5\", \"pb-2\", \"fw-bold\", \"pageSubCardTitle\"], [1, \"col-sm-3\"], [3, \"formGroup\"], [\"formArrayName\", \"reportingPreference\"], [4, \"ngFor\", \"ngForOf\"], [1, \"float-end\", \"mt-4\"], [\"class\", \"button btn btn-sm btn-success\", \"type\", \"submit\", 3, \"click\", 4, \"ngIf\"], [1, \"extraInfoCard\", \"pt-2\", \"px-3\"], [1, \"col-sm-10\"], [\"labelInp\", \"Preferences saved successfully!\", \"contentInp\", \"Your selections for the reporting framework, their corresponding sectors, and reporting frequency have been successfully saved.\", 3, \"messageAlertTypeInp\", \"messageAlertIconInp\"], [1, \"row\", \"mt-2\", 3, \"formGroupName\"], [1, \"col-sm-3\", \"mt-3\"], [1, \"col-sm-6\"], [\"formControlName\", \"isEnabled\", 1, \"me-3\", 3, \"change\"], [1, \"me-2\"], [1, \"col-sm-4\"], [\"matTooltipClass\", \"infoTooltip\", \"matTooltipPosition\", \"above\", 1, \"material-symbols-outlined\", \"cursorPointer\", 3, \"matTooltip\"], [\"class\", \"col-sm-3\", 4, \"ngIf\"], [\"class\", \"col-sm-3 pt-2\", 4, \"ngIf\"], [3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"reportingIntervalID\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"sectorID\"], [\"placeholderLabel\", \"Search by sector name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [1, \"col-sm-3\", \"pt-2\"], [1, \"mt-2\", \"ps-5\", \"ms-5\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-sm\", \"btn-success\", 3, \"click\"]],\n    template: function ReportingPreferenceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4, \" Enable applicable reporting framework \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtext(6, \" Select the reports that are applicable to your company and specify the corresponding sector and reporting frequency. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, ReportingPreferenceComponent_div_7_Template, 3, 2, \"div\", 5);\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelementStart(11, \"mat-card\", 9);\n        i0.ɵɵelementStart(12, \"div\", 10);\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵtext(14, \" Reporting framework \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 11);\n        i0.ɵɵtext(16, \" Select a reporting sector \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 11);\n        i0.ɵɵtext(18, \" Select a reporting interval \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"form\", 12);\n        i0.ɵɵelementStart(20, \"div\", 13);\n        i0.ɵɵtemplate(21, ReportingPreferenceComponent_div_21_Template, 21, 7, \"div\", 14);\n        i0.ɵɵelementStart(22, \"div\", 15);\n        i0.ɵɵtemplate(23, ReportingPreferenceComponent_button_23_Template, 2, 1, \"button\", 16);\n        i0.ɵɵtemplate(24, ReportingPreferenceComponent_button_24_Template, 2, 1, \"button\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.isUpdate);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"formGroup\", ctx.formDataFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.preferenceDataArray.controls);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isUpdate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isUpdate);\n      }\n    },\n    directives: [i10.NgIf, i11.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormArrayName, i10.NgForOf, i8.MessageAlertComponent, i2.FormGroupName, i12.MatCheckbox, i2.NgControlStatus, i2.FormControlName, i13.MatTooltip, i14.MatFormField, i14.MatLabel, i15.MatSelect, i14.MatError, i16.MatOption, i17.MatSelectSearchComponent, i2.FormControlDirective],\n    pipes: [i10.AsyncPipe],\n    encapsulation: 2\n  });\n  return ReportingPreferenceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}