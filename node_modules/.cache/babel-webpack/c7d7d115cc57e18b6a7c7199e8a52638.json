{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProcessController = /*#__PURE__*/(() => {\n  class ProcessController {\n    constructor(http) {\n      this.http = http;\n    }\n    getProcessByPage(orgID, pageNo, pageSize, sortBy, orderBy, searchValue, filterArr) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      if (searchValue != null) {\n        params = params.append('searchBy', searchValue);\n      }\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/process/page`, {\n        params: params\n      });\n    }\n    getProcessList(orgID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/process-list`);\n    }\n    getProcessByID(orgID, processID, isLatest = null) {\n      let params = new HttpParams();\n      if (isLatest != null) {\n        params = params.append('isLatest', isLatest);\n      }\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/process/${processID}`, {\n        params: params\n      });\n    }\n    createProcess(orgID, processes) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/process`, processes);\n    }\n    updateProcess(orgID, processID, process) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/process/${processID}`, process);\n    }\n    getProcessInputs() {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}process/INPUT`);\n    }\n    getProcessOutputs() {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}process/OUTPUT`);\n    }\n    getIpccProcess() {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}ipcc-process`);\n    }\n    getProcessParamTech(ippcProcessID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}ipcc-process/${ippcProcessID}/map`);\n    }\n  }\n  ProcessController.ɵfac = function ProcessController_Factory(t) {\n    return new (t || ProcessController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ProcessController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProcessController,\n    factory: ProcessController.ɵfac,\n    providedIn: 'root'\n  });\n  return ProcessController;\n})();","map":null,"metadata":{},"sourceType":"module"}