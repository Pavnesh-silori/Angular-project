{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nimport * as i2 from '@library/authentication-service';\nclass ApplicationServiceService {\n  constructor() {}\n}\nApplicationServiceService.ɵfac = function ApplicationServiceService_Factory(t) {\n  return new (t || ApplicationServiceService)();\n};\nApplicationServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ApplicationServiceService,\n  factory: ApplicationServiceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApplicationServiceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass ApplicationServiceComponent {\n  constructor() {}\n  ngOnInit() {}\n}\nApplicationServiceComponent.ɵfac = function ApplicationServiceComponent_Factory(t) {\n  return new (t || ApplicationServiceComponent)();\n};\nApplicationServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ApplicationServiceComponent,\n  selectors: [[\"lib-application-service\"]],\n  decls: 2,\n  vars: 0,\n  template: function ApplicationServiceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \" application-service works! \");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApplicationServiceComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-application-service',\n      template: `\n    <p>\n      application-service works!\n    </p>\n  `,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass ApplicationServiceModule {\n  static forRoot(environment) {\n    return {\n      ngModule: ApplicationServiceModule,\n      providers: [{\n        provide: 'environment',\n        useValue: environment\n      }]\n    };\n  }\n}\nApplicationServiceModule.ɵfac = function ApplicationServiceModule_Factory(t) {\n  return new (t || ApplicationServiceModule)();\n};\nApplicationServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ApplicationServiceModule\n});\nApplicationServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApplicationServiceModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ApplicationServiceComponent],\n      imports: [],\n      exports: [ApplicationServiceComponent]\n    }]\n  }], null, null);\n})();\nvar ApplicationKeyID;\n(function (ApplicationKeyID) {\n  ApplicationKeyID[\"NETZERO_ADMIN_KEY_ID\"] = \"NETZERO_ADMIN\";\n  ApplicationKeyID[\"ACCOUNT_KEY_ID\"] = \"ACCOUNT\";\n  ApplicationKeyID[\"ADMIN_KEY_ID\"] = \"ADMIN\";\n  ApplicationKeyID[\"NETZERO_KEY_ID\"] = \"TSC_NETZERO\";\n  ApplicationKeyID[\"ENERGY_KEY_ID\"] = \"TSC_ENERGY\";\n  ApplicationKeyID[\"WATER_KEY_ID\"] = \"TSC_WATER\";\n  ApplicationKeyID[\"ENVIRO_KEY_ID\"] = \"TSC_ENVIRO\";\n  ApplicationKeyID[\"CONNECT_KEY_ID\"] = \"TSC_CONNECT\";\n  ApplicationKeyID[\"OFFSET_KEY_ID\"] = \"TSC_OFFSET\";\n  ApplicationKeyID[\"SUPPLIER_KEY_ID\"] = \"SUPPLIER\";\n  ApplicationKeyID[\"EMPLOYEE_KEY_ID\"] = \"EMPLOYEE\";\n})(ApplicationKeyID || (ApplicationKeyID = {}));\nclass Application {\n  constructor() {\n    this.id = null;\n    this.name = null;\n    this.keyID = null;\n    this.description = null;\n    this.url = null;\n  }\n}\nclass Role {}\nclass RootObject {}\nclass UserApplication {}\nclass ApplicationController {\n  constructor(http, environment) {\n    this.http = http;\n    this.environment = environment;\n  }\n  getAllApplication() {\n    return this.http.get(`${this.environment.SUBSCRIPTION_API_URL}applications`);\n  }\n  getApplicationByUserAccess() {\n    return this.http.get(`${this.environment.ORGANIZATION_API_URL}user/applications/access`);\n  }\n  getSubscribedApplicationsByOrgID(orgID) {\n    return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}/applications-roles`);\n  }\n}\nApplicationController.ɵfac = function ApplicationController_Factory(t) {\n  return new (t || ApplicationController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n};\nApplicationController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ApplicationController,\n  factory: ApplicationController.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApplicationController, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['environment']\n      }]\n    }];\n  }, null);\n})();\nclass ApplicationService {\n  constructor(environment, applicationController, authenticationService) {\n    this.environment = environment;\n    this.applicationController = applicationController;\n    this.authenticationService = authenticationService;\n  }\n  getAllApplication() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let applicationM;\n      try {\n        applicationM = yield this.applicationController.getAllApplication().toPromise();\n        if (applicationM) {\n          return applicationM;\n        } else {\n          return [new Application()];\n        }\n      } catch (error) {\n        console.error('Error -', error);\n        return [new Application()];\n      }\n    });\n  }\n  getApplicationByUserAccess() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let applicationM;\n      try {\n        applicationM = yield this.applicationController.getApplicationByUserAccess().toPromise();\n        if (applicationM) {\n          return applicationM;\n        } else {\n          return [new Application()];\n        }\n      } catch (error) {\n        console.error('Error -', error);\n        return [new Application()];\n      }\n    });\n  }\n  getSubscribedApplicationsByOrgID(orgID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let applicationM;\n      try {\n        applicationM = yield this.applicationController.getSubscribedApplicationsByOrgID(orgID).toPromise();\n        if (applicationM) {\n          return applicationM['application'];\n        } else {\n          return [new UserApplication()];\n        }\n      } catch (error) {\n        console.error('Error -', error);\n        return [new UserApplication()];\n      }\n    });\n  }\n  getApplicationLogo(keyID) {\n    let logo;\n    let basePath = '/assets/images/application-logo/';\n    switch (keyID) {\n      case ApplicationKeyID.ADMIN_KEY_ID:\n        logo = basePath + 'admin-with-name.jpg';\n        break;\n      case ApplicationKeyID.NETZERO_KEY_ID:\n        logo = basePath + 'netzero-with-name.jpg';\n        break;\n      case ApplicationKeyID.WATER_KEY_ID:\n        logo = basePath + 'water-with-name.jpg';\n        break;\n      case ApplicationKeyID.ENERGY_KEY_ID:\n        logo = basePath + 'energy-with-name.jpg';\n        break;\n      case ApplicationKeyID.ENVIRO_KEY_ID:\n        logo = basePath + 'enviro-with-name.jpg';\n        break;\n      case ApplicationKeyID.OFFSET_KEY_ID:\n        logo = basePath + 'offset-with-name.jpg';\n        break;\n      case ApplicationKeyID.CONNECT_KEY_ID:\n        logo = basePath + 'connect-with-name.jpg';\n        break;\n      default:\n        logo = null;\n    }\n    return logo;\n  }\n  getApplicationLogoWithoutName(keyID) {\n    let logo;\n    let basePath = '/assets/images/application-logo/';\n    switch (keyID) {\n      case ApplicationKeyID.ADMIN_KEY_ID:\n        logo = basePath + 'admin-without-name.jpg';\n        break;\n      case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n        logo = basePath + 'll-admin-without-name.png';\n        break;\n      case ApplicationKeyID.NETZERO_KEY_ID:\n        logo = basePath + 'netzero-without-name.jpg';\n        break;\n      case ApplicationKeyID.WATER_KEY_ID:\n        logo = basePath + 'water-without-name.jpg';\n        break;\n      case ApplicationKeyID.ENERGY_KEY_ID:\n        logo = basePath + 'energy-without-name.jpg';\n        break;\n      case ApplicationKeyID.ENVIRO_KEY_ID:\n        logo = basePath + 'enviro-without-name.jpg';\n        break;\n      case ApplicationKeyID.OFFSET_KEY_ID:\n        logo = basePath + 'offset-without-name.jpg';\n        break;\n      case ApplicationKeyID.CONNECT_KEY_ID:\n        logo = basePath + 'connect-without-name.jpg';\n        break;\n      default:\n        logo = null;\n    }\n    return logo;\n  }\n  getApplicationLogoWithSideName(keyID) {\n    let logo;\n    let basePath = '/assets/images/application-logo/with-side-name/';\n    switch (keyID) {\n      case ApplicationKeyID.ADMIN_KEY_ID:\n        logo = basePath + 'admin.png';\n        break;\n      case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n        logo = basePath + 'll-admin.png';\n        break;\n      case ApplicationKeyID.NETZERO_KEY_ID:\n        logo = basePath + 'netzero.png';\n        break;\n      case ApplicationKeyID.WATER_KEY_ID:\n        logo = basePath + 'water.png';\n        break;\n      case ApplicationKeyID.ENERGY_KEY_ID:\n        logo = basePath + 'energy.png';\n        break;\n      case ApplicationKeyID.ENVIRO_KEY_ID:\n        logo = basePath + 'enviro.png';\n        break;\n      case ApplicationKeyID.OFFSET_KEY_ID:\n        logo = basePath + 'offset.png';\n        break;\n      case ApplicationKeyID.CONNECT_KEY_ID:\n        logo = basePath + 'connect.png';\n        break;\n      default:\n        logo = null;\n    }\n    return logo;\n  }\n  getApplicationLogoFileName(keyID) {\n    let fileName;\n    switch (keyID) {\n      case ApplicationKeyID.ADMIN_KEY_ID:\n        fileName = 'admin';\n        break;\n      case ApplicationKeyID.NETZERO_KEY_ID:\n        fileName = 'netzero';\n        break;\n      case ApplicationKeyID.WATER_KEY_ID:\n        fileName = 'water';\n        break;\n      case ApplicationKeyID.ENERGY_KEY_ID:\n        fileName = 'energy';\n        break;\n      case ApplicationKeyID.ENVIRO_KEY_ID:\n        fileName = 'enviro';\n        break;\n      case ApplicationKeyID.OFFSET_KEY_ID:\n        fileName = 'offset';\n        break;\n      case ApplicationKeyID.CONNECT_KEY_ID:\n        fileName = 'connect';\n        break;\n      default:\n        fileName = null;\n    }\n    return fileName;\n  }\n  appRedirect(applicationKeyID) {\n    let redirectUrl;\n    switch (applicationKeyID) {\n      case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n        redirectUrl = this.environment.NETZERO_ADMIN_URL;\n        break;\n      case ApplicationKeyID.ADMIN_KEY_ID:\n        redirectUrl = this.environment.ADMIN_URL;\n        break;\n      case ApplicationKeyID.NETZERO_KEY_ID:\n        redirectUrl = this.environment.NETZERO_URL;\n        break;\n      case ApplicationKeyID.SUPPLIER_KEY_ID:\n        redirectUrl = this.environment.ENTERPRISE_SUPPLIER_URL;\n        break;\n      case ApplicationKeyID.OFFSET_KEY_ID:\n        redirectUrl = this.environment.OFFSET_URL;\n        break;\n      case ApplicationKeyID.CONNECT_KEY_ID:\n        redirectUrl = this.environment.CONNECT_URL;\n        break;\n      case ApplicationKeyID.ENERGY_KEY_ID:\n        redirectUrl = this.environment.ENERGY_URL;\n        break;\n      case ApplicationKeyID.WATER_KEY_ID:\n        redirectUrl = this.environment.WATER_URL;\n        break;\n      case ApplicationKeyID.ENVIRO_KEY_ID:\n        redirectUrl = this.environment.ENVIRO_URL;\n        break;\n      default:\n        redirectUrl = this.environment.ACCOUNT_URL;\n        break;\n    }\n    return redirectUrl;\n  }\n  appBtnLogout(applicationKeyID) {\n    let redirectUrl = '';\n    redirectUrl = this.appRedirect(applicationKeyID);\n    this.authenticationService.logout(redirectUrl, '', 'logout');\n  }\n}\nApplicationService.ɵfac = function ApplicationService_Factory(t) {\n  return new (t || ApplicationService)(i0.ɵɵinject('environment'), i0.ɵɵinject(ApplicationController), i0.ɵɵinject(i2.AuthenticationService));\n};\nApplicationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ApplicationService,\n  factory: ApplicationService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApplicationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['environment']\n      }]\n    }, {\n      type: ApplicationController\n    }, {\n      type: i2.AuthenticationService\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of application-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Application, ApplicationController, ApplicationKeyID, ApplicationService, ApplicationServiceComponent, ApplicationServiceModule, ApplicationServiceService, Role, RootObject, UserApplication };","map":{"version":3,"names":["i0","Injectable","Component","NgModule","Inject","i1","__awaiter","i2","ApplicationServiceService","constructor","ɵfac","ApplicationServiceService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","ApplicationServiceComponent","ngOnInit","ApplicationServiceComponent_Factory","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","ApplicationServiceComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","encapsulation","selector","styles","ApplicationServiceModule","forRoot","environment","ngModule","providers","provide","useValue","ApplicationServiceModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ApplicationKeyID","Application","id","name","keyID","description","url","Role","RootObject","UserApplication","ApplicationController","http","getAllApplication","get","SUBSCRIPTION_API_URL","getApplicationByUserAccess","ORGANIZATION_API_URL","getSubscribedApplicationsByOrgID","orgID","ApplicationController_Factory","ɵɵinject","HttpClient","undefined","decorators","ApplicationService","applicationController","authenticationService","applicationM","toPromise","error","console","getApplicationLogo","logo","basePath","ADMIN_KEY_ID","NETZERO_KEY_ID","WATER_KEY_ID","ENERGY_KEY_ID","ENVIRO_KEY_ID","OFFSET_KEY_ID","CONNECT_KEY_ID","getApplicationLogoWithoutName","NETZERO_ADMIN_KEY_ID","getApplicationLogoWithSideName","getApplicationLogoFileName","fileName","appRedirect","applicationKeyID","redirectUrl","NETZERO_ADMIN_URL","ADMIN_URL","NETZERO_URL","SUPPLIER_KEY_ID","ENTERPRISE_SUPPLIER_URL","OFFSET_URL","CONNECT_URL","ENERGY_URL","WATER_URL","ENVIRO_URL","ACCOUNT_URL","appBtnLogout","logout","ApplicationService_Factory","AuthenticationService"],"sources":["/home/silori/projects/gitClones/netzero-ui/library/application-service/fesm2015/library-application-service.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nimport * as i2 from '@library/authentication-service';\n\nclass ApplicationServiceService {\n    constructor() { }\n}\nApplicationServiceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nApplicationServiceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass ApplicationServiceComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n}\nApplicationServiceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nApplicationServiceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: ApplicationServiceComponent, selector: \"lib-application-service\", ngImport: i0, template: `\n    <p>\n      application-service works!\n    </p>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-application-service',\n                    template: `\n    <p>\n      application-service works!\n    </p>\n  `,\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass ApplicationServiceModule {\n    static forRoot(environment) {\n        return {\n            ngModule: ApplicationServiceModule,\n            providers: [\n                { provide: 'environment', useValue: environment }\n            ]\n        };\n    }\n}\nApplicationServiceModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nApplicationServiceModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceModule, declarations: [ApplicationServiceComponent], exports: [ApplicationServiceComponent] });\nApplicationServiceModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationServiceModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        ApplicationServiceComponent\n                    ],\n                    imports: [],\n                    exports: [\n                        ApplicationServiceComponent\n                    ]\n                }]\n        }] });\n\nvar ApplicationKeyID;\n(function (ApplicationKeyID) {\n    ApplicationKeyID[\"NETZERO_ADMIN_KEY_ID\"] = \"NETZERO_ADMIN\";\n    ApplicationKeyID[\"ACCOUNT_KEY_ID\"] = \"ACCOUNT\";\n    ApplicationKeyID[\"ADMIN_KEY_ID\"] = \"ADMIN\";\n    ApplicationKeyID[\"NETZERO_KEY_ID\"] = \"TSC_NETZERO\";\n    ApplicationKeyID[\"ENERGY_KEY_ID\"] = \"TSC_ENERGY\";\n    ApplicationKeyID[\"WATER_KEY_ID\"] = \"TSC_WATER\";\n    ApplicationKeyID[\"ENVIRO_KEY_ID\"] = \"TSC_ENVIRO\";\n    ApplicationKeyID[\"CONNECT_KEY_ID\"] = \"TSC_CONNECT\";\n    ApplicationKeyID[\"OFFSET_KEY_ID\"] = \"TSC_OFFSET\";\n    ApplicationKeyID[\"SUPPLIER_KEY_ID\"] = \"SUPPLIER\";\n    ApplicationKeyID[\"EMPLOYEE_KEY_ID\"] = \"EMPLOYEE\";\n})(ApplicationKeyID || (ApplicationKeyID = {}));\n\nclass Application {\n    constructor() {\n        this.id = null;\n        this.name = null;\n        this.keyID = null;\n        this.description = null;\n        this.url = null;\n    }\n}\nclass Role {\n}\nclass RootObject {\n}\nclass UserApplication {\n}\n\nclass ApplicationController {\n    constructor(http, environment) {\n        this.http = http;\n        this.environment = environment;\n    }\n    getAllApplication() {\n        return this.http.get(`${this.environment.SUBSCRIPTION_API_URL}applications`);\n    }\n    getApplicationByUserAccess() {\n        return this.http.get(`${this.environment.ORGANIZATION_API_URL}user/applications/access`);\n    }\n    getSubscribedApplicationsByOrgID(orgID) {\n        return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}/applications-roles`);\n    }\n}\nApplicationController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationController, deps: [{ token: i1.HttpClient }, { token: 'environment' }], target: i0.ɵɵFactoryTarget.Injectable });\nApplicationController.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationController, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationController, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['environment']\n                }] }]; } });\n\nclass ApplicationService {\n    constructor(environment, applicationController, authenticationService) {\n        this.environment = environment;\n        this.applicationController = applicationController;\n        this.authenticationService = authenticationService;\n    }\n    getAllApplication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let applicationM;\n            try {\n                applicationM = yield this.applicationController.getAllApplication().toPromise();\n                if (applicationM) {\n                    return applicationM;\n                }\n                else {\n                    return [new Application()];\n                }\n            }\n            catch (error) {\n                console.error('Error -', error);\n                return [new Application()];\n            }\n        });\n    }\n    getApplicationByUserAccess() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let applicationM;\n            try {\n                applicationM = yield this.applicationController.getApplicationByUserAccess().toPromise();\n                if (applicationM) {\n                    return applicationM;\n                }\n                else {\n                    return [new Application()];\n                }\n            }\n            catch (error) {\n                console.error('Error -', error);\n                return [new Application()];\n            }\n        });\n    }\n    getSubscribedApplicationsByOrgID(orgID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let applicationM;\n            try {\n                applicationM = yield this.applicationController.getSubscribedApplicationsByOrgID(orgID).toPromise();\n                if (applicationM) {\n                    return applicationM['application'];\n                }\n                else {\n                    return [new UserApplication()];\n                }\n            }\n            catch (error) {\n                console.error('Error -', error);\n                return [new UserApplication()];\n            }\n        });\n    }\n    getApplicationLogo(keyID) {\n        let logo;\n        let basePath = '/assets/images/application-logo/';\n        switch (keyID) {\n            case ApplicationKeyID.ADMIN_KEY_ID:\n                logo = basePath + 'admin-with-name.jpg';\n                break;\n            case ApplicationKeyID.NETZERO_KEY_ID:\n                logo = basePath + 'netzero-with-name.jpg';\n                break;\n            case ApplicationKeyID.WATER_KEY_ID:\n                logo = basePath + 'water-with-name.jpg';\n                break;\n            case ApplicationKeyID.ENERGY_KEY_ID:\n                logo = basePath + 'energy-with-name.jpg';\n                break;\n            case ApplicationKeyID.ENVIRO_KEY_ID:\n                logo = basePath + 'enviro-with-name.jpg';\n                break;\n            case ApplicationKeyID.OFFSET_KEY_ID:\n                logo = basePath + 'offset-with-name.jpg';\n                break;\n            case ApplicationKeyID.CONNECT_KEY_ID:\n                logo = basePath + 'connect-with-name.jpg';\n                break;\n            default:\n                logo = null;\n        }\n        return logo;\n    }\n    getApplicationLogoWithoutName(keyID) {\n        let logo;\n        let basePath = '/assets/images/application-logo/';\n        switch (keyID) {\n            case ApplicationKeyID.ADMIN_KEY_ID:\n                logo = basePath + 'admin-without-name.jpg';\n                break;\n            case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n                logo = basePath + 'll-admin-without-name.png';\n                break;\n            case ApplicationKeyID.NETZERO_KEY_ID:\n                logo = basePath + 'netzero-without-name.jpg';\n                break;\n            case ApplicationKeyID.WATER_KEY_ID:\n                logo = basePath + 'water-without-name.jpg';\n                break;\n            case ApplicationKeyID.ENERGY_KEY_ID:\n                logo = basePath + 'energy-without-name.jpg';\n                break;\n            case ApplicationKeyID.ENVIRO_KEY_ID:\n                logo = basePath + 'enviro-without-name.jpg';\n                break;\n            case ApplicationKeyID.OFFSET_KEY_ID:\n                logo = basePath + 'offset-without-name.jpg';\n                break;\n            case ApplicationKeyID.CONNECT_KEY_ID:\n                logo = basePath + 'connect-without-name.jpg';\n                break;\n            default:\n                logo = null;\n        }\n        return logo;\n    }\n    getApplicationLogoWithSideName(keyID) {\n        let logo;\n        let basePath = '/assets/images/application-logo/with-side-name/';\n        switch (keyID) {\n            case ApplicationKeyID.ADMIN_KEY_ID:\n                logo = basePath + 'admin.png';\n                break;\n            case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n                logo = basePath + 'll-admin.png';\n                break;\n            case ApplicationKeyID.NETZERO_KEY_ID:\n                logo = basePath + 'netzero.png';\n                break;\n            case ApplicationKeyID.WATER_KEY_ID:\n                logo = basePath + 'water.png';\n                break;\n            case ApplicationKeyID.ENERGY_KEY_ID:\n                logo = basePath + 'energy.png';\n                break;\n            case ApplicationKeyID.ENVIRO_KEY_ID:\n                logo = basePath + 'enviro.png';\n                break;\n            case ApplicationKeyID.OFFSET_KEY_ID:\n                logo = basePath + 'offset.png';\n                break;\n            case ApplicationKeyID.CONNECT_KEY_ID:\n                logo = basePath + 'connect.png';\n                break;\n            default:\n                logo = null;\n        }\n        return logo;\n    }\n    getApplicationLogoFileName(keyID) {\n        let fileName;\n        switch (keyID) {\n            case ApplicationKeyID.ADMIN_KEY_ID:\n                fileName = 'admin';\n                break;\n            case ApplicationKeyID.NETZERO_KEY_ID:\n                fileName = 'netzero';\n                break;\n            case ApplicationKeyID.WATER_KEY_ID:\n                fileName = 'water';\n                break;\n            case ApplicationKeyID.ENERGY_KEY_ID:\n                fileName = 'energy';\n                break;\n            case ApplicationKeyID.ENVIRO_KEY_ID:\n                fileName = 'enviro';\n                break;\n            case ApplicationKeyID.OFFSET_KEY_ID:\n                fileName = 'offset';\n                break;\n            case ApplicationKeyID.CONNECT_KEY_ID:\n                fileName = 'connect';\n                break;\n            default:\n                fileName = null;\n        }\n        return fileName;\n    }\n    appRedirect(applicationKeyID) {\n        let redirectUrl;\n        switch (applicationKeyID) {\n            case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n                redirectUrl = this.environment.NETZERO_ADMIN_URL;\n                break;\n            case ApplicationKeyID.ADMIN_KEY_ID:\n                redirectUrl = this.environment.ADMIN_URL;\n                break;\n            case ApplicationKeyID.NETZERO_KEY_ID:\n                redirectUrl = this.environment.NETZERO_URL;\n                break;\n            case ApplicationKeyID.SUPPLIER_KEY_ID:\n                redirectUrl = this.environment.ENTERPRISE_SUPPLIER_URL;\n                break;\n            case ApplicationKeyID.OFFSET_KEY_ID:\n                redirectUrl = this.environment.OFFSET_URL;\n                break;\n            case ApplicationKeyID.CONNECT_KEY_ID:\n                redirectUrl = this.environment.CONNECT_URL;\n                break;\n            case ApplicationKeyID.ENERGY_KEY_ID:\n                redirectUrl = this.environment.ENERGY_URL;\n                break;\n            case ApplicationKeyID.WATER_KEY_ID:\n                redirectUrl = this.environment.WATER_URL;\n                break;\n            case ApplicationKeyID.ENVIRO_KEY_ID:\n                redirectUrl = this.environment.ENVIRO_URL;\n                break;\n            default:\n                redirectUrl = this.environment.ACCOUNT_URL;\n                break;\n        }\n        return redirectUrl;\n    }\n    appBtnLogout(applicationKeyID) {\n        let redirectUrl = '';\n        redirectUrl = this.appRedirect(applicationKeyID);\n        this.authenticationService.logout(redirectUrl, '', 'logout');\n    }\n}\nApplicationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationService, deps: [{ token: 'environment' }, { token: ApplicationController }, { token: i2.AuthenticationService }], target: i0.ɵɵFactoryTarget.Injectable });\nApplicationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ApplicationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['environment']\n                }] }, { type: ApplicationController }, { type: i2.AuthenticationService }]; } });\n\n/*\n * Public API Surface of application-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Application, ApplicationController, ApplicationKeyID, ApplicationService, ApplicationServiceComponent, ApplicationServiceModule, ApplicationServiceService, Role, RootObject, UserApplication };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}