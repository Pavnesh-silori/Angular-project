{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport * as moment from 'moment';\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\n// import { AddUpdateNocDocumentDialog } from '@WaterNetZero/component/source/_dialog/add-update-noc-document/add-update-noc-document-dialog.component';\nimport { ReplaySubject, Subject, combineLatest } from 'rxjs';\nimport { DateFormatEnum, DateInputTypeEnum } from '@library/date';\nimport { FormErrorEnum, MaterialFormFieldAppearance, MatSelectSearchService, NocFileUploadEnum, TypeConfirmationDialog } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/document.controller\";\nimport * as i2 from \"@library/toastr-service\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@library/unit-service\";\nimport * as i5 from \"@library/tsc-common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/dialog\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"@carbon/controller/activity-data.controller\";\nimport * as i10 from \"@library/date\";\nimport * as i11 from \"@angular/material/card\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/input\";\nimport * as i14 from \"@angular/common\";\nimport * as i15 from \"@angular/material/select\";\nimport * as i16 from \"@angular/material/core\";\nimport * as i17 from \"ngx-mat-select-search\";\nimport * as i18 from \"@angular/material/tooltip\";\nconst _c0 = [\"fileInput\"];\nconst _c1 = [\"customDateInput\"];\nfunction Scope2MeterReadingComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Meter opening reading can't be negative. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction Scope2MeterReadingComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Meter opening reading is required field. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction Scope2MeterReadingComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Meter closing reading can't be negative. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction Scope2MeterReadingComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction Scope2MeterReadingComponent_mat_option_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 19);\n    i0.ɵɵelementStart(1, \"span\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const units_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", units_r11.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", units_r11.name, \" - \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(units_r11.uomCode);\n  }\n}\nfunction Scope2MeterReadingComponent_div_31_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Amount of renewable can't be negative. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction Scope2MeterReadingComponent_div_31_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Amount of renewable can't be more than consumption. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction Scope2MeterReadingComponent_div_31_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction Scope2MeterReadingComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 7);\n    i0.ɵɵelementStart(2, \"mat-label\", 8);\n    i0.ɵɵtext(3, \"Amount of renewable\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 21);\n    i0.ɵɵtemplate(5, Scope2MeterReadingComponent_div_31_mat_error_5_Template, 2, 0, \"mat-error\", 10);\n    i0.ɵɵtemplate(6, Scope2MeterReadingComponent_div_31_mat_error_6_Template, 2, 0, \"mat-error\", 10);\n    i0.ɵɵtemplate(7, Scope2MeterReadingComponent_div_31_mat_error_7_Template, 2, 1, \"mat-error\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r6.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(\"renewableAmount\", \"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(\"renewableAmount\", \"max\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(\"renewableAmount\", \"required\"));\n  }\n}\nfunction Scope2MeterReadingComponent_ng_container_32_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction Scope2MeterReadingComponent_ng_container_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 22);\n    i0.ɵɵelementStart(3, \"input\", 23, 24);\n    i0.ɵɵlistener(\"change\", function Scope2MeterReadingComponent_ng_container_32_Template_input_change_3_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.fileUpload($event, ctx_r17.activityDataFG, 0);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 25);\n    i0.ɵɵelementStart(6, \"div\", 4);\n    i0.ɵɵelementStart(7, \"div\", 26);\n    i0.ɵɵelementStart(8, \"div\", 27);\n    i0.ɵɵtemplate(9, Scope2MeterReadingComponent_ng_container_32_ng_container_9_Template, 1, 0, \"ng-container\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 27);\n    i0.ɵɵelementStart(11, \"div\", 29);\n    i0.ɵɵtext(12);\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 30);\n    i0.ɵɵelementStart(16, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function Scope2MeterReadingComponent_ng_container_32_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.removeFile(ctx_r19.activityDataFG, 0);\n    });\n    i0.ɵɵelementStart(17, \"span\", 32);\n    i0.ɵɵtext(18, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    const _r9 = i0.ɵɵreference(35);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c2, ctx_r7.docFileList[0] == null));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r9);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.activityDataFG.get(\"docName\").value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.activityDataFG.get(\"docSize\").value, \" \");\n  }\n}\nfunction Scope2MeterReadingComponent_ng_container_33_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Scope2MeterReadingComponent_ng_container_33_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 25);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelementStart(3, \"div\", 33);\n    i0.ɵɵtemplate(4, Scope2MeterReadingComponent_ng_container_33_ng_container_4_Template, 1, 0, \"ng-container\", 28);\n    i0.ɵɵelementStart(5, \"div\", 27);\n    i0.ɵɵelementStart(6, \"div\", 34);\n    i0.ɵɵelementStart(7, \"a\", 35);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 36);\n    i0.ɵɵelementStart(10, \"button\", 37);\n    i0.ɵɵlistener(\"click\", function Scope2MeterReadingComponent_ng_container_33_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const _r21 = i0.ɵɵreference(14);\n      return _r21.click();\n    });\n    i0.ɵɵelementStart(11, \"span\", 38);\n    i0.ɵɵtext(12, \" edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"input\", 39, 24);\n    i0.ɵɵlistener(\"change\", function Scope2MeterReadingComponent_ng_container_33_Template_input_change_13_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.fileUpload($event, ctx_r24.activityDataFG, 0);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 40);\n    i0.ɵɵlistener(\"click\", function Scope2MeterReadingComponent_ng_container_33_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.deleteConfirmation(ctx_r25.activityDataFG, 0);\n    });\n    i0.ɵɵelementStart(16, \"span\", 32);\n    i0.ɵɵtext(17, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    const _r9 = i0.ɵɵreference(35);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r9);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r8.activityDataFG.get(\"docPath\").value, i0.ɵɵsanitizeUrl);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c2, !ctx_r8.activityDataFG.get(\"docPath\").value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.activityDataFG.get(\"docName\").value, \" \");\n  }\n}\nfunction Scope2MeterReadingComponent_ng_template_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"div\", 41);\n    i0.ɵɵelement(2, \"img\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r10.billFileName);\n  }\n}\n// /tsc-library\nexport let Scope2MeterReadingComponent = /*#__PURE__*/(() => {\n  class Scope2MeterReadingComponent {\n    constructor(carbonDocumentController, toastrService, storageService, unitService, fileService, formBuilder, dialog, activatedRoute, activityDataController, dateService) {\n      this.carbonDocumentController = carbonDocumentController;\n      this.toastrService = toastrService;\n      this.storageService = storageService;\n      this.unitService = unitService;\n      this.fileService = fileService;\n      this.formBuilder = formBuilder;\n      this.dialog = dialog;\n      this.activatedRoute = activatedRoute;\n      this.activityDataController = activityDataController;\n      this.dateService = dateService;\n      this.formGroupChange = new EventEmitter();\n      this.emitFilter = new EventEmitter();\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.FormErrorEnum = FormErrorEnum;\n      this.DateInputTypeEnum = DateInputTypeEnum;\n      this.DateFormatEnum = DateFormatEnum;\n      this.faEllipsisV = faEllipsisV;\n      this.billFile = null;\n      this.noBillFileAvailable = true;\n      this.isReadOnly = true;\n      this.action = 'Create';\n      this.unitFilterFC = new FormControl();\n      this.unitFilterUnsubscribe = new Subject();\n      this.unitFiltered = new ReplaySubject(1);\n      this.unitSearch = new MatSelectSearchService(['name']);\n      this.errorHandling = (control, error) => {\n        return this.activityDataFG.controls[control].hasError(error);\n      };\n      this.storageService.setStorage('switchOrgRedirect', 'YES');\n      this.currentOrgID = parseInt(this.storageService.getStorage(['currentOrgID']));\n      combineLatest([this.activatedRoute.queryParams, this.activatedRoute.params]).subscribe(([queryParam2, param2]) => {\n        this.action = queryParam2['action'];\n        this.activityKeyID = queryParam2['activityKeyID'];\n      });\n    }\n    ngOnInit() {\n      this.getUnit();\n      this.FormDataInit();\n      this.RenewableDataInit();\n    }\n    ngOnChanges(changes) {\n      var _a;\n      if (this.activityDataFG) {\n        this.patchMeterUnit();\n        this.haveContractualInstrument = this.activityConfig['activityConfigData']['haveContractualInstrument'];\n        this.renewablePercentage = this.activityConfig['activityConfigData']['energy']['percentage'];\n        if (!((_a = changes.renewablePercentage) === null || _a === void 0 ? void 0 : _a.firstChange)) {\n          this.setValueForGetRenewable('renewable', null);\n        }\n      } else {\n        console.log('else');\n      }\n      ;\n    }\n    ngAfterViewInit() {\n      if (this.action == 'update') {\n        this.patchActivityData(this.activityConfig['activityData']);\n        this.haveContractualInstrument = this.activityConfig['activityConfigData']['haveContractualInstrument'];\n        this.meterRollOverValue = this.activityConfig['activityConfigData']['meterRolloverValue'];\n        this.renewablePercentage = this.activityConfig['activityConfigData']['energy']['percentage'];\n      }\n    }\n    FormDataInit() {\n      this.activityDataFG = this.formBuilder.group({\n        activityDataID: [],\n        recordID: [],\n        activityKeyID: [],\n        startDate: [],\n        endDate: [],\n        dateRange: [],\n        energyConsumption: [],\n        energyUnitID: [],\n        meterOpeningReading: [],\n        meterClosingReading: [],\n        meterUnitID: [],\n        meterUomCode: [],\n        meterUomName: [],\n        renewableAmount: [],\n        renewableUnitID: [],\n        docID: [],\n        docType: [],\n        docName: [],\n        docPath: [],\n        docSize: []\n      });\n      this.formGroupChange.emit(this.activityDataFG);\n      if (this.action == 'create') {\n        this.patchMeterUnit();\n        this.haveContractualInstrument = this.activityConfig['activityConfigData']['haveContractualInstrument'];\n        this.meterRollOverValue = this.activityConfig['activityConfigData']['meterRolloverValue'];\n        this.renewablePercentage = this.activityConfig['activityConfigData']['energy']['percentage'];\n      }\n    }\n    RenewableDataInit() {\n      this.renewableDataFG = this.formBuilder.group({\n        meterRollOverValue: [],\n        meterOpeningReading: [],\n        meterClosingReading: [],\n        renewablePercentage: []\n      });\n    }\n    patchActivityData(activityData) {\n      this.activityDataFG.patchValue({\n        activityDataID: activityData['activityDataID'],\n        recordID: activityData['recordID'],\n        activityKeyID: activityData['activityKeyID'],\n        meterOpeningReading: activityData['meterOpeningReading'],\n        meterClosingReading: activityData['meterClosingReading'],\n        meterUnitID: activityData['meterUnitID'],\n        renewableAmount: activityData['renewableAmount'],\n        renewableUnitID: activityData['renewableUnitID'],\n        startDate: activityData['startDate'],\n        endDate: activityData['endDate'],\n        dateRange: {\n          startDate: moment(activityData['startDate']),\n          endDate: moment(activityData['endDate'])\n        },\n        docID: activityData.file ? activityData.file.id : null,\n        docName: activityData.file ? activityData.file.name : null,\n        docPath: activityData.file ? activityData.file.path : null\n      });\n      this.customDateInputs.daterange.patchValue({\n        startDate: moment(activityData.startDate),\n        endDate: moment(activityData.endDate)\n      });\n    }\n    patchMeterUnit() {\n      this.activityDataFG.patchValue({\n        meterUnitID: this.activityConfig['activityConfigData']['meterReadingUnitID']\n      });\n    }\n    formatDate() {\n      let date = this.activityDataFG.get('dateRange').value;\n      let startDate = moment(date.startDate).format(\"YYYY-MM-DD\");\n      let endDate = moment(date.endDate).format(\"YYYY-MM-DD\");\n      this.activityDataFG.get('startDate').patchValue(startDate);\n      this.activityDataFG.get('endDate').patchValue(endDate);\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let unitFilter = [];\n        unitFilter = ['unitType:ENERGY'];\n        this.unit = yield this.unitService.getUnit(unitFilter);\n        this.unitSearch.entityArr = this.unit.slice();\n        this.unitSearch.createSubscription();\n      });\n    }\n    dateInpChange(formGroup) {\n      if (this.customDateInputs) {\n        let startDate;\n        let endDate;\n        startDate = this.customDateInputs.startDateFC.value;\n        endDate = this.customDateInputs.endDateFC.value;\n        if (startDate) {\n          const formatted_startDate = this.dateService.formatDate(startDate, DateFormatEnum.YYYY_MM_DD);\n          formGroup.get('startDate').patchValue(formatted_startDate);\n        }\n        if (endDate) {\n          const formatted_endDate = this.dateService.formatDate(endDate, DateFormatEnum.YYYY_MM_DD);\n          formGroup.get('endDate').patchValue(formatted_endDate);\n        }\n      }\n    }\n    fileUpload(event, formGroup, index) {\n      let file = event.target.files[0];\n      if (file) {\n        if (file.type !== 'application/pdf') {\n          this.toastrService.error(NocFileUploadEnum.INVALID_FILE_TYPE_ERROR);\n          return;\n        }\n        if (file.size > NocFileUploadEnum.MAX_FILE_SIZE) {\n          this.toastrService.error(NocFileUploadEnum.INVAID_FILE_SIZE_ERROR);\n          return;\n        }\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = e => {};\n        this.billFile = file;\n        this.billFileName = file['name'];\n        formGroup.get('docName').patchValue(file['name']);\n        formGroup.get('docSize').patchValue(this.getFileSizeWithUnit(file['size']));\n        this.docFileList[index] = this.billFile;\n        if (this.action == 'update') {\n          this.fileCreateUpdate(formGroup);\n        }\n      } else {\n        this.toastrService.error('Please upload a file!');\n        return;\n      }\n    }\n    getFileSizeWithUnit(billFileSize) {\n      const fileSizeInKB = Math.round(billFileSize / 1024);\n      const fileSizeInMB = Math.round(fileSizeInKB / 1024);\n      const fileSizeInGB = Math.round(fileSizeInMB / 1024);\n      if (fileSizeInGB > 1) {\n        return fileSizeInGB + ' GB';\n      } else if (fileSizeInMB > 1) {\n        return fileSizeInMB + ' MB';\n      } else {\n        return fileSizeInKB + ' KB';\n      }\n    }\n    removeFile(formGroup, index) {\n      if (this.action == 'create') {\n        this.fileInput.nativeElement.value = null;\n      }\n      this.billFile = null;\n      this.billFileName = '';\n      formGroup.get('docName').reset();\n      formGroup.get('docSize').reset();\n      formGroup.get('docPath').reset(null);\n      formGroup.get('docID').reset();\n      this.docFileList[index] = this.billFile;\n    }\n    toFormData() {\n      const formData = new FormData();\n      formData.append('payload', this.billFile);\n      return formData;\n    }\n    fileCreateUpdate(formGroup) {\n      if (formGroup.get('docID').value == null) {\n        this.carbonDocumentController.createDocument(this.currentOrgID, formGroup.get('activityDataID').value, this.activityKeyID, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileCreate -\", error);\n        });\n      } else {\n        this.carbonDocumentController.updateDocument(this.currentOrgID, formGroup.get('docID').value, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileUpdate -\", error);\n        });\n      }\n    }\n    updateFileFormControl(formGroup) {\n      formGroup.get('docID').patchValue(this.file.id);\n      formGroup.get('docName').patchValue(this.file.name);\n      formGroup.get('docPath').patchValue(this.file.path);\n    }\n    deleteConfirmation(formGroup, index) {\n      const dialogRef = this.dialog.open(TypeConfirmationDialog, {\n        minWidth: '650px',\n        maxWidth: '600px',\n        data: {\n          icon: 'delete',\n          header: 'Are you sure you want to delete ?',\n          body: '<p class = \"ps-1\"><strong class=\"pe-1\"> Note:</strong>This file will be deleted permanently and you won`t be able to track it`s progress.</p><span class=\"fw-bold ps-1\">Are you sure you want to delete?</span>',\n          confirmationInput: 'DELETE',\n          buttonOne: 'Cancel',\n          buttonTwo: 'Delete'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.deleteDocument(formGroup.get('docID').value, formGroup, index);\n        } else {\n          dialogRef.close();\n        }\n      });\n    }\n    deleteDocument(docID, formGroup, index) {\n      this.carbonDocumentController.deleteDocument(this.currentOrgID, docID).subscribe(res => {\n        this.removeFile(formGroup, index);\n      }, error => {\n        console.log(\"error in deleteDocument -\", error);\n      });\n    }\n    setValueForGetRenewable(col, event) {\n      if (this.haveContractualInstrument == 'YES') {\n        if (col == 'meterOpeningReading' && this.activityDataFG.controls['meterClosingReading'].value != null) {\n          this.renewableDataFG.get('meterOpeningReading').setValue(event.target.value);\n          this.renewableDataFG.get('meterClosingReading').setValue(this.activityDataFG.controls['meterClosingReading'].value);\n          this.renewableDataFG.get('meterRollOverValue').setValue(this.meterRollOverValue);\n          this.renewableDataFG.get('renewablePercentage').setValue(this.renewablePercentage);\n          this.getRenewableAmount();\n        } else if (col == 'meterClosingReading' && this.activityDataFG.controls['meterOpeningReading'].value != null) {\n          this.renewableDataFG.get('meterOpeningReading').setValue(this.activityDataFG.controls['meterOpeningReading'].value);\n          this.renewableDataFG.get('meterClosingReading').setValue(event.target.value);\n          this.renewableDataFG.get('meterRollOverValue').setValue(this.meterRollOverValue);\n          this.renewableDataFG.get('renewablePercentage').setValue(this.renewablePercentage);\n          this.getRenewableAmount();\n        } else if (this.activityDataFG && col == 'renewable' && this.activityDataFG.controls['meterClosingReading'].value != null && this.activityDataFG.controls['meterOpeningReading'].value != null && this.renewablePercentage != null) {\n          this.renewableDataFG.get('meterOpeningReading').setValue(this.activityDataFG.controls['meterOpeningReading'].value);\n          this.renewableDataFG.get('meterClosingReading').setValue(this.activityDataFG.controls['meterClosingReading'].value);\n          this.renewableDataFG.get('meterRollOverValue').setValue(this.meterRollOverValue);\n          this.renewableDataFG.get('renewablePercentage').setValue(this.renewablePercentage);\n          this.getRenewableAmount();\n        }\n      }\n    }\n    getRenewableAmount() {\n      this.activityDataController.getRenewableValue(this.currentOrgID, this.renewableDataFG.value).subscribe(renewableRes => {\n        this.activityDataFG.patchValue({\n          renewableAmount: renewableRes['renewableAmount'],\n          energyConsumption: renewableRes['energyConsumption'],\n          energyUnitID: this.activityDataFG.controls['meterUnitID'].value,\n          renewableUnitID: this.activityDataFG.controls['meterUnitID'].value\n        });\n      }, error => {\n        console.log('error in getRenewableValue() -', error);\n        this.toastrService.openToast(error.error['title'], error.error['message'], error.error['result']);\n      });\n    }\n    ngOnDestroy() {\n      this.storageService.setStorage('switchOrgRedirect', 'NO');\n    }\n  }\n  Scope2MeterReadingComponent.ɵfac = function Scope2MeterReadingComponent_Factory(t) {\n    return new (t || Scope2MeterReadingComponent)(i0.ɵɵdirectiveInject(i1.CarbonDocumentController), i0.ɵɵdirectiveInject(i2.ToastrService), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.UnitService), i0.ɵɵdirectiveInject(i5.FileService), i0.ɵɵdirectiveInject(i6.FormBuilder), i0.ɵɵdirectiveInject(i7.MatDialog), i0.ɵɵdirectiveInject(i8.ActivatedRoute), i0.ɵɵdirectiveInject(i9.ActivityDataController), i0.ɵɵdirectiveInject(i10.DateService));\n  };\n  Scope2MeterReadingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Scope2MeterReadingComponent,\n    selectors: [[\"app-scope2-meter-reading\"]],\n    viewQuery: function Scope2MeterReadingComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customDateInputs = _t.first);\n      }\n    },\n    inputs: {\n      activityConfig: \"activityConfig\",\n      docFileList: \"docFileList\"\n    },\n    outputs: {\n      formGroupChange: \"formGroupChange\",\n      emitFilter: \"emitFilter\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 36,\n    vars: 23,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-sm-8\"], [1, \"cursorPointer\", 3, \"materialFieldWidthInp\", \"materialFormFieldAppearanceInp\", \"isMandatoryFieldInp\", \"dateInputTypeInp\", \"labelInp\", \"cdrFormatInp\", \"emitFilter\"], [\"customDateInput\", \"\"], [1, \"col-sm-3\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"meterOpeningReading\", \"placeholder\", \"0.00\", \"min\", \"0\", \"required\", \"\", 3, \"change\"], [4, \"ngIf\"], [1, \"col-sm-3\", \"ms-3\", 3, \"appearance\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"meterClosingReading\", \"placeholder\", \"0.00\", \"min\", \"0\", \"required\", \"\", 3, \"change\"], [1, \"col-sm-4\", \"ms-3\", 3, \"appearance\"], [\"formControlName\", \"meterUnitID\", \"required\", \"\", 3, \"disabled\"], [\"placeholderLabel\", \"Search by unit name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"col-sm-8\", 4, \"ngIf\"], [\"docImg\", \"\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"renewableAmount\", \"placeholder\", \"100%\", \"min\", \"0\", \"required\", \"\"], [1, \"col-sm-8\", \"fileInput\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"row\", \"pt-2\"], [1, \"border\", \"rounded\", \"d-flex\", 3, \"ngClass\"], [1, \"p-1\"], [4, \"ngTemplateOutlet\"], [1, \"centerAlignVertical\", \"p-1\"], [1, \"ms-auto\", \"p-1\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-danger\"], [1, \"border\", \"rounded\", \"d-flex\"], [1, \"centerAlignVertical\", \"p-3\"], [\"target\", \"_blank\", 3, \"href\", \"ngClass\"], [1, \"ms-auto\", \"centerAlignVertical\", \"p-2\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Edit\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-primary\", \"updateIconHover\", \"fs-5\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 2, \"display\", \"none\", 3, \"change\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Delete\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"mat-raised-button\", \"\", \"matTooltipPosition\", \"below\", 1, \"docIcon\", \"p-1\", 3, \"matTooltip\"], [\"height\", \"40px\", \"src\", \"assets/images/default-doc.ico\", \"alt\", \"bill document preview\"]],\n    template: function Scope2MeterReadingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \"Activity Data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"lib-date-input\", 5, 6);\n        i0.ɵɵlistener(\"emitFilter\", function Scope2MeterReadingComponent_Template_lib_date_input_emitFilter_6_listener() {\n          return ctx.dateInpChange(ctx.activityDataFG);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵelementStart(9, \"mat-form-field\", 7);\n        i0.ɵɵelementStart(10, \"mat-label\", 8);\n        i0.ɵɵtext(11, \"Meter opening reading\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 9);\n        i0.ɵɵlistener(\"change\", function Scope2MeterReadingComponent_Template_input_change_12_listener($event) {\n          return ctx.setValueForGetRenewable(\"meterOpeningReading\", $event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, Scope2MeterReadingComponent_mat_error_13_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(14, Scope2MeterReadingComponent_mat_error_14_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-form-field\", 11);\n        i0.ɵɵelementStart(16, \"mat-label\", 8);\n        i0.ɵɵtext(17, \"Meter closing reading\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"input\", 12);\n        i0.ɵɵlistener(\"change\", function Scope2MeterReadingComponent_Template_input_change_18_listener($event) {\n          return ctx.setValueForGetRenewable(\"meterClosingReading\", $event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, Scope2MeterReadingComponent_mat_error_19_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(20, Scope2MeterReadingComponent_mat_error_20_Template, 2, 1, \"mat-error\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"mat-form-field\", 13);\n        i0.ɵɵelementStart(22, \"mat-label\", 8);\n        i0.ɵɵtext(23, \"Select meter unit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-select\", 14);\n        i0.ɵɵelementStart(25, \"mat-option\");\n        i0.ɵɵelement(26, \"ngx-mat-select-search\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, Scope2MeterReadingComponent_mat_option_27_Template, 5, 3, \"mat-option\", 16);\n        i0.ɵɵpipe(28, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"mat-error\");\n        i0.ɵɵtext(30);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(31, Scope2MeterReadingComponent_div_31_Template, 8, 4, \"div\", 17);\n        i0.ɵɵtemplate(32, Scope2MeterReadingComponent_ng_container_32_Template, 19, 6, \"ng-container\", 10);\n        i0.ɵɵtemplate(33, Scope2MeterReadingComponent_ng_container_33_Template, 18, 6, \"ng-container\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(34, Scope2MeterReadingComponent_ng_template_34_Template, 3, 1, \"ng-template\", null, 18, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityDataFG);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"materialFieldWidthInp\", true)(\"materialFormFieldAppearanceInp\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE)(\"isMandatoryFieldInp\", true)(\"dateInputTypeInp\", ctx.DateInputTypeEnum.CUSTOM_INPUT)(\"labelInp\", \"Accounting Period\")(\"cdrFormatInp\", ctx.DateFormatEnum.DD_MMM_YYYY);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"meterOpeningReading\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"meterOpeningReading\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"meterClosingReading\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"meterClosingReading\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isReadOnly);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.unitSearch.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(28, 21, ctx.unitSearch.filteredEntities));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.FormErrorEnum.REQUIRED, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.haveContractualInstrument == \"YES\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.activityDataFG.get(\"docPath\").value == null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.activityDataFG.get(\"docPath\").value != null);\n      }\n    },\n    directives: [i11.MatCard, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i10.DateInputComponent, i12.MatFormField, i12.MatLabel, i13.MatInput, i6.NumberValueAccessor, i6.MinValidator, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlName, i6.RequiredValidator, i14.NgIf, i15.MatSelect, i16.MatOption, i17.MatSelectSearchComponent, i6.FormControlDirective, i14.NgForOf, i12.MatError, i14.NgClass, i14.NgTemplateOutlet, i18.MatTooltip, i12.MatSuffix],\n    pipes: [i14.AsyncPipe],\n    encapsulation: 2\n  });\n  return Scope2MeterReadingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}