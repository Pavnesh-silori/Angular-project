{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nimport * as i2 from '@library/authentication-service';\nlet ApplicationServiceService = /*#__PURE__*/(() => {\n  class ApplicationServiceService {\n    constructor() {}\n  }\n  ApplicationServiceService.ɵfac = function ApplicationServiceService_Factory(t) {\n    return new (t || ApplicationServiceService)();\n  };\n  ApplicationServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ApplicationServiceService,\n    factory: ApplicationServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApplicationServiceService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ApplicationServiceComponent = /*#__PURE__*/(() => {\n  class ApplicationServiceComponent {\n    constructor() {}\n    ngOnInit() {}\n  }\n  ApplicationServiceComponent.ɵfac = function ApplicationServiceComponent_Factory(t) {\n    return new (t || ApplicationServiceComponent)();\n  };\n  ApplicationServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ApplicationServiceComponent,\n    selectors: [[\"lib-application-service\"]],\n    decls: 2,\n    vars: 0,\n    template: function ApplicationServiceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" application-service works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return ApplicationServiceComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ApplicationServiceModule = /*#__PURE__*/(() => {\n  class ApplicationServiceModule {\n    static forRoot(environment) {\n      return {\n        ngModule: ApplicationServiceModule,\n        providers: [{\n          provide: 'environment',\n          useValue: environment\n        }]\n      };\n    }\n  }\n  ApplicationServiceModule.ɵfac = function ApplicationServiceModule_Factory(t) {\n    return new (t || ApplicationServiceModule)();\n  };\n  ApplicationServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ApplicationServiceModule\n  });\n  ApplicationServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return ApplicationServiceModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar ApplicationKeyID = /*#__PURE__*/(() => {\n  (function (ApplicationKeyID) {\n    ApplicationKeyID[\"NETZERO_ADMIN_KEY_ID\"] = \"NETZERO_ADMIN\";\n    ApplicationKeyID[\"ACCOUNT_KEY_ID\"] = \"ACCOUNT\";\n    ApplicationKeyID[\"ADMIN_KEY_ID\"] = \"ADMIN\";\n    ApplicationKeyID[\"NETZERO_KEY_ID\"] = \"TSC_NETZERO\";\n    ApplicationKeyID[\"ENERGY_KEY_ID\"] = \"TSC_ENERGY\";\n    ApplicationKeyID[\"WATER_KEY_ID\"] = \"TSC_WATER\";\n    ApplicationKeyID[\"ENVIRO_KEY_ID\"] = \"TSC_ENVIRO\";\n    ApplicationKeyID[\"CONNECT_KEY_ID\"] = \"TSC_CONNECT\";\n    ApplicationKeyID[\"OFFSET_KEY_ID\"] = \"TSC_OFFSET\";\n    ApplicationKeyID[\"SUPPLIER_KEY_ID\"] = \"SUPPLIER\";\n    ApplicationKeyID[\"EMPLOYEE_KEY_ID\"] = \"EMPLOYEE\";\n  })(ApplicationKeyID || (ApplicationKeyID = {}));\n  return ApplicationKeyID;\n})();\nclass Application {\n  constructor() {\n    this.id = null;\n    this.name = null;\n    this.keyID = null;\n    this.description = null;\n    this.url = null;\n  }\n}\nclass Role {}\nclass RootObject {}\nclass UserApplication {}\nlet ApplicationController = /*#__PURE__*/(() => {\n  class ApplicationController {\n    constructor(http, environment) {\n      this.http = http;\n      this.environment = environment;\n    }\n    getAllApplication() {\n      return this.http.get(`${this.environment.SUBSCRIPTION_API_URL}applications`);\n    }\n    getApplicationByUserAccess() {\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}user/applications/access`);\n    }\n    getSubscribedApplicationsByOrgID(orgID) {\n      return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${orgID}/applications-roles`);\n    }\n  }\n  ApplicationController.ɵfac = function ApplicationController_Factory(t) {\n    return new (t || ApplicationController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n  };\n  ApplicationController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ApplicationController,\n    factory: ApplicationController.ɵfac,\n    providedIn: 'root'\n  });\n  return ApplicationController;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ApplicationService = /*#__PURE__*/(() => {\n  class ApplicationService {\n    constructor(environment, applicationController, authenticationService) {\n      this.environment = environment;\n      this.applicationController = applicationController;\n      this.authenticationService = authenticationService;\n    }\n    getAllApplication() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let applicationM;\n        try {\n          applicationM = yield this.applicationController.getAllApplication().toPromise();\n          if (applicationM) {\n            return applicationM;\n          } else {\n            return [new Application()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new Application()];\n        }\n      });\n    }\n    getApplicationByUserAccess() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let applicationM;\n        try {\n          applicationM = yield this.applicationController.getApplicationByUserAccess().toPromise();\n          if (applicationM) {\n            return applicationM;\n          } else {\n            return [new Application()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new Application()];\n        }\n      });\n    }\n    getSubscribedApplicationsByOrgID(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let applicationM;\n        try {\n          applicationM = yield this.applicationController.getSubscribedApplicationsByOrgID(orgID).toPromise();\n          if (applicationM) {\n            return applicationM['application'];\n          } else {\n            return [new UserApplication()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new UserApplication()];\n        }\n      });\n    }\n    getApplicationLogo(keyID) {\n      let logo;\n      let basePath = '/assets/images/application-logo/';\n      switch (keyID) {\n        case ApplicationKeyID.ADMIN_KEY_ID:\n          logo = basePath + 'admin-with-name.jpg';\n          break;\n        case ApplicationKeyID.NETZERO_KEY_ID:\n          logo = basePath + 'netzero-with-name.jpg';\n          break;\n        case ApplicationKeyID.WATER_KEY_ID:\n          logo = basePath + 'water-with-name.jpg';\n          break;\n        case ApplicationKeyID.ENERGY_KEY_ID:\n          logo = basePath + 'energy-with-name.jpg';\n          break;\n        case ApplicationKeyID.ENVIRO_KEY_ID:\n          logo = basePath + 'enviro-with-name.jpg';\n          break;\n        case ApplicationKeyID.OFFSET_KEY_ID:\n          logo = basePath + 'offset-with-name.jpg';\n          break;\n        case ApplicationKeyID.CONNECT_KEY_ID:\n          logo = basePath + 'connect-with-name.jpg';\n          break;\n        default:\n          logo = null;\n      }\n      return logo;\n    }\n    getApplicationLogoWithoutName(keyID) {\n      let logo;\n      let basePath = '/assets/images/application-logo/';\n      switch (keyID) {\n        case ApplicationKeyID.ADMIN_KEY_ID:\n          logo = basePath + 'admin-without-name.jpg';\n          break;\n        case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n          logo = basePath + 'll-admin-without-name.png';\n          break;\n        case ApplicationKeyID.NETZERO_KEY_ID:\n          logo = basePath + 'netzero-without-name.jpg';\n          break;\n        case ApplicationKeyID.WATER_KEY_ID:\n          logo = basePath + 'water-without-name.jpg';\n          break;\n        case ApplicationKeyID.ENERGY_KEY_ID:\n          logo = basePath + 'energy-without-name.jpg';\n          break;\n        case ApplicationKeyID.ENVIRO_KEY_ID:\n          logo = basePath + 'enviro-without-name.jpg';\n          break;\n        case ApplicationKeyID.OFFSET_KEY_ID:\n          logo = basePath + 'offset-without-name.jpg';\n          break;\n        case ApplicationKeyID.CONNECT_KEY_ID:\n          logo = basePath + 'connect-without-name.jpg';\n          break;\n        default:\n          logo = null;\n      }\n      return logo;\n    }\n    getApplicationLogoWithSideName(keyID) {\n      let logo;\n      let basePath = '/assets/images/application-logo/with-side-name/';\n      switch (keyID) {\n        case ApplicationKeyID.ADMIN_KEY_ID:\n          logo = basePath + 'admin.png';\n          break;\n        case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n          logo = basePath + 'll-admin.png';\n          break;\n        case ApplicationKeyID.NETZERO_KEY_ID:\n          logo = basePath + 'netzero.png';\n          break;\n        case ApplicationKeyID.WATER_KEY_ID:\n          logo = basePath + 'water.png';\n          break;\n        case ApplicationKeyID.ENERGY_KEY_ID:\n          logo = basePath + 'energy.png';\n          break;\n        case ApplicationKeyID.ENVIRO_KEY_ID:\n          logo = basePath + 'enviro.png';\n          break;\n        case ApplicationKeyID.OFFSET_KEY_ID:\n          logo = basePath + 'offset.png';\n          break;\n        case ApplicationKeyID.CONNECT_KEY_ID:\n          logo = basePath + 'connect.png';\n          break;\n        default:\n          logo = null;\n      }\n      return logo;\n    }\n    getApplicationLogoFileName(keyID) {\n      let fileName;\n      switch (keyID) {\n        case ApplicationKeyID.ADMIN_KEY_ID:\n          fileName = 'admin';\n          break;\n        case ApplicationKeyID.NETZERO_KEY_ID:\n          fileName = 'netzero';\n          break;\n        case ApplicationKeyID.WATER_KEY_ID:\n          fileName = 'water';\n          break;\n        case ApplicationKeyID.ENERGY_KEY_ID:\n          fileName = 'energy';\n          break;\n        case ApplicationKeyID.ENVIRO_KEY_ID:\n          fileName = 'enviro';\n          break;\n        case ApplicationKeyID.OFFSET_KEY_ID:\n          fileName = 'offset';\n          break;\n        case ApplicationKeyID.CONNECT_KEY_ID:\n          fileName = 'connect';\n          break;\n        default:\n          fileName = null;\n      }\n      return fileName;\n    }\n    appRedirect(applicationKeyID) {\n      let redirectUrl;\n      switch (applicationKeyID) {\n        case ApplicationKeyID.NETZERO_ADMIN_KEY_ID:\n          redirectUrl = this.environment.NETZERO_ADMIN_URL;\n          break;\n        case ApplicationKeyID.ADMIN_KEY_ID:\n          redirectUrl = this.environment.ADMIN_URL;\n          break;\n        case ApplicationKeyID.NETZERO_KEY_ID:\n          redirectUrl = this.environment.NETZERO_URL;\n          break;\n        case ApplicationKeyID.SUPPLIER_KEY_ID:\n          redirectUrl = this.environment.ENTERPRISE_SUPPLIER_URL;\n          break;\n        case ApplicationKeyID.OFFSET_KEY_ID:\n          redirectUrl = this.environment.OFFSET_URL;\n          break;\n        case ApplicationKeyID.CONNECT_KEY_ID:\n          redirectUrl = this.environment.CONNECT_URL;\n          break;\n        case ApplicationKeyID.ENERGY_KEY_ID:\n          redirectUrl = this.environment.ENERGY_URL;\n          break;\n        case ApplicationKeyID.WATER_KEY_ID:\n          redirectUrl = this.environment.WATER_URL;\n          break;\n        case ApplicationKeyID.ENVIRO_KEY_ID:\n          redirectUrl = this.environment.ENVIRO_URL;\n          break;\n        default:\n          redirectUrl = this.environment.ACCOUNT_URL;\n          break;\n      }\n      return redirectUrl;\n    }\n    appBtnLogout(applicationKeyID) {\n      let redirectUrl = '';\n      redirectUrl = this.appRedirect(applicationKeyID);\n      this.authenticationService.logout(redirectUrl, '', 'logout');\n    }\n  }\n  ApplicationService.ɵfac = function ApplicationService_Factory(t) {\n    return new (t || ApplicationService)(i0.ɵɵinject('environment'), i0.ɵɵinject(ApplicationController), i0.ɵɵinject(i2.AuthenticationService));\n  };\n  ApplicationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ApplicationService,\n    factory: ApplicationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApplicationService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of application-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Application, ApplicationController, ApplicationKeyID, ApplicationService, ApplicationServiceComponent, ApplicationServiceModule, ApplicationServiceService, Role, RootObject, UserApplication };\n//# sourceMappingURL=library-application-service.js.map","map":null,"metadata":{},"sourceType":"module"}