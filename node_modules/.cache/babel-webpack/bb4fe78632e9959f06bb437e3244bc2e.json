{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { FormArray, Validators } from '@angular/forms';\nimport * as moment from 'moment';\nimport { isEqual } from \"lodash\";\nimport { forkJoin } from 'rxjs';\nimport { HhvCreateUpdateDialog } from '../../../_shared/create-update-hhv/create-update-hhv.dialog';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { COMMON_CONSTANT, FormErrorEnum, InvalidForm, MatSelectSearchService, MaterialFormFieldAppearance, NocFileUploadEnum, TypeConfirmationDialog } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport { ToastrColor } from '@library/toastr-service';\nimport { DateFormatEnum, DateInputTypeEnum } from '@library/date';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@carbon/controller/fuel.controller\";\nimport * as i5 from \"@netzero/controller/cutom-fuel.controller\";\nimport * as i6 from \"@carbon/controller/document.controller\";\nimport * as i7 from \"@library/storage-service\";\nimport * as i8 from \"@carbon/service/fuel.service\";\nimport * as i9 from \"@library/unit-service\";\nimport * as i10 from \"@library/toastr-service\";\nimport * as i11 from \"@netzero/service/custom-fuel.service\";\nimport * as i12 from \"@library/date\";\nimport * as i13 from \"@angular/material/card\";\nimport * as i14 from \"@angular/common\";\nimport * as i15 from \"@angular/material/form-field\";\nimport * as i16 from \"@angular/material/select\";\nimport * as i17 from \"@angular/material/core\";\nimport * as i18 from \"ngx-mat-select-search\";\nimport * as i19 from \"@angular/material/tooltip\";\nimport * as i20 from \"@angular/material/button\";\nimport * as i21 from \"@angular/material/input\";\nconst _c0 = [\"fileInput\"];\nconst _c1 = [\"customDateInput\"];\nfunction HhvMeterReadingComponent_ng_container_5_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1, \" Combustion equipment: \");\n    i0.ɵɵelementStart(2, \"span\", 35);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r4 = i0.ɵɵnextContext().index;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.dataSource.length > 0 ? ctx_r5.getAssetName(ctx_r5.dataSource[i_r4].id) : ctx_r5.sourceName, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_19_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 37);\n    i0.ɵɵlistener(\"click\", function HhvMeterReadingComponent_ng_container_5_ng_container_19_mat_option_1_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const i_r4 = i0.ɵɵnextContext(2).index;\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.standardFuelChange(i_r4);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const fuel_r21 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"value\", fuel_r21.uID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", fuel_r21.name, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, HhvMeterReadingComponent_ng_container_5_ng_container_19_mat_option_1_Template, 2, 2, \"mat-option\", 36);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const fuel_r21 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", fuel_r21.keyID);\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_22_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 37);\n    i0.ɵɵlistener(\"click\", function HhvMeterReadingComponent_ng_container_5_ng_container_22_mat_option_1_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const i_r4 = i0.ɵɵnextContext(2).index;\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.customFuelChange(i_r4);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const fuel_r27 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"value\", fuel_r27.uID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", fuel_r27.name, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, HhvMeterReadingComponent_ng_container_5_ng_container_22_mat_option_1_Template, 2, 2, \"mat-option\", 36);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const fuel_r27 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !fuel_r27.keyID);\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_span_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 38);\n    i0.ɵɵelementStart(1, \"span\", 39);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r4 = i0.ɵɵnextContext().index;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r10.getHhvValue(i_r4) + \" \" + ctx_r10.getHhvNumerator(i_r4) + \"/\" + ctx_r10.getHhvDenominator(i_r4));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", (ctx_r10.getHhvValue(i_r4) != null ? i0.ɵɵpipeBind2(3, 2, ctx_r10.getHhvValue(i_r4), \"1.2-2\") : ctx_r10.getHhvValue(i_r4)) + \" \" + ctx_r10.getHhvNumerator(i_r4) + \"/\" + ctx_r10.getHhvDenominator(i_r4), \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_template_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 40);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.COMMON_CONSTANT.HYPHEN, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_mat_error_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Amount of opening meter reading can't be negative. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_mat_error_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_mat_error_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Amount of closing meter reading can't be negative. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_mat_error_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_mat_option_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 41);\n    i0.ɵɵelementStart(1, \"span\", 42);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r34 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r34.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", unit_r34.name, \" - \", unit_r34.uomCode, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_61_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_61_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r39 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 8);\n    i0.ɵɵelementStart(2, \"div\", 43);\n    i0.ɵɵelementStart(3, \"input\", 44, 45);\n    i0.ɵɵlistener(\"change\", function HhvMeterReadingComponent_ng_container_5_ng_container_61_Template_input_change_3_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r38 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r38.$implicit;\n      const i_r4 = ctx_r38.index;\n      const ctx_r37 = i0.ɵɵnextContext();\n      return ctx_r37.fileUpload($event, activityData_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 46);\n    i0.ɵɵelementStart(6, \"div\", 10);\n    i0.ɵɵelementStart(7, \"div\", 47);\n    i0.ɵɵelementStart(8, \"div\", 48);\n    i0.ɵɵtemplate(9, HhvMeterReadingComponent_ng_container_5_ng_container_61_ng_container_9_Template, 1, 0, \"ng-container\", 49);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 48);\n    i0.ɵɵelementStart(11, \"div\", 50);\n    i0.ɵɵtext(12);\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 51);\n    i0.ɵɵelementStart(16, \"button\", 52);\n    i0.ɵɵlistener(\"click\", function HhvMeterReadingComponent_ng_container_5_ng_container_61_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r41 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r41.$implicit;\n      const i_r4 = ctx_r41.index;\n      const ctx_r40 = i0.ɵɵnextContext();\n      return ctx_r40.removeFile(activityData_r3, i_r4);\n    });\n    i0.ɵɵelementStart(17, \"span\", 53);\n    i0.ɵɵtext(18, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r42 = i0.ɵɵnextContext();\n    const i_r4 = ctx_r42.index;\n    const activityData_r3 = ctx_r42.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(7);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c2, ctx_r18.docFileList[i_r4] == null));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", activityData_r3.get(\"docName\").value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", activityData_r3.get(\"docSize\").value, \" \");\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_62_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction HhvMeterReadingComponent_ng_container_5_ng_container_62_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r46 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 46);\n    i0.ɵɵelementStart(2, \"div\", 10);\n    i0.ɵɵelementStart(3, \"div\", 54);\n    i0.ɵɵtemplate(4, HhvMeterReadingComponent_ng_container_5_ng_container_62_ng_container_4_Template, 1, 0, \"ng-container\", 49);\n    i0.ɵɵelementStart(5, \"div\", 48);\n    i0.ɵɵelementStart(6, \"div\", 55);\n    i0.ɵɵelementStart(7, \"a\", 56);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 51);\n    i0.ɵɵelementStart(10, \"button\", 57);\n    i0.ɵɵlistener(\"click\", function HhvMeterReadingComponent_ng_container_5_ng_container_62_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r46);\n      const _r44 = i0.ɵɵreference(14);\n      return _r44.click();\n    });\n    i0.ɵɵelementStart(11, \"span\", 58);\n    i0.ɵɵtext(12, \" edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"input\", 59, 45);\n    i0.ɵɵlistener(\"change\", function HhvMeterReadingComponent_ng_container_5_ng_container_62_Template_input_change_13_listener($event) {\n      i0.ɵɵrestoreView(_r46);\n      const ctx_r48 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r48.$implicit;\n      const i_r4 = ctx_r48.index;\n      const ctx_r47 = i0.ɵɵnextContext();\n      return ctx_r47.fileUpload($event, activityData_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 60);\n    i0.ɵɵlistener(\"click\", function HhvMeterReadingComponent_ng_container_5_ng_container_62_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r46);\n      const ctx_r50 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r50.$implicit;\n      const i_r4 = ctx_r50.index;\n      const ctx_r49 = i0.ɵɵnextContext();\n      return ctx_r49.deleteConfirmation(activityData_r3, i_r4);\n    });\n    i0.ɵɵelementStart(16, \"span\", 53);\n    i0.ɵɵtext(17, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activityData_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(7);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"href\", activityData_r3.get(\"docPath\").value, i0.ɵɵsanitizeUrl);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c2, !activityData_r3.get(\"docPath\").value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", activityData_r3.get(\"docName\").value, \" \");\n  }\n}\nconst _c3 = function (a0, a1) {\n  return {\n    \"centerAlign\": a0,\n    \"centerAlignVertical\": a1\n  };\n};\nfunction HhvMeterReadingComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r53 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0, 6);\n    i0.ɵɵelementStart(1, \"mat-card\", 7);\n    i0.ɵɵelementStart(2, \"div\", 8);\n    i0.ɵɵtemplate(3, HhvMeterReadingComponent_ng_container_5_div_3_Template, 4, 1, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 8);\n    i0.ɵɵelementStart(5, \"div\", 10);\n    i0.ɵɵelementStart(6, \"lib-date-input\", 11, 12);\n    i0.ɵɵlistener(\"emitFilter\", function HhvMeterReadingComponent_ng_container_5_Template_lib_date_input_emitFilter_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r53);\n      const activityData_r3 = restoredCtx.$implicit;\n      const i_r4 = restoredCtx.index;\n      const ctx_r52 = i0.ɵɵnextContext();\n      return ctx_r52.dateInpChange(activityData_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 8);\n    i0.ɵɵelementStart(9, \"div\", 10);\n    i0.ɵɵelementStart(10, \"div\", 8);\n    i0.ɵɵelementStart(11, \"div\", 13);\n    i0.ɵɵelementStart(12, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(13, \"mat-label\", 15);\n    i0.ɵɵtext(14, \"Fuel used\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"mat-select\", 16);\n    i0.ɵɵelementStart(16, \"mat-option\");\n    i0.ɵɵelement(17, \"ngx-mat-select-search\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"mat-optgroup\", 18);\n    i0.ɵɵtemplate(19, HhvMeterReadingComponent_ng_container_5_ng_container_19_Template, 2, 1, \"ng-container\", 19);\n    i0.ɵɵpipe(20, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"mat-optgroup\", 20);\n    i0.ɵɵtemplate(22, HhvMeterReadingComponent_ng_container_5_ng_container_22_Template, 2, 1, \"ng-container\", 19);\n    i0.ɵɵpipe(23, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, HhvMeterReadingComponent_ng_container_5_mat_error_24_Template, 2, 1, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 22);\n    i0.ɵɵelementStart(26, \"div\", 23);\n    i0.ɵɵtemplate(27, HhvMeterReadingComponent_ng_container_5_span_27_Template, 4, 5, \"span\", 24);\n    i0.ɵɵtemplate(28, HhvMeterReadingComponent_ng_container_5_ng_template_28_Template, 2, 1, \"ng-template\", null, 25, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function HhvMeterReadingComponent_ng_container_5_Template_button_click_30_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r53);\n      const i_r4 = restoredCtx.index;\n      const ctx_r54 = i0.ɵɵnextContext();\n      return ctx_r54.editHhvValue(i_r4);\n    });\n    i0.ɵɵelementStart(31, \"span\", 27);\n    i0.ɵɵtext(32, \" edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"div\", 8);\n    i0.ɵɵelementStart(34, \"div\", 10);\n    i0.ɵɵelementStart(35, \"div\", 8);\n    i0.ɵɵelementStart(36, \"div\", 28);\n    i0.ɵɵelementStart(37, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(38, \"mat-label\", 15);\n    i0.ɵɵtext(39, \"Opening meter reading\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(40, \"input\", 29);\n    i0.ɵɵtemplate(41, HhvMeterReadingComponent_ng_container_5_mat_error_41_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵtemplate(42, HhvMeterReadingComponent_ng_container_5_mat_error_42_Template, 2, 1, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(43, \"div\", 28);\n    i0.ɵɵelementStart(44, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(45, \"mat-label\", 15);\n    i0.ɵɵtext(46, \"Closing meter reading\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(47, \"input\", 30);\n    i0.ɵɵtemplate(48, HhvMeterReadingComponent_ng_container_5_mat_error_48_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵtemplate(49, HhvMeterReadingComponent_ng_container_5_mat_error_49_Template, 2, 1, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(50, \"div\", 28);\n    i0.ɵɵelementStart(51, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(52, \"mat-label\", 15);\n    i0.ɵɵtext(53, \"Select unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(54, \"mat-select\", 31);\n    i0.ɵɵelementStart(55, \"mat-option\");\n    i0.ɵɵelement(56, \"ngx-mat-select-search\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(57, HhvMeterReadingComponent_ng_container_5_mat_option_57_Template, 3, 3, \"mat-option\", 33);\n    i0.ɵɵpipe(58, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(59, \"mat-error\");\n    i0.ɵɵtext(60);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(61, HhvMeterReadingComponent_ng_container_5_ng_container_61_Template, 19, 6, \"ng-container\", 21);\n    i0.ɵɵtemplate(62, HhvMeterReadingComponent_ng_container_5_ng_container_62_Template, 18, 6, \"ng-container\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activityData_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const _r11 = i0.ɵɵreference(29);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSource);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"materialFieldWidthInp\", true)(\"materialFormFieldAppearanceInp\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE)(\"isMandatoryFieldInp\", activityData_r3.get(\"dateRange\").hasError(\"required\"))(\"dateInputTypeInp\", ctx_r0.DateInputTypeEnum.CUSTOM_INPUT)(\"cdrFormatInp\", ctx_r0.DateFormatEnum.DD_MMM_YYYY)(\"labelInp\", \"Accounting Period\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r0.fuelTypeSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx_r0.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(20, 33, ctx_r0.fuelTypeSearchUtil.filteredEntities));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(23, 35, ctx_r0.fuelTypeSearchUtil.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"fuelSourceID\").hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(39, _c3, !ctx_r0.getHhvValue(i_r4), ctx_r0.getHhvValue(i_r4)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r0.haveFuel(i_r4) ? \"\" : \"Select a fuel\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.getHhvValue(i_r4))(\"ngIfElse\", _r11);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.haveFuel(i_r4))(\"matTooltip\", ctx_r0.getHhvValue(i_r4) ? \"Update hhv\" : \"Input hhv\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"openingMeterReading\").hasError(\"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"openingMeterReading\").hasError(\"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"closingMeterReading\").hasError(\"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"closingMeterReading\").hasError(\"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isReadOnly);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControl\", ctx_r0.unitSearchUtil.filterFC);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(58, 37, ctx_r0.unitSearchUtil.filteredEntities));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.FormErrorEnum.REQUIRED, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"docPath\").value == null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"docPath\").value != null);\n  }\n}\nfunction HhvMeterReadingComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 48);\n    i0.ɵɵelementStart(1, \"div\", 61);\n    i0.ɵɵelement(2, \"img\", 62);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r2.billFileName);\n  }\n}\n// /tsc-library\nexport let HhvMeterReadingComponent = /*#__PURE__*/(() => {\n  class HhvMeterReadingComponent {\n    constructor(dialog, formBuilder, activatedRoute, fuelController, customFuelController, carbonDocumentController, storageService, fuelService, unitService, toastrService, customFuelService, dateService) {\n      this.dialog = dialog;\n      this.formBuilder = formBuilder;\n      this.activatedRoute = activatedRoute;\n      this.fuelController = fuelController;\n      this.customFuelController = customFuelController;\n      this.carbonDocumentController = carbonDocumentController;\n      this.storageService = storageService;\n      this.fuelService = fuelService;\n      this.unitService = unitService;\n      this.toastrService = toastrService;\n      this.customFuelService = customFuelService;\n      this.dateService = dateService;\n      this.getAllSource = [];\n      this.formGroupChange = new EventEmitter();\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.FormErrorEnum = FormErrorEnum;\n      this.DateFormatEnum = DateFormatEnum;\n      this.DateInputTypeEnum = DateInputTypeEnum;\n      this.action = null;\n      this.dataSource = [];\n      this.unitM = [];\n      this.massUnitM = [];\n      this.fuelUnitList = [];\n      this.energyUnitM = [];\n      this.volumnUnitListM = [];\n      this.massVolumnUnitM = [];\n      this.unitIdList = [];\n      this.filled = false;\n      this.submit = false;\n      this.isReadOnly = true;\n      this.isSource = false;\n      this.docList = [];\n      this.billFile = null;\n      this.sourceName = null;\n      this.isEqual = true;\n      this.fuelTypeSearchUtil = new MatSelectSearchService(['name']);\n      this.energyUnitSearchUtil = new MatSelectSearchService(['name']);\n      this.unitSearchUtil = new MatSelectSearchService(['name']);\n    }\n    ngOnInit() {\n      this.storageService.setStorage('switchOrgRedirect', 'YES');\n      this.currentOrgID = parseInt(this.storageService.getStorage(['currentOrgID']));\n      this.getUnitList();\n    }\n    ngOnChanges() {\n      this.activatedRoute.queryParams.subscribe(queryParam => {\n        this.action = queryParam['action'];\n        this.activityID = queryParam['activityID'];\n      });\n      this.ActivityDataInit();\n      this.getConfiguration(this.activityConfig);\n    }\n    ngAfterViewInit() {\n      this.fileInputLoadSub = this.fileInput.changes.subscribe(() => this.updateFileInputArray());\n      this.updateFileInputArray();\n    }\n    updateFileInputArray() {\n      if (this.fileInput && this.fileInput.length > 0) {\n        this.fileInputArr = this.fileInput.toArray();\n      }\n    }\n    ActivityDataInit() {\n      this.activityDataFG = this.formBuilder.group({\n        activityDataDetails: this.formBuilder.array([])\n      });\n    }\n    get activityDataFA() {\n      return this.activityDataFG.get('activityDataDetails');\n    }\n    initFormControl(sourceID) {\n      this.activityDataFA.push(this.formBuilder.group({\n        recordID: [],\n        sourceTypeID: this.activityConfig['activityConfigSource']['sourceTypeID'],\n        sourceID: [sourceID],\n        dateRange: [],\n        startDate: [],\n        endDate: [],\n        standardFuelID: [],\n        fuelSourceID: [],\n        customFuelID: [],\n        hhv: [],\n        hhvNumeratorUnitID: [],\n        hhvNumeratorUomCode: [],\n        hhvDenominatorUnitID: [],\n        hhvDenominatorUomCode: [],\n        amountOfFuel: [],\n        amountOfFuelUnitID: [],\n        amountOfEnergy: [],\n        amountOfEnergyUnitID: [],\n        openingMeterReading: [],\n        closingMeterReading: [],\n        meterReadingUnitID: this.activityConfig['activityConfigData']['meterUnitID'],\n        activityID: this.activityID,\n        docID: [],\n        docType: [],\n        docName: [],\n        docSize: [],\n        docPath: []\n      }));\n    }\n    addFormControls() {\n      if (this.isSource) {\n        this.dataSource.forEach(ds => {\n          this.initFormControl(ds.id);\n        });\n      } else {\n        this.initFormControl(null);\n      }\n      this.updateValidators();\n    }\n    pathFormData() {\n      let fuelSource;\n      if (this.activityData.standardFuelID != null) {\n        fuelSource = 'S' + this.activityData.standardFuelID;\n      } else if (this.activityData.customFuelID != null) {\n        fuelSource = 'C' + this.activityData.customFuelID;\n      }\n      this.activityDataFA.push(this.formBuilder.group({\n        activityDataID: this.activityData.id,\n        recordID: this.activityData.recordID,\n        sourceTypeID: this.activityData.sourceTypeID,\n        sourceTypeName: this.activityData.sourceTypeName,\n        sourceID: this.activityData.sourceID,\n        dateRange: {\n          startDate: moment(this.activityData['startDate']),\n          endDate: moment(this.activityData['endDate'])\n        },\n        startDate: this.activityData.startDate,\n        endDate: this.activityData.endDate,\n        fuelSourceID: fuelSource,\n        standardFuelID: this.activityData.standardFuelID,\n        customFuelID: this.activityData.customFuelID,\n        hhv: this.activityData.hhv,\n        hhvNumeratorUnitID: this.activityData.hhvNumeratorUnitID,\n        hhvNumeratorUomCode: this.activityData.hhvNumeratorUomCode,\n        hhvDenominatorUnitID: this.activityData.hhvDenominatorUnitID,\n        hhvDenominatorUomCode: this.activityData.hhvDenominatorUomCode,\n        amountOfFuel: this.activityData.amountOfFuel,\n        amountOfFuelUnitID: this.activityData.amountOfFuelUnitID,\n        amountOfEnergy: this.activityData.amountOfEnergy,\n        amountOfEnergyUnitID: this.activityData.amountOfEnergyUnitID,\n        openingMeterReading: this.activityData.openingMeterReading,\n        closingMeterReading: this.activityData.closingMeterReading,\n        meterReadingUnitID: this.activityData.meterReadingUnitID,\n        activityID: this.activityData.activityID,\n        docID: this.activityData.file ? this.activityData.file.id : null,\n        docName: this.activityData.file ? this.activityData.file.name : null,\n        docPath: this.activityData.file ? this.activityData.file.path : null,\n        docSize: []\n      }));\n      if (this.activityData.sourceName != null) {\n        this.sourceName = this.activityData.sourceName;\n        this.isSource = true;\n      }\n      this.updateValidators();\n      this.activityDataFA.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.activityDataFA.value));\n      this.initialObject = this.activityDataFA.value;\n      this.isEqual = true;\n    }\n    updateValidators() {\n      this.currentFormArr = this.activityDataFG.get('activityDataDetails');\n      for (let i = 0; i < this.currentFormArr.controls.length; ++i) {\n        let item = this.currentFormArr.controls[i];\n        this.removeValidators(item);\n        item.valueChanges.subscribe(() => {\n          this.removeValidators(item);\n          this.isFormFilled(item);\n          this.submit = false;\n          if (this.filled) {\n            this.submit = true;\n            this.addValidators(item);\n          }\n          this.filled = false;\n        });\n      }\n      this.formGroupChange.emit(this.activityDataFG);\n    }\n    isFormFilled(formGroup) {\n      if (formGroup.get('dateRange').value != null) this.filled = true;\n      if (formGroup.get('fuelSourceID').value != null) this.filled = true;\n      if (formGroup.get('openingMeterReading').value != null) this.filled = true;\n      if (formGroup.get('closingMeterReading').value != null) this.filled = true;\n      if (formGroup.get('meterReadingUnitID').value != null) this.filled = true;\n      if (formGroup.get('hhv').value != null) this.filled = true;\n      if (formGroup.get('hhvNumeratorUnitID').value != null) this.filled = true;\n      if (formGroup.get('hhvDenominatorUnitID').value != null) this.filled = true;\n    }\n    addValidators(formGroup) {\n      formGroup.get('dateRange').addValidators([Validators.required]);\n      formGroup.get('fuelSourceID').addValidators([Validators.required]);\n      formGroup.get('openingMeterReading').addValidators([Validators.required, Validators.min(0)]);\n      formGroup.get('closingMeterReading').addValidators([Validators.required, Validators.min(0)]);\n      formGroup.get('meterReadingUnitID').addValidators([Validators.required]);\n      formGroup.get('hhv').addValidators([Validators.required, Validators.min(0)]);\n      formGroup.get('hhvNumeratorUnitID').addValidators([Validators.required]);\n      formGroup.get('hhvDenominatorUnitID').addValidators([Validators.required]);\n      this.updateValueAndValidity(formGroup);\n    }\n    removeValidators(formGroup) {\n      formGroup.get('dateRange').clearValidators();\n      formGroup.get('fuelSourceID').clearValidators();\n      formGroup.get('openingMeterReading').clearValidators();\n      formGroup.get('closingMeterReading').clearValidators();\n      formGroup.get('meterReadingUnitID').clearValidators();\n      formGroup.get('hhv').clearValidators();\n      formGroup.get('hhvNumeratorUnitID').clearValidators();\n      formGroup.get('hhvNumeratorUnitID').clearValidators();\n      this.updateValueAndValidity(formGroup);\n    }\n    updateValueAndValidity(formGroup) {\n      formGroup.get('dateRange').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('fuelSourceID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('openingMeterReading').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('closingMeterReading').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('meterReadingUnitID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('hhv').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('hhvNumeratorUnitID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('hhvNumeratorUnitID').updateValueAndValidity({\n        emitEvent: false\n      });\n    }\n    getConfiguration(configuration) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.action == 'create') {\n          const sourceID = configuration.activityConfigSource.sourceID;\n          if (sourceID != null && sourceID.length > 0) {\n            this.isSource = true;\n            this.dataSource = [];\n            sourceID.forEach(res => {\n              this.dataSource.push({\n                id: res\n              });\n            });\n          } else {\n            this.isSource = false;\n          }\n          this.addFormControls();\n        }\n      });\n    }\n    getAssetName(id) {\n      const asset = this.getAllSource.find(item => item.assetID === id);\n      return asset.assetName;\n    }\n    formatDate(index) {\n      let date = this.activityDataFA.controls[index].get('dateRange').value;\n      let startDate = moment(date.startDate).format(\"YYYY-MM-DD\");\n      let endDate = moment(date.endDate).format(\"YYYY-MM-DD\");\n      this.activityDataFA.controls[index].get('startDate').patchValue(startDate);\n      this.activityDataFA.controls[index].get('endDate').patchValue(endDate);\n    }\n    getUnitList() {\n      forkJoin([this.unitService.getUnit([])]).subscribe(([unitM]) => {\n        this.unitM = unitM;\n        this.energyUnitM = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.ENERGY]);\n        this.massVolumnUnitM = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.VOLUME, UnitTypeKeyID.MASS]);\n        this.massUnitM = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.MASS]);\n        this.volumnUnitListM = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.VOLUME]);\n        this.getFuel();\n        // ngx mat select search\n        this.unitSearchUtil.entityArr = this.massVolumnUnitM;\n        this.unitSearchUtil.createSubscription();\n        if (this.action == 'update') {\n          this.activityData = this.activityConfig.activityData;\n          this.pathFormData();\n          this.dateInputSub = this.customDateInputs.changes.subscribe(list => {\n            if (list.length > 0) {\n              this.patchDate();\n              this.dateInputSub.unsubscribe();\n            }\n          });\n        }\n      }, error => {\n        console.error('error in formInitialization -', error);\n      });\n    }\n    getFuel() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let stdFuel;\n        let customFuel;\n        let modifiedStdFuel;\n        let modifiedCustomFuel;\n        [stdFuel, customFuel] = yield Promise.all([this.fuelService.getFuelByActivityKeyID(ActivityKeyIDEnum.STATIONARY_COMBUSTION), this.customFuelService.getCustomFuelList(this.currentOrgID)]);\n        modifiedStdFuel = stdFuel.map(fuel => {\n          return Object.assign(Object.assign({}, fuel), {\n            isStandard: true,\n            uID: 'S' + fuel['id']\n          });\n        });\n        modifiedCustomFuel = customFuel.map(fuel => {\n          return Object.assign(Object.assign({}, fuel), {\n            isStandard: false,\n            uID: 'C' + fuel['id']\n          });\n        });\n        this.fuelUnitList = modifiedStdFuel.concat(modifiedCustomFuel);\n        this.fuelTypeSearchUtil.entityArr = this.fuelUnitList;\n        this.fuelTypeSearchUtil.createSubscription();\n      });\n    }\n    customeFuleSelected(fuelID, index) {\n      this.customFuelController.getCustomFuelByID(this.currentOrgID, fuelID).subscribe(res => {\n        this.setCustomNcv(index, res);\n      });\n      this.activityDataFA.controls[index].get('amountOfFuelUnitID').reset(null, {\n        emitEvent: false\n      });\n    }\n    standardFuelSelected(fuelID, index) {\n      let fuel = this.fuelUnitList.find(fuel => fuel['id'] == fuelID);\n      if (fuel['isHhvEnabled']) {\n        this.getStdHhv(fuelID, index);\n      } else {\n        this.resetHhv(index);\n      }\n      this.activityDataFA.controls[index].get('amountOfFuelUnitID').reset(null, {\n        emitEvent: false\n      });\n      let unitType = fuel['unitType'];\n      this.setStdFuelUnit(index, unitType);\n    }\n    setStdFuelUnit(index, unitType) {\n      this.unitIdList = [];\n      unitType.forEach(uType => {\n        switch (uType) {\n          case UnitTypeKeyID.ENERGY:\n            this.energyUnitM.map(unit => this.unitIdList.push(unit));\n            break;\n          case UnitTypeKeyID.MASS:\n            this.massUnitM.map(unit => this.unitIdList.push(unit));\n            break;\n          case UnitTypeKeyID.VOLUME:\n            this.volumnUnitListM.map(unit => this.unitIdList.push(unit));\n            break;\n          default:\n            console.log('Undefined case encountered - ', unitType);\n        }\n      });\n    }\n    getStdHhv(fuelID, i) {\n      const formControl = this.activityDataFA.controls[i];\n      const source = formControl.get('fuelSourceID');\n      if (source.value) {\n        this.fuelController.getHhv(this.currentOrgID, fuelID).subscribe(res => {\n          const obj = {\n            hhv: res['value'],\n            hhvNumeratorUnitID: res['numeratorUnit']['id'],\n            hhvNumeratorUomCode: res['numeratorUnit']['uomCode'],\n            hhvDenominatorUnitID: res['denominatorUnit']['id'],\n            hhvDenominatorUomCode: res['denominatorUnit']['uomCode']\n          };\n          formControl.patchValue(obj);\n        });\n      }\n    }\n    setCustomNcv(i, res) {\n      const formControl = this.activityDataFA.controls[i];\n      const source = formControl.get('fuelSourceID');\n      if (source.value) {\n        const obj = {\n          hhv: res['netCalorificValue'],\n          hhvNumeratorUnitID: res['ncvNumeratorUnitID'],\n          hhvNumeratorUomCode: res['ncvNumeratorUnitCode'],\n          hhvDenominatorUnitID: res['ncvDenominatorUnitID'],\n          hhvDenominatorUomCode: res['ncvDenominatorUnitCode']\n        };\n        formControl.patchValue(obj);\n      }\n    }\n    resetHhv(index) {\n      this.activityDataFA.controls[index].patchValue({\n        hhv: null,\n        hhvNumeratorUnitID: null,\n        hhvNumeratorUomCode: null,\n        hhvDenominatorUnitID: null,\n        hhvDenominatorUomCode: null\n      });\n    }\n    haveFuel(index) {\n      return this.activityDataFA.controls[index].get('fuelSourceID').value ? true : false;\n    }\n    getHhvValue(index) {\n      return this.activityDataFA.controls[index].get('hhv').value;\n    }\n    getHhvNumerator(index) {\n      return this.activityDataFA.controls[index].get('hhvNumeratorUomCode').value;\n    }\n    getHhvDenominator(index) {\n      return this.activityDataFA.controls[index].get('hhvDenominatorUomCode').value;\n    }\n    editHhvValue(index) {\n      const dialogRef = this.dialog.open(HhvCreateUpdateDialog, {\n        data: {\n          energyUnits: this.energyUnitM,\n          massVolumeUnits: this.unitIdList,\n          hhv: {\n            hhv: this.activityDataFA.controls[index].get('hhv').value,\n            hhvNumeratorUnitID: this.activityDataFA.controls[index].get('hhvNumeratorUnitID').value,\n            hhvNumeratorUomCode: this.activityDataFA.controls[index].get('hhvNumeratorUomCode').value,\n            hhvDenominatorUnitID: this.activityDataFA.controls[index].get('hhvDenominatorUnitID').value,\n            hhvDenominatorUomCode: this.activityDataFA.controls[index].get('hhvDenominatorUomCode').value\n          }\n        },\n        minWidth: '600px',\n        maxWidth: '600px',\n        height: '100%',\n        position: {\n          right: '-2px',\n          top: '0px'\n        }\n      });\n      dialogRef.afterClosed().subscribe(res => {\n        if (res instanceof Object) {\n          let hhv = res['hhv'];\n          this.activityDataFA.controls[index].patchValue({\n            hhv: hhv === null || hhv === void 0 ? void 0 : hhv.hhv,\n            hhvNumeratorUnitID: hhv === null || hhv === void 0 ? void 0 : hhv.hhvNumeratorUnitID,\n            hhvNumeratorUomCode: hhv === null || hhv === void 0 ? void 0 : hhv.hhvNumeratorUomCode,\n            hhvDenominatorUnitID: hhv === null || hhv === void 0 ? void 0 : hhv.hhvDenominatorUnitID,\n            hhvDenominatorUomCode: hhv === null || hhv === void 0 ? void 0 : hhv.hhvDenominatorUomCode\n          });\n          this.getHhvValue(index);\n          this.getHhvNumerator(index);\n          this.getHhvDenominator(index);\n        }\n      });\n    }\n    isValidForm() {\n      this.activityDataFG.markAllAsTouched();\n      if (this.action == 'create') {\n        if (this.activityDataFG.invalid || this.submit == false) {\n          this.toastrService.openToast('Error', 'Fill at least one record detail', 'error');\n          return;\n        }\n      } else if (this.action == 'update') {\n        if (!this.isEqual && (this.activityDataFG.invalid || this.submit == false)) {\n          this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n          return;\n        }\n      }\n      this.activityData = {};\n      const validControls = [];\n      const formArray = this.activityDataFG.get('activityDataDetails');\n      formArray.controls.forEach((control, index) => {\n        if (control.get('openingMeterReading').value != null) {\n          validControls.push(control);\n        }\n        if (control.get('openingMeterReading').value == null) {\n          this.docFileList.splice(index, 1);\n        }\n      });\n      const newFormArray = new FormArray(validControls);\n      this.activityData = JSON.parse(JSON.stringify(newFormArray.value));\n      return true;\n    }\n    standardFuelChange(index) {\n      if (this.activityDataFA.controls[index].get('fuelSourceID').value != null) {\n        let fuel = this.fuelUnitList.find(fuel => fuel['uID'] == this.activityDataFA.controls[index].get('fuelSourceID').value);\n        this.activityDataFA.controls[index].get('standardFuelID').patchValue(fuel.id);\n        this.activityDataFA.controls[index].get('customFuelID').reset(null);\n        this.standardFuelSelected(fuel.id, index);\n      }\n    }\n    customFuelChange(index) {\n      if (this.activityDataFA.controls[index].get('fuelSourceID').value != null) {\n        let fuel = this.fuelUnitList.find(fuel => fuel['uID'] == this.activityDataFA.controls[index].get('fuelSourceID').value);\n        this.activityDataFA.controls[index].get('customFuelID').patchValue(fuel.id);\n        this.activityDataFA.controls[index].get('standardFuelID').reset(null);\n        this.customeFuleSelected(fuel.id, index);\n      }\n    }\n    dateInpChange(formGroup, index) {\n      if (this.customDateInputs) {\n        const customDateInputInstance = this.customDateInputs.toArray()[index];\n        const startDate = customDateInputInstance.startDateFC.value;\n        const endDate = customDateInputInstance.endDateFC.value;\n        const dateRange = customDateInputInstance.daterange.value;\n        if (startDate) {\n          const formattedStartDate = this.dateService.formatDate(startDate, DateFormatEnum.YYYY_MM_DD);\n          formGroup.get('startDate').patchValue(formattedStartDate);\n        }\n        if (endDate) {\n          const formattedEndDate = this.dateService.formatDate(endDate, DateFormatEnum.YYYY_MM_DD);\n          formGroup.get('endDate').patchValue(formattedEndDate);\n        }\n        if (dateRange) {\n          const dateRangeFormate = this.dateService.formatDate(dateRange, DateFormatEnum.YYYY_MM_DD);\n          formGroup.get('dateRange').patchValue(dateRangeFormate);\n        }\n      }\n    }\n    patchDate() {\n      const customDateInputInstance = this.customDateInputs.toArray()[0];\n      if (customDateInputInstance) {\n        customDateInputInstance.daterange.patchValue({\n          startDate: moment(this.activityData['startDate']),\n          endDate: moment(this.activityData['endDate'])\n        });\n      }\n    }\n    fileUpload(event, formGroup, index) {\n      let file = event.target.files[0];\n      if (file) {\n        if (file.type !== 'application/pdf') {\n          this.toastrService.error(NocFileUploadEnum.INVALID_FILE_TYPE_ERROR);\n          return;\n        }\n        if (file.size > NocFileUploadEnum.MAX_FILE_SIZE) {\n          this.toastrService.error(NocFileUploadEnum.INVAID_FILE_SIZE_ERROR);\n          return;\n        }\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = e => {};\n        this.billFile = file;\n        this.billFileName = file['name'];\n        formGroup.get('docName').patchValue(file['name']);\n        formGroup.get('docSize').patchValue(this.getFileSizeWithUnit(file['size']));\n        this.docFileList[index] = file;\n        if (this.action == 'update') {\n          this.fileCreateUpdate(formGroup);\n        }\n      } else {\n        this.toastrService.error('Please upload a file!');\n        return;\n      }\n    }\n    getFileSizeWithUnit(billFileSize) {\n      const fileSizeInKB = Math.round(billFileSize / 1024);\n      const fileSizeInMB = Math.round(fileSizeInKB / 1024);\n      const fileSizeInGB = Math.round(fileSizeInMB / 1024);\n      if (fileSizeInGB > 1) {\n        return fileSizeInGB + ' GB';\n      } else if (fileSizeInMB > 1) {\n        return fileSizeInMB + ' MB';\n      } else {\n        return fileSizeInKB + ' KB';\n      }\n    }\n    removeFile(formGroup, index) {\n      if (this.action == 'create') {\n        this.fileInputArr[index].nativeElement.value = null;\n      }\n      this.billFile = null;\n      this.billFileName = '';\n      formGroup.get('docName').reset();\n      formGroup.get('docSize').reset();\n      formGroup.get('docPath').reset(null);\n      formGroup.get('docID').reset();\n      this.docFileList[index] = this.billFile;\n    }\n    toFormData() {\n      const formData = new FormData();\n      formData.append('payload', this.billFile);\n      return formData;\n    }\n    fileCreateUpdate(formGroup) {\n      if (formGroup.get('docID').value == null) {\n        this.carbonDocumentController.createDocument(this.currentOrgID, formGroup.get('activityDataID').value, ActivityKeyIDEnum.STATIONARY_COMBUSTION, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileCreate -\", error);\n        });\n      } else {\n        this.carbonDocumentController.updateDocument(this.currentOrgID, formGroup.get('docID').value, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileUpdate -\", error);\n        });\n      }\n    }\n    updateFileFormControl(formGroup) {\n      formGroup.get('docID').patchValue(this.file.id);\n      formGroup.get('docName').patchValue(this.file.name);\n      formGroup.get('docPath').patchValue(this.file.path);\n    }\n    deleteConfirmation(formGroup, index) {\n      const dialogRef = this.dialog.open(TypeConfirmationDialog, {\n        minWidth: '650px',\n        maxWidth: '600px',\n        data: {\n          icon: 'delete',\n          header: 'Are you sure you want to delete ?',\n          body: '<p class = \"ps-1\"><strong class=\"pe-1\"> Note:</strong>This file will be deleted permanently and you won`t be able to track it`s progress.</p><span class=\"fw-bold ps-1\">Are you sure you want to delete?</span>',\n          confirmationInput: 'DELETE',\n          buttonOne: 'Cancel',\n          buttonTwo: 'Delete'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.deleteDocument(formGroup.get('docID').value, formGroup, index);\n        } else {\n          dialogRef.close();\n        }\n      });\n    }\n    deleteDocument(docID, formGroup, index) {\n      this.carbonDocumentController.deleteDocument(this.currentOrgID, docID).subscribe(res => {\n        this.removeFile(formGroup, index);\n      }, error => {\n        console.log(\"error in deleteDocument -\", error);\n      });\n    }\n    uploadDoc(index) {\n      this.fileInputArr[index].nativeElement.click();\n    }\n    ngOnDestroy() {\n      this.storageService.setStorage('switchOrgRedirect', 'NO');\n    }\n  }\n  HhvMeterReadingComponent.ɵfac = function HhvMeterReadingComponent_Factory(t) {\n    return new (t || HhvMeterReadingComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.FuelController), i0.ɵɵdirectiveInject(i5.CustomFuelController), i0.ɵɵdirectiveInject(i6.CarbonDocumentController), i0.ɵɵdirectiveInject(i7.StorageService), i0.ɵɵdirectiveInject(i8.FuelService), i0.ɵɵdirectiveInject(i9.UnitService), i0.ɵɵdirectiveInject(i10.ToastrService), i0.ɵɵdirectiveInject(i11.CustomFuelService), i0.ɵɵdirectiveInject(i12.DateService));\n  };\n  HhvMeterReadingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HhvMeterReadingComponent,\n    selectors: [[\"stationary-combustion-hhv-meter-reading\"]],\n    viewQuery: function HhvMeterReadingComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customDateInputs = _t);\n      }\n    },\n    inputs: {\n      activityConfig: \"activityConfig\",\n      getAllSource: \"getAllSource\",\n      activityID: \"activityID\",\n      docFileList: \"docFileList\"\n    },\n    outputs: {\n      formGroupChange: \"formGroupChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\"], [3, \"formGroup\"], [\"formArrayName\", \"activityDataDetails\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"docImg\", \"\"], [3, \"formGroupName\"], [1, \"border\", \"cardOverwrite\", \"mt-3\"], [1, \"row\"], [\"class\", \"col-sm-8 mb-3\", 4, \"ngIf\"], [1, \"col-sm-8\"], [1, \"cursorPointer\", 3, \"materialFieldWidthInp\", \"materialFormFieldAppearanceInp\", \"isMandatoryFieldInp\", \"dateInputTypeInp\", \"cdrFormatInp\", \"labelInp\", \"emitFilter\"], [\"customDateInput\", \"\"], [1, \"col-sm-4\"], [1, \"matFieldWidth100\", \"col-sm-4\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"fuelSourceID\"], [\"placeholderLabel\", \"Search by custom/standard process name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [\"label\", \"Standard Fuel\"], [4, \"ngFor\", \"ngForOf\"], [\"label\", \"Custom Fuel\"], [4, \"ngIf\"], [1, \"col-sm-4\", \"ps-4\", \"border\", \"mt-1\", \"ms-4\", \"hhv\", 3, \"ngClass\"], [\"matTooltipPosition\", \"above\", \"matTooltipClass\", \"nameTooltip\", 1, \"w-100\", \"justify-content-space-between\", 3, \"matTooltip\"], [\"class\", \"ms-1\", 4, \"ngIf\", \"ngIfElse\"], [\"hyphen\", \"\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltipPosition\", \"above\", \"matTooltipClass\", \"nameTooltip\", 1, \"float-end\", 3, \"disabled\", \"matTooltip\", \"click\"], [1, \"material-symbols-outlined\", \"fs-5\"], [1, \"col-sm-3\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"openingMeterReading\", \"placeholder\", \"0.00\", \"min\", \"0\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"closingMeterReading\", \"placeholder\", \"0.00\", \"min\", \"0\"], [\"formControlName\", \"meterReadingUnitID\", 3, \"disabled\"], [\"placeholderLabel\", \"Search by unit name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-sm-8\", \"mb-3\"], [1, \"cardTitle\", \"pb-2\"], [3, \"value\", \"click\", 4, \"ngIf\"], [3, \"value\", \"click\"], [1, \"ms-1\"], [\"matTooltipPosition\", \"above\", \"matTooltipClass\", \"nameTooltip\", 3, \"matTooltip\"], [1, \"ms-5\", \"fw-bold\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [1, \"col-sm-8\", \"fileInput\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"row\", \"pt-2\"], [1, \"border\", \"rounded\", \"d-flex\", 3, \"ngClass\"], [1, \"p-1\"], [4, \"ngTemplateOutlet\"], [1, \"centerAlignVertical\", \"p-1\"], [1, \"ms-auto\", \"p-1\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-danger\"], [1, \"border\", \"rounded\", \"d-flex\"], [1, \"centerAlignVertical\", \"p-3\"], [\"target\", \"_blank\", 3, \"href\", \"ngClass\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Edit\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-primary\", \"updateIconHover\", \"fs-5\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 2, \"display\", \"none\", 3, \"change\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Delete\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"mat-raised-button\", \"\", \"matTooltipPosition\", \"below\", 1, \"docIcon\", \"p-1\", 3, \"matTooltip\"], [\"height\", \"40px\", \"src\", \"assets/images/default-doc.ico\", \"alt\", \"bill document preview\"]],\n    template: function HhvMeterReadingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \"Activity Data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementContainerStart(4, 3);\n        i0.ɵɵtemplate(5, HhvMeterReadingComponent_ng_container_5_Template, 63, 42, \"ng-container\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, HhvMeterReadingComponent_ng_template_6_Template, 3, 1, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityDataFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityDataFA.controls);\n      }\n    },\n    directives: [i13.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormArrayName, i14.NgForOf, i2.FormGroupName, i14.NgIf, i12.DateInputComponent, i15.MatFormField, i15.MatLabel, i16.MatSelect, i2.NgControlStatus, i2.FormControlName, i17.MatOption, i18.MatSelectSearchComponent, i2.FormControlDirective, i17.MatOptgroup, i14.NgClass, i19.MatTooltip, i20.MatButton, i21.MatInput, i2.NumberValueAccessor, i2.MinValidator, i2.DefaultValueAccessor, i15.MatError, i14.NgTemplateOutlet, i15.MatSuffix],\n    pipes: [i14.AsyncPipe, i14.DecimalPipe],\n    styles: [\".hhv[_ngcontent-%COMP%]{width:200px;height:48px;border-radius:5px;padding:5px 5px 4px}\"]\n  });\n  return HhvMeterReadingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}