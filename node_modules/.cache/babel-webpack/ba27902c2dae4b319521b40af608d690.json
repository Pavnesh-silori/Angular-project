{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { FormArray, FormControl } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { CARBON_CONSTANT } from '@carbon/constant/carbon.constant';\nimport * as moment from 'moment';\nimport { DaterangepickerDirective } from 'ngx-daterangepicker-material';\nimport { ReplaySubject, Subject, combineLatest } from 'rxjs';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n// library\nimport { FormErrorEnum, NocFileUploadEnum, TypeConfirmationDialog } from '@library/tsc-common';\nimport { MaterialFormFieldAppearance } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport { DateFormatEnum, DateInputTypeEnum } from '@library/date';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@carbon/controller/document.controller\";\nimport * as i4 from \"@carbon/service/waste-generated.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@library/unit-service\";\nimport * as i8 from \"@library/date\";\nimport * as i9 from \"@library/storage-service\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/input\";\nimport * as i15 from \"ngx-daterangepicker-material\";\nimport * as i16 from \"@angular/material/core\";\nimport * as i17 from \"@fortawesome/angular-fontawesome\";\nconst _c0 = [\"fileInput\"];\nfunction CreateUpdateComponent_ng_container_5_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const wasteType_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", wasteType_r13.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", wasteType_r13.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelementStart(1, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_ng_container_5_td_10_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const i_r5 = i0.ɵɵnextContext().index;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.onDeleteRow(i_r5);\n    });\n    i0.ɵɵelementStart(2, \"span\", 28);\n    i0.ɵɵtext(3, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_mat_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const method_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", method_r17.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", method_r17.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Minimum value is 0. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_mat_option_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵelementStart(1, \"span\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const units_r18 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", units_r18.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", units_r18.name, \" - \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_ng_container_38_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction CreateUpdateComponent_ng_container_5_ng_container_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 10);\n    i0.ɵɵelementStart(2, \"div\", 30);\n    i0.ɵɵelementStart(3, \"input\", 31, 32);\n    i0.ɵɵlistener(\"change\", function CreateUpdateComponent_ng_container_5_ng_container_38_Template_input_change_3_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      const emission_r4 = ctx_r22.$implicit;\n      const i_r5 = ctx_r22.index;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.fileUpload($event, emission_r4, i_r5);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 33);\n    i0.ɵɵelementStart(6, \"div\", 18);\n    i0.ɵɵelementStart(7, \"div\", 34);\n    i0.ɵɵelementStart(8, \"div\", 35);\n    i0.ɵɵtemplate(9, CreateUpdateComponent_ng_container_5_ng_container_38_ng_container_9_Template, 1, 0, \"ng-container\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 35);\n    i0.ɵɵelementStart(11, \"div\", 37);\n    i0.ɵɵtext(12);\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 38);\n    i0.ɵɵelementStart(16, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_ng_container_5_ng_container_38_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r25 = i0.ɵɵnextContext();\n      const emission_r4 = ctx_r25.$implicit;\n      const i_r5 = ctx_r25.index;\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.removeFile(emission_r4, i_r5);\n    });\n    i0.ɵɵelementStart(17, \"span\", 28);\n    i0.ɵɵtext(18, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext();\n    const i_r5 = ctx_r26.index;\n    const emission_r4 = ctx_r26.$implicit;\n    const ctx_r11 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(9);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, ctx_r11.docFileList[i_r5] == null));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", emission_r4.get(\"docName\").value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", emission_r4.get(\"docSize\").value, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_ng_container_39_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_ng_container_39_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 33);\n    i0.ɵɵelementStart(2, \"div\", 18);\n    i0.ɵɵelementStart(3, \"div\", 40);\n    i0.ɵɵtemplate(4, CreateUpdateComponent_ng_container_5_ng_container_39_ng_container_4_Template, 1, 0, \"ng-container\", 36);\n    i0.ɵɵelementStart(5, \"div\", 35);\n    i0.ɵɵelementStart(6, \"div\", 41);\n    i0.ɵɵelementStart(7, \"a\", 42);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 43);\n    i0.ɵɵelementStart(10, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_ng_container_5_ng_container_39_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const _r28 = i0.ɵɵreference(14);\n      return _r28.click();\n    });\n    i0.ɵɵelementStart(11, \"span\", 45);\n    i0.ɵɵtext(12, \" edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"input\", 46, 32);\n    i0.ɵɵlistener(\"change\", function CreateUpdateComponent_ng_container_5_ng_container_39_Template_input_change_13_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r32 = i0.ɵɵnextContext();\n      const emission_r4 = ctx_r32.$implicit;\n      const i_r5 = ctx_r32.index;\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.fileUpload($event, emission_r4, i_r5);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_ng_container_5_ng_container_39_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r34 = i0.ɵɵnextContext();\n      const emission_r4 = ctx_r34.$implicit;\n      const i_r5 = ctx_r34.index;\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.deleteConfirmation(emission_r4, i_r5);\n    });\n    i0.ɵɵelementStart(16, \"span\", 28);\n    i0.ɵɵtext(17, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const emission_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(9);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"href\", emission_r4.get(\"docPath\").value, i0.ɵɵsanitizeUrl);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, !emission_r4.get(\"docPath\").value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", emission_r4.get(\"docName\").value, \" \");\n  }\n}\nconst _c2 = function () {\n  return {\n    direction: \"ltr\",\n    applyLabel: \"Apply\",\n    format: \"DD-MMM-YYYY\"\n  };\n};\nfunction CreateUpdateComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0, 8);\n    i0.ɵɵelementStart(1, \"mat-card\", 9);\n    i0.ɵɵelementStart(2, \"div\", 10);\n    i0.ɵɵelementStart(3, \"div\", 11);\n    i0.ɵɵelementStart(4, \"mat-form-field\", 12);\n    i0.ɵɵelementStart(5, \"mat-label\", 13);\n    i0.ɵɵtext(6, \"Select Waste Type \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-select\", 14);\n    i0.ɵɵlistener(\"selectionChange\", function CreateUpdateComponent_ng_container_5_Template_mat_select_selectionChange_7_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r37);\n      const i_r5 = restoredCtx.index;\n      const ctx_r36 = i0.ɵɵnextContext();\n      return ctx_r36.getTreatmentMethods($event, i_r5);\n    });\n    i0.ɵɵtemplate(8, CreateUpdateComponent_ng_container_5_mat_option_8_Template, 3, 2, \"mat-option\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 16);\n    i0.ɵɵtemplate(10, CreateUpdateComponent_ng_container_5_td_10_Template, 4, 0, \"td\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 10);\n    i0.ɵɵelementStart(12, \"div\", 18);\n    i0.ɵɵelementStart(13, \"mat-form-field\", 19);\n    i0.ɵɵelementStart(14, \"mat-label\", 13);\n    i0.ɵɵtext(15, \"Accounting Period \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"input\", 20);\n    i0.ɵɵlistener(\"ngModelChange\", function CreateUpdateComponent_ng_container_5_Template_input_ngModelChange_16_listener() {\n      i0.ɵɵrestoreView(_r37);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return ctx_r38.formatDate();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 10);\n    i0.ɵɵelementStart(18, \"div\", 18);\n    i0.ɵɵelementStart(19, \"div\", 10);\n    i0.ɵɵelementStart(20, \"div\", 11);\n    i0.ɵɵelementStart(21, \"mat-form-field\", 21);\n    i0.ɵɵelementStart(22, \"mat-label\", 13);\n    i0.ɵɵtext(23, \"Select Waste Treatment Method \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"mat-select\", 22);\n    i0.ɵɵtemplate(25, CreateUpdateComponent_ng_container_5_mat_option_25_Template, 2, 2, \"mat-option\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"div\", 11);\n    i0.ɵɵelementStart(27, \"mat-form-field\", 23);\n    i0.ɵɵelementStart(28, \"mat-label\", 13);\n    i0.ɵɵtext(29, \"Waste Treated\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(30, \"input\", 24);\n    i0.ɵɵtemplate(31, CreateUpdateComponent_ng_container_5_mat_error_31_Template, 2, 0, \"mat-error\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"div\", 11);\n    i0.ɵɵelementStart(33, \"mat-form-field\", 12);\n    i0.ɵɵelementStart(34, \"mat-label\", 13);\n    i0.ɵɵtext(35, \"Select unit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"mat-select\", 25);\n    i0.ɵɵtemplate(37, CreateUpdateComponent_ng_container_5_mat_option_37_Template, 3, 2, \"mat-option\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(38, CreateUpdateComponent_ng_container_5_ng_container_38_Template, 19, 6, \"ng-container\", 17);\n    i0.ɵɵtemplate(39, CreateUpdateComponent_ng_container_5_ng_container_39_Template, 18, 6, \"ng-container\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const emission_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r5);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.wasteTypeAndTreatmentMethod);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.action === \"create\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"locale\", i0.ɵɵpureFunction0(20, _c2))(\"drops\", \"down\")(\"opens\", \"right\")(\"alwaysShowCalendars\", true)(\"keepCalendarOpeningWithRange\", true)(\"showDropdowns\", true)(\"showCancel\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.activityDataFG.get(\"wasteTreatedDetails\").at(i_r5).controls[\"rows\"].value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", emission_r4.get(\"wasteTreated\").hasError(\"min\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.massUnit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", emission_r4.get(\"docPath\").value == null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", emission_r4.get(\"docPath\").value != null);\n  }\n}\nfunction CreateUpdateComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r39 = i0.ɵɵnextContext();\n      return ctx_r39.add();\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 49);\n    i0.ɵɵtext(2, \" \\u00A0 Waste Type \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r1.faPlus);\n  }\n}\nfunction CreateUpdateComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵelementStart(1, \"div\", 50);\n    i0.ɵɵelement(2, \"img\", 51);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r3.billFileName);\n  }\n}\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(dialog, formBuilder, carbonDocumentController, wasteGeneratedService, activatedRoute, toastrService, unitService, router, dateService, storageService) {\n      this.dialog = dialog;\n      this.formBuilder = formBuilder;\n      this.carbonDocumentController = carbonDocumentController;\n      this.wasteGeneratedService = wasteGeneratedService;\n      this.activatedRoute = activatedRoute;\n      this.toastrService = toastrService;\n      this.unitService = unitService;\n      this.router = router;\n      this.dateService = dateService;\n      this.storageService = storageService;\n      this.faPlus = faPlus;\n      this.displayedColumns = ['name', 'accountingPeriod', 'wasteTreatmentMethod', 'wasteTreated'];\n      this.dataSource = [];\n      this.wasteTreatmentList = [];\n      this.wasteTypeList = ['steel', 'paper', 'copper', 'waste-water'];\n      this.carbonConstant = CARBON_CONSTANT;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.FormErrorEnum = FormErrorEnum;\n      this.DateFormatEnum = DateFormatEnum;\n      this.DateInputTypeEnum = DateInputTypeEnum;\n      this.docFileList = [];\n      this.docFileList1 = [];\n      this.wasteTypeAndTreatmentMethod = [];\n      this.billFile = null;\n      this.noBillFileAvailable = true;\n      this.wasteArray = [];\n      this.action = 'create';\n      this.dataInputMethodList = [];\n      this.filled = false;\n      this.submit = false;\n      this.boolean = false;\n      this.wasteTypeArray = [];\n      this.massUnit = [];\n      this.unitFilterFC = new FormControl();\n      this.unitFilterUnsubscribe = new Subject();\n      this.unitFiltered = new ReplaySubject(1);\n      this.wasteTypeMap = new Map();\n      this.haveWT = false;\n      this.dataInit = false;\n      this.isValid = () => {\n        return !this.activityDataFG.invalid;\n      };\n      this.validity = new EventEmitter();\n      this.errorHandling = (control, error) => {\n        return this.activityDataFG.controls[control].hasError(error);\n      };\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.currentOrgID = parseInt(this.storageService.getStorage(['currentOrgID']));\n        combineLatest([this.activatedRoute.queryParams, this.activatedRoute.params]).subscribe(([queryParam2, param2]) => {\n          this.action = queryParam2['action'];\n          this.activityID = queryParam2['activityID'];\n        });\n        this.createForm();\n        this.getUnit();\n        yield this.getAllWasteTypeAndTreatmentMethod();\n      });\n    }\n    ngAfterViewInit() {\n      this.fileInputLoadSub = this.fileInput.changes.subscribe(() => this.updateFileInputArray());\n      this.updateFileInputArray();\n    }\n    updateFileInputArray() {\n      if (this.fileInput && this.fileInput.length > 0) {\n        this.fileInputArr = this.fileInput.toArray();\n      }\n    }\n    createForm() {\n      this.activityDataFG = this.formBuilder.group({\n        wasteTreatedDetails: this.formBuilder.array([])\n      });\n      this.addFormControls();\n      this.getTreatmentMethodsForSelectedWasteType();\n      this.updateValidators();\n    }\n    updateValidators() {\n      this.currentFormArr = this.activityDataFG.get('wasteTreatedDetails');\n      for (let i = 0; i < this.currentFormArr.controls.length; ++i) {\n        let item = this.currentFormArr.controls[i];\n        this.removeValidators(item);\n        item.valueChanges.subscribe(() => {\n          this.removeValidators(item);\n          this.isFormFilled(item);\n          this.submit = false;\n          if (this.filled) {\n            this.submit = true;\n            this.addValidators(item);\n          }\n          this.filled = false;\n        });\n      }\n    }\n    isFormFilled(formGroup) {\n      if (formGroup.get('wasteTypeID').value != null) this.filled = true;\n      if (formGroup.get('accountingPeriod').value != null) this.filled = true;\n      if (formGroup.get('wasteTreatmentMethodID').value != null) this.filled = true;\n      if (formGroup.get('wasteTreated').value != null) this.filled = true;\n      if (formGroup.get('wasteTreatedUnitID').value != null) this.filled = true;\n    }\n    removeValidators(formGroup) {\n      formGroup.get('wasteTypeID').clearValidators();\n      formGroup.get('accountingPeriod').clearValidators();\n      formGroup.get('wasteTreatmentMethodID').clearValidators();\n      formGroup.get('wasteTreated').clearValidators();\n      formGroup.get('wasteTreatedUnitID').clearValidators();\n      this.updateValueAndValidity(formGroup);\n    }\n    addValidators(formGroup) {\n      formGroup.get('wasteTypeID').addValidators([Validators.required]);\n      formGroup.get('accountingPeriod').addValidators([Validators.required]);\n      formGroup.get('wasteTreatmentMethodID').addValidators([Validators.required]);\n      formGroup.get('wasteTreated').addValidators([Validators.required, Validators.min(0)]);\n      formGroup.get('wasteTreatedUnitID').addValidators([Validators.required]);\n      this.updateValueAndValidity(formGroup);\n    }\n    addFormControls() {\n      this.dataSource.forEach((DataSource, index) => {\n        let name = \"\";\n        this.wasteTypeArray.forEach(res => {\n          if (DataSource.name == res.id) {\n            name = res.name;\n          }\n        });\n        this.wasteTreatedDetailsFA.push(this.formBuilder.group({\n          wasteTypeID: [DataSource.name],\n          activityDataID: [],\n          startDate: ['null'],\n          endDate: ['null'],\n          accountingPeriod: [,],\n          wasteTreatmentMethodID: [,],\n          wasteTreated: [, [Validators.min(0)]],\n          wasteTreatedUnitID: [],\n          docID: [],\n          docType: [],\n          docName: [],\n          docPath: [],\n          docSize: [],\n          file: [],\n          rows: []\n        }));\n        this.docFileList = new Array(index).fill(null);\n      });\n    }\n    updateValueAndValidity(formGroup) {\n      formGroup.get('wasteTypeID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('accountingPeriod').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('wasteTreatmentMethodID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('wasteTreated').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('wasteTreatedUnitID').updateValueAndValidity({\n        emitEvent: false\n      });\n    }\n    updateTheForm() {\n      if (this.action === 'update') {\n        this.dataInit = true;\n        const formGroup = this.formBuilder.group({\n          activityDataID: [this.activityData.activityDataID],\n          wasteTypeID: [this.activityData.wasteTypeID],\n          activityID: [this.activityData.activityDataID],\n          startDate: [this.activityData.startDate],\n          endDate: [this.activityData.endDate],\n          accountingPeriod: [{\n            startDate: moment(this.activityData.startDate),\n            endDate: moment(this.activityData.endDate)\n          }],\n          wasteTreatmentMethodID: [this.activityData.wasteTreatedMethodID],\n          wasteTreated: [this.activityData.wasteTreated],\n          wasteTreatedUnitID: [this.activityData.wasteTreatedUnitID],\n          docID: this.activityData.file ? this.activityData.file.id : null,\n          docName: this.activityData.file ? this.activityData.file.name : null,\n          docPath: this.activityData.file ? this.activityData.file.path : null,\n          docType: [],\n          docSize: [],\n          rows: []\n        });\n        this.wasteTreatedDetailsFA.push(formGroup);\n        this.dataSource = [{\n          name: this.activityData.wasteTypeID\n        }];\n        this.getTreatmentMethodsForSelectedWasteType();\n      }\n    }\n    getTreatmentMethodsForSelectedWasteType() {\n      if (!this.haveWT) {\n        return;\n      }\n      this.dataSource.forEach(wasteType => {\n        const treatmentMethods = this.wasteTypeAndTreatmentMethod[wasteType.name - 1].treatmentMethod;\n        const formArray = this.activityDataFG.get('wasteTreatedDetails');\n        if (this.action == 'update') {\n          const formGroup = formArray.at(0);\n          formGroup.get('rows').setValue(treatmentMethods);\n        } else {\n          const formGroup = formArray.at(this.dataSourceLength);\n          this.dataSourceLength++;\n          formGroup.get('rows').setValue(treatmentMethods);\n        }\n      });\n    }\n    getAllWasteTypeAndTreatmentMethod() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          this.wasteTypeAndTreatmentMethod = yield this.wasteGeneratedService.getAllWasteTypes(this.activityID);\n          this.haveWT = true;\n          if (this.dataInit) {\n            this.getTreatmentMethodsForSelectedWasteType();\n          }\n        } catch (error) {\n          console.error('Error fetching waste type and treatment method data:', error);\n        }\n      });\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.massUnit = yield this.unitService.getUnit([`type:${UnitTypeKeyID.MASS}`]);\n      });\n    }\n    getTreatmentMethods(event, index) {\n      var _a;\n      const treatmentMethods = (_a = this.wasteTypeAndTreatmentMethod[event.value - 1]) === null || _a === void 0 ? void 0 : _a.treatmentMethod;\n      const formArray = this.activityDataFG.get('wasteTreatedDetails');\n      const formGroup = formArray.at(index);\n      formGroup.get('rows').setValue(treatmentMethods);\n    }\n    getTreatmentMethods2(index) {\n      this.wasteTreatmentList = [];\n      this.wasteTreatmentList1[index].forEach(res => {\n        this.wasteTreatmentList.push(res);\n      });\n    }\n    get wasteTreatedDetailsFA() {\n      return this.activityDataFG.get('wasteTreatedDetails');\n    }\n    // Add a new waste Type\n    add() {\n      this.name = '';\n      this.wasteTreatedDetailsFA.push(this.onsubmit1({\n        name: '4'\n      }));\n      this.docFileList = new Array(this.docFileList.length + 1).fill(null);\n      this.updateValidators();\n    }\n    onsubmit1(item) {\n      return this.formBuilder.group({\n        wasteTypeID: [item === null || item === void 0 ? void 0 : item.name],\n        activityDataID: [],\n        startDate: ['null'],\n        endDate: ['null'],\n        accountingPeriod: [,],\n        wasteTreatmentMethodID: [,],\n        wasteTreated: [,],\n        wasteTreatedUnitID: [],\n        docID: [],\n        docType: [],\n        docName: [],\n        docPath: [],\n        docSize: [],\n        file: [],\n        rows: []\n      });\n    }\n    onDeleteRow(index) {\n      const wasteDetailArray = this.activityDataFG.get('wasteTreatedDetails');\n      wasteDetailArray.removeAt(index);\n      this.docFileList.splice(index, 1);\n    }\n    // patch  a startDate and Date in formArray\n    formatDate() {\n      this.wasteTreatedDetailsFA.controls.forEach(control => {\n        const accountingPeriodControl = control.get('accountingPeriod');\n        if (accountingPeriodControl) {\n          let date = accountingPeriodControl.value;\n          if (date && date.startDate && date.endDate) {\n            let startDate = moment(date.startDate).format(\"YYYY-MM-DD\");\n            let endDate = moment(date.endDate).format(\"YYYY-MM-DD\");\n            control.get('startDate').patchValue(startDate);\n            control.get('endDate').patchValue(endDate);\n          }\n        }\n      });\n    }\n    // ng on changes calls, here i manage create and update calls\n    getConfiguration(configuration) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.haveWT == false) {\n          yield this.getAllWasteTypeAndTreatmentMethod();\n        }\n        this.conformationValue = configuration;\n        if (this.action == 'update') {\n          this.activityData = configuration.activityData;\n          this.updateTheForm();\n        } else {\n          const wasteTypes = configuration.activityConfigData.wasteTypes.flat();\n          this.dataSource = [];\n          wasteTypes.forEach(res => {\n            this.dataSource.push({\n              name: res\n            });\n          });\n          this.dataSourceLength = 0;\n          this.createForm();\n        }\n      });\n    }\n    getActivityData() {\n      const formArray = this.activityDataFG.get('wasteTreatedDetails');\n      formArray.controls.forEach((control, index) => {\n        if (control.get('wasteTreatmentMethodID').value == null) {\n          this.docFileList.splice(index, 1);\n        }\n      });\n      this.activityDataFG.markAllAsTouched();\n      if (this.activityDataFG.invalid || this.submit == false) {\n        this.toastrService.openToast('Error', 'Fill at least one waste type detail', 'error');\n        return;\n      } else {\n        return {\n          'activityData': this.activityData,\n          'activityDataFile': this.docFileList\n        };\n      }\n    }\n    updateActivityData() {\n      return {\n        'activityData': this.activityData\n      };\n    }\n    isValidForm() {\n      if (this.activityDataFG.invalid) {\n        const fromArray = this.activityDataFG.get('wasteTreatedDetails');\n        fromArray.markAllAsTouched();\n        // this.activityDataFG.markAllAsTouched();\n        return false;\n      }\n      this.activityData = {};\n      const validControls = [];\n      const formArray = this.activityDataFG.get('wasteTreatedDetails');\n      formArray.controls.forEach(control => {\n        if (control.get('wasteTreatmentMethodID').value != null) {\n          control.get('rows').setValue(null);\n          validControls.push(control);\n        }\n      });\n      const newFormArray = new FormArray(validControls);\n      this.activityData = JSON.parse(JSON.stringify(newFormArray.value));\n      return true;\n    }\n    activityDataValidity() {\n      this.activityDataFG.valueChanges.subscribe(() => this.validity.emit(!this.activityDataFG.invalid));\n    }\n    fileUpload(event, formGroup, index) {\n      let file = event.target.files[0];\n      if (file) {\n        if (file.type !== 'application/pdf') {\n          this.toastrService.error(NocFileUploadEnum.INVALID_FILE_TYPE_ERROR);\n          return;\n        }\n        if (file.size > NocFileUploadEnum.MAX_FILE_SIZE) {\n          this.toastrService.error(NocFileUploadEnum.INVAID_FILE_SIZE_ERROR);\n          return;\n        }\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = e => {};\n        this.billFile = file;\n        this.billFileName = file['name'];\n        formGroup.get('docName').patchValue(file['name']);\n        formGroup.get('docSize').patchValue(this.getFileSizeWithUnit(file['size']));\n        this.docFileList[index] = file;\n        if (this.action == 'update') {\n          this.fileCreateUpdate(formGroup);\n        }\n      } else {\n        this.toastrService.error('Please upload a file!');\n        return;\n      }\n    }\n    getFileSizeWithUnit(billFileSize) {\n      const fileSizeInKB = Math.round(billFileSize / 1024);\n      const fileSizeInMB = Math.round(fileSizeInKB / 1024);\n      const fileSizeInGB = Math.round(fileSizeInMB / 1024);\n      if (fileSizeInGB > 1) {\n        return fileSizeInGB + ' GB';\n      } else if (fileSizeInMB > 1) {\n        return fileSizeInMB + ' MB';\n      } else {\n        return fileSizeInKB + ' KB';\n      }\n    }\n    removeFile(formGroup, index) {\n      if (this.action == 'create') {\n        this.fileInputArr[index].nativeElement.value = null;\n      }\n      this.billFile = null;\n      this.billFileName = '';\n      formGroup.get('docName').reset();\n      formGroup.get('docSize').reset();\n      formGroup.get('docPath').reset(null);\n      formGroup.get('docID').reset();\n      this.docFileList[index] = this.billFile;\n    }\n    toFormData() {\n      const formData = new FormData();\n      formData.append('payload', this.billFile);\n      return formData;\n    }\n    fileCreateUpdate(formGroup) {\n      if (formGroup.get('docID').value == null) {\n        this.carbonDocumentController.createDocument(this.currentOrgID, formGroup.get('activityDataID').value, ActivityKeyIDEnum.WASTE_GENERATED_IN_OPERATIONS, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileCreate -\", error);\n        });\n      } else {\n        this.carbonDocumentController.updateDocument(this.currentOrgID, formGroup.get('docID').value, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileUpdate -\", error);\n        });\n      }\n    }\n    updateFileFormControl(formGroup) {\n      formGroup.get('docID').patchValue(this.file.id);\n      formGroup.get('docName').patchValue(this.file.name);\n      formGroup.get('docPath').patchValue(this.file.path);\n    }\n    deleteConfirmation(formGroup, index) {\n      const dialogRef = this.dialog.open(TypeConfirmationDialog, {\n        minWidth: '650px',\n        maxWidth: '600px',\n        data: {\n          icon: 'delete',\n          header: 'Are you sure you want to delete ?',\n          body: '<p class = \"ps-1\"><strong class=\"pe-1\"> Note:</strong>This file will be deleted permanently and you won`t be able to track it`s progress.</p><span class=\"fw-bold ps-1\">Are you sure you want to delete?</span>',\n          confirmationInput: 'DELETE',\n          buttonOne: 'Cancel',\n          buttonTwo: 'Delete'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.deleteDocument(formGroup.get('docID').value, formGroup, index);\n        } else {\n          dialogRef.close();\n        }\n      });\n    }\n    deleteDocument(docID, formGroup, index) {\n      this.carbonDocumentController.deleteDocument(this.currentOrgID, docID).subscribe(res => {\n        this.removeFile(formGroup, index);\n      }, error => {\n        console.log(\"error in deleteDocument -\", error);\n      });\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.CarbonDocumentController), i0.ɵɵdirectiveInject(i4.WasteGeneratedService), i0.ɵɵdirectiveInject(i5.ActivatedRoute), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.UnitService), i0.ɵɵdirectiveInject(i5.Router), i0.ɵɵdirectiveInject(i8.DateService), i0.ɵɵdirectiveInject(i9.StorageService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"adhoc-waste-generated\"]],\n    viewQuery: function CreateUpdateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DaterangepickerDirective, 5);\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pickerDirective = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputs = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t);\n      }\n    },\n    decls: 10,\n    vars: 3,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\"], [3, \"formGroup\"], [\"formArrayName\", \"wasteTreatedDetails\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"ps-3\"], [\"class\", \"btn btn-success\", 3, \"click\", 4, \"ngIf\"], [\"docImg\", \"\"], [3, \"formGroupName\"], [1, \"border\", \"cardOverwrite\", \"mt-3\"], [1, \"row\"], [1, \"col-sm-4\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"wasteTypeID\", 3, \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-sm-4\", \"float-end\"], [4, \"ngIf\"], [1, \"col-sm-8\"], [\"id\", \"daterangeFF\", 1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\"], [\"type\", \"text\", \"matInput\", \"\", \"ngxDaterangepickerMd\", \"\", \"autocomplete\", \"off\", \"name\", \"dateRange\", \"formControlName\", \"accountingPeriod\", \"readonly\", \"\", 3, \"locale\", \"drops\", \"opens\", \"alwaysShowCalendars\", \"keepCalendarOpeningWithRange\", \"showDropdowns\", \"showCancel\", \"ngModelChange\"], [1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\"], [\"formControlName\", \"wasteTreatmentMethodID\"], [\"matTooltip\", \"Waste Treated\", 1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"placeholder\", \"0\", \"formControlName\", \"wasteTreated\", 1, \"formPlaceholder\"], [\"formControlName\", \"wasteTreatedUnitID\"], [3, \"value\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-danger\"], [1, \"d-flex\", \"justify-content-between\"], [1, \"col-sm-8\", \"fileInput\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"row\", \"pt-2\"], [1, \"border\", \"rounded\", \"d-flex\", 3, \"ngClass\"], [1, \"p-1\"], [4, \"ngTemplateOutlet\"], [1, \"centerAlignVertical\", \"p-1\"], [1, \"ms-auto\", \"p-1\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"border\", \"rounded\", \"d-flex\"], [1, \"centerAlignVertical\", \"p-3\"], [\"target\", \"_blank\", 3, \"href\", \"ngClass\"], [1, \"ms-auto\", \"p-1\", \"mt-2\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Edit\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-primary\", \"updateIconHover\", \"fs-5\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 2, \"display\", \"none\", 3, \"change\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Delete\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [3, \"icon\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"mat-raised-button\", \"\", \"matTooltipPosition\", \"below\", 1, \"docIcon\", \"p-1\", 3, \"matTooltip\"], [\"height\", \"40px\", \"src\", \"assets/images/default-doc.ico\", \"alt\", \"bill document preview\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \"Activity Data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementContainerStart(4, 3);\n        i0.ɵɵtemplate(5, CreateUpdateComponent_ng_container_5_Template, 40, 21, \"ng-container\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵtemplate(7, CreateUpdateComponent_button_7_Template, 3, 1, \"button\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, CreateUpdateComponent_ng_template_8_Template, 3, 1, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityDataFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.wasteTreatedDetailsFA.controls);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.action === \"create\");\n      }\n    },\n    directives: [i10.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormArrayName, i11.NgForOf, i11.NgIf, i2.FormGroupName, i12.MatFormField, i12.MatLabel, i13.MatSelect, i2.NgControlStatus, i2.FormControlName, i14.MatInput, i15.DaterangepickerDirective, i2.DefaultValueAccessor, i2.MinValidator, i2.NumberValueAccessor, i16.MatOption, i12.MatError, i11.NgClass, i11.NgTemplateOutlet, i17.FaIconComponent, i12.MatSuffix],\n    styles: [\"table[_ngcontent-%COMP%]{width:100%}.setWidth[_ngcontent-%COMP%]{min-width:120px}\"]\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}