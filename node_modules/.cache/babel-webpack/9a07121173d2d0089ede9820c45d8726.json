{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { isEqual } from 'lodash';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ToastrColor, ToastrTitle } from '@library/toastr-service';\nimport { DialogResponseEnum, InvalidForm, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@library/toastr-service\";\nimport * as i5 from \"@carbon/controller/custom-database.service\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nfunction CreateDatabaseDialog_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Database name is mandatory \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateDatabaseDialog_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Database name already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let CreateDatabaseDialog = /*#__PURE__*/(() => {\n  class CreateDatabaseDialog {\n    constructor(formBuilder, data, dialogRef, storageService, toastrService, customDatabaseController) {\n      this.formBuilder = formBuilder;\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.toastrService = toastrService;\n      this.customDatabaseController = customDatabaseController;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.isUpdate = false;\n      this.isEqual = false;\n      this.dialogRef.disableClose = true;\n      this.currentOrgID = storageService.getStorage(['currentOrgID']);\n    }\n    ngOnInit() {\n      this.formGroupInit();\n      this.customFactorTypeStdID = this.data['customFactorTypeStdID'];\n      if (this.data['isUpdate']) {\n        this.isUpdate = true;\n        this.databaseID = this.data['databaseID'];\n        this.getDatabaseByID();\n      } else {\n        this.databaseFG.patchValue({\n          customFactorTypeStdID: this.customFactorTypeStdID\n        });\n      }\n    }\n    formGroupInit() {\n      this.databaseFG = this.formBuilder.group({\n        name: [, Validators.required],\n        customFactorTypeStdID: [this.customFactorTypeStdID, Validators.required]\n      });\n    }\n    get name() {\n      return this.databaseFG.get('name');\n    }\n    getDatabaseByID() {\n      this.customDatabaseController.getDatabaseByID(this.currentOrgID, this.databaseID).subscribe(databaseRes => {\n        this.patchDatabaseFG(databaseRes);\n      }, error => {\n        console.log('error in getDatabaseByID() -', error);\n        this.toastrService.openToast(`${error.error['title']}`, `${error.error['message']}`, `${error.error['result']}`);\n      });\n    }\n    patchDatabaseFG(database) {\n      this.databaseFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.databaseFG.value));\n      this.databaseFG.patchValue({\n        name: database['name'],\n        customFactorTypeStdID: database['customFactorTypeStdID']\n      });\n      this.isEqual = true;\n      this.initialObject = this.databaseFG.value;\n    }\n    isValidForm() {\n      if (this.databaseFG.invalid) {\n        console.log('invalid form -', this.databaseFG);\n        this.toastrService.openToast(ToastrTitle.ERROR, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      if (this.isUpdate) {\n        this.updateDatabase();\n      } else {\n        this.createDatabase();\n      }\n    }\n    createDatabase() {\n      this.customDatabaseController.createDatabase(this.currentOrgID, this.databaseFG.value).subscribe(createRes => {\n        if ((createRes === null || createRes === void 0 ? void 0 : createRes['response']) && createRes['response']['nameAlreadyExists'] == 'YES') {\n          this.name.setErrors({\n            'nameAlreadyExists': true\n          });\n          this.toastrService.openToast(`${createRes['title']}`, `${createRes['message']}`, `${createRes['result']}`);\n          return;\n        }\n        this.dialogRef.close(DialogResponseEnum.SUCCESS);\n      }, error => {\n        console.log('error in createDatabase() - ', error);\n        this.toastrService.openToast(`${error.error['title']}`, `${error.error['message']}`, `${error.error['result']}`);\n      });\n    }\n    updateDatabase() {\n      this.customDatabaseController.updateDatabase(this.currentOrgID, this.databaseFG.value, this.databaseID).subscribe(updateRes => {\n        if ((updateRes === null || updateRes === void 0 ? void 0 : updateRes['response']) && updateRes['response']['nameAlreadyExists'] == 'YES') {\n          this.name.setErrors({\n            nameAlreadyExists: true\n          });\n          this.toastrService.openToast(`${updateRes['title']}`, `${updateRes['message']}`, `${updateRes['result']}`);\n          return;\n        }\n        this.dialogRef.close(DialogResponseEnum.SUCCESS);\n      }, error => {\n        console.log('error in updateDatabase() - ', error);\n        this.toastrService.openToast(`${error.error['title']}`, `${error.error['message']}`, `${error.error['result']}`);\n      });\n    }\n  }\n  CreateDatabaseDialog.ɵfac = function CreateDatabaseDialog_Factory(t) {\n    return new (t || CreateDatabaseDialog)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.CustomDatabaseController));\n  };\n  CreateDatabaseDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateDatabaseDialog,\n    selectors: [[\"app-create-database\"]],\n    decls: 18,\n    vars: 7,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogHeader\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\", \"submit\"], [1, \"row\"], [1, \"col-sm-12\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"type\", \"text\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"align\", \"end\"], [\"type\", \"button\", \"mat-dialog-close\", \"\", 1, \"button\", \"btn\", \"btn-secondary\", \"me-2\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"disabled\"]],\n    template: function CreateDatabaseDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"form\", 3);\n        i0.ɵɵlistener(\"submit\", function CreateDatabaseDialog_Template_form_submit_4_listener() {\n          return ctx.isValidForm();\n        });\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(8, \"mat-label\", 7);\n        i0.ɵɵtext(9, \" Database name \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵtemplate(11, CreateDatabaseDialog_mat_error_11_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵtemplate(12, CreateDatabaseDialog_mat_error_12_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵelementStart(14, \"button\", 11);\n        i0.ɵɵtext(15, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 12);\n        i0.ɵɵtext(17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isUpdate ? \"Update\" : \"New\", \" database \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.databaseFG);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.databaseFG.get(\"name\").hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.databaseFG.get(\"name\").hasError(\"nameAlreadyExists\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.isEqual);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isUpdate ? \"Update\" : \"Create\", \" \");\n      }\n    },\n    directives: [i2.MatDialogTitle, i2.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i6.MatFormField, i6.MatLabel, i7.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i8.NgIf, i2.MatDialogClose, i6.MatError],\n    encapsulation: 2\n  });\n  return CreateDatabaseDialog;\n})();\nexport let CreateDatabaseModule = /*#__PURE__*/(() => {\n  class CreateDatabaseModule {}\n  CreateDatabaseModule.ɵfac = function CreateDatabaseModule_Factory(t) {\n    return new (t || CreateDatabaseModule)();\n  };\n  CreateDatabaseModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: CreateDatabaseModule\n  });\n  CreateDatabaseModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, MatInputModule, MatDialogModule, MatFormFieldModule]]\n  });\n  return CreateDatabaseModule;\n})();","map":null,"metadata":{},"sourceType":"module"}