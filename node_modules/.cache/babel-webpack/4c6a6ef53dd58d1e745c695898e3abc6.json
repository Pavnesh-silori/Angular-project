{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as echarts from 'echarts/core';\nimport { HeatmapChart } from 'echarts/charts';\nimport { TitleComponent, TooltipComponent, VisualMapComponent } from 'echarts/components';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { TABLE_CONSTANT } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/employee-survey.controller\";\nimport * as i2 from \"@library/storage-service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-echarts\";\nfunction SurveySummaryComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.TABLE_CONSTANT.TABLE_NO_DATA, \" \");\n  }\n}\nfunction SurveySummaryComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"options\", ctx_r1.option);\n  }\n}\necharts.use([TitleComponent, TooltipComponent, VisualMapComponent, HeatmapChart, CanvasRenderer]);\n// /tsc-library/\nexport let SurveySummaryComponent = /*#__PURE__*/(() => {\n  class SurveySummaryComponent {\n    constructor(employeeSurveyController, storageService) {\n      this.employeeSurveyController = employeeSurveyController;\n      this.storageService = storageService;\n      this.data = [[0, 0, 0]];\n      this.graphData = [];\n      this.TABLE_CONSTANT = TABLE_CONSTANT;\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage(['currentOrgID']);\n      this.getSurveySummary();\n    }\n    getSurveySummary() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.employeeSurveyController.getSurveySummary(this.currentOrgID, this.surveyID).subscribe(response => {\n          this.graphData = response['graphData'].map(item => {\n            return [item.rangeID, item.modeOfTransportID, item.employeeCount];\n          });\n          this.distanceRange = response['distanceRanges'].map(range => {\n            const min = range.minRange;\n            const max = range.maxRange !== null ? range.maxRange : '<';\n            return `${min}-${max}`;\n          });\n          this.modeOfTransport = response['modeOfTransport'].map(transport => {\n            return transport.modeOfTransportName;\n          });\n          this.createEchart(this.graphData, this.distanceRange, this.modeOfTransport);\n        });\n      });\n    }\n    createEchart(data, distance, vehicle) {\n      data = data.map(function (item) {\n        return [item[0], item[1], item[2] || '-'];\n      });\n      this.option = {\n        tooltip: {\n          position: 'top'\n        },\n        grid: {\n          height: '75%',\n          top: '9%',\n          width: '65%'\n        },\n        yAxis: {\n          data: vehicle\n        },\n        xAxis: {\n          data: distance,\n          name: 'km',\n          splitArea: {\n            show: true\n          },\n          position: 'top'\n        },\n        graphic: [{\n          type: 'text',\n          top: 20,\n          right: '5%',\n          style: {\n            text: 'employee count',\n            fill: '#333',\n            fontSize: 14,\n            fontWeight: 'bold'\n          }\n        }],\n        visualMap: {\n          type: 'piecewise',\n          min: 0,\n          max: 200,\n          calculable: true,\n          orient: 'vertical',\n          top: 40,\n          right: '5%',\n          pieces: [{\n            min: 0,\n            max: 50,\n            color: '#47BF65 '\n          }, {\n            min: 50,\n            max: 80,\n            color: '#3EAB5A'\n          }, {\n            min: 80,\n            max: 100,\n            color: '#328C49'\n          }, {\n            min: 100,\n            max: 130,\n            color: '#0C5A09'\n          }, {\n            min: 130,\n            max: 150,\n            color: '#E9EC21'\n          }, {\n            min: 150,\n            max: Infinity,\n            color: '#C70039'\n          }],\n          textStyle: {\n            color: '#333'\n          }\n        },\n        series: [{\n          name: '      ',\n          type: 'heatmap',\n          text: data,\n          data: data,\n          label: {\n            show: true\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      };\n    }\n  }\n  SurveySummaryComponent.ɵfac = function SurveySummaryComponent_Factory(t) {\n    return new (t || SurveySummaryComponent)(i0.ɵɵdirectiveInject(i1.EmployeeSurveyController), i0.ɵɵdirectiveInject(i2.StorageService));\n  };\n  SurveySummaryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SurveySummaryComponent,\n    selectors: [[\"app-survey-summary\"]],\n    inputs: {\n      surveyID: \"surveyID\",\n      graphHeader: \"graphHeader\"\n    },\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"card\", \"cardOverwrite\", \"height\"], [1, \"pageTitle\", \"pt-3\", \"ps-4\"], [\"class\", \"noData\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"noData\"], [\"echarts\", \"\", 1, \"echarts\", 3, \"options\"]],\n    template: function SurveySummaryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, SurveySummaryComponent_div_3_Template, 2, 1, \"div\", 2);\n        i0.ɵɵtemplate(4, SurveySummaryComponent_ng_container_4_Template, 2, 1, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.graphHeader, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.graphData || ctx.graphData.length == 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.graphData && ctx.graphData.length > 0);\n      }\n    },\n    directives: [i3.NgIf, i4.NgxEchartsDirective],\n    styles: [\".height[_ngcontent-%COMP%]{height:400px}.noData[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:100%;width:100%;font-size:200%;color:#9f9f9f;font-family:\\\"Franklin Gothic Medium\\\",\\\"Arial Narrow\\\",Arial,sans-serif}\"]\n  });\n  return SurveySummaryComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}