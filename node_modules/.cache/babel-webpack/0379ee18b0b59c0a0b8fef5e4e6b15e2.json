{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\n//tsc-library\nimport { ToastrTitle, ToastrColor } from '@library/toastr-service';\nimport { MaterialFormFieldAppearance, InvalidForm, ButtonLabelEnum, FormAction, DialogEnum, MATERIAL_CONSTANT, ButtonTooltipEnum } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@library/toastr-service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@netzero/controller/fuel.controller\";\nimport * as i5 from \"@library/unit-service\";\nimport * as i6 from \"@library/tsc-common\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/checkbox\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"@angular/material/dialog\";\nconst _c0 = [\"header\"];\nconst _c1 = [\"footer\"];\nconst _c2 = [\"body\"];\nfunction CreateUpdateComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Fuel code is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Fuel name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Description is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Biomass is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Biomass can't be negative \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Fuel oxidation factor is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Fuel oxidation factor can't be negative \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Fuel oxidation factor can't be greater than 1 \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Net calorific value is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Net calorific value can't be negative \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_option_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r16.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r16.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" NCV numerator is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_option_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r17.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r17.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" NCV denominator is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c3 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\n// /tsc-library/\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(storageService, toastrService, formBuilder, fuelController, unitService, tSCCommonService) {\n      this.storageService = storageService;\n      this.toastrService = toastrService;\n      this.formBuilder = formBuilder;\n      this.fuelController = fuelController;\n      this.unitService = unitService;\n      this.tSCCommonService = tSCCommonService;\n      this.formStatus = new EventEmitter();\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      this.ButtonTooltipEnum = ButtonTooltipEnum;\n      this.FormAction = FormAction;\n      this.isEqual = true;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.maxLength = 500;\n      this.charactersRemainingFn = fg => {\n        let description = fg.get('description').value;\n        if (description) return this.maxLength - description.length;else return this.maxLength;\n      };\n      this.errorHandling = (control, error) => {\n        return this.fuelFG.get(control).hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.fuelFGInit();\n      this.getUnit();\n      if (this.action == FormAction.CREATE) {\n        this.title = ButtonLabelEnum.CREATE_BTN_LABEL;\n      } else if (this.action == FormAction.UPDATE) {\n        this.title = ButtonLabelEnum.UPDATE_BTN_LABEL;\n        this.getFuelByID();\n      } else {\n        this.toastrService.openToast(ToastrTitle.ERROR, 'Unrecognized action!', ToastrColor.ERROR);\n      }\n    }\n    fuelFGInit() {\n      this.fuelFG = this.formBuilder.group({\n        name: [, Validators.required],\n        description: [],\n        code: [, Validators.required],\n        netCalorificValue: [, Validators.required],\n        ncvNumeratorUnitID: [, Validators.required],\n        ncvDenominatorUnitID: [, Validators.required],\n        biomassPct: [, Validators.required],\n        oxidationFactor: [, Validators.required],\n        isWasteGasStream: [true]\n      });\n    }\n    createUpdateFuel() {\n      if (this.action == FormAction.CREATE) {\n        this.createFuel();\n      } else {\n        this.updateFuel();\n      }\n    }\n    // createfuel\n    createFuel() {\n      console.log(this.fuelFG.value.isWasteGasStream);\n      if (this.fuelFG.invalid) {\n        this.fuelFG.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.fuelController.createFuel(this.currentOrgID, this.fuelFG.value).subscribe(createRes => {\n        let toast;\n        toast = this.toastrService.getToastStatus(createRes.status);\n        this.formStatus.emit(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in createFuel -', error);\n      });\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          this.ncvNumeratorUnit = yield this.unitService.getUnitUsingPublicUrl([`type:${UnitTypeKeyID.ENERGY}`]);\n          this.ncvDenomenatorUnit = yield this.unitService.getUnitUsingPublicUrl([`type:${UnitTypeKeyID.VOLUME}`]);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    }\n    // update fuel\n    updateFuel() {\n      if (this.fuelFG.invalid) {\n        this.fuelFG.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.fuelController.updateFuel(this.currentOrgID, this.fuelID, this.fuelFG.value).subscribe(updateRes => {\n        let toast;\n        toast = this.toastrService.getToastStatus(updateRes.status);\n        this.formStatus.emit(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in updateEmployee -', error);\n      });\n    }\n    getFuelByID() {\n      this.fuelController.getFuelByID(this.currentOrgID, this.fuelID).subscribe(response => {\n        if (response) {\n          this.response = response;\n          console.log(response);\n          this.patchFuelDetails();\n        }\n      }, error => {\n        console.log('error in getEmployeeByID() -', error);\n      });\n    }\n    patchFuelDetails() {\n      this.fuelFG.patchValue({\n        name: this.response['name'],\n        description: this.response['description'],\n        code: this.response['code'],\n        netCalorificValue: this.response['netCalorificValue'],\n        ncvNumeratorUnitID: this.response['ncvNumeratorUnitID'],\n        ncvDenominatorUnitID: this.response['ncvDenominatorUnitID'],\n        biomassPct: this.response['biomassPct'],\n        oxidationFactor: this.response['oxidationFactor'],\n        isWasteGasStream: this.response['isWasteGasStream']\n      });\n      this.initialObject = this.fuelFG.value;\n      this.fuelFG.valueChanges.subscribe(() => {\n        this.isEqual = isEqual(this.initialObject, this.fuelFG.value);\n      });\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.ToastrService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.FuelController), i0.ɵɵdirectiveInject(i5.UnitService), i0.ɵɵdirectiveInject(i6.TSCCommonService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"fuel-create-update\"]],\n    viewQuery: function CreateUpdateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.header = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.body = _t.first);\n      }\n    },\n    inputs: {\n      action: \"action\",\n      fuelID: \"fuelID\"\n    },\n    outputs: {\n      formStatus: \"formStatus\"\n    },\n    decls: 70,\n    vars: 34,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\", \"h100\"], [1, \"pt-2\", \"me-2\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-sm-6\", \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"placeholder\", \"\", \"formControlName\", \"code\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"text\", \"min\", \"0\", \"placeholder\", \"Diesel, Petrol, etc. \", \"formControlName\", \"name\", 1, \"formPlaceholder\"], [1, \"col-sm-12\", \"matFieldWidth100\", 3, \"appearance\"], [\"matInput\", \"\", \"matTextareaAutosize\", \"\", \"matAutosizeMinRows\", \"2\", \"matAutosizeMaxRows\", \"10\", \"formControlName\", \"description\", 3, \"maxlength\"], [\"matInput\", \"\", \"min\", \"0\", \"max\", \"100\", \"type\", \"number\", \"placeholder\", \"\", \"formControlName\", \"biomassPct\", 1, \"formPlaceholder\"], [\"matSuffix\", \"\", 1, \"matSuffix\", \"ms-2\", \"pb-5\"], [\"matInput\", \"\", \"min\", \"0\", \"max\", \"1\", \"type\", \"number\", \"placeholder\", \"0.02\", \"formControlName\", \"oxidationFactor\", 1, \"formPlaceholder\"], [1, \"col-sm-4\", \"matFieldWidth100\", 3, \"appearance\"], [\"matInput\", \"\", \"min\", \"0\", \"type\", \"number\", \"matInput\", \"\", \"placeholder\", \"\", \"type\", \"number\", \"formControlName\", \"netCalorificValue\", 1, \"formPlaceholder\"], [\"formControlName\", \"ncvNumeratorUnitID\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"ncvDenominatorUnitID\"], [\"formControlName\", \"isWasteGasStream\", 1, \"col-sm-12\", \"mt-1\"], [\"type\", \"submit\", 1, \"d-none\"], [\"formSubmitBtn\", \"\"], [1, \"tscDialogFooter\"], [\"footer\", \"\"], [\"matRipple\", \"\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"btn-sm\", \"btn-success\", 3, \"ngClass\", \"matRippleCentered\", \"click\"], [\"mat-dialog-close\", \"\", \"matRipple\", \"\", 1, \"btn\", \"btn-sm\", \"btn-secondary\", \"me-2\", 3, \"matRippleCentered\"], [3, \"value\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"form\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(5, \"mat-label\", 5);\n        i0.ɵɵtext(6, \"Fuel Code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 6);\n        i0.ɵɵtemplate(8, CreateUpdateComponent_mat_error_8_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(10, \"mat-label\", 5);\n        i0.ɵɵtext(11, \"Fuel Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 8);\n        i0.ɵɵtemplate(13, CreateUpdateComponent_mat_error_13_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 3);\n        i0.ɵɵelementStart(15, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(16, \"mat-label\", 5);\n        i0.ɵɵtext(17, \" Write a description \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"textarea\", 10);\n        i0.ɵɵelementStart(19, \"mat-hint\");\n        i0.ɵɵtext(20, \"Total number of character remaining: \");\n        i0.ɵɵelementStart(21, \"span\");\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, CreateUpdateComponent_mat_error_24_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 3);\n        i0.ɵɵelementStart(26, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(27, \"mat-label\", 5);\n        i0.ɵɵtext(28, \"Biomass Used\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"input\", 11);\n        i0.ɵɵelementStart(30, \"span\", 12);\n        i0.ɵɵtext(31, \"%\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(32, CreateUpdateComponent_mat_error_32_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵtemplate(33, CreateUpdateComponent_mat_error_33_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(35, \"mat-label\", 5);\n        i0.ɵɵtext(36, \"Oxidation factor \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(37, \"input\", 13);\n        i0.ɵɵtemplate(38, CreateUpdateComponent_mat_error_38_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵtemplate(39, CreateUpdateComponent_mat_error_39_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵtemplate(40, CreateUpdateComponent_mat_error_40_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"div\", 3);\n        i0.ɵɵelementStart(42, \"mat-form-field\", 14);\n        i0.ɵɵelementStart(43, \"mat-label\", 5);\n        i0.ɵɵtext(44, \"Net calorific value(NCV)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(45, \"input\", 15);\n        i0.ɵɵtemplate(46, CreateUpdateComponent_mat_error_46_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵtemplate(47, CreateUpdateComponent_mat_error_47_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"mat-form-field\", 14);\n        i0.ɵɵelementStart(49, \"mat-label\", 5);\n        i0.ɵɵtext(50, \"Select NCV Numerator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"mat-select\", 16);\n        i0.ɵɵtemplate(52, CreateUpdateComponent_mat_option_52_Template, 2, 2, \"mat-option\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(53, CreateUpdateComponent_mat_error_53_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"mat-form-field\", 14);\n        i0.ɵɵelementStart(55, \"mat-label\", 5);\n        i0.ɵɵtext(56, \"Select NCV Denominator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"mat-select\", 18);\n        i0.ɵɵtemplate(58, CreateUpdateComponent_mat_option_58_Template, 2, 2, \"mat-option\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(59, CreateUpdateComponent_mat_error_59_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"mat-checkbox\", 19);\n        i0.ɵɵtext(61, \" Mark this fuel as waste gas stream \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(62, \"button\", 20, 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(64, \"div\", 22, 23);\n        i0.ɵɵelementStart(66, \"button\", 24);\n        i0.ɵɵlistener(\"click\", function CreateUpdateComponent_Template_button_click_66_listener() {\n          return ctx.createUpdateFuel();\n        });\n        i0.ɵɵtext(67);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"button\", 25);\n        i0.ɵɵtext(69, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.fuelFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"code\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"name\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"maxlength\", ctx.maxLength);\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassMap(ctx.charactersRemainingFn(ctx.fuelFG) < 20 ? \"text-danger\" : \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.charactersRemainingFn(ctx.fuelFG));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" /\", ctx.maxLength, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"description\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"biomassPct\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"biomassPct\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"oxidationFactor\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"oxidationFactor\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"oxidationFactor\", \"max\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"netCalorificValue\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"netCalorificValue\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.ncvNumeratorUnit);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"ncvNumeratorUnitID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.ncvDenomenatorUnit);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"ncvDenominatorUnitID\", \"required\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(32, _c3, ctx.isEqual && ctx.action == ctx.FormAction.UPDATE))(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.tSCCommonService.getButtonLabel(ctx.action), \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i7.MatFormField, i7.MatLabel, i8.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i9.NgIf, i8.MatTextareaAutosize, i3.MaxLengthValidator, i7.MatHint, i3.MinValidator, i3.MaxValidator, i3.NumberValueAccessor, i7.MatSuffix, i10.MatSelect, i9.NgForOf, i11.MatCheckbox, i12.MatRipple, i9.NgClass, i13.MatDialogClose, i7.MatError, i12.MatOption],\n    styles: [\"\"]\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}