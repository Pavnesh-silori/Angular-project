{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\nimport { ACTIVITY_FORM_TYPE_KEYID_ENUM } from '@carbon/enum/activity-form-enum';\n// tsc-common\nimport { MATERIAL_CONSTANT, ButtonTooltipEnum } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@carbon/service/activity-config.service\";\nimport * as i3 from \"@carbon/service/activity.service\";\nimport * as i4 from \"@library/storage-service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/tooltip\";\nimport * as i8 from \"./_template/config-view/config-view.component\";\nimport * as i9 from \"./_template/workflow-view/workflow-view.component\";\nimport * as i10 from \"./_template/scheduler-view/scheduler-view.component\";\nimport * as i11 from \"./_template/api-view/api-view.component\";\nconst _c0 = function (a0, a1) {\n  return {\n    \"cbamBadge\": a0,\n    \"ghgBadge\": a1\n  };\n};\nfunction ActivityConfigViewComponent_ng_container_1_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelementStart(1, \"span\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formType_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, formType_r3.keyID.includes(ctx_r2.ACTIVITY_FORM_TYPE_KEYID_ENUM.CBAM_FORM), formType_r3.keyID.includes(ctx_r2.ACTIVITY_FORM_TYPE_KEYID_ENUM.GHG_FORM)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", formType_r3.name, \" \");\n  }\n}\nfunction ActivityConfigViewComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵtext(4);\n    i0.ɵɵtemplate(5, ActivityConfigViewComponent_ng_container_1_span_5_Template, 3, 5, \"span\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 8);\n    i0.ɵɵelementStart(9, \"div\", 9);\n    i0.ɵɵelementStart(10, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function ActivityConfigViewComponent_ng_container_1_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.getConfigByID(ctx_r4.currentOrgID, ctx_r4.activityKeyID, ctx_r4.activityConfigID);\n    });\n    i0.ɵɵelementStart(11, \"span\", 11);\n    i0.ɵɵtext(12, \" refresh \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function ActivityConfigViewComponent_ng_container_1_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateActivityConfig(ctx_r6.activityConfig);\n    });\n    i0.ɵɵelementStart(14, \"span\", 11);\n    i0.ɵɵtext(15, \" edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.activity.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.activity.types);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.activity.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"matRippleCentered\", ctx_r0.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER)(\"matTooltip\", ctx_r0.ButtonTooltipEnum.REFRESH);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"matRippleCentered\", ctx_r0.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER)(\"matTooltip\", ctx_r0.ButtonTooltipEnum.UPDATE);\n  }\n}\nfunction ActivityConfigViewComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"app-config-view\", 14);\n    i0.ɵɵelementStart(2, \"div\", 15);\n    i0.ɵɵelementStart(3, \"router-outlet\", 16);\n    i0.ɵɵlistener(\"activate\", function ActivityConfigViewComponent_ng_container_3_Template_router_outlet_activate_3_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.activityConfigCompInit($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 15);\n    i0.ɵɵelement(5, \"app-workflow-view\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 15);\n    i0.ɵɵelement(7, \"app-scheduler-view\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 15);\n    i0.ɵɵelement(9, \"app-api-view\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"configInp\", ctx_r1.config);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"activityConfigWorkflowInp\", ctx_r1.activityConfigWorkflow);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"activityConfigSchedulerInp\", ctx_r1.activityConfigScheduler);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"activityConfigApiInp\", ctx_r1.activityConfigApi);\n  }\n}\n// /tsc-common/\nexport let ActivityConfigViewComponent = /*#__PURE__*/(() => {\n  class ActivityConfigViewComponent {\n    constructor(activatedRoute, router, activityConfigService, activityService, storageService) {\n      this.router = router;\n      this.activityConfigService = activityConfigService;\n      this.activityService = activityService;\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      this.ButtonTooltipEnum = ButtonTooltipEnum;\n      this.ACTIVITY_FORM_TYPE_KEYID_ENUM = ACTIVITY_FORM_TYPE_KEYID_ENUM;\n      this.getConfigByID = (orgID, activityKeyID, activityConfigID) => {\n        this.activityConfigService.getActivityConfigByID(orgID, activityKeyID, activityConfigID).then(data => {\n          this.activityConfig = data;\n          this.config = this.activityConfig.activityConfig;\n          this.activityConfigWorkflow = this.activityConfig.workflow;\n          this.activityConfigScheduler = this.activityConfig.schedular;\n          this.activityConfigApi = this.activityConfig.activityConfigApi;\n        }).catch(error => {\n          console.log('error in getConfigurationByID() -', error);\n        });\n      };\n      this.updateActivityConfig = row => {\n        this.router.navigate(['/carbon-setting/activity-config', row.activityConfig.activityConfigID, 'activity', row.activityConfig.activityKeyID, {\n          outlets: {\n            activityConfig: ['update']\n          }\n        }], {\n          queryParams: {\n            activityID: row.activityConfig.activityID,\n            origin: ActivityConfigEnum.PFF,\n            action: 'update',\n            tabView: 'YES'\n          }\n        });\n      };\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n      activatedRoute.params.subscribe(param => {\n        this.activityConfigID = param['activityConfigID'];\n      });\n      activatedRoute.queryParams.subscribe(queryParam => {\n        this.activityKeyID = queryParam['activityKeyID'];\n      });\n    }\n    ngOnInit() {\n      this.getAllActivitiesAndFindActivityByKeyID(this.activityKeyID);\n      this.getConfigByID(this.currentOrgID, this.activityKeyID, this.activityConfigID);\n    }\n    ngAfterContentChecked() {\n      if (this.activityConfigComp && this.activityConfig) {\n        this.activityConfigComp.activityConfig = this.activityConfig;\n      }\n    }\n    getAllActivitiesAndFindActivityByKeyID(activityKeyID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.allActivity = yield this.activityService.getAllActivityNew();\n        this.activity = this.activityService.getActivityByKeyIDFromActivityList(activityKeyID, this.allActivity);\n      });\n    }\n    activityConfigCompInit(component) {\n      this.activityConfigComp = component;\n    }\n  }\n  ActivityConfigViewComponent.ɵfac = function ActivityConfigViewComponent_Factory(t) {\n    return new (t || ActivityConfigViewComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ActivityConfigService), i0.ɵɵdirectiveInject(i3.ActivityService), i0.ɵɵdirectiveInject(i4.StorageService));\n  };\n  ActivityConfigViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActivityConfigViewComponent,\n    selectors: [[\"app-activity-config-view\"]],\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"card\", \"cardOverwrite\", \"h100\"], [4, \"ngIf\"], [1, \"card-body\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [4, \"ngFor\", \"ngForOf\"], [1, \"pageSubtitle\"], [1, \"headerRightContainer\"], [1, \"headerRightContainerInner\"], [\"matRipple\", \"\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"btn-sm\", \"btn-light\", \"centerAlign\", \"me-3\", \"py-1\", \"headerIconBtn\", \"refreshBtn\", 3, \"matRippleCentered\", \"matTooltip\", \"click\"], [1, \"material-symbols-outlined\"], [\"matRipple\", \"\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"btn-sm\", \"btn-light\", \"centerAlign\", \"me-3\", \"py-1\", \"headerIconBtn\", \"updateBtn\", 3, \"matRippleCentered\", \"matTooltip\", \"click\"], [1, \"badge\", \"rounded-pill\", \"ms-2\", \"activityFormTypeLabel\", 3, \"ngClass\"], [3, \"configInp\"], [1, \"mt-3\"], [\"name\", \"activityConfig\", 3, \"activate\"], [3, \"activityConfigWorkflowInp\"], [3, \"activityConfigSchedulerInp\"], [3, \"activityConfigApiInp\"]],\n    template: function ActivityConfigViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ActivityConfigViewComponent_ng_container_1_Template, 16, 7, \"ng-container\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, ActivityConfigViewComponent_ng_container_3_Template, 10, 4, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.allActivity);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.activityConfig);\n      }\n    },\n    directives: [i5.NgIf, i5.NgForOf, i6.MatRipple, i7.MatTooltip, i5.NgClass, i8.ConfigViewComponent, i1.RouterOutlet, i9.WorkflowViewComponent, i10.SchedulerViewComponent, i11.ApiViewComponent],\n    styles: [\"\"]\n  });\n  return ActivityConfigViewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}