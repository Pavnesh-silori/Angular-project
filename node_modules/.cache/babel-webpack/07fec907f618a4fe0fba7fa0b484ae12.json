{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ActivityDataController = /*#__PURE__*/(() => {\n  class ActivityDataController {\n    constructor(http) {\n      this.http = http;\n    }\n    getActivityDataByPage(pageNo, pazeSize, sortBy, orderBy, orgID, activityKeyID, filterArr, startDate, endDate, dateFlag = false) {\n      let params = new HttpParams();\n      params = params.append('pageNo', (pageNo + 1).toString()); // Convert to string\n      params = params.append('pageSize', pazeSize.toString()); // Convert to string\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('dateFlag', dateFlag);\n      if (startDate != null) {\n        params = params.append('startDate', startDate);\n        params = params.append('endDate', endDate);\n      }\n      filterArr.forEach(filter => params = params.append('filter', filter));\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/activity/${activityKeyID}/data/page`, {\n        params: params\n      });\n    }\n    getActivityDataPageNew(pageNo, pazeSize, sortBy, orderBy, orgID, activityKeyID, searchFlag, searchValue, filterArr, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      if (startDate != null) {\n        params = params.append('startDate', startDate);\n        params = params.append('endDate', endDate);\n      }\n      filterArr.forEach(filter => params = params.append('filter', filter));\n      if (searchFlag) {\n        params = params.append('search', searchValue);\n      }\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/activity/${activityKeyID}/data/page`, {\n        params: params\n      });\n    }\n    updateActivityData(orgID, activityKeyID, activityDataID, activityData, action) {\n      let params = new HttpParams();\n      params = params.append('action', action);\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/activity/${activityKeyID}/activity-data/${activityDataID}`, activityData, {\n        params: params\n      });\n    }\n    getRenewableValue(orgID, renewableData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/renewable`, renewableData);\n    }\n    getScope3ActivityDataByID(currentOrgID, activityDataID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/scope3/record/${activityDataID}`);\n    }\n    getEmissionDataForEmployeeComm(currentOrgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/employee-commuting/emission/${cedID}/survey-detail`);\n    }\n    getEmissionDataByActivityDataID(currentOrgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/calculated-emission/${cedID}/data`);\n    }\n    //Employee Commuting record details page\n    getEmissionDataByActivityDataIDForEmployee(currentOrgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/employee-commuting/emission/${cedID}/emission-data`);\n    }\n    getCalculatedEmissionDataByCEDID(currentOrgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/emission-data/${cedID}/factor-details`);\n    }\n    getEmissionFactorForModeOfTransport(currentOrgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/employee-commuting/emission/${cedID}/factor-detail`);\n    }\n    getActivityDataByID(currentOrgID, activityKeyID, activityDataID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/${activityKeyID}/activity-data/${activityDataID}`);\n    }\n    getFugitiveRefrigerationActivityDataByCedID(currentOrgID, activityKeyID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/${activityKeyID}/activity-data/${cedID}`);\n    }\n    getFactorDetailsByFormDataID(currentOrgID, activityDataID, activityKeyID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/${activityKeyID}/factor-details/${activityDataID}`);\n    }\n    getActivityDataWithActivityDataConfigByID(currentOrgID, activityKeyID, activityDataID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/${activityKeyID}/activity-data/${activityDataID}`);\n    }\n    getSalesRecord(orgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/emission/${cedID}/equipment-group-capacity-details`);\n    }\n    getScreeningActivity(orgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/emission/${cedID}/equipment-groups`);\n    }\n    getWasateGeneratedDetails(orgID, keyID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/activity/waste-generated-in-operations/activity-data/${keyID}`);\n    }\n    getFugitiveRecordData(orgID, cedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/activity/refrigeration-ac-and-fire-suppression/activity-data/${cedID}`);\n    }\n  }\n  ActivityDataController.ɵfac = function ActivityDataController_Factory(t) {\n    return new (t || ActivityDataController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ActivityDataController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ActivityDataController,\n    factory: ActivityDataController.ɵfac,\n    providedIn: 'root'\n  });\n  return ActivityDataController;\n})();","map":null,"metadata":{},"sourceType":"module"}