{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n//tsc-library\nimport { ToastrColor, ToastrTitle } from '@library/toastr-service';\nimport { ButtonTooltipEnum, DialogEnum, FormErrorEnum, InvalidForm, MATERIAL_CONSTANT, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@carbon/controller/cbam-run.controller\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@library/storage-service\";\nimport * as i5 from \"@library/toastr-service\";\nimport * as i6 from \"@library/tsc-common\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/tooltip\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/chips\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/icon\";\nfunction SendEmailComponent_mat_chip_17_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 22);\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SendEmailComponent_mat_chip_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 20);\n    i0.ɵɵlistener(\"removed\", function SendEmailComponent_mat_chip_17_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const email_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.removeEmail(email_r3);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, SendEmailComponent_mat_chip_17_button_2_Template, 3, 0, \"button\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const email_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"removable\", ctx_r1.removable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", email_r3, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.removable);\n  }\n}\nfunction SendEmailComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.formErrorEnum.REQUIRED, \" \");\n  }\n}\n// /tsc-library/\nexport let SendEmailComponent = /*#__PURE__*/(() => {\n  class SendEmailComponent {\n    constructor(formBuilder, cbamRunController, data, dialogRef, storageService, toastrService, tscCommonService) {\n      this.formBuilder = formBuilder;\n      this.cbamRunController = cbamRunController;\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.storageService = storageService;\n      this.toastrService = toastrService;\n      this.tscCommonService = tscCommonService;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.ButtonTooltipEnum = ButtonTooltipEnum;\n      this.formErrorEnum = FormErrorEnum;\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      this.inputPlaceholder = \"email1@domain.com, email2@domain.com\";\n      this.removable = true;\n      this.addOnBlur = true;\n      this.separatorKeysCodes = [ENTER, COMMA];\n      this.errorHandling = (control, error) => {\n        return this.sendEmailFG.controls[control].hasError(error);\n      };\n      this.dialogRef.disableClose = true;\n      this.reportID = this.data.dataSource;\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.formInit();\n      this.getReportDetails();\n    }\n    formInit() {\n      this.sendEmailFG = this.formBuilder.group({\n        customerEmail: [[], Validators.required]\n      });\n    }\n    getReportDetails() {\n      this.cbamRunController.getCbamReportByID(this.currentOrgID, this.reportID).subscribe(res => {\n        this.patchForm(res);\n      });\n    }\n    patchForm(response) {\n      this.sendEmailFG.patchValue({\n        customerEmail: response.customerEmail\n      });\n    }\n    get customerEmails() {\n      return this.sendEmailFG.get('customerEmail');\n    }\n    add(event) {\n      const value = (event.value || '').trim();\n      if (value) {\n        const emails = value.split(',').map(email => email.trim());\n        const validEmails = emails.filter(email => this.tscCommonService.isValidEmail(email));\n        if (validEmails.length > 0) {\n          this.customerEmails.patchValue(this.customerEmails.value.concat(validEmails));\n        }\n      }\n      event.chipInput.clear();\n    }\n    removeEmail(email) {\n      const index = this.customerEmails.value.indexOf(email);\n      if (index >= 0) {\n        const emails = [...this.customerEmails.value];\n        emails.splice(index, 1);\n        this.customerEmails.setValue(emails);\n      }\n    }\n    onInput() {\n      this.inputPlaceholder = '';\n    }\n    onSubmit() {\n      if (this.sendEmailFG.invalid) {\n        this.sendEmailFG.markAllAsTouched();\n        this.toastrService.openToast(ToastrTitle.ERROR, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return false;\n      }\n      this.cbamRunController.sendEmail(this.currentOrgID, this.sendEmailFG.value.customerEmail).subscribe(res => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      });\n    }\n  }\n  SendEmailComponent.ɵfac = function SendEmailComponent_Factory(t) {\n    return new (t || SendEmailComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CbamRunController), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(i4.StorageService), i0.ɵɵdirectiveInject(i5.ToastrService), i0.ɵɵdirectiveInject(i6.TSCCommonService));\n  };\n  SendEmailComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SendEmailComponent,\n    selectors: [[\"app-send-email\"]],\n    decls: 25,\n    vars: 11,\n    consts: [[1, \"headerContainer\", \"p-0\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"headerRightContainer\"], [1, \"headerRightContainerInner\"], [\"matRipple\", \"\", \"matTooltipPosition\", \"below\", \"mat-dialog-close\", \"\", 1, \"btn\", \"btn-sm\", \"centerAlign\", \"py-1\", \"iconBtn\", 3, \"matRippleCentered\", \"matTooltip\"], [1, \"material-symbols-outlined\"], [1, \"mat-typography\", \"pt-2\"], [3, \"formGroup\"], [1, \"row\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"customerEmail\"], [\"chipList\", \"\"], [3, \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [3, \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputAddOnBlur\", \"matChipInputTokenEnd\", \"input\"], [4, \"ngIf\"], [1, \"tscDialogFooter\"], [\"type\", \"button\", \"matRipple\", \"\", 1, \"btn\", \"btn-sm\", \"btn-success\", 3, \"matRippleCentered\", \"click\"], [\"mat-dialog-close\", \"\", \"matRipple\", \"\", 1, \"btn\", \"btn-sm\", \"btn-secondary\", \"me-2\", 3, \"matRippleCentered\"], [3, \"removable\", \"removed\"], [\"matChipRemove\", \"\", 4, \"ngIf\"], [\"matChipRemove\", \"\"]],\n    template: function SendEmailComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3, \"Send Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"button\", 5);\n        i0.ɵɵelementStart(7, \"span\", 6);\n        i0.ɵɵtext(8, \" close \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-dialog-content\", 7);\n        i0.ɵɵelementStart(10, \"form\", 8);\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵelementStart(12, \"mat-form-field\", 10);\n        i0.ɵɵelementStart(13, \"mat-label\", 11);\n        i0.ɵɵtext(14, \"Customer Email's\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-chip-list\", 12, 13);\n        i0.ɵɵtemplate(17, SendEmailComponent_mat_chip_17_Template, 3, 3, \"mat-chip\", 14);\n        i0.ɵɵelementStart(18, \"input\", 15);\n        i0.ɵɵlistener(\"matChipInputTokenEnd\", function SendEmailComponent_Template_input_matChipInputTokenEnd_18_listener($event) {\n          return ctx.add($event);\n        })(\"input\", function SendEmailComponent_Template_input_input_18_listener() {\n          return ctx.onInput();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, SendEmailComponent_mat_error_19_Template, 2, 1, \"mat-error\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 17);\n        i0.ɵɵelementStart(21, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function SendEmailComponent_Template_button_click_21_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(22, \"Send Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"button\", 19);\n        i0.ɵɵtext(24, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(16);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER)(\"matTooltip\", ctx.ButtonTooltipEnum.CLOSE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.sendEmailFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.customerEmails.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes)(\"matChipInputAddOnBlur\", ctx.addOnBlur);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"customerEmail\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n      }\n    },\n    directives: [i7.MatRipple, i3.MatDialogClose, i8.MatTooltip, i3.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i9.MatFormField, i9.MatLabel, i10.MatChipList, i1.NgControlStatus, i1.FormControlName, i11.NgForOf, i10.MatChipInput, i11.NgIf, i10.MatChip, i10.MatChipRemove, i12.MatIcon, i9.MatError],\n    encapsulation: 2\n  });\n  return SendEmailComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}