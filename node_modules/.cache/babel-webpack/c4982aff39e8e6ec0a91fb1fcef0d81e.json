{"ast":null,"code":"import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i9 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6._emitSelectAllBooleanToParent($event.checked);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n  }\n}\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r10.closeSvgIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", !ctx_r10.closeSvgIcon ? ctx_r10.closeIcon : null, \" \");\n  }\n}\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11._reset(true);\n    });\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\nfunction MatSelectSearchComponent_div_9_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2, [\"*ngIf\", \"noEntriesFound; else defaultNoEntriesFound\"]);\n  }\n}\nfunction MatSelectSearchComponent_div_9_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate(ctx_r15.noEntriesFoundLabel);\n  }\n}\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_div_9_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_div_9_ng_template_2_Template, 1, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r14 = i0.ɵɵreference(3);\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noEntriesFound)(\"ngIfElse\", _r14);\n  }\n}\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]], [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]];\nconst _c3 = function (a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\", \"[ngxMatSelectNoEntriesFound]\"];\nclass MatSelectSearchClearDirective {}\nMatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n  return new (t || MatSelectSearchClearDirective)();\n};\nMatSelectSearchClearDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectSearchClearDirective,\n  selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchClearDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectSearchClear]'\n    }]\n  }], null, null);\n})();\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = ['ariaLabel', 'clearSearchInput', 'closeIcon', 'closeSvgIcon', 'disableInitialFocus', 'disableScrollToActiveOnOptionsChanged', 'enableClearOnEscapePressed', 'hideClearSearchButton', 'indexAndLengthScreenReaderText', 'noEntriesFoundLabel', 'placeholderLabel', 'preventHomeEndKeyPropagation', 'searching'];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\nconst configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\nconst MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {}\nMatSelectNoEntriesFoundDirective.ɵfac = function MatSelectNoEntriesFoundDirective_Factory(t) {\n  return new (t || MatSelectNoEntriesFoundDirective)();\n};\nMatSelectNoEntriesFoundDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectNoEntriesFoundDirective,\n  selectors: [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectNoEntriesFoundDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectNoEntriesFound]'\n    }]\n  }], null, null);\n})();\n\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n  constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null, defaultOptions) {\n    this.matSelect = matSelect;\n    this.changeDetectorRef = changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this.matOption = matOption;\n    this.liveAnnouncer = liveAnnouncer;\n    this.matFormField = matFormField;\n    /** Label of the search placeholder */\n    this.placeholderLabel = 'Suche';\n    /** Type of the search input field */\n    this.type = 'text';\n    /** Font-based icon used for displaying Close-Icon */\n    this.closeIcon = 'close';\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n    this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n    /**\n     *  Text that is appended to the currently active item label announced by screen readers,\n     *  informing the user of the current index, value and total options.\n     *  eg: Bank R (Germany) 1 of 6\n    */\n    this.indexAndLengthScreenReaderText = ' of ';\n    /**\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n      */\n    this.clearSearchInput = true;\n    /** Whether to show the search-in-progress indicator */\n    this.searching = false;\n    /** Disables initial focusing of the input field */\n    this.disableInitialFocus = false;\n    /** Enable clear input on escape pressed */\n    this.enableClearOnEscapePressed = false;\n    /**\n     * Prevents home / end key being propagated to mat-select,\n     * allowing to move the cursor within the search input instead of navigating the options\n     */\n    this.preventHomeEndKeyPropagation = false;\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\n    this.disableScrollToActiveOnOptionsChanged = false;\n    /** Adds 508 screen reader support for search box */\n    this.ariaLabel = 'dropdown search';\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n    this.showToggleAllCheckbox = false;\n    /** select all checkbox checked state */\n    this.toggleAllCheckboxChecked = false;\n    /** select all checkbox indeterminate state */\n    this.toggleAllCheckboxIndeterminate = false;\n    /** Display a message in a tooltip on the toggle-all checkbox */\n    this.toggleAllCheckboxTooltipMessage = '';\n    /** Define the position of the tooltip on the toggle-all checkbox. */\n    this.toogleAllCheckboxTooltipPosition = 'below';\n    /** Show/Hide the search clear button of the search input */\n    this.hideClearSearchButton = false;\n    /**\n     * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n     * Defaults to false, so selected options are only restored while filtering is active.\n     */\n    this.alwaysRestoreSelectedOptionsMulti = false;\n    /** Output emitter to send to parent component with the toggle all boolean */\n    this.toggleAll = new EventEmitter();\n    this.onTouched = _ => {};\n    this._options$ = new BehaviorSubject(null);\n    this.optionsList$ = this._options$.pipe(switchMap(_options => _options ? _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n    this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n    this._formControl = new FormControl('');\n    /** whether to show the no entries found message */\n    this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value && optionsLength === this.getOptionsLengthOffset()));\n    /** Subject that emits when the component has been destroyed. */\n    this._onDestroy = new Subject();\n    this.applyDefaultOptions(defaultOptions);\n  }\n  get isInsideMatOption() {\n    return !!this.matOption;\n  }\n  /** Current search value */\n  get value() {\n    return this._formControl.value;\n  }\n  /** Reference to the MatSelect options */\n  set _options(_options) {\n    this._options$.next(_options);\n  }\n  get _options() {\n    return this._options$.getValue();\n  }\n  applyDefaultOptions(defaultOptions) {\n    if (!defaultOptions) {\n      return;\n    }\n    for (const key of configurableDefaultOptions) {\n      if (defaultOptions.hasOwnProperty(key)) {\n        this[key] = defaultOptions[key];\n      }\n    }\n  }\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    }\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(opened => {\n      if (opened) {\n        this.updateInputWidth();\n        // focus the search field when opening\n        if (!this.disableInitialFocus) {\n          this._focus();\n        }\n      } else {\n        // clear it when closing\n        if (this.clearSearchInput) {\n          this._reset();\n        }\n      }\n    });\n    // set the first item active after the options changed\n    this.matSelect.openedChange.pipe(take(1)).pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect._keyManager) {\n        this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n      } else {\n        console.log('_keyManager was not initialized.');\n      }\n      this._options = this.matSelect.options;\n      // Closure variable for tracking the most recent first option.\n      // In order to avoid avoid causing the list to\n      // scroll to the top when options are added to the bottom of\n      // the list (eg: infinite scroll), we compare only\n      // the changes to the first options to determine if we\n      // should set the first item as active.\n      // This prevents unnecessary scrolling to the top of the list\n      // when options are appended, but allows the first item\n      // in the list to be set as active by default when there\n      // is no active selection\n      let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n      this._options.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        // avoid \"expression has been changed\" error\n        setTimeout(() => {\n          // Convert the QueryList to an array\n          const options = this._options.toArray();\n          // The true first item is offset by 1\n          const currentFirstOption = options[this.getOptionsLengthOffset()];\n          const keyManager = this.matSelect._keyManager;\n          if (keyManager && this.matSelect.panelOpen) {\n            // set first item active and input width\n            // Check to see if the first option in these changes is different from the previous.\n            const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n            // CASE: The first option is different now.\n            // Indiciates we should set it as active and scroll to the top.\n            if (firstOptionIsChanged || !keyManager.activeItem || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n              keyManager.setFirstItemActive();\n            }\n            // wait for panel width changes\n            setTimeout(() => {\n              this.updateInputWidth();\n            });\n            if (!this.disableScrollToActiveOnOptionsChanged) {\n              this.adjustScrollTopToFitActiveOptionIntoView();\n            }\n          }\n          // Update our reference\n          previousFirstOption = currentFirstOption;\n        });\n      });\n    });\n    // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n    this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    });\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect.panelOpen) {\n        this.updateInputWidth();\n      }\n    });\n    this.initMultipleHandling();\n    this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n  _emitSelectAllBooleanToParent(state) {\n    this.toggleAll.emit(state);\n  }\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n  _isToggleAllCheckboxVisible() {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n      event.stopPropagation();\n    }\n    if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    }\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n  _handleKeyup(event) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n      if (index !== -1) {\n        const activeDescendant = this._options.toArray()[index];\n        this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());\n      }\n    }\n  }\n  /**\n   * Calculate the index of the current option, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n   */\n  getAriaIndex(optionIndex) {\n    if (this.getOptionsLengthOffset() === 0) {\n      return optionIndex + 1;\n    }\n    return optionIndex;\n  }\n  /**\n   * Calculate the length of the options, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n   *    Case 2 [1, 2, 3] will have length of options.length.\n   */\n  getAriaLength() {\n    return this._options.toArray().length - this.getOptionsLengthOffset();\n  }\n  writeValue(value) {\n    this._lastExternalInputValue = value;\n    this._formControl.setValue(value);\n    this.changeDetectorRef.markForCheck();\n  }\n  onBlur() {\n    this.onTouched();\n  }\n  registerOnChange(fn) {\n    this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Focuses the search input field\n   */\n  _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n    panel.scrollTop = scrollTop;\n  }\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  _reset(focus) {\n    this._formControl.setValue('');\n    if (focus) {\n      this._focus();\n    }\n  }\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n      return;\n    }\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n    this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(values => {\n      let restoreSelectedValues = false;\n      if (this.matSelect.multiple) {\n        if ((this.alwaysRestoreSelectedOptionsMulti || this._formControl.value && this._formControl.value.length) && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n          if (!values || !Array.isArray(values)) {\n            values = [];\n          }\n          const optionValues = this.matSelect.options.map(option => option.value);\n          this.previousSelectedValues.forEach(previousValue => {\n            if (!values.some(v => this.matSelect.compareWith(v, previousValue)) && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n              // if a value that was selected before is deselected and not found in the options, it was deselected\n              // due to the filtering, so we restore it.\n              values.push(previousValue);\n              restoreSelectedValues = true;\n            }\n          });\n        }\n      }\n      this.previousSelectedValues = values;\n      if (restoreSelectedValues) {\n        this.matSelect._onChange(values);\n      }\n    });\n  }\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n  adjustScrollTopToFitActiveOptionIntoView() {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element = this.innerSelectSearch.nativeElement;\n    let panelElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n  getMatOptionHeight() {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n    return 0;\n  }\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n  getOptionsLengthOffset() {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n  return new (t || MatSelectSearchComponent)(i0.ɵɵdirectiveInject(MatSelect), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MatOption, 8), i0.ɵɵdirectiveInject(i2.LiveAnnouncer), i0.ɵɵdirectiveInject(MatFormField, 8), i0.ɵɵdirectiveInject(MAT_SELECTSEARCH_DEFAULT_OPTIONS, 8));\n};\nMatSelectSearchComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelectSearchComponent,\n  selectors: [[\"ngx-mat-select-search\"]],\n  contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatSelectNoEntriesFoundDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noEntriesFound = _t.first);\n    }\n  },\n  viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ElementRef);\n      i0.ɵɵviewQuery(_c1, 7, ElementRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n    }\n  },\n  inputs: {\n    placeholderLabel: \"placeholderLabel\",\n    type: \"type\",\n    closeIcon: \"closeIcon\",\n    closeSvgIcon: \"closeSvgIcon\",\n    noEntriesFoundLabel: \"noEntriesFoundLabel\",\n    indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\",\n    clearSearchInput: \"clearSearchInput\",\n    searching: \"searching\",\n    disableInitialFocus: \"disableInitialFocus\",\n    enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n    preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n    disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n    ariaLabel: \"ariaLabel\",\n    showToggleAllCheckbox: \"showToggleAllCheckbox\",\n    toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n    toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n    toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n    toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\",\n    hideClearSearchButton: \"hideClearSearchButton\",\n    alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n  },\n  outputs: {\n    toggleAll: \"toggleAll\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSelectSearchComponent),\n    multi: true\n  }])],\n  ngContentSelectors: _c4,\n  decls: 11,\n  vars: 14,\n  consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [3, \"svgIcon\"], [1, \"mat-select-search-no-entries-found\"], [\"defaultNoEntriesFound\", \"\"]],\n  template: function MatSelectSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1, 2);\n      i0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n      i0.ɵɵelementStart(4, \"input\", 4, 5);\n      i0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n        return ctx._handleKeydown($event);\n      })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n        return ctx._handleKeyup($event);\n      })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n      i0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n      i0.ɵɵprojection(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 4, 2, \"div\", 8);\n      i0.ɵɵpipe(10, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.searching);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n    }\n  },\n  directives: [i7.NgClass, i7.NgIf, i9.DefaultValueAccessor, i9.NgControlStatus, i9.FormControlDirective, i3.MatCheckbox, i8.MatTooltip, i4.MatProgressSpinner, i5.MatButton, i6.MatIcon],\n  pipes: [i7.AsyncPipe],\n  styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-select-search',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MatSelectSearchComponent),\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n      styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i10.MatSelect,\n      decorators: [{\n        type: Inject,\n        args: [MatSelect]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i11.MatOption,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatOption]\n      }]\n    }, {\n      type: i2.LiveAnnouncer\n    }, {\n      type: i12.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatFormField]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    placeholderLabel: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    closeIcon: [{\n      type: Input\n    }],\n    closeSvgIcon: [{\n      type: Input\n    }],\n    noEntriesFoundLabel: [{\n      type: Input\n    }],\n    indexAndLengthScreenReaderText: [{\n      type: Input\n    }],\n    clearSearchInput: [{\n      type: Input\n    }],\n    searching: [{\n      type: Input\n    }],\n    disableInitialFocus: [{\n      type: Input\n    }],\n    enableClearOnEscapePressed: [{\n      type: Input\n    }],\n    preventHomeEndKeyPropagation: [{\n      type: Input\n    }],\n    disableScrollToActiveOnOptionsChanged: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    showToggleAllCheckbox: [{\n      type: Input\n    }],\n    toggleAllCheckboxChecked: [{\n      type: Input\n    }],\n    toggleAllCheckboxIndeterminate: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipMessage: [{\n      type: Input\n    }],\n    toogleAllCheckboxTooltipPosition: [{\n      type: Input\n    }],\n    hideClearSearchButton: [{\n      type: Input\n    }],\n    alwaysRestoreSelectedOptionsMulti: [{\n      type: Input\n    }],\n    toggleAll: [{\n      type: Output\n    }],\n    searchSelectInput: [{\n      type: ViewChild,\n      args: ['searchSelectInput', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    innerSelectSearch: [{\n      type: ViewChild,\n      args: ['innerSelectSearch', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    clearIcon: [{\n      type: ContentChild,\n      args: [MatSelectSearchClearDirective]\n    }],\n    noEntriesFound: [{\n      type: ContentChild,\n      args: [MatSelectNoEntriesFoundDirective]\n    }],\n    isInsideMatOption: [{\n      type: HostBinding,\n      args: ['class.mat-select-search-inside-mat-option']\n    }]\n  });\n})();\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '4.2.1';\nclass NgxMatSelectSearchModule {}\nNgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n  return new (t || NgxMatSelectSearchModule)();\n};\nNgxMatSelectSearchModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatSelectSearchModule\n});\nNgxMatSelectSearchModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatSelectSearchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule],\n      declarations: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective],\n      exports: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions };","map":{"version":3,"names":["A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","i0","Directive","InjectionToken","EventEmitter","forwardRef","ElementRef","Component","ChangeDetectionStrategy","Inject","Optional","Input","Output","ViewChild","ContentChild","HostBinding","NgModule","i9","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","i11","_countGroupLabelsBeforeOption","MatOption","i12","MatFormField","i10","MatSelect","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","filter","tap","i1","i2","i3","MatCheckboxModule","i4","MatProgressSpinnerModule","i5","MatButtonModule","i6","MatIconModule","i7","CommonModule","i8","MatTooltipModule","_c0","_c1","MatSelectSearchComponent_mat_checkbox_3_Template","rf","ctx","_r7","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener","$event","ɵɵrestoreView","ctx_r6","ɵɵnextContext","_emitSelectAllBooleanToParent","checked","ɵɵelementEnd","ctx_r1","ɵɵproperty","matFormField","color","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toogleAllCheckboxTooltipPosition","MatSelectSearchComponent_mat_spinner_6_Template","ɵɵelement","MatSelectSearchComponent_button_7_ng_content_1_Template","ɵɵprojection","MatSelectSearchComponent_button_7_ng_template_2_Template","ɵɵtext","ctx_r10","closeSvgIcon","ɵɵadvance","ɵɵtextInterpolate1","closeIcon","MatSelectSearchComponent_button_7_Template","_r12","MatSelectSearchComponent_button_7_Template_button_click_0_listener","ctx_r11","_reset","ɵɵtemplate","ɵɵtemplateRefExtractor","_r9","ɵɵreference","ctx_r4","clearIcon","MatSelectSearchComponent_div_9_ng_content_1_Template","MatSelectSearchComponent_div_9_ng_template_2_Template","ctx_r15","ɵɵtextInterpolate","noEntriesFoundLabel","MatSelectSearchComponent_div_9_Template","_r14","ctx_r5","noEntriesFound","_c2","_c3","a0","a1","_c4","MatSelectSearchClearDirective","ɵfac","MatSelectSearchClearDirective_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","configurableGlobalOptions","MATSELECTSEARCH_GLOBAL_OPTIONS","MatSelectNoEntriesFoundDirective","MatSelectNoEntriesFoundDirective_Factory","SELECT_PANEL_MAX_HEIGHT","MatSelectSearchComponent","constructor","matSelect","changeDetectorRef","_viewportRuler","matOption","liveAnnouncer","defaultOptions","placeholderLabel","indexAndLengthScreenReaderText","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","applyDefaultOptions","isInsideMatOption","next","getValue","key","hasOwnProperty","ngOnInit","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_keyManager","change","adjustScrollTopToFitActiveOptionIntoView","log","previousFirstOption","setTimeout","currentFirstOption","keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","initMultipleHandling","markForCheck","state","emit","ngOnDestroy","complete","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","keyCode","stopPropagation","_handleKeyup","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","activeDescendant","announce","viewValue","getAriaIndex","getAriaLength","optionIndex","writeValue","_lastExternalInputValue","setValue","onBlur","registerOnChange","fn","undefined","registerOnTouched","searchSelectInput","panel","nativeElement","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","optionValues","forEach","previousValue","some","v","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","indexOfFirstVisibleOption","round","element","panelElement","parentElement","contains","style","width","clientWidth","first","getBoundingClientRect","height","MatSelectSearchComponent_Factory","ɵɵdirectiveInject","ChangeDetectorRef","ViewportRuler","LiveAnnouncer","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelectSearchComponent_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatSelectSearchComponent_Query","ɵɵviewQuery","hostVars","hostBindings","MatSelectSearchComponent_HostBindings","ɵɵclassProp","inputs","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","ngContentSelectors","decls","vars","consts","template","MatSelectSearchComponent_Template","ɵɵprojectionDef","MatSelectSearchComponent_Template_input_keydown_4_listener","MatSelectSearchComponent_Template_input_keyup_4_listener","MatSelectSearchComponent_Template_input_blur_4_listener","ɵɵpipe","ɵɵpureFunction2","ɵɵattribute","ɵɵpipeBind1","directives","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","FormControlDirective","MatCheckbox","MatTooltip","MatProgressSpinner","MatButton","MatIcon","pipes","AsyncPipe","styles","changeDetection","providers","OnPush","decorators","read","static","MatSelectSearchVersion","NgxMatSelectSearchModule","NgxMatSelectSearchModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["/home/silori/projects/gitClones/admin-ui/node_modules/ngx-mat-select-search/fesm2015/ngx-mat-select-search.mjs"],"sourcesContent":["import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i9 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nclass MatSelectSearchClearDirective {\n}\nMatSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectSearchClearDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchClearDirective, selector: \"[ngxMatSelectSearchClear]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectSearchClear]'\n                }]\n        }] });\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = [\n    'ariaLabel',\n    'clearSearchInput',\n    'closeIcon',\n    'closeSvgIcon',\n    'disableInitialFocus',\n    'disableScrollToActiveOnOptionsChanged',\n    'enableClearOnEscapePressed',\n    'hideClearSearchButton',\n    'indexAndLengthScreenReaderText',\n    'noEntriesFoundLabel',\n    'placeholderLabel',\n    'preventHomeEndKeyPropagation',\n    'searching',\n];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\nconst configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\nconst MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {\n}\nMatSelectNoEntriesFoundDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectNoEntriesFoundDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectNoEntriesFoundDirective, selector: \"[ngxMatSelectNoEntriesFound]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectNoEntriesFound]'\n                }]\n        }] });\n\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null, defaultOptions) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.liveAnnouncer = liveAnnouncer;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Font-based icon used for displaying Close-Icon */\n        this.closeIcon = 'close';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n         *  Text that is appended to the currently active item label announced by screen readers,\n         *  informing the user of the current index, value and total options.\n         *  eg: Bank R (Germany) 1 of 6\n        */\n        this.indexAndLengthScreenReaderText = ' of ';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toogleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /**\n         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n         * Defaults to false, so selected options are only restored while filtering is active.\n         */\n        this.alwaysRestoreSelectedOptionsMulti = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        this.applyDefaultOptions(defaultOptions);\n    }\n    get isInsideMatOption() {\n        return !!this.matOption;\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    applyDefaultOptions(defaultOptions) {\n        if (!defaultOptions) {\n            return;\n        }\n        for (const key of configurableDefaultOptions) {\n            if (defaultOptions.hasOwnProperty(key)) {\n                this[key] = defaultOptions[key];\n            }\n        }\n    }\n    ngOnInit() {\n        // set custom panel class\n        const panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect._keyManager) {\n                this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            this._options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                        if (!this.disableScrollToActiveOnOptionsChanged) {\n                            this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            });\n        });\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                const activeDescendant = this._options.toArray()[index];\n                this.liveAnnouncer.announce(activeDescendant.viewValue + ' '\n                    + this.getAriaIndex(index)\n                    + this.indexAndLengthScreenReaderText\n                    + this.getAriaLength());\n            }\n        }\n    }\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n    getAriaIndex(optionIndex) {\n        if (this.getOptionsLengthOffset() === 0) {\n            return optionIndex + 1;\n        }\n        return optionIndex;\n    }\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n    getAriaLength() {\n        return this._options.toArray().length - this.getOptionsLengthOffset();\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            let restoreSelectedValues = false;\n            if (this.matSelect.multiple) {\n                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = values;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(values);\n            }\n        });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n    adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            const matOptionHeight = this.getMatOptionHeight();\n            const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n                    - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nMatSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, deps: [{ token: MatSelect }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MatOption, optional: true }, { token: i2.LiveAnnouncer }, { token: MatFormField, optional: true }, { token: MAT_SELECTSEARCH_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSelectSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchComponent, selector: \"ngx-mat-select-search\", inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", closeIcon: \"closeIcon\", closeSvgIcon: \"closeSvgIcon\", noEntriesFoundLabel: \"noEntriesFoundLabel\", indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\", alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\" }, outputs: { toggleAll: \"toggleAll\" }, host: { properties: { \"class.mat-select-search-inside-mat-option\": \"this.isInsideMatOption\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MatSelectSearchComponent),\n            multi: true\n        }\n    ], queries: [{ propertyName: \"clearIcon\", first: true, predicate: MatSelectSearchClearDirective, descendants: true }, { propertyName: \"noEntriesFound\", first: true, predicate: MatSelectNoEntriesFoundDirective, descendants: true }], viewQueries: [{ propertyName: \"searchSelectInput\", first: true, predicate: [\"searchSelectInput\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"innerSelectSearch\", first: true, predicate: [\"innerSelectSearch\"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"], components: [{ type: i3.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"checked\", \"disabled\", \"indeterminate\"], outputs: [\"change\", \"indeterminateChange\"], exportAs: [\"matCheckbox\"] }, { type: i4.MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: [\"color\", \"diameter\", \"strokeWidth\", \"mode\", \"value\"], exportAs: [\"matProgressSpinner\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i8.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }, { type: i9.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i9.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i9.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"async\": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-mat-select-search', providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatSelectSearchComponent),\n                            multi: true\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i10.MatSelect, decorators: [{\n                        type: Inject,\n                        args: [MatSelect]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: i11.MatOption, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatOption]\n                    }] }, { type: i2.LiveAnnouncer }, { type: i12.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatFormField]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { placeholderLabel: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], closeIcon: [{\n                type: Input\n            }], closeSvgIcon: [{\n                type: Input\n            }], noEntriesFoundLabel: [{\n                type: Input\n            }], indexAndLengthScreenReaderText: [{\n                type: Input\n            }], clearSearchInput: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], disableInitialFocus: [{\n                type: Input\n            }], enableClearOnEscapePressed: [{\n                type: Input\n            }], preventHomeEndKeyPropagation: [{\n                type: Input\n            }], disableScrollToActiveOnOptionsChanged: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], showToggleAllCheckbox: [{\n                type: Input\n            }], toggleAllCheckboxChecked: [{\n                type: Input\n            }], toggleAllCheckboxIndeterminate: [{\n                type: Input\n            }], toggleAllCheckboxTooltipMessage: [{\n                type: Input\n            }], toogleAllCheckboxTooltipPosition: [{\n                type: Input\n            }], hideClearSearchButton: [{\n                type: Input\n            }], alwaysRestoreSelectedOptionsMulti: [{\n                type: Input\n            }], toggleAll: [{\n                type: Output\n            }], searchSelectInput: [{\n                type: ViewChild,\n                args: ['searchSelectInput', { read: ElementRef, static: true }]\n            }], innerSelectSearch: [{\n                type: ViewChild,\n                args: ['innerSelectSearch', { read: ElementRef, static: true }]\n            }], clearIcon: [{\n                type: ContentChild,\n                args: [MatSelectSearchClearDirective]\n            }], noEntriesFound: [{\n                type: ContentChild,\n                args: [MatSelectNoEntriesFoundDirective]\n            }], isInsideMatOption: [{\n                type: HostBinding,\n                args: ['class.mat-select-search-inside-mat-option']\n            }] } });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '4.2.1';\nclass NgxMatSelectSearchModule {\n}\nNgxMatSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMatSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, declarations: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule], exports: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective] });\nNgxMatSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatButtonModule,\n            MatCheckboxModule,\n            MatIconModule,\n            MatProgressSpinnerModule,\n            MatTooltipModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatButtonModule,\n                        MatCheckboxModule,\n                        MatIconModule,\n                        MatProgressSpinnerModule,\n                        MatTooltipModule\n                    ],\n                    declarations: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ],\n                    exports: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions };\n"],"mappings":"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,EAChC,qBAAqB,EACrB,kBAAkB,EAClB,8BAA8B,EAC9B,WAAW,CACd;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gCAAgC,GAAG,IAAI7H,cAAc,CAAC,kCAAkC,CAAC;AAC/F;AACA,MAAM8H,yBAAyB,GAAGF,0BAA0B;AAC5D;AACA,MAAMG,8BAA8B,GAAGF,gCAAgC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,gCAAgC,CAAC;AAEvCA,gCAAgC,CAACf,IAAI,YAAAgB,yCAAAd,CAAA;EAAA,YAAAA,CAAA,IAAyFa,gCAAgC;AAAA,CAAmD;AACjNA,gCAAgC,CAACZ,IAAI,kBA5D4EtH,EAAE,CAAAuH,iBAAA;EAAAC,IAAA,EA4DDU,gCAAgC;EAAAT,SAAA;AAAA,EAA2D;AAC7M;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KA7DiH1H,EAAE,CAAA2H,iBAAA,CA6DvBO,gCAAgC,EAAc,CAAC;IAC/HV,IAAI,EAAEvH,SAAS;IACf2H,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA,MAAMO,uBAAuB,GAAG,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,CAAC;EAC3BC,WAAWA,CAACC,SAAS,EAAEC,iBAAiB,EAAEC,cAA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"},"metadata":{},"sourceType":"module"}