{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FugitiveInventoryController = /*#__PURE__*/(() => {\n  class FugitiveInventoryController {\n    constructor(http) {\n      this.http = http;\n    }\n    getInventoryRecord(pageNo, pazeSize, sortBy, orderBy, filterArr, currentOrgID, startDate, endDate, calculationApproachKeyID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      params = params.append('calculationApproachKeyID', calculationApproachKeyID);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/inventory/page`, {\n        params: params\n      });\n    }\n    createInventoryRecord(currentOrgID, formData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/inventory`, formData);\n    }\n    updateInventoryRecord(currentOrgID, inventoryID, data) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/inventory/${inventoryID}`, data);\n    }\n    getInventoryRecordByID(currentOrgID, inventoryID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/inventory/${inventoryID}`);\n    }\n    deleteInventoryRecord(currentOrgID, inventoryID) {\n      return this.http.delete(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/inventory/${inventoryID}`);\n    }\n  }\n  FugitiveInventoryController.ɵfac = function FugitiveInventoryController_Factory(t) {\n    return new (t || FugitiveInventoryController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  FugitiveInventoryController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FugitiveInventoryController,\n    factory: FugitiveInventoryController.ɵfac,\n    providedIn: 'root'\n  });\n  return FugitiveInventoryController;\n})();","map":null,"metadata":{},"sourceType":"module"}