{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/cbam-run.controller\";\nexport let CbamRunService = /*#__PURE__*/(() => {\n  class CbamRunService {\n    constructor(cbamRunController) {\n      this.cbamRunController = cbamRunController;\n    }\n    getValidation(orgID, productID, prID, startDate, endDate) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const response = yield this.cbamRunController.getValidation(orgID, productID, prID, startDate, endDate);\n          return response;\n        } catch (error) {\n          console.error('Error -', error);\n          return null; // or any other appropriate default value\n        }\n      });\n    }\n\n    updateCbamRunStatus(orgID, runID, data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let res;\n        try {\n          res = yield this.cbamRunController.updateCbamRunStatus(orgID, runID, data).toPromise();\n          if (res) {\n            return res;\n          } else {\n            return null;\n          }\n        } catch (error) {\n          console.error('error in updateCbamRunStatus -', error);\n          return null;\n        }\n      });\n    }\n    getCbamRunRequestByID(orgID, runID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let res;\n        try {\n          res = yield this.cbamRunController.getCbamRunRequestByID(orgID, runID).toPromise();\n          if (res) {\n            return res;\n          } else {\n            return null;\n          }\n        } catch (error) {\n          console.error('error in getCbamRunRequestByID -', error);\n          return null;\n        }\n      });\n    }\n    getCbamRunByID(orgID, runID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let res;\n        try {\n          res = yield this.cbamRunController.getCbamRunByID(orgID, runID).toPromise();\n          if (res) {\n            return res;\n          } else {\n            return null;\n          }\n        } catch (error) {\n          console.error('error in getCbamRunByID -', error);\n          return null;\n        }\n      });\n    }\n  }\n  CbamRunService.ɵfac = function CbamRunService_Factory(t) {\n    return new (t || CbamRunService)(i0.ɵɵinject(i1.CbamRunController));\n  };\n  CbamRunService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CbamRunService,\n    factory: CbamRunService.ɵfac,\n    providedIn: 'root'\n  });\n  return CbamRunService;\n})();","map":null,"metadata":{},"sourceType":"module"}