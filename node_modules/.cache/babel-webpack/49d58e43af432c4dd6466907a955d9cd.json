{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { cloneDeep } from 'lodash-es';\nimport * as moment from 'moment-timezone';\nimport { COMMON_CONSTANT, MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@report-framework/controller/reporting-framework-data.controller\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@library/date\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"ngx-mat-select-search\";\nimport * as i12 from \"@angular/material/card\";\nimport * as i13 from \"../../../data-create-update/data-create-update.component\";\nconst _c0 = [\"yearBtn\"];\nconst _c1 = [\"refreshBtn\"];\nfunction MatchingMetricComponent_div_12_mat_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 31);\n    i0.ɵɵelementStart(1, \"span\", 32);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const year_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", year_r10.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", year_r10.reportingPeriod, \" \");\n  }\n}\nfunction MatchingMetricComponent_div_12_mat_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 31);\n    i0.ɵɵelementStart(1, \"span\", 32);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const interval_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", interval_r11.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate4(\" \", interval_r11.name, \" \", \"(\", \" \", interval_r11.reportingPeriod, \" \", \")\", \" \");\n  }\n}\nfunction MatchingMetricComponent_div_12_ng_container_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MatchingMetricComponent_div_12_div_31_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction MatchingMetricComponent_div_12_div_31_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c2 = function (a1) {\n  return {\n    label: \"Entered by:\",\n    value: a1\n  };\n};\nconst _c3 = function (a1) {\n  return {\n    label: \"Approved by:\",\n    value: a1\n  };\n};\nfunction MatchingMetricComponent_div_12_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 28);\n    i0.ɵɵtemplate(2, MatchingMetricComponent_div_12_div_31_ng_container_2_Template, 1, 0, \"ng-container\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 33);\n    i0.ɵɵtemplate(4, MatchingMetricComponent_div_12_div_31_ng_container_4_Template, 1, 0, \"ng-container\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 34);\n    i0.ɵɵelement(6, \"app-data-create-update\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r12 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    const _r1 = i0.ɵɵreference(14);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(5, _c2, data_r12.enteredBy + ctx_r9.getDateTime(data_r12.enteredDate)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(7, _c3, data_r12.approvedBy + ctx_r9.getDateTime(data_r12.approvedDate)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"data\", data_r12.group);\n  }\n}\nconst _c4 = function (a1) {\n  return {\n    label: \"Reporting frequency:\",\n    value: a1\n  };\n};\nfunction MatchingMetricComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelementStart(1, \"div\", 12);\n    i0.ɵɵelementStart(2, \"div\", 13);\n    i0.ɵɵelementStart(3, \"div\", 14);\n    i0.ɵɵelementStart(4, \"span\", 15);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 16);\n    i0.ɵɵelementStart(7, \"div\", 17);\n    i0.ɵɵelementStart(8, \"div\", 18);\n    i0.ɵɵelementStart(9, \"div\", 19);\n    i0.ɵɵelementStart(10, \"mat-form-field\", 20);\n    i0.ɵɵelementStart(11, \"mat-label\", 21);\n    i0.ɵɵtext(12, \"Select reporting period\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-select\", 22, 23);\n    i0.ɵɵlistener(\"selectionChange\", function MatchingMetricComponent_div_12_Template_mat_select_selectionChange_13_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const i_r4 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.getData(i_r4, $event.value);\n    });\n    i0.ɵɵelementStart(15, \"mat-option\");\n    i0.ɵɵelement(16, \"ngx-mat-select-search\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(17, MatchingMetricComponent_div_12_mat_option_17_Template, 3, 2, \"mat-option\", 25);\n    i0.ɵɵpipe(18, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 19);\n    i0.ɵɵelementStart(20, \"mat-form-field\", 20);\n    i0.ɵɵelementStart(21, \"mat-label\", 21);\n    i0.ɵɵtext(22, \"Select reporting interval\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"mat-select\", 22);\n    i0.ɵɵlistener(\"selectionChange\", function MatchingMetricComponent_div_12_Template_mat_select_selectionChange_23_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const i_r4 = restoredCtx.index;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.filterDataByInterVal($event.value, i_r4);\n    });\n    i0.ɵɵelementStart(24, \"mat-option\");\n    i0.ɵɵelement(25, \"ngx-mat-select-search\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(26, MatchingMetricComponent_div_12_mat_option_26_Template, 3, 5, \"mat-option\", 25);\n    i0.ɵɵpipe(27, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"mat-card\", 27);\n    i0.ɵɵelementStart(29, \"div\", 28);\n    i0.ɵɵtemplate(30, MatchingMetricComponent_div_12_ng_container_30_Template, 1, 0, \"ng-container\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(31, MatchingMetricComponent_div_12_div_31_Template, 7, 9, \"div\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const metric_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(14);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", metric_r3.reportingFrameworkName, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formControl\", metric_r3[\"reportingPeriodFC\"]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formControl\", ctx_r0.reportingPeriodList[i_r4][\"filterFC\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(18, 12, ctx_r0.reportingPeriodList[i_r4][\"filteredEntities\"]));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formControl\", metric_r3[\"intervalIDFC\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControl\", ctx_r0.intervalList[i_r4][\"filterFC\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(27, 14, ctx_r0.intervalList[i_r4][\"filteredEntities\"]));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(16, _c4, metric_r3.intervalData.name + \" (\" + metric_r3.intervalData.reportingPeriod + \")\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", metric_r3.intervalData.data);\n  }\n}\nfunction MatchingMetricComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"div\", 36);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 37);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const label_r18 = ctx.label;\n    const value_r19 = ctx.value;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", label_r18, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", value_r19, \" \");\n  }\n}\n// /tsc-library\nexport let MatchingMetricComponent = /*#__PURE__*/(() => {\n  class MatchingMetricComponent {\n    constructor(data, dialogRef, reportingFrameworkDataController, storageService, dateService) {\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.reportingFrameworkDataController = reportingFrameworkDataController;\n      this.storageService = storageService;\n      this.dateService = dateService;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.configIntervalID = null;\n      this.configID = null;\n      this.groupID = null;\n      this.reportingFrameworkID = null;\n      // referenceGroupList: any[] = [];\n      this.matchingMetric = [];\n      this.reportingPeriodFC = new FormControl();\n      this.intervalIDFC = new FormControl();\n      this.reportingPeriodList = [];\n      this.intervalList = [];\n      this.filterMetricData = [];\n      this.dialogRef.disableClose = true;\n      this.configIntervalID = data.configIntervalID;\n      this.groupID = data.groupID;\n      this.reportingFrameworkID = data.reportingFrameworkID;\n      this.matchingMetric = data.referenceGroupList;\n    }\n    ngOnInit() {\n      this.currentOrgID = parseInt(this.storageService.getStorage('currentOrgID'));\n      this.getMatchingMetric();\n    }\n    getMatchingMetric() {\n      this.createReportingPeriodDropDown();\n      // create list for show in html\n      this.filterMetricData = [];\n      let filterData = cloneDeep(this.matchingMetric);\n      for (let i = 0; i < this.matchingMetric.length; i++) {\n        let reportingPeriod = filterData[i]['configYearList'].find(item => item.showDefault === true);\n        filterData[i]['reportingPeriodFC'] = new FormControl(reportingPeriod['id']);\n        let interval = filterData[i]['configIntervalList'].find(item => item.showDefault === true);\n        filterData[i]['intervalIDFC'] = new FormControl(interval['id']);\n        filterData[i]['intervalData'] = filterData[i]['intervalData'].find(item => item.id == interval['id']);\n      }\n      this.filterMetricData = filterData;\n    }\n    createReportingPeriodDropDown() {\n      this.matchingMetric.forEach(metric => {\n        let yearSearchUtil = new MatSelectSearchService(['reportingPeriod']);\n        yearSearchUtil.entityArr = metric['configYearList'];\n        yearSearchUtil.createSubscription();\n        this.reportingPeriodList.push(yearSearchUtil);\n        let intervalSearchUtil = new MatSelectSearchService(['name']);\n        intervalSearchUtil.entityArr = metric['configIntervalList'];\n        intervalSearchUtil.createSubscription();\n        this.intervalList.push(intervalSearchUtil);\n      });\n    }\n    getData(index, event) {\n      this.reportingFrameworkDataController.getMatchingMetricByFilter(this.currentOrgID, this.reportingFrameworkID, event, this.groupID).subscribe(res => {\n        this.intervalList[index].filteredEntities.next(res['configIntervalList']);\n        this.matchingMetric[index] = res;\n        // create list for show in html\n        let filterData = cloneDeep(this.matchingMetric[index]);\n        // set intervalIDFC \n        let interval = res['configIntervalList'].find(item => item.showDefault === true);\n        filterData['intervalIDFC'] = new FormControl(interval['id']);\n        // set intervalData\n        filterData['intervalData'] = filterData['intervalData'].find(item => item.id == interval['id']);\n        // set reportingPeriod value from pre value\n        filterData['reportingPeriodFC'] = new FormControl(this.filterMetricData[index]['reportingPeriodFC'].value);\n        this.filterMetricData[index] = filterData;\n      }, error => {\n        console.log('error in getMatchingMetric', error);\n      });\n    }\n    filterDataByInterVal(event, index) {\n      this.filterMetricData[index]['intervalData'] = [];\n      let intervalData = this.matchingMetric[index]['intervalData'];\n      this.filterMetricData[index]['intervalData'] = intervalData.find(item => item['id'] == event);\n    }\n    getMetricIntervalLength(index) {\n      let length = this.matchingMetric[index]['intervalData'].length;\n      return length - 1;\n    }\n    getDateTime(dateTime) {\n      const utcDateTime = moment.utc(dateTime).format();\n      return ' ' + this.dateService.convertUtcToTimeZone(utcDateTime, COMMON_CONSTANT.ASIAN_KOLKATA, 'YYYY-MMM-DD h:mm a');\n    }\n  }\n  MatchingMetricComponent.ɵfac = function MatchingMetricComponent_Factory(t) {\n    return new (t || MatchingMetricComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.ReportingFrameworkDataController), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.DateService));\n  };\n  MatchingMetricComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MatchingMetricComponent,\n    selectors: [[\"app-matching-metric\"]],\n    viewQuery: function MatchingMetricComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.yearBtn = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.refreshBtn = _t.first);\n      }\n    },\n    decls: 15,\n    vars: 1,\n    consts: [[1, \"content\"], [\"mat-dialog-header\", \"\"], [1, \"row\"], [1, \"col-sm-11\"], [1, \"pageTitle\", \"dialogHeader\", \"ms-3\"], [1, \"pageSubTitle\", \"dialogHeader\", \"ms-3\"], [1, \"col-sm-1\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", \"cdkFocusInitial\", \"\", \"matTooltip\", \"Close\", \"matTooltipPosition\", \"before\", 1, \"float-end\", \"matDialogClose\"], [1, \"material-symbols-outlined\"], [\"class\", \"mb-4 me-2\", 4, \"ngFor\", \"ngForOf\"], [\"value\", \"\"], [1, \"mb-4\", \"me-2\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"col-form-label\", \"ms-2\"], [1, \"fw-bold\", \"fs-3\"], [1, \"headerRightContainer\", \"me-4\"], [1, \"headerRightContainerInner\"], [1, \"row\", \"mt-4\"], [1, \"col-sm-6\"], [3, \"appearance\"], [1, \"formLabel\"], [3, \"formControl\", \"selectionChange\"], [\"yearBtn\", \"\"], [\"placeholderLabel\", \"Search by reporting period name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"placeholderLabel\", \"Search by reporting interval name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [1, \"border\", \"cardOverwrite\", \"ms-2\", \"me-2\"], [1, \"row\", \"ms-3\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [1, \"row\", \"mb-3\", \"ms-3\"], [1, \"row\", \"px-0\"], [\"isReadOnly\", \"true\", \"pageType\", \"matching-metric\", 3, \"data\"], [1, \"col-sm-3\"], [1, \"col-sm-6\", \"fw-bold\"]],\n    template: function MatchingMetricComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtext(5, \" Matching Metric\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵtext(7, \" This question matches with one of the entries you provided in the reporting framework stated below. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"button\", 7);\n        i0.ɵɵelementStart(10, \"span\", 8);\n        i0.ɵɵtext(11, \" close \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, MatchingMetricComponent_div_12_Template, 32, 18, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, MatchingMetricComponent_ng_template_13_Template, 5, 2, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filterMetricData);\n      }\n    },\n    directives: [i5.MatButton, i1.MatDialogClose, i6.NgForOf, i7.MatFormField, i7.MatLabel, i8.MatSelect, i9.NgControlStatus, i9.FormControlDirective, i10.MatOption, i11.MatSelectSearchComponent, i12.MatCard, i6.NgTemplateOutlet, i13.DataCreateUpdateComponent],\n    pipes: [i6.AsyncPipe],\n    styles: [\"\"]\n  });\n  return MatchingMetricComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}