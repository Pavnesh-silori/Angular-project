{"ast":null,"code":"import { __decorate, __metadata, __param } from 'tslib';\nimport { InjectionToken, Optional, Host, SkipSelf, Inject, Input, HostBinding, Directive, EventEmitter, Output, HostListener, Component, ɵɵdefineInjectable, ɵɵinject, Injectable, ElementRef, ContentChildren, QueryList, ContentChild, NgModule } from '@angular/core';\nimport { ControlContainer, FormGroup, FormArray, FormControl, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\nfunction MessagesComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 1);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.className);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(message_r1);\n  }\n}\nconst _c0 = [\"class\", \"form-group\"];\nfunction FormGroupComponent_bfv_messages_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"bfv-messages\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"messages\", ctx_r0.messages);\n  }\n}\nconst _c1 = [\"*\"];\nvar BootstrapVersion = /*#__PURE__*/(() => {\n  (function (BootstrapVersion) {\n    BootstrapVersion[BootstrapVersion[\"Three\"] = 0] = \"Three\";\n    BootstrapVersion[BootstrapVersion[\"Four\"] = 1] = \"Four\";\n  })(BootstrapVersion || (BootstrapVersion = {}));\n  return BootstrapVersion;\n})();\nconst CUSTOM_ERROR_MESSAGES = new InjectionToken(\"ng-bootstrap-form-validation custom error messages\");\nconst BOOTSTRAP_VERSION = new InjectionToken(\"ng-bootstrap-form-validation module options\");\nfunction controlPath(name, parent) {\n  // tslint:disable-next-line:no-non-null-assertion\n  return [...parent.path, name];\n}\nlet FormControlDirective = /*#__PURE__*/(() => {\n  let FormControlDirective = class FormControlDirective {\n    constructor(\n    // this value might be null, but we union type it as such until\n    // this issue is resolved: https://github.com/angular/angular/issues/25544\n    parent, bootstrapVersion) {\n      this.parent = parent;\n      this.bootstrapVersion = bootstrapVersion;\n    }\n    get validClass() {\n      if (!this.control) {\n        return false;\n      }\n      return this.bootstrapFour && this.control.valid && (this.control.touched || this.control.dirty);\n    }\n    get invalidClass() {\n      if (!this.control) {\n        return false;\n      }\n      return this.bootstrapFour && this.control.invalid && this.control.touched && this.control.dirty;\n    }\n    get path() {\n      return controlPath(this.formControlName, this.parent);\n    }\n    get control() {\n      return this.formDirective && this.formDirective.getControl(this);\n    }\n    get formDirective() {\n      return this.parent ? this.parent.formDirective : null;\n    }\n    get bootstrapFour() {\n      return this.bootstrapVersion === BootstrapVersion.Four;\n    }\n  };\n  FormControlDirective.ɵfac = function FormControlDirective_Factory(t) {\n    return new (t || FormControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(BOOTSTRAP_VERSION));\n  };\n  FormControlDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FormControlDirective,\n    selectors: [[\"\", 8, \"form-control\"], [\"\", 8, \"form-check-input\"], [\"\", 8, \"custom-control-input\"]],\n    hostVars: 4,\n    hostBindings: function FormControlDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"is-valid\", ctx.validClass)(\"is-invalid\", ctx.invalidClass);\n      }\n    },\n    inputs: {\n      formControlName: \"formControlName\",\n      formControl: \"formControl\"\n    }\n  });\n  __decorate([Input(), __metadata(\"design:type\", String)], FormControlDirective.prototype, \"formControlName\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", String)], FormControlDirective.prototype, \"formControl\", void 0);\n  __decorate([HostBinding(\"class.is-valid\"), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], FormControlDirective.prototype, \"validClass\", null);\n  __decorate([HostBinding(\"class.is-invalid\"), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], FormControlDirective.prototype, \"invalidClass\", null);\n  FormControlDirective = __decorate([__param(0, Optional()), __param(0, Host()), __param(0, SkipSelf()), __param(1, Inject(BOOTSTRAP_VERSION)), __metadata(\"design:paramtypes\", [ControlContainer, Number])], FormControlDirective);\n  return FormControlDirective;\n})();\nlet FormValidationDirective = /*#__PURE__*/(() => {\n  let FormValidationDirective = class FormValidationDirective {\n    constructor() {\n      this.validSubmit = new EventEmitter();\n    }\n    onSubmit() {\n      this.markAsTouchedAndDirty(this.formGroup);\n      if (this.formGroup.valid) {\n        this.validSubmit.emit(this.formGroup.value);\n      }\n    }\n    markAsTouchedAndDirty(control) {\n      if (control instanceof FormGroup) {\n        Object.keys(control.controls).forEach(key => this.markAsTouchedAndDirty(control.controls[key]));\n      } else if (control instanceof FormArray) {\n        control.controls.forEach(c => this.markAsTouchedAndDirty(c));\n      } else if (control instanceof FormControl && control.enabled) {\n        control.markAsDirty();\n        control.markAsTouched();\n        control.updateValueAndValidity();\n      }\n    }\n  };\n  FormValidationDirective.ɵfac = function FormValidationDirective_Factory(t) {\n    return new (t || FormValidationDirective)();\n  };\n  FormValidationDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FormValidationDirective,\n    selectors: [[\"\", \"formGroup\", \"\"]],\n    hostBindings: function FormValidationDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function FormValidationDirective_submit_HostBindingHandler() {\n          return ctx.onSubmit();\n        });\n      }\n    },\n    inputs: {\n      formGroup: \"formGroup\"\n    },\n    outputs: {\n      validSubmit: \"validSubmit\"\n    }\n  });\n  __decorate([Input(), __metadata(\"design:type\", FormGroup)], FormValidationDirective.prototype, \"formGroup\", void 0);\n  __decorate([Output(), __metadata(\"design:type\", Object)], FormValidationDirective.prototype, \"validSubmit\", void 0);\n  __decorate([HostListener(\"submit\"), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], FormValidationDirective.prototype, \"onSubmit\", null);\n  return FormValidationDirective;\n})();\nlet MessagesComponent = /*#__PURE__*/(() => {\n  let MessagesComponent = class MessagesComponent {\n    constructor(bootstrapVersion) {\n      this.bootstrapVersion = bootstrapVersion;\n      this.messages = () => [];\n    }\n    get className() {\n      switch (this.bootstrapVersion) {\n        case BootstrapVersion.Three:\n          return \"help-block\";\n        case BootstrapVersion.Four:\n          return \"invalid-feedback\";\n      }\n    }\n  };\n  MessagesComponent.ɵfac = function MessagesComponent_Factory(t) {\n    return new (t || MessagesComponent)(ɵngcc0.ɵɵdirectiveInject(BOOTSTRAP_VERSION));\n  };\n  MessagesComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MessagesComponent,\n    selectors: [[\"bfv-messages\"]],\n    inputs: {\n      messages: \"messages\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"]],\n    template: function MessagesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MessagesComponent_span_0_Template, 2, 2, \"span\", 0);\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.messages());\n      }\n    },\n    directives: [ɵngcc2.NgForOf, ɵngcc2.NgClass],\n    styles: [\".invalid-feedback[_ngcontent-%COMP%], .valid-feedback[_ngcontent-%COMP%] {\\n        display: block;\\n      }\"]\n  });\n  __decorate([Input(), __metadata(\"design:type\", Object)], MessagesComponent.prototype, \"messages\", void 0);\n  MessagesComponent = __decorate([__param(0, Inject(BOOTSTRAP_VERSION)), __metadata(\"design:paramtypes\", [Number])], MessagesComponent);\n  return MessagesComponent;\n})();\nconst ɵ0 = label => `${label} is required`,\n  ɵ1 = label => `${label} is invalid`,\n  ɵ2 = (label, error) => `${label} must be at least ${error.requiredLength} characters`,\n  ɵ3 = (label, error) => `${label} must be no longer than ${error.requiredLength} characters`,\n  ɵ4 = (label, error) => `${label} is required`,\n  ɵ5 = (label, error) => `Invalid email address`,\n  ɵ6 = (label, error) => `${label} must be no greater than ${error.max}`,\n  ɵ7 = (label, error) => `${label} must be no less than ${error.min}`;\nconst DEFAULT_ERRORS = [{\n  error: \"required\",\n  format: ɵ0\n}, {\n  error: \"pattern\",\n  format: ɵ1\n}, {\n  error: \"minlength\",\n  format: ɵ2\n}, {\n  error: \"maxlength\",\n  format: ɵ3\n}, {\n  error: \"requiredTrue\",\n  format: ɵ4\n}, {\n  error: \"email\",\n  format: ɵ5\n}, {\n  error: \"max\",\n  format: ɵ6\n}, {\n  error: \"min\",\n  format: ɵ7\n}];\nlet ErrorMessageService = /*#__PURE__*/(() => {\n  let ErrorMessageService = class ErrorMessageService {\n    constructor(customErrorMessages) {\n      this.customErrorMessages = customErrorMessages;\n      this.defaultErrors = DEFAULT_ERRORS;\n      this.errorMessages = customErrorMessages.reduce((acc, cur) => acc.concat(cur), this.defaultErrors);\n    }\n  };\n  ErrorMessageService.ɵfac = function ErrorMessageService_Factory(t) {\n    return new (t || ErrorMessageService)(ɵngcc0.ɵɵinject(CUSTOM_ERROR_MESSAGES));\n  };\n  ErrorMessageService.ɵprov = ɵɵdefineInjectable({\n    factory: function ErrorMessageService_Factory() {\n      return new ErrorMessageService(ɵɵinject(CUSTOM_ERROR_MESSAGES));\n    },\n    token: ErrorMessageService,\n    providedIn: \"root\"\n  });\n  ErrorMessageService = __decorate([__param(0, Inject(CUSTOM_ERROR_MESSAGES)), __metadata(\"design:paramtypes\", [Array])], ErrorMessageService);\n  return ErrorMessageService;\n})();\nlet FormGroupComponent = /*#__PURE__*/(() => {\n  let FormGroupComponent = class FormGroupComponent {\n    constructor(elRef, errorMessageService) {\n      this.elRef = elRef;\n      this.errorMessageService = errorMessageService;\n      this.customErrorMessages = [];\n      this.validationDisabled = false;\n      this.messages = () => this.getMessages();\n    }\n    get hasErrors() {\n      return this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) && !this.validationDisabled;\n    }\n    get hasSuccess() {\n      return !this.FormControlNames.some(c => !c.valid) && this.FormControlNames.some(c => c.dirty && c.touched) && !this.validationDisabled;\n    }\n    ngAfterContentInit() {\n      if (this.messagesBlock) {\n        this.messagesBlock.messages = this.messages;\n      }\n    }\n    ngOnInit() {\n      this.errorMessages = this.errorMessageService.errorMessages.concat(this.customErrorMessages).reverse();\n    }\n    get label() {\n      const label = this.elRef.nativeElement.querySelector(\"label\");\n      return label && label.textContent ? label.textContent.trim() : \"This field\";\n    }\n    get isDirtyAndTouched() {\n      return this.FormControlNames.some(c => c.dirty && c.touched);\n    }\n    getMessages() {\n      const messages = [];\n      if (!this.isDirtyAndTouched || this.validationDisabled) {\n        return messages;\n      }\n      const names = this.FormControlNames.map(f => f.name);\n      this.FormControlNames.filter((c, i) => !c.valid && !!c.errors &&\n      // filter out FormControlNames that share the same name - usually for radio buttons\n      names.indexOf(c.name) === i).forEach(control => {\n        Object.keys(control.errors).forEach(key => {\n          const error = this.errorMessages.find(err => err.error === key);\n          if (!error) {\n            return;\n          }\n          messages.push(error.format(this.label, control.errors[key]));\n        });\n      });\n      return messages;\n    }\n  };\n  FormGroupComponent.ɵfac = function FormGroupComponent_Factory(t) {\n    return new (t || FormGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ErrorMessageService));\n  };\n  FormGroupComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FormGroupComponent,\n    selectors: [[\"\", 8, \"form-group\"]],\n    contentQueries: function FormGroupComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MessagesComponent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, FormControlName, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.messagesBlock = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.FormControlNames = _t);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function FormGroupComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"has-error\", ctx.hasErrors)(\"has-success\", ctx.hasSuccess);\n      }\n    },\n    inputs: {\n      customErrorMessages: \"customErrorMessages\",\n      validationDisabled: \"validationDisabled\"\n    },\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"messages\", 4, \"ngIf\"], [3, \"messages\"]],\n    template: function FormGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, FormGroupComponent_bfv_messages_1_Template, 1, 1, \"bfv-messages\", 0);\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.messagesBlock);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MessagesComponent],\n    encapsulation: 2\n  });\n  __decorate([ContentChildren(FormControlName, {\n    descendants: true\n  }), __metadata(\"design:type\", QueryList)], FormGroupComponent.prototype, \"FormControlNames\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", Array)], FormGroupComponent.prototype, \"customErrorMessages\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", Object)], FormGroupComponent.prototype, \"validationDisabled\", void 0);\n  __decorate([HostBinding(\"class.has-error\"), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], FormGroupComponent.prototype, \"hasErrors\", null);\n  __decorate([HostBinding(\"class.has-success\"), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], FormGroupComponent.prototype, \"hasSuccess\", null);\n  __decorate([ContentChild(MessagesComponent), __metadata(\"design:type\", MessagesComponent)], FormGroupComponent.prototype, \"messagesBlock\", void 0);\n  FormGroupComponent = __decorate([__metadata(\"design:paramtypes\", [ElementRef, ErrorMessageService])], FormGroupComponent);\n  return FormGroupComponent;\n})();\nvar NgBootstrapFormValidationModule_1;\nlet NgBootstrapFormValidationModule = NgBootstrapFormValidationModule_1 = class NgBootstrapFormValidationModule {\n  static forRoot(userOptions = {\n    bootstrapVersion: BootstrapVersion.Four\n  }) {\n    return {\n      ngModule: NgBootstrapFormValidationModule_1,\n      providers: [{\n        provide: CUSTOM_ERROR_MESSAGES,\n        useValue: userOptions.customErrorMessages || [],\n        multi: true\n      }, {\n        provide: BOOTSTRAP_VERSION,\n        useValue: userOptions.bootstrapVersion\n      }, ErrorMessageService]\n    };\n  }\n};\nNgBootstrapFormValidationModule.ɵfac = function NgBootstrapFormValidationModule_Factory(t) {\n  return new (t || NgBootstrapFormValidationModule)();\n};\nNgBootstrapFormValidationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgBootstrapFormValidationModule\n});\nNgBootstrapFormValidationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBootstrapFormValidationModule, {\n    declarations: function () {\n      return [FormValidationDirective, FormGroupComponent, MessagesComponent, FormControlDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [FormValidationDirective, FormGroupComponent, MessagesComponent, FormControlDirective];\n    }\n  });\n})();\n\n/*\n * Public API Surface of ng-bootstrap-form-validation\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BOOTSTRAP_VERSION, BootstrapVersion, CUSTOM_ERROR_MESSAGES, FormControlDirective, FormGroupComponent, FormValidationDirective, MessagesComponent, NgBootstrapFormValidationModule, ErrorMessageService as ɵa };\n\n//# sourceMappingURL=ng-bootstrap-form-validation.js.map","map":null,"metadata":{},"sourceType":"module"}