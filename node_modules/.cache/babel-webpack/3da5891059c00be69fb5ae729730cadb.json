{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FuelController = /*#__PURE__*/(() => {\n  class FuelController {\n    constructor(http) {\n      this.http = http;\n    }\n    createFuel(orgID, value) {\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${orgID}/custom-fuels`, value);\n    }\n    getFuelByID(orgID, fuelID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${orgID}/custom-fuels/${fuelID}`);\n    }\n    getFuelByPage(pageNo, pazeSize, sortBy, orderBy, orgID, searchValue, searchFlag) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      if (searchFlag) {\n        params = params.append('search', searchValue);\n      }\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${orgID}/custom-fuels/page`, {\n        params: params\n      });\n    }\n    updateFuel(orgID, fuelID, value) {\n      return this.http.patch(`${environment.COMMON_API_URL}organizations/${orgID}/custom-fuels/${fuelID}`, value);\n    }\n    deleteFuel(orgID, fuelID) {\n      return this.http.delete(`${environment.COMMON_API_URL}organizations/${orgID}/custom-fuels/${fuelID}`);\n    }\n    fuelBulkUpload(orgId, file) {\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${orgId}/custom-fuels/bulk-upload`, file);\n    }\n  }\n  FuelController.ɵfac = function FuelController_Factory(t) {\n    return new (t || FuelController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  FuelController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuelController,\n    factory: FuelController.ɵfac,\n    providedIn: 'root'\n  });\n  return FuelController;\n})();","map":null,"metadata":{},"sourceType":"module"}