{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators, FormControl } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { SupplierTypeKeyIDEnum } from '@netzero/enum/supplier.enum';\nimport { MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@netzero/service/supplier.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@carbon/service/waste-generated.service\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"ngx-mat-select-search\";\nimport * as i12 from \"@angular/material/input\";\nfunction CreateComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 7);\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Activity Form Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n  }\n}\nfunction CreateComponent_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const supplier_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", supplier_r6[\"supplierID\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", supplier_r6.supplierName, \" \");\n  }\n}\nfunction CreateComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please choose a supplier\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"span\", 20);\n    i0.ɵɵtext(2, \" info \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 21);\n    i0.ɵɵtext(4, \" You have not created any supplier. Please create one \");\n    i0.ɵɵelementStart(5, \"a\", 22);\n    i0.ɵɵtext(6, \"here\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \". \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"routerLink\", \"/source/supplier/page\");\n  }\n}\nfunction CreateComponent_mat_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const waste_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", waste_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", waste_r7.name, \" \");\n  }\n}\nfunction CreateComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please choose at least one waste type \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let CreateComponent = /*#__PURE__*/(() => {\n  class CreateComponent {\n    constructor(supplierService, formBuilder, storageService, activatedRoute, wasteGeneratedService) {\n      this.supplierService = supplierService;\n      this.formBuilder = formBuilder;\n      this.storageService = storageService;\n      this.activatedRoute = activatedRoute;\n      this.wasteGeneratedService = wasteGeneratedService;\n      this.dataSource = new EventEmitter();\n      this.formDataEvent = new EventEmitter();\n      this.isEqual = new EventEmitter();\n      this.validity = new EventEmitter();\n      this.origin = 'default';\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.SupplierTypeKeyIDEnum = SupplierTypeKeyIDEnum;\n      this.wasteTypeFc = new FormControl();\n      this.supplierList = [];\n      this.wasteTypeList = [];\n      this.noSuppliers = false;\n      this.wasteTypeSerarch = new MatSelectSearchService(['name']);\n      this.isValid = () => {\n        return !this.activityConfigFG.invalid;\n      };\n      this.errorHandling = (control, error) => {\n        return this.activityConfigFG.get(control).hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams['activityID']) {\n          this.activityID = queryParams['activityID'];\n        }\n        if (queryParams['origin']) {\n          this.origin = queryParams['origin'];\n        }\n      });\n      this.activityKeyID = this.activatedRoute.snapshot.data['activityKeyID'];\n      this.getSupplierByType();\n      this.activityConfigInit();\n      this.getAllWasteTypes();\n    }\n    activityConfigInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: this.activityID,\n          activityKeyID: this.activityKeyID,\n          configName: [, Validators.required],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          wasteTypes: [[], Validators.required]\n        }),\n        activityConfigSource: this.formBuilder.group({\n          sourceID: [, Validators.required],\n          sourceTypeID: null\n        })\n      });\n      if (this.origin == 'ad-hoc') {\n        this.configNameAC.disable();\n      }\n    }\n    getSupplierByType() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.supplierList = yield this.supplierService.getSupplierByType(this.currentOrgID, SupplierTypeKeyIDEnum.WASTE_DISPOSAL_AND_TREATMENT_SUPPLIER);\n        if (this.supplierList) {\n          this.activityConfigSourceAC.get('sourceTypeID').patchValue(this.supplierList[0]['sourceTypeID']);\n        }\n      });\n    }\n    getAllWasteTypes() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.wasteTypeList = yield this.wasteGeneratedService.getAllWasteTypes(this.activityID);\n        this.wasteTypeSerarch.entityArr = this.wasteTypeList;\n        this.wasteTypeSerarch.createSubscription();\n      });\n    }\n    emitFormData() {\n      if (this.formGroup.valid) {\n        this.formDataEvent.emit(this.formGroup.value);\n      } else {\n        this.formGroup.markAllAsTouched();\n      }\n    }\n    isValidForm() {\n      if (this.activityConfigFG.invalid) {\n        this.activityConfigFG.markAllAsTouched();\n        return false;\n      }\n      this.configuration = {};\n      this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.getRawValue()));\n      this.configuration['activityConfigSource']['sourceID'] = [this.configuration['activityConfigSource']['sourceID']];\n      // this.configuration['activityConfigSource']['sourceTypeID'] = this.supplierList[0].sourceTypeID;\n      return true;\n    }\n    activityConfigValidity() {\n      this.activityConfigFG.valueChanges.subscribe(() => this.validity.emit(!this.activityConfigFG.invalid));\n    }\n    readOnlyForm() {\n      this.activityConfigFG.disable();\n    }\n    patchConfiguration(configuration) {\n      this.activityConfigFG.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n      });\n      let activityConfig = configuration['activityConfig'] != null ? configuration['activityConfig'] : null;\n      let activityConfigData = configuration['activityConfigData'];\n      let activityConfigSource = configuration['activityConfigSource'];\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig['configName']\n        });\n      } else {\n        this.readOnlyForm();\n      }\n      this.activityConfigDataAC.patchValue({\n        wasteTypes: activityConfigData['wasteTypes']\n      });\n      this.activityConfigSourceAC.patchValue({\n        sourceID: activityConfigSource['sourceID'][0],\n        sourceTypeID: activityConfigSource['sourceTypeID']\n      });\n      this.isEqual.next(true);\n      this.initialObject = this.activityConfigFG.value;\n    }\n    get getConfigJson() {\n      this.configuration = {};\n      this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.value));\n      this.configuration['activityConfigSource']['sourceID'] = [this.configuration['activityConfigSource']['sourceID']];\n      return this.configuration;\n    }\n    get activityConfigAC() {\n      return this.activityConfigFG.get('activityConfig');\n    }\n    get activityConfigSourceAC() {\n      return this.activityConfigFG.get('activityConfigSource');\n    }\n    get configNameAC() {\n      return this.activityConfigAC.get('configName');\n    }\n    get activityConfigDataAC() {\n      return this.activityConfigFG.get('activityConfigData');\n    }\n  }\n  CreateComponent.ɵfac = function CreateComponent_Factory(t) {\n    return new (t || CreateComponent)(i0.ɵɵdirectiveInject(i1.SupplierService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i5.WasteGeneratedService));\n  };\n  CreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateComponent,\n    selectors: [[\"pff-waste-generation\"]],\n    outputs: {\n      dataSource: \"dataSource\",\n      formDataEvent: \"formDataEvent\"\n    },\n    decls: 25,\n    vars: 12,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\", \"ngSubmit\"], [\"formGroupName\", \"activityConfig\", \"class\", \"col-sm-8\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-sm-8\"], [\"formGroupName\", \"activityConfigSource\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"sourceID\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"class\", \"col-sm-4 centerAlignVertical mb-3\", 4, \"ngIf\"], [\"formGroupName\", \"activityConfigData\", 1, \"col-sm-8\"], [\"formControlName\", \"wasteTypes\", \"multiple\", \"\"], [\"placeholderLabel\", \"Search by name\", \"noEntriesFoundLabel\", \"No matching name found.\", 3, \"formControl\"], [\"formGroupName\", \"activityConfig\", 1, \"col-sm-8\"], [\"matInput\", \"\", \"placeholder\", \"Activity Form Name\", \"formControlName\", \"configName\"], [3, \"value\"], [1, \"col-sm-4\", \"centerAlignVertical\", \"mb-3\"], [1, \"material-symbols-outlined\"], [1, \"ms-2\"], [\"target\", \"_blank\", 3, \"routerLink\"]],\n    template: function CreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.emitFormData();\n        });\n        i0.ɵɵtemplate(4, CreateComponent_div_4_Template, 5, 1, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"mat-form-field\", 7);\n        i0.ɵɵelementStart(9, \"mat-label\", 8);\n        i0.ɵɵtext(10, \"Supplier Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-select\", 9);\n        i0.ɵɵtemplate(12, CreateComponent_mat_option_12_Template, 2, 2, \"mat-option\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, CreateComponent_mat_error_13_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, CreateComponent_div_14_Template, 8, 1, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 13);\n        i0.ɵɵelementStart(16, \"mat-form-field\", 7);\n        i0.ɵɵelementStart(17, \"mat-label\", 8);\n        i0.ɵɵtext(18, \" Waste Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"mat-select\", 14);\n        i0.ɵɵelementStart(20, \"mat-option\");\n        i0.ɵɵelement(21, \"ngx-mat-select-search\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, CreateComponent_mat_option_22_Template, 2, 2, \"mat-option\", 10);\n        i0.ɵɵpipe(23, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, CreateComponent_mat_error_24_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == \"pff\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.supplierList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"activityConfigSource.sourceID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.supplierList.length);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.wasteTypeSerarch.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(23, 10, ctx.wasteTypeSerarch.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"activityConfigData.wasteTypes\", \"required\"));\n      }\n    },\n    directives: [i6.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i7.NgIf, i2.FormGroupName, i8.MatFormField, i8.MatLabel, i9.MatSelect, i2.NgControlStatus, i2.FormControlName, i7.NgForOf, i10.MatOption, i11.MatSelectSearchComponent, i2.FormControlDirective, i12.MatInput, i2.DefaultValueAccessor, i8.MatError, i4.RouterLinkWithHref],\n    pipes: [i7.AsyncPipe],\n    styles: [\".error-message[_ngcontent-%COMP%]{color:red;font-size:10px}\"]\n  });\n  return CreateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}