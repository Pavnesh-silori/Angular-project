{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { isEqual } from 'lodash';\nimport * as moment from 'moment-timezone';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport { ButtonTooltipEnum, COMMON_CONSTANT, DialogEnum, FormAction, InvalidForm, MATERIAL_CONSTANT, MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@netzero/controller/equipment.controller\";\nimport * as i3 from \"@carbon/service/gas.service\";\nimport * as i4 from \"@netzero/service/equipment.service\";\nimport * as i5 from \"@library/unit-service\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@library/tsc-common\";\nimport * as i8 from \"@angular/material/dialog\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/material/tooltip\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/input\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/material/select\";\nimport * as i15 from \"ngx-mat-select-search\";\nimport * as i16 from \"@angular/material/datepicker\";\nconst _c0 = [\"header\"];\nconst _c1 = [\"footer\"];\nconst _c2 = [\"body\"];\nfunction CreateUpdateComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Enter an equipment group name. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_option_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 39);\n    i0.ɵɵelementStart(1, \"span\", 40);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const equipment_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", equipment_r11.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", equipment_r11.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_option_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 39);\n    i0.ɵɵelementStart(1, \"span\", 40);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const gas_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", gas_r12.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", gas_r12.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Date is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Enter total quantity of gas in this equipment group \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_65_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Total quantity can not be negative \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_option_72_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 39);\n    i0.ɵɵelementStart(1, \"span\", 40);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r13.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", unit_r13.name, \" -- \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r13.uomCode);\n  }\n}\nconst _c3 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\n// /tsc-library\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(formBuilder, equipmentController, gasService, equipmentService, unitService, toastrService, tSCCommonService, renderer, dialogRef, data) {\n      this.formBuilder = formBuilder;\n      this.equipmentController = equipmentController;\n      this.gasService = gasService;\n      this.equipmentService = equipmentService;\n      this.unitService = unitService;\n      this.toastrService = toastrService;\n      this.tSCCommonService = tSCCommonService;\n      this.renderer = renderer;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.ButtonTooltipEnum = ButtonTooltipEnum;\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.FormAction = FormAction;\n      this.title = 'Create';\n      this.isCreate = false;\n      this.isEqual = false;\n      this.isReadOnly = false;\n      this.maxLength = 200;\n      this.gasSearchUtil = new MatSelectSearchService(['name']);\n      this.unitSearchUtil = new MatSelectSearchService(['name']);\n      this.charactersRemainingFn = fg => {\n        let description = fg.get('description').value;\n        if (description) return this.maxLength - description.length;else return this.maxLength;\n      };\n      this.errorHandling = (control, error) => {\n        return this.equipmentFG.get(control).hasError(error);\n      };\n      this.action = this.data['action'];\n      this.currentOrgID = this.data['currentOrgID'];\n      this.dialogRef.disableClose = true;\n    }\n    ngOnInit() {\n      this.getGas();\n      this.getUnit();\n      this.equipementFGInit();\n      this.getEquipment();\n      if (this.action == FormAction.CREATE) {\n        this.isCreate = true;\n      } else {\n        this.isCreate = false;\n        this.isReadOnly = true;\n        this.title = \"Update\";\n        this.groupID = this.data['group'];\n        this.getEquipmentByGroupID();\n      }\n    }\n    ngAfterViewInit() {\n      this.heightHandler();\n      this.equipmentFG.valueChanges.subscribe(() => {\n        this.isEqual = isEqual(this.initialObject, this.equipmentFG.value);\n      });\n    }\n    heightHandler() {\n      const headerHeight = this.header.nativeElement.offsetHeight;\n      const footerHeight = this.footer.nativeElement.offsetHeight;\n      const offsetHeight = 'calc(90vh - ' + (headerHeight + footerHeight + 24) + 'px)';\n      this.renderer.setStyle(this.body.nativeElement, 'height', offsetHeight);\n      this.renderer.setStyle(this.body.nativeElement, 'max-height', offsetHeight);\n    }\n    equipementFGInit() {\n      this.equipmentFG = this.formBuilder.group({\n        name: [, Validators.required],\n        description: ['', [Validators.maxLength(100)]],\n        equipmentTypeID: [, Validators.required],\n        gasID: [, Validators.required],\n        totalCapacity: [, Validators.required],\n        totalCapacityUnitID: [, Validators.required],\n        initialDate: [, Validators.required]\n      });\n    }\n    formatDate(control) {\n      let date = moment(this.equipmentFG.controls[control].value).format(\"YYYY-MM-DD\");\n      this.equipmentFG.controls[control].patchValue(date);\n    }\n    getEquipment() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.equipmentList = yield this.equipmentService.getEquipment();\n      });\n    }\n    getGas() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.gasList = yield this.gasService.getGas();\n        // ngx mat select search\n        this.gasSearchUtil.entityArr = this.gasList;\n        this.gasSearchUtil.createSubscription();\n      });\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.unitList = yield this.unitService.getUnit([`type:${UnitTypeKeyID.MASS}`]);\n        // ngx mat select search\n        this.unitSearchUtil.entityArr = this.unitList;\n        this.unitSearchUtil.createSubscription();\n      });\n    }\n    createUpdate() {\n      if (this.action == FormAction.CREATE) {\n        this.createEquipmentGroup();\n      } else {\n        this.updateEquipmentGroup();\n      }\n    }\n    createEquipmentGroup() {\n      if (this.equipmentFG.invalid) {\n        this.equipmentFG.markAllAsTouched();\n        this.toastrService.error(InvalidForm.INVALID_FORM_MESSAGE);\n        return [];\n      }\n      this.equipmentController.createEquipment(this.equipmentFG.value, this.currentOrgID).subscribe(createRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in createEquipment -', error);\n      });\n    }\n    updateEquipmentGroup() {\n      if (this.equipmentFG.invalid) {\n        console.log('invalid form -', this.equipmentFG.value);\n        this.toastrService.error(InvalidForm.INVALID_FORM_MESSAGE);\n        return [];\n      }\n      this.equipmentController.updateEquipment(this.currentOrgID, this.groupID, this.equipmentFG.value).subscribe(updateRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in updateEquipment -', error);\n      });\n    }\n    getEquipmentByGroupID() {\n      this.equipmentController.getEquipmentByGroupID(this.currentOrgID, this.groupID).subscribe(response => {\n        this.equipment = response;\n        this.patchEquipment(this.equipment);\n      }, error => {\n        console.log('error in getEquipment -', error);\n      });\n    }\n    patchEquipment(equipment) {\n      this.equipmentFG.patchValue({\n        name: equipment['name'],\n        description: equipment['description'],\n        equipmentTypeID: equipment['equipmentTypeID'],\n        gasID: equipment['gasID'],\n        totalCapacity: equipment['totalCapacity'],\n        totalCapacityUnitID: equipment['totalCapacityUnitID'],\n        initialDate: equipment['initialDate']\n      });\n      this.initialObject = this.equipmentFG.value;\n      this.isEqual = true;\n    }\n    // Datepicker calender open/close\n    openDatepicker(datepicker) {\n      if (!datepicker.opened) {\n        datepicker.open();\n      }\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EquipmentController), i0.ɵɵdirectiveInject(i3.GasService), i0.ɵɵdirectiveInject(i4.EquipmentService), i0.ɵɵdirectiveInject(i5.UnitService), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.TSCCommonService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i8.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create-update\"]],\n    viewQuery: function CreateUpdateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.header = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.body = _t.first);\n      }\n    },\n    decls: 82,\n    vars: 41,\n    consts: [[1, \"headerContainer\", \"p-0\"], [\"header\", \"\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"headerRightContainer\"], [1, \"headerRightContainerInner\"], [\"matRipple\", \"\", \"matTooltipPosition\", \"below\", \"mat-dialog-close\", \"\", 1, \"btn\", \"btn-sm\", \"centerAlign\", \"py-1\", \"iconBtn\", 3, \"matRippleCentered\", \"matTooltip\"], [1, \"material-symbols-outlined\"], [1, \"mat-typography\", \"customScrollBar\", \"pt-2\"], [\"body\", \"\"], [3, \"formGroup\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"Eg. R-22 gas air conditioners\", \"formControlName\", \"name\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"matInput\", \"\", \"matTextareaAutosize\", \"\", \"matAutosizeMinRows\", \"2\", \"matAutosizeMaxRows\", \"10\", \"formControlName\", \"description\", 3, \"maxlength\"], [1, \"row\"], [\"formControlName\", \"equipmentTypeID\", \"required\", \"\", 3, \"disabled\"], [\"disabled\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"gasID\", \"required\", \"\", 3, \"disabled\"], [\"placeholderLabel\", \"Search by gas name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [1, \"col-sm-10\"], [1, \"matFieldWidth100\", 3, \"appearance\", \"click\", \"keydown.enter\", \"keydown.arrowdown\"], [\"matInput\", \"\", \"formControlName\", \"initialDate\", \"required\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"dateInput\"], [\"matSuffix\", \"\", 3, \"for\"], [\"disabled\", \"false\"], [\"date\", \"\"], [1, \"col-sm-2\", \"pt-3\"], [\"matsuffix\", \"\", \"matTooltipPosition\", \"above\", \"matTooltip\", \"Date from which you want to account emissions for this equipment group\", 1, \"material-symbols-outlined\", \"fs-4\", \"cursorPointer\"], [3, \"appearance\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"placeholder\", \"Total gas capacity\", \"formControlName\", \"totalCapacity\", \"required\", \"\", 1, \"formPlaceholder\"], [1, \"ms-2\", 3, \"appearance\"], [\"formControlName\", \"totalCapacityUnitID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by unit name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [1, \"tscDialogFooter\"], [\"footer\", \"\"], [\"matRipple\", \"\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"btn-sm\", \"btn-success\", 3, \"ngClass\", \"matRippleCentered\", \"click\"], [\"mat-dialog-close\", \"\", \"matRipple\", \"\", 1, \"btn\", \"btn-sm\", \"btn-secondary\", \"me-2\", 3, \"matRippleCentered\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r14 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵelementStart(8, \"span\", 7);\n        i0.ɵɵtext(9, \" close \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-dialog-content\", 8, 9);\n        i0.ɵɵelementStart(12, \"form\", 10);\n        i0.ɵɵelementStart(13, \"mat-form-field\", 11);\n        i0.ɵɵelementStart(14, \"mat-label\", 12);\n        i0.ɵɵtext(15, \" Group name \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 13);\n        i0.ɵɵtemplate(17, CreateUpdateComponent_mat_error_17_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-form-field\", 11);\n        i0.ɵɵelementStart(19, \"mat-label\", 12);\n        i0.ɵɵtext(20, \" Description \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"textarea\", 15);\n        i0.ɵɵelementStart(22, \"mat-hint\");\n        i0.ɵɵtext(23, \"Total number of character remaining: \");\n        i0.ɵɵelementStart(24, \"span\");\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 16);\n        i0.ɵɵelementStart(28, \"mat-form-field\", 11);\n        i0.ɵɵelementStart(29, \"mat-label\", 12);\n        i0.ɵɵtext(30, \"IPCC equipment type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"mat-select\", 17);\n        i0.ɵɵelementStart(32, \"mat-option\", 18);\n        i0.ɵɵtext(33, \"Select equipment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(34, CreateUpdateComponent_mat_option_34_Template, 3, 2, \"mat-option\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"mat-error\");\n        i0.ɵɵtext(36, \" Select an IPCC equipment type. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-form-field\", 11);\n        i0.ɵɵelementStart(38, \"mat-label\", 12);\n        i0.ɵɵtext(39, \"Gas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"mat-select\", 20);\n        i0.ɵɵelementStart(41, \"mat-option\");\n        i0.ɵɵelement(42, \"ngx-mat-select-search\", 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(43, CreateUpdateComponent_mat_option_43_Template, 3, 2, \"mat-option\", 19);\n        i0.ɵɵpipe(44, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"mat-error\");\n        i0.ɵɵtext(46, \" Select a gas that is used across all equipments in this equipment group. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"div\", 16);\n        i0.ɵɵelementStart(48, \"div\", 22);\n        i0.ɵɵelementStart(49, \"mat-form-field\", 23);\n        i0.ɵɵlistener(\"click\", function CreateUpdateComponent_Template_mat_form_field_click_49_listener() {\n          i0.ɵɵrestoreView(_r14);\n          const _r5 = i0.ɵɵreference(55);\n          return ctx.openDatepicker(_r5);\n        })(\"keydown.enter\", function CreateUpdateComponent_Template_mat_form_field_keydown_enter_49_listener() {\n          i0.ɵɵrestoreView(_r14);\n          const _r5 = i0.ɵɵreference(55);\n          return ctx.openDatepicker(_r5);\n        })(\"keydown.arrowdown\", function CreateUpdateComponent_Template_mat_form_field_keydown_arrowdown_49_listener() {\n          i0.ɵɵrestoreView(_r14);\n          const _r5 = i0.ɵɵreference(55);\n          return ctx.openDatepicker(_r5);\n        });\n        i0.ɵɵelementStart(50, \"mat-label\", 12);\n        i0.ɵɵtext(51, \"Initial Date \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"input\", 24);\n        i0.ɵɵlistener(\"dateInput\", function CreateUpdateComponent_Template_input_dateInput_52_listener() {\n          return ctx.formatDate(\"initialDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(53, \"mat-datepicker-toggle\", 25);\n        i0.ɵɵelement(54, \"mat-datepicker\", 26, 27);\n        i0.ɵɵtemplate(56, CreateUpdateComponent_mat_error_56_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"div\", 28);\n        i0.ɵɵelementStart(58, \"span\", 29);\n        i0.ɵɵtext(59, \" info \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"mat-form-field\", 30);\n        i0.ɵɵelementStart(61, \"mat-label\", 12);\n        i0.ɵɵtext(62, \" Total quantity of gas \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(63, \"input\", 31);\n        i0.ɵɵtemplate(64, CreateUpdateComponent_mat_error_64_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵtemplate(65, CreateUpdateComponent_mat_error_65_Template, 2, 0, \"mat-error\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(66, \"mat-form-field\", 32);\n        i0.ɵɵelementStart(67, \"mat-label\", 12);\n        i0.ɵɵtext(68, \"Unit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(69, \"mat-select\", 33);\n        i0.ɵɵelementStart(70, \"mat-option\");\n        i0.ɵɵelement(71, \"ngx-mat-select-search\", 34);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(72, CreateUpdateComponent_mat_option_72_Template, 5, 3, \"mat-option\", 19);\n        i0.ɵɵpipe(73, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(74, \"mat-error\");\n        i0.ɵɵtext(75, \" Select unit \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(76, \"div\", 35, 36);\n        i0.ɵɵelementStart(78, \"button\", 37);\n        i0.ɵɵlistener(\"click\", function CreateUpdateComponent_Template_button_click_78_listener() {\n          return ctx.createUpdate();\n        });\n        i0.ɵɵtext(79);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(80, \"button\", 38);\n        i0.ɵɵtext(81, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r5 = i0.ɵɵreference(55);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", ctx.title, \" equipment group\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER)(\"matTooltip\", ctx.ButtonTooltipEnum.CLOSE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.equipmentFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"name\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"maxlength\", ctx.maxLength);\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassMap(ctx.charactersRemainingFn(ctx.equipmentFG) < 20 ? \"text-danger\" : \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.charactersRemainingFn(ctx.equipmentFG));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" /\", ctx.maxLength, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isReadOnly);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.equipmentList);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isReadOnly);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.gasSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(44, 35, ctx.gasSearchUtil.filteredEntities));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r5);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r5);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"initialDate\", \"required\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"totalCapacity\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"totalCapacity\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.unitSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(73, 37, ctx.unitSearchUtil.filteredEntities));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(39, _c3, ctx.isEqual && ctx.action == ctx.FormAction.UPDATE))(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.tSCCommonService.getButtonLabel(ctx.action), \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n      }\n    },\n    directives: [i9.MatRipple, i8.MatDialogClose, i10.MatTooltip, i8.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i11.MatFormField, i11.MatLabel, i12.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i13.NgIf, i12.MatTextareaAutosize, i1.MaxLengthValidator, i11.MatHint, i14.MatSelect, i9.MatOption, i13.NgForOf, i11.MatError, i15.MatSelectSearchComponent, i1.FormControlDirective, i16.MatDatepickerInput, i16.MatDatepickerToggle, i11.MatSuffix, i16.MatDatepicker, i1.MinValidator, i1.NumberValueAccessor, i13.NgClass],\n    pipes: [i13.AsyncPipe],\n    encapsulation: 2\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}