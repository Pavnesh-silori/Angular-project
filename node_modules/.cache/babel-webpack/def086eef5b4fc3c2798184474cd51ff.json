{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DaterangepickerDirective } from 'ngx-daterangepicker-material';\nimport * as moment from 'moment';\nimport { LookupCodeEnum } from '@report-framework/enum/lookup-code.enum';\nimport { environment } from 'src/environments/environment';\nimport { MaterialFormFieldAppearance, MessageAlertTypeEnum, MessageAlertIconEnum, DialogEnum, FormAction, ButtonLabelEnum, ButtonTooltipEnum, MATERIAL_CONSTANT, MatSelectSearchService, COMMON_CONSTANT } from '@library/tsc-common';\nimport { ToastrTitle, ToastrColor } from '@library/toastr-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@report-framework/controller/assignment.controller\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@library/user-service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@library/tsc-common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/tooltip\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"ngx-mat-select-search\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/material/slide-toggle\";\nimport * as i15 from \"@angular/material/input\";\nimport * as i16 from \"@library/date\";\nimport * as i17 from \"@angular/material/datepicker\";\nconst _c0 = [\"filterChild\"];\nconst _c1 = [\"startDatePicker\"];\nconst _c2 = [\"endDatePicker\"];\nconst _c3 = [\"header\"];\nconst _c4 = [\"footer\"];\nconst _c5 = [\"body\"];\nfunction SchedulerWorkflowComponent_mat_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", user_r8.name, \" \");\n  }\n}\nfunction SchedulerWorkflowComponent_mat_option_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", user_r9.name, \" \");\n  }\n}\nfunction SchedulerWorkflowComponent_mat_option_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const method_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", method_r10.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", method_r10.name, \" \");\n  }\n}\n// /tsc-library/\nconst reporting_framework_lookup_url = environment.REPORTING_FRAMEWORK_API_URL;\nexport let SchedulerWorkflowComponent = /*#__PURE__*/(() => {\n  class SchedulerWorkflowComponent {\n    constructor(data, dialogRef, renderer, assigneController, storageService, userService, formBuilder, toastrService, lookupService) {\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.renderer = renderer;\n      this.assigneController = assigneController;\n      this.storageService = storageService;\n      this.userService = userService;\n      this.formBuilder = formBuilder;\n      this.toastrService = toastrService;\n      this.lookupService = lookupService;\n      this.emitFilter = new EventEmitter();\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.messageAlertTypeEnum = MessageAlertTypeEnum;\n      this.messageAlertIconEnum = MessageAlertIconEnum;\n      this.ButtonTooltipEnum = ButtonTooltipEnum;\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.isSlideToggleChecked = true;\n      this.isReminderChecked = false;\n      this.isApproved = true;\n      this.assigneData = [];\n      this.reportConfigID = null;\n      this.reportConfigIntervalID = null;\n      this.configID = null;\n      this.configIntervalID = null;\n      this.frequency = ['YEARLY', 'MONTHLY'];\n      this.intervalList = [];\n      this.today = new Date();\n      this.userList = [];\n      this.userSearchUtil = new MatSelectSearchService(['name']);\n      if (data != null && data != undefined) {\n        this.action = this.data['action'];\n        this.assigneData = this.data['assignMetric'];\n        this.dialogRef.disableClose = true;\n        this.reportConfigID = this.data['configID'];\n        this.reportConfigIntervalID = this.data['reportConfigID'];\n        this.configID = this.data['configID'];\n        this.configIntervalID = this.data['configIntervalID'];\n      }\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.schedulerFGInit();\n      if (this.action == FormAction.CREATE) {\n        if (this.data.assignMetric) {\n          this.addAssignMetric();\n        }\n        this.title = ButtonLabelEnum.CREATE_BTN_LABEL;\n      } else if (this.action == FormAction.UPDATE) {\n        this.title = ButtonLabelEnum.UPDATE_BTN_LABEL;\n        this.patchData();\n      } else {\n        this.toastrService.openToast(ToastrTitle.ERROR, 'Unrecognized action!', ToastrColor.ERROR);\n      }\n      this.getUser();\n      this.getFrequency();\n    }\n    ngAfterViewInit() {\n      const headerHeight = this.header.nativeElement.offsetHeight;\n      const footerHeight = this.footer.nativeElement.offsetHeight;\n      const offsetHeight = 'calc(90vh - ' + (headerHeight + footerHeight + 24) + 'px)';\n      this.renderer.setStyle(this.body.nativeElement, 'height', offsetHeight);\n      this.renderer.setStyle(this.body.nativeElement, 'max-height', offsetHeight);\n    }\n    schedulerFGInit() {\n      this.schedulerFG = this.formBuilder.group({\n        workflow: this.formBuilder.group({\n          assigneeID: [, Validators.required],\n          approverID: [{\n            value: null,\n            disabled: true\n          }],\n          isAutoApprove: [true, Validators.required],\n          isReminderSet: [false, Validators.required]\n        }),\n        reminder: this.formBuilder.group({\n          frequencyInterval: [{\n            value: null,\n            disabled: true\n          }],\n          frequencyID: [{\n            value: null,\n            disabled: true\n          }],\n          startDate: [{\n            value: null,\n            disabled: true\n          }],\n          endDate: [{\n            value: null,\n            disabled: true\n          }]\n        }),\n        metric: []\n      });\n    }\n    patchData() {\n      this.assigneController.getSchedularDetails(this.currentOrgID, this.configID, this.configIntervalID).subscribe(res => {\n        this.schedulerFG.patchValue({\n          workflow: res.workFlow,\n          reminder: res.reminder\n        });\n      });\n    }\n    addAssignMetric() {\n      this.schedulerFG.get('metric').setValue(this.assigneData);\n    }\n    getUser() {\n      this.userService.getCurrentOrgUserAccess(this.currentOrgID).then(allUser => {\n        this.allUser = allUser;\n        allUser.map(user => {\n          let metric = {\n            id: user.id,\n            name: user.firstName ? user.firstName + ' ' + (user.lastName != null ? user.lastName : '') : ''\n          };\n          this.userList.push(metric);\n        });\n        // ngx mat select search\n        this.userSearchUtil.entityArr = this.userList;\n        this.userSearchUtil.createSubscription();\n      }).catch(error => {\n        console.error('Error fetching user access:', error);\n      });\n    }\n    getFrequency() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let lookup = [{\n          lookupCode: [LookupCodeEnum.FREQUENCY],\n          lookupKey: []\n        }];\n        this.intervalList = yield this.lookupService.getLookup(reporting_framework_lookup_url, lookup);\n      });\n    }\n    openApprover() {\n      const formArray = this.schedulerFG.get('workflow');\n      const approverControl = formArray.get('approverID');\n      if (this.isSlideToggleChecked) {\n        this.isSlideToggleChecked = false;\n        this.enableControlWithValidation(approverControl);\n      } else {\n        this.isSlideToggleChecked = true;\n        this.disableControl(approverControl);\n      }\n    }\n    openReminder() {\n      const formArray = this.schedulerFG.get('reminder');\n      const controlsToEnable = ['frequencyInterval', 'frequencyID', 'startDate', 'endDate'].map(controlName => formArray.get(controlName));\n      if (this.isReminderChecked) {\n        this.isReminderChecked = false;\n        this.disableControls(controlsToEnable);\n      } else {\n        this.isReminderChecked = true;\n        this.enableControlsWithValidation(controlsToEnable);\n      }\n    }\n    disableControl(control) {\n      control.disable();\n    }\n    enableControlWithValidation(control) {\n      control.enable();\n      this.addValidation(control, [Validators.required]);\n    }\n    enableControlsWithValidation(controls) {\n      controls.forEach(control => {\n        control.enable();\n        this.addValidation(control, [Validators.required]);\n      });\n    }\n    disableControls(controls) {\n      controls.forEach(control => control.disable());\n    }\n    addValidation(control, validators) {\n      control.setValidators(validators);\n      control.updateValueAndValidity();\n    }\n    openDatepicker() {\n      this.pickerDirective.open();\n    }\n    openDatepickerOnClick(datepicker) {\n      if (!datepicker.opened) {\n        datepicker.open();\n      }\n    }\n    monthSelectedHandlerForStartDate(normalizedMonthAndYear, datepicker) {\n      datepicker.close();\n      const formArray = this.schedulerFG.get('reminder');\n      formArray.get('startDate').setValue(normalizedMonthAndYear);\n      this.formatDate('startDate');\n      this.emitFilter.emit();\n    }\n    monthSelecktedHandler(normalizedMonthAndYear, datepicker) {\n      datepicker.close();\n      const assigneeGroup = this.schedulerFG.get('workflow');\n      const reminderGroup = this.schedulerFG.get('reminder');\n      if (assigneeGroup && reminderGroup) {\n        const startDateControl = reminderGroup.get('startDate');\n        if (startDateControl) {\n          startDateControl.setValue(\"just check\");\n          this.formatDate('startDate');\n          this.emitFilter.emit();\n        } else {\n          console.error('startDate control not found in reminder');\n        }\n      } else {\n        console.error('assignee or reminder not found in schedulerFG');\n      }\n    }\n    monthSelectedHandlerForEndDate(normalizedMonthAndYear, datepicker) {\n      datepicker.close();\n      const selectedDate = normalizedMonthAndYear.endOf('month');\n      const formArray = this.schedulerFG.get('reminder');\n      formArray.get('endDate').setValue(selectedDate);\n      this.formatDate('endDate');\n      this.emitFilter.emit();\n    }\n    formatDate(control) {\n      const controlToPatch = this.schedulerFG.get('reminder.' + control);\n      if (controlToPatch) {\n        let date = moment(controlToPatch.value).format(\"YYYY-MM-DD\");\n        controlToPatch.patchValue(date);\n      } else {\n        console.error('Control not found:', control);\n      }\n    }\n    takeFocusAway(durationField) {\n      this.durationField = document.getElementById(durationField);\n      this.durationField.classList.remove('mat-focused', 'mat-form-field-should-float');\n    }\n    createScheduleWorkFlow() {\n      if (this.schedulerFG.valid) {\n        this.assigneController.createSchedular(this.currentOrgID, this.configID, this.configIntervalID, this.schedulerFG.value, this.reportID).subscribe(res => {\n          if (res.status == 'success') {\n            this.dialogRef.close(DialogEnum.SUCCESS_DR);\n          }\n        });\n      } else {\n        this.schedulerFG.markAllAsTouched();\n      }\n      console.log(this.schedulerFG.value);\n    }\n  }\n  SchedulerWorkflowComponent.ɵfac = function SchedulerWorkflowComponent_Factory(t) {\n    return new (t || SchedulerWorkflowComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA, 8), i0.ɵɵdirectiveInject(i1.MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.AssignmentController), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.UserService), i0.ɵɵdirectiveInject(i5.FormBuilder), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.LookupService));\n  };\n  SchedulerWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SchedulerWorkflowComponent,\n    selectors: [[\"app-scheduler-workflow\"]],\n    viewQuery: function SchedulerWorkflowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(DaterangepickerDirective, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pickerDirective = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startDatePicker = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endDatePicker = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.header = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.body = _t.first);\n      }\n    },\n    outputs: {\n      emitFilter: \"emitFilter\"\n    },\n    decls: 76,\n    vars: 33,\n    consts: [[1, \"headerContainer\", \"p-0\"], [\"header\", \"\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"headerRightContainer\"], [1, \"headerRightContainerInner\"], [\"matRipple\", \"\", \"matTooltipPosition\", \"below\", \"mat-dialog-close\", \"\", 1, \"btn\", \"btn-sm\", \"centerAlign\", \"py-1\", \"iconBtn\", 3, \"matRippleCentered\", \"matTooltip\"], [1, \"material-symbols-outlined\"], [\"contentInp\", \" Establishing a workflow is mandatory, while setting a reminder is optional.\", 3, \"messageAlertTypeInp\", \"messageAlertIconInp\"], [1, \"mat-typography\", \"customScrollBar\", \"pt-4\"], [\"body\", \"\"], [3, \"formGroup\"], [\"formGroupName\", \"workflow\"], [1, \"row\"], [1, \"col-sm-4\", \"pt-3\"], [1, \"col-sm-4\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"assigneeID\"], [\"placeholderLabel\", \"Search by user name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"approverID\", 3, \"disabled\"], [\"formControlName\", \"isAutoApprove\", 1, \"col-sm-4\", \"pt-4\", 3, \"change\"], [1, \"ps-4\"], [\"type\", \"checkbox\", \"formControlName\", \"isReminderSet\", 1, \"larger-checkbox\", 3, \"change\"], [1, \"ps-2\"], [\"formGroupName\", \"reminder\"], [1, \"pt-2\", \"ps-5\"], [1, \"col-sm-2\", 3, \"appearance\"], [\"matInput\", \"\", \"type\", \"number\", \"placeholder\", \"Send a reminder every\", \"formControlName\", \"frequencyInterval\", 1, \"formPlaceholder\"], [1, \"col-sm-3\", 3, \"appearance\"], [\"formControlName\", \"frequencyID\"], [\"id\", \"monthlyField\", \"appMonthYearFormat\", \"\", \"appMonthYearFormat\", \"\", 1, \"col-sm-5\", 3, \"appearance\", \"click\", \"keydown.arrowdown\", \"keydown.enter\"], [\"matInput\", \"\", \"formControlName\", \"startDate\", \"readonly\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"max\", \"dateInput\"], [\"matSuffix\", \"\", 1, \"fs-5\", 3, \"for\"], [\"panelClass\", \"monthPicker\", \"startView\", \"year\", 3, \"monthSelected\", \"closed\"], [\"startDatePicker\", \"\"], [\"matInput\", \"\", \"formControlName\", \"endDate\", \"readonly\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"max\", \"dateInput\"], [\"endDatePicker\", \"\"], [1, \"tscDialogFooter\"], [\"footer\", \"\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"me-2\", 3, \"click\"], [\"type\", \"button\", \"mat-dialog-close\", \"\", 1, \"button\", \"btn\", \"btn-secondary\", \"me-2\"], [3, \"value\"]],\n    template: function SchedulerWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r11 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵelementStart(8, \"span\", 7);\n        i0.ɵɵtext(9, \" close \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"lib-message-alert\", 8);\n        i0.ɵɵelementStart(11, \"mat-dialog-content\", 9, 10);\n        i0.ɵɵelementStart(13, \"form\", 11);\n        i0.ɵɵelementContainerStart(14, 12);\n        i0.ɵɵelementStart(15, \"div\", 13);\n        i0.ɵɵelementStart(16, \"p\", 14);\n        i0.ɵɵtext(17, \"Who will enter this data?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-form-field\", 15);\n        i0.ɵɵelementStart(19, \"mat-label\", 16);\n        i0.ɵɵtext(20, \"Select assignee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"mat-select\", 17);\n        i0.ɵɵelementStart(22, \"mat-option\");\n        i0.ɵɵelement(23, \"ngx-mat-select-search\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, SchedulerWorkflowComponent_mat_option_24_Template, 2, 2, \"mat-option\", 19);\n        i0.ɵɵpipe(25, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 13);\n        i0.ɵɵelementStart(27, \"div\", 14);\n        i0.ɵɵtext(28, \"Who will approve this data?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"mat-form-field\", 15);\n        i0.ɵɵelementStart(30, \"mat-label\", 16);\n        i0.ɵɵtext(31, \"Select approver\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"mat-select\", 20);\n        i0.ɵɵelementStart(33, \"mat-option\");\n        i0.ɵɵelement(34, \"ngx-mat-select-search\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(35, SchedulerWorkflowComponent_mat_option_35_Template, 2, 2, \"mat-option\", 19);\n        i0.ɵɵpipe(36, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-slide-toggle\", 21);\n        i0.ɵɵlistener(\"change\", function SchedulerWorkflowComponent_Template_mat_slide_toggle_change_37_listener() {\n          return ctx.openApprover();\n        });\n        i0.ɵɵtext(38, \" Auto approve \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"div\", 22);\n        i0.ɵɵelementStart(40, \"input\", 23);\n        i0.ɵɵlistener(\"change\", function SchedulerWorkflowComponent_Template_input_change_40_listener() {\n          return ctx.openReminder();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"span\", 24);\n        i0.ɵɵtext(42, \"Schedule reminders for assignee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(43, 25);\n        i0.ɵɵelementStart(44, \"div\", 26);\n        i0.ɵɵelementStart(45, \"div\", 13);\n        i0.ɵɵelementStart(46, \"mat-form-field\", 27);\n        i0.ɵɵelementStart(47, \"mat-label\", 16);\n        i0.ɵɵtext(48, \"Reminder days\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(49, \"input\", 28);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"mat-form-field\", 29);\n        i0.ɵɵelementStart(51, \"mat-label\", 16);\n        i0.ɵɵtext(52, \"Days\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"mat-select\", 30);\n        i0.ɵɵtemplate(54, SchedulerWorkflowComponent_mat_option_54_Template, 2, 2, \"mat-option\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"mat-form-field\", 31);\n        i0.ɵɵlistener(\"click\", function SchedulerWorkflowComponent_Template_mat_form_field_click_55_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r5 = i0.ɵɵreference(61);\n          return ctx.openDatepickerOnClick(_r5);\n        })(\"keydown.arrowdown\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_arrowdown_55_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r5 = i0.ɵɵreference(61);\n          return ctx.openDatepickerOnClick(_r5);\n        })(\"keydown.enter\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_enter_55_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r5 = i0.ɵɵreference(61);\n          return ctx.openDatepickerOnClick(_r5);\n        });\n        i0.ɵɵelementStart(56, \"mat-label\", 16);\n        i0.ɵɵtext(57, \"Starts on\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"input\", 32);\n        i0.ɵɵlistener(\"dateInput\", function SchedulerWorkflowComponent_Template_input_dateInput_58_listener() {\n          return ctx.formatDate(\"startDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(59, \"mat-datepicker-toggle\", 33);\n        i0.ɵɵelementStart(60, \"mat-datepicker\", 34, 35);\n        i0.ɵɵlistener(\"monthSelected\", function SchedulerWorkflowComponent_Template_mat_datepicker_monthSelected_60_listener($event) {\n          i0.ɵɵrestoreView(_r11);\n          const _r5 = i0.ɵɵreference(61);\n          return ctx.monthSelectedHandlerForStartDate($event, _r5);\n        })(\"closed\", function SchedulerWorkflowComponent_Template_mat_datepicker_closed_60_listener() {\n          return ctx.takeFocusAway(\"monthlyField\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"div\");\n        i0.ɵɵelementStart(63, \"mat-form-field\", 31);\n        i0.ɵɵlistener(\"click\", function SchedulerWorkflowComponent_Template_mat_form_field_click_63_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r6 = i0.ɵɵreference(69);\n          return ctx.openDatepickerOnClick(_r6);\n        })(\"keydown.arrowdown\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_arrowdown_63_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r6 = i0.ɵɵreference(69);\n          return ctx.openDatepickerOnClick(_r6);\n        })(\"keydown.enter\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_enter_63_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r6 = i0.ɵɵreference(69);\n          return ctx.openDatepickerOnClick(_r6);\n        });\n        i0.ɵɵelementStart(64, \"mat-label\", 16);\n        i0.ɵɵtext(65, \"Ends on\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(66, \"input\", 36);\n        i0.ɵɵlistener(\"dateInput\", function SchedulerWorkflowComponent_Template_input_dateInput_66_listener() {\n          return ctx.formatDate(\"endDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(67, \"mat-datepicker-toggle\", 33);\n        i0.ɵɵelementStart(68, \"mat-datepicker\", 34, 37);\n        i0.ɵɵlistener(\"monthSelected\", function SchedulerWorkflowComponent_Template_mat_datepicker_monthSelected_68_listener($event) {\n          i0.ɵɵrestoreView(_r11);\n          const _r6 = i0.ɵɵreference(69);\n          return ctx.monthSelectedHandlerForEndDate($event, _r6);\n        })(\"closed\", function SchedulerWorkflowComponent_Template_mat_datepicker_closed_68_listener() {\n          return ctx.takeFocusAway(\"monthlyField\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"div\", 38, 39);\n        i0.ɵɵelementStart(72, \"button\", 40);\n        i0.ɵɵlistener(\"click\", function SchedulerWorkflowComponent_Template_button_click_72_listener() {\n          return ctx.createScheduleWorkFlow();\n        });\n        i0.ɵɵtext(73, \" Save \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(74, \"button\", 41);\n        i0.ɵɵtext(75, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r5 = i0.ɵɵreference(61);\n        const _r6 = i0.ɵɵreference(69);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate2(\"\", ctx.assigneData.length, \" \", ctx.assigneData.length === 1 ? \"Section\" : \"Sections\", \" selected \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matRippleCentered\", ctx.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER)(\"matTooltip\", ctx.ButtonTooltipEnum.CLOSE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"messageAlertTypeInp\", ctx.messageAlertTypeEnum.INFO)(\"messageAlertIconInp\", ctx.messageAlertIconEnum.INFO_ICON);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.schedulerFG);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.userSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(25, 29, ctx.userSearchUtil.filteredEntities));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isSlideToggleChecked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.userSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(36, 31, ctx.userSearchUtil.filteredEntities));\n        i0.ɵɵadvance(9);\n        i0.ɵɵclassProp(\"disabled\", ctx.isReminderChecked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.intervalList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r5)(\"max\", ctx.today);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r5);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r6)(\"max\", ctx.today);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r6);\n      }\n    },\n    directives: [i8.MatRipple, i1.MatDialogClose, i9.MatTooltip, i7.MessageAlertComponent, i1.MatDialogContent, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormGroupName, i10.MatFormField, i10.MatLabel, i11.MatSelect, i5.NgControlStatus, i5.FormControlName, i8.MatOption, i12.MatSelectSearchComponent, i5.FormControlDirective, i13.NgForOf, i14.MatSlideToggle, i5.CheckboxControlValueAccessor, i15.MatInput, i5.NumberValueAccessor, i5.DefaultValueAccessor, i16.MonthYearFormatDirective, i17.MatDatepickerInput, i17.MatDatepickerToggle, i10.MatSuffix, i17.MatDatepicker],\n    pipes: [i13.AsyncPipe],\n    styles: [\".larger-checkbox[_ngcontent-%COMP%]{transform:scale(1.5)}\"]\n  });\n  return SchedulerWorkflowComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}