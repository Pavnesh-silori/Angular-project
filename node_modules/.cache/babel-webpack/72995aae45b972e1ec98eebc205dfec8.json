{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EventEmitter } from '@angular/core';\nimport { ReportingFrameworkKeyIDEnum } from '@report-framework/enum/reporting-framework.enum';\nimport { ToastrColor } from '@library/toastr-service';\nimport { DialogEnum, InvalidForm, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@report-framework/controller/reporting-framework-data.controller\";\nimport * as i4 from \"@report-framework/controller/report-framework.controller\";\nimport * as i5 from \"@library/storage-service\";\nimport * as i6 from \"@report-framework/service/reporting-framework-data.service\";\nimport * as i7 from \"@library/toastr-service\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/tooltip\";\nfunction DataCreateUpdateComponent_div_3_div_2_input_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 15);\n    i0.ɵɵlistener(\"change\", function DataCreateUpdateComponent_div_3_div_2_input_5_Template_input_change_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const df_r2 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.oneLevelValidation(df_r2.controlNameKey);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const df_r2 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"type\", df_r2.inputTypeKey)(\"email\", ctx_r6.reportDataForm[\"controls\"][df_r2.controlNameKey][\"controls\"][\"value\"].errors == null ? null : ctx_r6.reportDataForm[\"controls\"][df_r2.controlNameKey][\"controls\"][\"value\"].errors.email);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_div_2_input_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 16);\n    i0.ɵɵlistener(\"change\", function DataCreateUpdateComponent_div_3_div_2_input_6_Template_input_change_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const df_r2 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.oneLevelValidation(df_r2.controlNameKey);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const df_r2 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"type\", df_r2.inputTypeKey);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_div_2_textarea_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"textarea\", 17);\n    i0.ɵɵtext(1, \"                            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_3_div_2_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Enter a valid email ID. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"span\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵelementStart(4, \"mat-form-field\", 11);\n    i0.ɵɵtemplate(5, DataCreateUpdateComponent_div_3_div_2_input_5_Template, 1, 2, \"input\", 12);\n    i0.ɵɵtemplate(6, DataCreateUpdateComponent_div_3_div_2_input_6_Template, 1, 1, \"input\", 13);\n    i0.ɵɵtemplate(7, DataCreateUpdateComponent_div_3_div_2_textarea_7_Template, 2, 0, \"textarea\", 14);\n    i0.ɵɵtemplate(8, DataCreateUpdateComponent_div_3_div_2_mat_error_8_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const df_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(df_r2.label);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", df_r2.inputTypeKey != \"textArea\" && df_r2.inputTypeKey != \"number\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", df_r2.inputTypeKey == \"number\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", df_r2.inputTypeKey == \"textArea\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.reportDataForm[\"controls\"][df_r2.controlNameKey][\"controls\"][\"value\"].hasError(\"email\"));\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_th_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const th_r22 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(th_r22.label);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_input_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 28);\n  }\n  if (rf & 2) {\n    const child_r27 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", child_r27.inputTypeKey);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_input_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 29);\n  }\n  if (rf & 2) {\n    const child_r27 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", child_r27.inputTypeKey);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_textarea_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"textarea\", 30);\n    i0.ɵɵtext(1, \"                                        \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 24);\n    i0.ɵɵtemplate(3, DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_input_3_Template, 1, 1, \"input\", 25);\n    i0.ɵɵtemplate(4, DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_input_4_Template, 1, 1, \"input\", 26);\n    i0.ɵɵtemplate(5, DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_textarea_5_Template, 2, 0, \"textarea\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const child_r27 = ctx.$implicit;\n    const ctx_r25 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", child_r27.controlNameKey);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r25.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", child_r27.inputTypeKey != \"textArea\" && child_r27.inputTypeKey != \"number\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", child_r27.inputTypeKey == \"number\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", child_r27.inputTypeKey == \"textArea\");\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_tr_8_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelementStart(1, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function DataCreateUpdateComponent_div_3_table_3_tr_8_td_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const i_r24 = i0.ɵɵnextContext().index;\n      const df_r2 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.removeFormArray(df_r2.controlNameKey, i_r24);\n    });\n    i0.ɵɵelementStart(2, \"span\", 32);\n    i0.ɵɵtext(3, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r26.isReadOnly);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 6);\n    i0.ɵɵtemplate(1, DataCreateUpdateComponent_div_3_table_3_tr_8_td_1_Template, 6, 5, \"td\", 20);\n    i0.ɵɵtemplate(2, DataCreateUpdateComponent_div_3_table_3_tr_8_td_2_Template, 4, 1, \"td\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r24 = ctx.index;\n    const df_r2 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r24);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", df_r2.children);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r20.reportingFrameworkKeyID !== ctx_r20.ReportingFrameworkKeyIDEnum.GRI && ctx_r20.isReadOnly === false);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function DataCreateUpdateComponent_div_3_table_3_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r40);\n      const df_r2 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r38 = i0.ɵɵnextContext();\n      return ctx_r38.addFormArray(df_r2.controlNameKey, df_r2.children);\n    });\n    i0.ɵɵelementStart(1, \"span\", 34);\n    i0.ɵɵtext(2, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r21.isReadOnly);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 18);\n    i0.ɵɵelementStart(1, \"caption\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"thead\", 19);\n    i0.ɵɵelementStart(4, \"tr\");\n    i0.ɵɵtemplate(5, DataCreateUpdateComponent_div_3_table_3_th_5_Template, 2, 1, \"th\", 20);\n    i0.ɵɵelement(6, \"th\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"tbody\", 21);\n    i0.ɵɵtemplate(8, DataCreateUpdateComponent_div_3_table_3_tr_8_Template, 3, 3, \"tr\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, DataCreateUpdateComponent_div_3_table_3_button_9_Template, 3, 1, \"button\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const df_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(df_r2.label);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", df_r2.children);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formArrayName\", df_r2.controlNameKey);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.getFormArray(df_r2.controlNameKey).controls);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.reportingFrameworkKeyID !== ctx_r4.ReportingFrameworkKeyIDEnum.GRI && ctx_r4.isReadOnly === false);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const th_r44 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", th_r44.label, \" \");\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_input_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 28);\n  }\n  if (rf & 2) {\n    const children_r51 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", children_r51.controls.inputTypeKey.value);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_input_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 29);\n  }\n  if (rf & 2) {\n    const children_r51 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", children_r51.controls.inputTypeKey.value);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_textarea_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"textarea\", 30);\n    i0.ɵɵtext(1, \"                                        \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 39);\n    i0.ɵɵtemplate(3, DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_input_3_Template, 1, 1, \"input\", 25);\n    i0.ɵɵtemplate(4, DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_input_4_Template, 1, 1, \"input\", 26);\n    i0.ɵɵtemplate(5, DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_textarea_5_Template, 2, 0, \"textarea\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const children_r51 = ctx.$implicit;\n    const j_r52 = ctx.index;\n    const child_r49 = i0.ɵɵnextContext().$implicit;\n    const ctx_r50 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"formArrayName\", child_r49[\"controlNameKey\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", j_r52);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r50.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", children_r51.controls.inputTypeKey.value != \"textArea\" && children_r51.controls.inputTypeKey.value != \"number\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", children_r51.controls.inputTypeKey.value == \"number\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", children_r51.controls.inputTypeKey.value == \"textArea\");\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 6);\n    i0.ɵɵelementStart(1, \"td\", 38);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_td_3_Template, 6, 6, \"td\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const child_r49 = ctx.$implicit;\n    const i_r47 = i0.ɵɵnextContext().index;\n    const df_r2 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r48 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r47);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(child_r49.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r48.getChildFormArrayChild(df_r2.controlNameKey, i_r47, child_r49[\"controlNameKey\"])[\"controls\"]);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_tbody_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\", 21);\n    i0.ɵɵtemplate(1, DataCreateUpdateComponent_div_3_table_4_tbody_7_tr_1_Template, 4, 3, \"tr\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const df_r2 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"formArrayName\", df_r2.controlNameKey);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", df_r2.children);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_table_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 35);\n    i0.ɵɵelementStart(1, \"caption\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"thead\", 36);\n    i0.ɵɵelementStart(4, \"tr\");\n    i0.ɵɵelement(5, \"th\");\n    i0.ɵɵtemplate(6, DataCreateUpdateComponent_div_3_table_4_th_6_Template, 2, 1, \"th\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, DataCreateUpdateComponent_div_3_table_4_tbody_7_Template, 2, 2, \"tbody\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const df_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(df_r2.label);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", df_r2.children[0].columns);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.getFormArray(df_r2.controlNameKey)[\"controls\"]);\n  }\n}\nfunction DataCreateUpdateComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵtemplate(2, DataCreateUpdateComponent_div_3_div_2_Template, 9, 6, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, DataCreateUpdateComponent_div_3_table_3_Template, 10, 5, \"table\", 8);\n    i0.ɵɵtemplate(4, DataCreateUpdateComponent_div_3_table_4_Template, 8, 3, \"table\", 9);\n    i0.ɵɵelement(5, \"br\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const df_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", df_r2.controlNameKey);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", df_r2.layoutKey == \"div\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", df_r2.layoutKey == \"table\" && df_r2.controlTypeKey == \"array\" && df_r2.type == 2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", df_r2.layoutKey == \"table\" && df_r2.controlTypeKey == \"array\" && df_r2.type == 3);\n  }\n}\nfunction DataCreateUpdateComponent_div_4_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r69 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function DataCreateUpdateComponent_div_4_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r69);\n      const ctx_r68 = i0.ɵɵnextContext(2);\n      return ctx_r68.submitForm();\n    });\n    i0.ɵɵtext(1, \" Save \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_4_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r71 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function DataCreateUpdateComponent_div_4_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r71);\n      const ctx_r70 = i0.ɵɵnextContext(2);\n      return ctx_r70.submitForm();\n    });\n    i0.ɵɵtext(1, \" Approved \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_4_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r73 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function DataCreateUpdateComponent_div_4_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r73);\n      const ctx_r72 = i0.ɵɵnextContext(2);\n      return ctx_r72.updateData();\n    });\n    i0.ɵɵtext(1, \" Update \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_4_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r75 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function DataCreateUpdateComponent_div_4_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r75);\n      const ctx_r74 = i0.ɵɵnextContext(2);\n      return ctx_r74.updateData();\n    });\n    i0.ɵɵtext(1, \" Approved \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_4_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 44, 45);\n    i0.ɵɵtext(2, \" Save \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DataCreateUpdateComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 40);\n    i0.ɵɵtemplate(1, DataCreateUpdateComponent_div_4_button_1_Template, 2, 0, \"button\", 41);\n    i0.ɵɵtemplate(2, DataCreateUpdateComponent_div_4_button_2_Template, 2, 0, \"button\", 41);\n    i0.ɵɵtemplate(3, DataCreateUpdateComponent_div_4_button_3_Template, 2, 0, \"button\", 41);\n    i0.ɵɵtemplate(4, DataCreateUpdateComponent_div_4_button_4_Template, 2, 0, \"button\", 41);\n    i0.ɵɵtemplate(5, DataCreateUpdateComponent_div_4_button_5_Template, 3, 0, \"button\", 42);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isUpdate && ctx_r1.showSaveBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isUpdate && ctx_r1.showApproverBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isUpdate && ctx_r1.showSaveBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isUpdate && ctx_r1.showApproverBtn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.showSaveBtn && !ctx_r1.showApproverBtn);\n  }\n}\n// / tsc-library\nexport let DataCreateUpdateComponent = /*#__PURE__*/(() => {\n  class DataCreateUpdateComponent {\n    constructor(fb, activatedRoute, reportingFrameworkDataController, reportFrameworkController, stroageService, reportingFrameworkDataService, toastrService) {\n      this.fb = fb;\n      this.activatedRoute = activatedRoute;\n      this.reportingFrameworkDataController = reportingFrameworkDataController;\n      this.reportFrameworkController = reportFrameworkController;\n      this.stroageService = stroageService;\n      this.reportingFrameworkDataService = reportingFrameworkDataService;\n      this.toastrService = toastrService;\n      this.pageType = null;\n      this.isAssignee = false;\n      this.isApprover = false;\n      this.emit = new EventEmitter();\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.ReportingFrameworkKeyIDEnum = ReportingFrameworkKeyIDEnum;\n      this.configID = null;\n      this.configIntervalID = null;\n      this.formDataList = [];\n      this.formGroupList = [];\n      this.formArrayList = [];\n      this.isUpdate = false;\n      this.removeDataList = [];\n      this.reportingPeriodID = 1;\n      this.validator = false;\n      this.row = 1;\n      this.isFormValid = false;\n      this.showSaveBtn = false;\n      this.showApproverBtn = false;\n      // create json while we update data remove data generally occured while we delete data from two level metric.\n      this.createJsonForUpdateData = {\n        data: undefined,\n        removeData: undefined\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.stroageService.getStorage('currentOrgID');\n      this.activatedRoute.params.subscribe(param => {\n        this.configIntervalID = param['configIntervalID'];\n        this.configID = param['configID'];\n      });\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams['reportingFrameworkKeyID']) {\n          this.reportingFrameworkKeyID = queryParams['reportingFrameworkKeyID'];\n        }\n      });\n      this.showBtnLevel();\n      this.reportDataForm = this.fb.group({});\n      this.getReportFormControl();\n    }\n    // show button level for assingee and approver bases\n    showBtnLevel() {\n      if (this.isAssignee) {\n        this.showSaveBtn = true;\n        this.showApproverBtn = false;\n      }\n      if (this.isApprover) {\n        this.showApproverBtn = true;\n        this.showSaveBtn = false;\n      }\n      if (this.isAssignee && this.isApprover) {\n        this.showSaveBtn = true;\n        this.showApproverBtn = false;\n      }\n    }\n    // get metric data by config id or config interval id\n    getReportFormControl() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.data == null) {\n          this.dynamicForm = yield this.reportingFrameworkDataService.getReportFormControl(this.currentOrgID, this.configIntervalID, this.groupID);\n        } else {\n          this.dynamicForm = this.data;\n        }\n        this.createForm(this.dynamicForm);\n      });\n    }\n    //  create form in specific format where metricStdID, groupStdID, value, serialNumber and \n    //  validation in details its requied data for show metric in form.\n    createForm(controls) {\n      for (let control of controls) {\n        // its one level metric means where single question ask for user.\n        if (control.controlTypeKey == 'control') {\n          const newGroup = new FormGroup({});\n          newGroup.addControl('metricStdID', new FormControl(control.metricStdID));\n          newGroup.addControl('groupStdID', new FormControl(control.groupStdID));\n          // newGroup.addControl('value', new FormControl(control.value));\n          newGroup.addControl('value', this.fb.control({\n            value: control.value,\n            disabled: this.isReadOnly\n          }));\n          newGroup.addControl('serialNumber', new FormControl(this.row));\n          newGroup.addControl('inputTypeKey', new FormControl(control.inputTypeKey));\n          newGroup.addControl('validators', new FormControl(control.validators));\n          if (control.value != null) {\n            this.isUpdate = true;\n          }\n          this.reportDataForm.addControl(control.controlNameKey, newGroup);\n        }\n        if (control.controlTypeKey == 'array') {\n          // its two level metric means where one question has list of data.\n          if (control.type == 2) {\n            const newArray = new FormArray([]);\n            const newGroup = new FormGroup({});\n            const valuelength = control.children[0].value != null ? control.children[0].value.length : null;\n            if (valuelength != null && valuelength != 0) {\n              this.isUpdate = true;\n              this.row = 0;\n              for (let i = 0; i < valuelength; i++) {\n                const newGroup = new FormGroup({});\n                control.children.map(child => {\n                  const newSubGroup = new FormGroup({});\n                  newSubGroup.addControl('metricStdID', new FormControl(child.metricStdID));\n                  newSubGroup.addControl('groupStdID', new FormControl(child.groupStdID));\n                  // newSubGroup.addControl('value', new FormControl(child.value[i]));\n                  newSubGroup.addControl('value', this.fb.control({\n                    value: child.value[i],\n                    disabled: this.isReadOnly\n                  }));\n                  newSubGroup.addControl('serialNumber', new FormControl(i + 1));\n                  newSubGroup.addControl('inputTypeKey', new FormControl(control.inputTypeKey));\n                  newSubGroup.addControl('validators', new FormControl(child.validators));\n                  newGroup.addControl(child.controlNameKey, newSubGroup);\n                });\n                newArray.push(newGroup);\n                this.reportDataForm.addControl(control.controlNameKey, newArray);\n                this.row++;\n              }\n            } else {\n              control.children.map(child => {\n                const newSubGroup = new FormGroup({});\n                newSubGroup.addControl('metricStdID', new FormControl(child.metricStdID));\n                newSubGroup.addControl('groupStdID', new FormControl(child.groupStdID));\n                // newSubGroup.addControl('value', new FormControl(null));\n                newSubGroup.addControl('value', this.fb.control({\n                  value: null,\n                  disabled: this.isReadOnly\n                }));\n                newSubGroup.addControl('serialNumber', new FormControl(this.row));\n                newSubGroup.addControl('inputTypeKey', new FormControl(control.inputTypeKey));\n                newSubGroup.addControl('validators', new FormControl(child.validators));\n                newGroup.addControl(child.controlNameKey, newSubGroup);\n              });\n              newArray.push(newGroup);\n              this.reportDataForm.addControl(control.controlNameKey, newArray);\n            }\n          } else {\n            // its three level of metric where metric show in row and column format.\n            this.row = 1;\n            const newArray = new FormArray([]);\n            const newGroup = new FormGroup({});\n            control.children.map(child => {\n              const newSubArray = new FormArray([]);\n              child.columns.forEach(col => {\n                const newColGroup = new FormGroup({});\n                newColGroup.addControl('metricStdID', new FormControl(col.metricStdID));\n                newColGroup.addControl('groupStdID', new FormControl(col.groupStdID));\n                // newColGroup.addControl('value', new FormControl(col.value != null ? col.value[0] : col.value));\n                newColGroup.addControl('value', this.fb.control({\n                  value: col.value != null ? col.value[0] : col.value,\n                  disabled: this.isReadOnly\n                }));\n                newColGroup.addControl('serialNumber', new FormControl(this.row));\n                newColGroup.addControl('inputTypeKey', new FormControl(col.inputTypeKey));\n                newColGroup.addControl('validators', new FormControl(col.validators));\n                if (col.value.length != 0) {\n                  this.isUpdate = true;\n                }\n                newSubArray.push(newColGroup);\n              });\n              newGroup.addControl(child.controlNameKey, newSubArray);\n            });\n            newArray.push(newGroup);\n            this.reportDataForm.addControl(control.controlNameKey, newArray);\n          }\n        }\n      }\n    }\n    formatDataForPost() {\n      // create metric in generic format to post data for create.\n      this.checkFormGroupControls(this.reportDataForm);\n      this.formDataList = [];\n      Object.keys(this.reportDataForm.controls).forEach(key => {\n        this.childFormGroup = this.reportDataForm.get(key)['controls'];\n        if (this.childFormGroup.length != 0) {\n          if (this.formArrayList.includes(key)) {\n            Object.keys(this.childFormGroup[0].controls).forEach(controlsKey => {\n              for (let i = 0; i < this.childFormGroup.length; i++) {\n                if (this.isFormGroup(this.childFormGroup[i].get(controlsKey))) {\n                  this.formDataList.push(this.childFormGroup[i].get(controlsKey).value);\n                } else {\n                  this.childFormGroup[i].get(controlsKey)['controls'].forEach(col => {\n                    this.formDataList.push(col.value);\n                  });\n                }\n              }\n            });\n          } else {\n            this.formDataList.push(this.reportDataForm.get(key).value);\n          }\n        }\n      });\n      this.checkFormIsValid();\n    }\n    // Check if a control is a FormGroup\n    isFormGroup(control) {\n      return control instanceof FormGroup;\n    }\n    // Check if a control is a FormControl\n    isFormControl(control) {\n      return control instanceof FormControl;\n    }\n    // Check if a control is a FormArray\n    isFormArray(control) {\n      return control instanceof FormArray;\n    }\n    // Recursively check the types of controls in a dynamic FormGroup\n    checkFormGroupControls(formGroup) {\n      for (const controlName in formGroup.controls) {\n        const control = formGroup.controls[controlName];\n        if (this.isFormGroup(control)) {\n          this.formGroupList.push(controlName);\n          this.checkFormGroupControls(control);\n        }\n        if (this.isFormArray(control)) {\n          this.formArrayList.push(controlName);\n        }\n      }\n    }\n    getFormArray(key) {\n      return this.reportDataForm.controls[key];\n    }\n    // for two level metric where we add row.\n    addFormArray(arrayName, dynamicForm) {\n      const control = this.getFormArray(arrayName);\n      const newGroup = new FormGroup({});\n      dynamicForm.map(child => {\n        const newSubGroup = new FormGroup({});\n        newSubGroup.addControl('metricStdID', new FormControl(child.metricStdID));\n        newSubGroup.addControl('groupStdID', new FormControl(child.groupStdID));\n        // newSubGroup.addControl('value', new FormControl());\n        newSubGroup.addControl('value', this.fb.control({\n          value: null,\n          disabled: this.isReadOnly\n        }));\n        newSubGroup.addControl('serialNumber', new FormControl(control.value.length + 1));\n        newSubGroup.addControl('validators', new FormControl(child.validators));\n        newGroup.addControl(child.controlNameKey, newSubGroup);\n      });\n      control.push(newGroup);\n    }\n    // for two level metric where we delete row.\n    removeFormArray(arrayName, index) {\n      const control = this.getFormArray(arrayName);\n      const deleteRow = control.controls[index];\n      control.removeAt(index);\n      if (this.isUpdate) {\n        Object.keys(deleteRow['controls']).forEach(key => {\n          this.childFormGroup = deleteRow['controls'];\n          this.removeDataList.push(this.childFormGroup[key].value);\n        });\n      }\n      // Object.keys(control['controls']).forEach(key => {\n      // \tlet childControls = control['controls'][key]['controls'];\n      // \tObject.keys(childControls).forEach(group => {\n      // \t\tchildControls[group]['controls']['serialNumber'].patchValue(Number(key) + Number(1));\n      // \t})\n      // })\n    }\n\n    getChildFormArrayChild(formGroup, index, formArray) {\n      return this.reportDataForm.get(formGroup)['controls'][index].get(formArray);\n    }\n    createDataForUpdate() {\n      this.createJsonForUpdateData['data'] = this.formDataList;\n      this.createJsonForUpdateData['removeData'] = this.removeDataList;\n      return this.createJsonForUpdateData;\n    }\n    submitForm() {\n      if (this.reportDataForm.invalid) {\n        this.reportDataForm.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.formatDataForPost();\n      if (!this.isFormValid) {\n        this.reportDataForm.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, 'Alteast fill one data for submit.', ToastrColor.ERROR);\n        return;\n      }\n      this.reportingFrameworkDataController.createData(this.currentOrgID, this.configIntervalID, this.groupID, this.formDataList).subscribe(res => {\n        this.emit.next(DialogEnum.SUCCESS_DR);\n        this.getReportFormControl();\n      }, error => {\n        console.log('error in submit form - -', error);\n      });\n    }\n    updateData() {\n      if (this.reportDataForm.invalid) {\n        this.reportDataForm.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.formatDataForPost();\n      if (!this.isFormValid) {\n        this.reportDataForm.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, 'Alteast fill one data for submit.', ToastrColor.ERROR);\n        return;\n      }\n      this.reportingFrameworkDataController.updateData(this.currentOrgID, this.configIntervalID, this.groupID, this.createDataForUpdate()).subscribe(res => {\n        this.emit.next(DialogEnum.SUCCESS_DR);\n        this.getReportFormControl();\n      }, error => {\n        console.log('error in save report() -', error);\n      });\n    }\n    checkFormIsValid() {\n      this.isFormValid = false;\n      for (const form of this.formDataList) {\n        if (form['value'] != null && form['value'] != '') {\n          this.isFormValid = true;\n          break;\n        }\n      }\n    }\n    // Custom validator function for three level metric\n    threeLevelValidation(formArray) {\n      let haveValues = 0;\n      let maxLength = formArray.length;\n      for (let i = 0; i < formArray.length; i++) {\n        const group = formArray[i];\n        if (!group.controls.value.value) {\n          ++haveValues;\n        }\n      }\n      if (haveValues == maxLength) {\n        for (let i = 0; i < maxLength; ++i) {\n          const group = formArray[i];\n          group.controls.value.setErrors(null);\n          group.controls.value.clearValidators();\n          group.controls.value.updateValueAndValidity();\n        }\n      } else {\n        for (let i = 0; i < formArray.length; i++) {\n          const group = formArray[i];\n          if (formArray[i].value['validators']) {\n            let validatorsToAdd = [];\n            for (const [key, value] of Object.entries(formArray[i].value['validators'])) {\n              validatorsToAdd = this.activeValidators(key, value);\n            }\n            group.controls.value.setValidators(validatorsToAdd);\n            group.controls.value.setErrors(validatorsToAdd);\n            group.controls.value.updateValueAndValidity();\n          }\n        }\n      }\n    }\n    // Custom validator function for two level metric\n    twoLevelValidation(formGroup) {\n      let haveValues = 0;\n      let maxLength = Object.keys(formGroup['controls']).length;\n      Object.keys(formGroup['controls']).forEach(key => {\n        let formControl = formGroup['controls'][key]['controls'];\n        if (!formControl.value.value) {\n          ++haveValues;\n        }\n      });\n      if (haveValues == maxLength) {\n        Object.keys(formGroup['controls']).forEach(key => {\n          let formControl = formGroup['controls'][key]['controls'];\n          formControl['value'].setErrors(null);\n          formControl['value'].clearValidators();\n          formControl['value'].updateValueAndValidity();\n        });\n      } else {\n        Object.keys(formGroup['controls']).forEach(key => {\n          let formControl = formGroup['controls'][key]['controls'];\n          if (formControl['validators'].value) {\n            let validatorsToAdd = [];\n            for (const [key, value] of Object.entries(formControl['validators'].value)) {\n              validatorsToAdd = this.activeValidators(key, value);\n            }\n            formControl['value'].setValidators(validatorsToAdd);\n            formControl['value'].setErrors(validatorsToAdd);\n            formControl['value'].updateValueAndValidity();\n          }\n        });\n      }\n    }\n    // Custom validator function for one level metric\n    oneLevelValidation(key) {\n      const formGroup = this.reportDataForm.controls[key];\n      if (formGroup['controls']['validators'].value) {\n        let validatorsToAdd = [];\n        for (const [key, value] of Object.entries(formGroup['controls']['validators'].value)) {\n          validatorsToAdd = this.activeValidators(key, value);\n        }\n        formGroup['controls']['value'].setValidators(validatorsToAdd);\n        formGroup['controls']['value'].setErrors(validatorsToAdd);\n        formGroup['controls']['value'].updateValueAndValidity();\n      }\n    }\n    activeValidators(key, value) {\n      let validatorsToAdd = [];\n      switch (key) {\n        case 'min':\n          validatorsToAdd.push(Validators.min(Number(value)));\n          break;\n        case 'max':\n          validatorsToAdd.push(Validators.max(Number(value)));\n          break;\n        // case 'required':\n        //     if (value) {\n        //         validatorsToAdd.push(Validators.required);\n        //     }\n        //     break;\n        case 'email':\n          if (value) {\n            validatorsToAdd.push(Validators.email);\n          }\n          break;\n        case 'minLength':\n          validatorsToAdd.push(Validators.minLength(Number(value)));\n          break;\n        case 'maxLength':\n          validatorsToAdd.push(Validators.maxLength(Number(value)));\n          break;\n        default:\n          break;\n      }\n      return validatorsToAdd;\n    }\n  }\n  DataCreateUpdateComponent.ɵfac = function DataCreateUpdateComponent_Factory(t) {\n    return new (t || DataCreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ReportingFrameworkDataController), i0.ɵɵdirectiveInject(i4.ReportFrameworkController), i0.ɵɵdirectiveInject(i5.StorageService), i0.ɵɵdirectiveInject(i6.ReportingFrameworkDataService), i0.ɵɵdirectiveInject(i7.ToastrService));\n  };\n  DataCreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DataCreateUpdateComponent,\n    selectors: [[\"app-data-create-update\"]],\n    inputs: {\n      groupID: \"groupID\",\n      isReadOnly: \"isReadOnly\",\n      pageType: \"pageType\",\n      isAssignee: \"isAssignee\",\n      isApprover: \"isApprover\",\n      data: \"data\"\n    },\n    outputs: {\n      emit: \"emit\"\n    },\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\"], [1, \"card-body\", \"ms-3\", \"py-0\"], [3, \"formGroup\"], [\"class\", \"overFlowAuto\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"mb-1 me-5\", 4, \"ngIf\"], [1, \"overFlowAuto\"], [3, \"formGroupName\"], [4, \"ngIf\"], [\"class\", \"table table-responsive table-bordered caption-top\", 4, \"ngIf\"], [\"class\", \"table table-responsive table-bordered caption-top my-table\", 4, \"ngIf\"], [1, \"fw-bold\", \"dataFormLabel\", \"singleLevel\"], [1, \"width\", 3, \"appearance\"], [\"matInput\", \"\", \"formControlName\", \"value\", 3, \"type\", \"email\", \"change\", 4, \"ngIf\"], [\"matInput\", \"\", \"min\", \"0\", \"formControlName\", \"value\", \"oninput\", \"this.value >= 0 ? null : this.value=0\", 3, \"type\", \"change\", 4, \"ngIf\"], [\"rows\", \"4\", \"matInput\", \"\", \"formControlName\", \"value\", 4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"value\", 3, \"type\", \"email\", \"change\"], [\"matInput\", \"\", \"min\", \"0\", \"formControlName\", \"value\", \"oninput\", \"this.value >= 0 ? null : this.value=0\", 3, \"type\", \"change\"], [\"rows\", \"4\", \"matInput\", \"\", \"formControlName\", \"value\"], [1, \"table\", \"table-responsive\", \"table-bordered\", \"caption-top\"], [1, \"tableHeader\", \"border-bottom\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formArrayName\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"btn btn-sm btn-primary mt-2\", \"type\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"twoMetricLabelWidth\", 3, \"appearance\"], [\"matInput\", \"\", \"formControlName\", \"value\", 3, \"type\", 4, \"ngIf\"], [\"matInput\", \"\", \"min\", \"0\", \"formControlName\", \"value\", \"oninput\", \"this.value >= 0 ? null : this.value=0\", 3, \"type\", 4, \"ngIf\"], [\"rows\", \"1\", \"matInput\", \"\", \"formControlName\", \"value\", 4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"value\", 3, \"type\"], [\"matInput\", \"\", \"min\", \"0\", \"formControlName\", \"value\", \"oninput\", \"this.value >= 0 ? null : this.value=0\", 3, \"type\"], [\"rows\", \"1\", \"matInput\", \"\", \"formControlName\", \"value\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"pt-2\", \"text-danger\", 3, \"disabled\", \"click\"], [1, \"material-symbols-outlined\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-primary\", \"mt-2\", 3, \"disabled\", \"click\"], [1, \"material-symbols-outlined\", \"fs-5\", \"pt-1\"], [1, \"table\", \"table-responsive\", \"table-bordered\", \"caption-top\", \"my-table\"], [1, \"border-bottom\"], [3, \"formArrayName\", 4, \"ngFor\", \"ngForOf\"], [1, \"childLabel\"], [3, \"appearance\"], [1, \"mb-1\", \"me-5\"], [\"class\", \"btn btn-sm btn-success float-end\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"btn btn-sm float-end disableBtn\", \"type\", \"button\", \"matTooltipPosition\", \"above\", \"matTooltip\", \"You are not assignee and approver for this question. So you can't save this question.\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-success\", \"float-end\", 3, \"click\"], [\"type\", \"button\", \"matTooltipPosition\", \"above\", \"matTooltip\", \"You are not assignee and approver for this question. So you can't save this question.\", 1, \"btn\", \"btn-sm\", \"float-end\", \"disableBtn\"], [\"tooltip\", \"matTooltip\"]],\n    template: function DataCreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"form\", 2);\n        i0.ɵɵtemplate(3, DataCreateUpdateComponent_div_3_Template, 6, 4, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, DataCreateUpdateComponent_div_4_Template, 6, 5, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.reportDataForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dynamicForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.pageType == \"report-fill\");\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i8.NgForOf, i8.NgIf, i1.FormGroupName, i9.MatFormField, i10.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.EmailValidator, i9.MatError, i1.FormArrayName, i11.MatTooltip],\n    styles: [\".dataFormLabel[_ngcontent-%COMP%]{font-size:14px;color:#5ba7dd}.childLabel[_ngcontent-%COMP%]{min-width:320px;font-size:14px}table[_ngcontent-%COMP%]{border:1px solid #CCC;border-collapse:collapse;border:none;border-color:#d3d3d3}table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{border:none;border-color:#d3d3d3}td[_ngcontent-%COMP%]{border:none}.width[_ngcontent-%COMP%]{width:700px}.singleLevel[_ngcontent-%COMP%]{color:#6c757d}.twoMetricLabelWidth[_ngcontent-%COMP%]{width:250px}.table[_ngcontent-%COMP%] > thead[_ngcontent-%COMP%] > tr[_ngcontent-%COMP%] > th[_ngcontent-%COMP%]{background-color:#d9e9f3}.my-table[_ngcontent-%COMP%]{border-collapse:separate;border-spacing:0;border-radius:5px;overflow:hidden}.overFlowAuto[_ngcontent-%COMP%]{overflow:auto;padding-bottom:5px!important}th[_ngcontent-%COMP%]{background-color:#032046;font-weight:400}.pageSubtitle[_ngcontent-%COMP%]{color:gray}\"]\n  });\n  return DataCreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}