{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { isEqual } from \"lodash\";\nimport * as moment from 'moment-timezone';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\n// tsc-library\nimport { DateFormatEnum, DateInputTypeEnum } from '@library/date';\nimport { COMMON_CONSTANT, FormErrorEnum, MatSelectSearchService, MaterialFormFieldAppearance, NocFileUploadEnum, TypeConfirmationDialog } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@carbon/controller/document.controller\";\nimport * as i4 from \"@library/unit-service\";\nimport * as i5 from \"@library/date\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@library/storage-service\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"@angular/material/card\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/input\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"ngx-mat-select-search\";\nimport * as i16 from \"@angular/material/button\";\nimport * as i17 from \"@angular/material/tooltip\";\nconst _c0 = [\"fileInput\"];\nconst _c1 = [\"customDateInput\"];\nfunction TotalAmountComponent_ng_container_5_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.FormErrorEnum.NEGATIVE, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_5_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_5_mat_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r12.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r12.name, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_5_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_5_ng_container_24_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction TotalAmountComponent_ng_container_5_ng_container_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵelementStart(2, \"div\", 22);\n    i0.ɵɵelementStart(3, \"input\", 23, 24);\n    i0.ɵɵlistener(\"change\", function TotalAmountComponent_ng_container_5_ng_container_24_Template_input_change_3_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      const formGroup_r3 = ctx_r16.$implicit;\n      const i_r4 = ctx_r16.index;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.fileUpload($event, formGroup_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 25);\n    i0.ɵɵelementStart(6, \"div\", 8);\n    i0.ɵɵelementStart(7, \"div\", 26);\n    i0.ɵɵelementStart(8, \"div\", 27);\n    i0.ɵɵtemplate(9, TotalAmountComponent_ng_container_5_ng_container_24_ng_container_9_Template, 1, 0, \"ng-container\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 27);\n    i0.ɵɵelementStart(11, \"div\", 29);\n    i0.ɵɵtext(12);\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 30);\n    i0.ɵɵelementStart(16, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function TotalAmountComponent_ng_container_5_ng_container_24_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext();\n      const formGroup_r3 = ctx_r19.$implicit;\n      const i_r4 = ctx_r19.index;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.removeFile(formGroup_r3, i_r4);\n    });\n    i0.ɵɵelementStart(17, \"span\", 32);\n    i0.ɵɵtext(18, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext();\n    const i_r4 = ctx_r20.index;\n    const formGroup_r3 = ctx_r20.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(7);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c2, ctx_r10.docFileList[i_r4] == null));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", formGroup_r3.get(\"docName\").value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", formGroup_r3.get(\"docSize\").value, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_5_ng_container_25_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TotalAmountComponent_ng_container_5_ng_container_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 25);\n    i0.ɵɵelementStart(2, \"div\", 8);\n    i0.ɵɵelementStart(3, \"div\", 33);\n    i0.ɵɵtemplate(4, TotalAmountComponent_ng_container_5_ng_container_25_ng_container_4_Template, 1, 0, \"ng-container\", 28);\n    i0.ɵɵelementStart(5, \"div\", 27);\n    i0.ɵɵelementStart(6, \"div\", 34);\n    i0.ɵɵelementStart(7, \"a\", 35);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 30);\n    i0.ɵɵelementStart(10, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function TotalAmountComponent_ng_container_5_ng_container_25_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const _r22 = i0.ɵɵreference(14);\n      return _r22.click();\n    });\n    i0.ɵɵelementStart(11, \"span\", 37);\n    i0.ɵɵtext(12, \" edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"input\", 38, 24);\n    i0.ɵɵlistener(\"change\", function TotalAmountComponent_ng_container_5_ng_container_25_Template_input_change_13_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r26 = i0.ɵɵnextContext();\n      const formGroup_r3 = ctx_r26.$implicit;\n      const i_r4 = ctx_r26.index;\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.fileUpload($event, formGroup_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function TotalAmountComponent_ng_container_5_ng_container_25_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r28 = i0.ɵɵnextContext();\n      const formGroup_r3 = ctx_r28.$implicit;\n      const i_r4 = ctx_r28.index;\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.deleteConfirmation(formGroup_r3, i_r4);\n    });\n    i0.ɵɵelementStart(16, \"span\", 32);\n    i0.ɵɵtext(17, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const formGroup_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(7);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"href\", formGroup_r3.get(\"docPath\").value, i0.ɵɵsanitizeUrl);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c2, !formGroup_r3.get(\"docPath\").value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", formGroup_r3.get(\"docName\").value, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainerStart(1, 6);\n    i0.ɵɵelementStart(2, \"div\", 7);\n    i0.ɵɵelementStart(3, \"div\", 8);\n    i0.ɵɵelementStart(4, \"lib-date-input\", 9, 10);\n    i0.ɵɵlistener(\"emitFilter\", function TotalAmountComponent_ng_container_5_Template_lib_date_input_emitFilter_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r31);\n      const formGroup_r3 = restoredCtx.$implicit;\n      const i_r4 = restoredCtx.index;\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.dateInpChange(formGroup_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelementStart(7, \"div\", 11);\n    i0.ɵɵelementStart(8, \"mat-form-field\", 12);\n    i0.ɵɵelementStart(9, \"mat-label\", 13);\n    i0.ɵɵtext(10, \"Quantity of Gas Exported\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"input\", 14);\n    i0.ɵɵtemplate(12, TotalAmountComponent_ng_container_5_mat_error_12_Template, 2, 1, \"mat-error\", 15);\n    i0.ɵɵtemplate(13, TotalAmountComponent_ng_container_5_mat_error_13_Template, 2, 1, \"mat-error\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 16);\n    i0.ɵɵelementStart(15, \"mat-form-field\", 17);\n    i0.ɵɵelementStart(16, \"mat-label\", 13);\n    i0.ɵɵtext(17, \"Select Unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"mat-select\", 18);\n    i0.ɵɵelementStart(19, \"mat-option\");\n    i0.ɵɵelement(20, \"ngx-mat-select-search\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(21, TotalAmountComponent_ng_container_5_mat_option_21_Template, 2, 2, \"mat-option\", 20);\n    i0.ɵɵpipe(22, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(23, TotalAmountComponent_ng_container_5_mat_error_23_Template, 2, 1, \"mat-error\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, TotalAmountComponent_ng_container_5_ng_container_24_Template, 19, 6, \"ng-container\", 15);\n    i0.ɵɵtemplate(25, TotalAmountComponent_ng_container_5_ng_container_25_Template, 18, 6, \"ng-container\", 15);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const formGroup_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"materialFieldWidthInp\", true)(\"materialFormFieldAppearanceInp\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE)(\"isMandatoryFieldInp\", true)(\"dateInputTypeInp\", ctx_r0.DateInputTypeEnum.CUSTOM_INPUT)(\"cdrFormatInp\", ctx_r0.DateFormatEnum.DD_MMM_YYYY)(\"labelInp\", \"Accounting Period\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandlingFA(ctx_r0.activityDataFA, i_r4, \"gasExported\", \"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandlingFA(ctx_r0.activityDataFA, i_r4, \"gasExported\", \"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r0.unitSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx_r0.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(22, 17, ctx_r0.unitSelectSearch.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandlingFA(ctx_r0.activityDataFA, i_r4, \"gasExportedUnitID\", \"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", formGroup_r3.get(\"docPath\").value == null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", formGroup_r3.get(\"docPath\").value != null);\n  }\n}\nfunction TotalAmountComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"div\", 40);\n    i0.ɵɵelement(2, \"img\", 41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r2.billFileName);\n  }\n}\n// / tsc-library\nexport let TotalAmountComponent = /*#__PURE__*/(() => {\n  class TotalAmountComponent {\n    constructor(dialog, formBuilder, carbonDocumentController, unitService, dateService, toastrService, storageService, activatedRoute) {\n      this.dialog = dialog;\n      this.formBuilder = formBuilder;\n      this.carbonDocumentController = carbonDocumentController;\n      this.unitService = unitService;\n      this.dateService = dateService;\n      this.toastrService = toastrService;\n      this.formGroupChange = new EventEmitter();\n      this.docUploadChange = new EventEmitter();\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.DateInputTypeEnum = DateInputTypeEnum;\n      this.FormErrorEnum = FormErrorEnum;\n      this.DateFormatEnum = DateFormatEnum;\n      this.unitSelectSearch = new MatSelectSearchService(['name']);\n      this.billFile = null;\n      this.noBillFileAvailable = true;\n      this.isEqual = true;\n      this.errorHandlingFA = (formArray, index, controlPath, error) => {\n        const formGroup = formArray.at(index);\n        return formGroup.get(controlPath).hasError(error);\n      };\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n      activatedRoute.queryParams.subscribe(qParams => {\n        this.action = qParams['action'];\n        this.activityID = Number(qParams['activityID']);\n      });\n      this.activityStdKeyID = activatedRoute.snapshot.data.activityKeyID;\n    }\n    ngOnInit() {\n      this.getUnit();\n    }\n    ngOnChanges(changes) {\n      if (this.action == 'create') {\n        if (changes.activityDataFG.firstChange) {\n          this.formDataInit();\n        }\n        if (changes === null || changes === void 0 ? void 0 : changes.defaultDataCollectionMethodID) {\n          if (this.defaultDataCollectionMethodID != undefined || this.defaultDataCollectionMethodID != null) {\n            this.setDataCollectionMethod();\n          }\n        }\n      }\n    }\n    ngAfterViewInit() {\n      this.fileInputLoadSub = this.fileInput.changes.subscribe(() => this.updateFileInputArray());\n      this.updateFileInputArray();\n      if (this.action == 'update') {\n        this.activityData = this.activityConfig.activityData;\n        this.patchActivityData();\n        this.dateInputSub = this.customDateInputs.changes.subscribe(list => {\n          if (list.length > 0) {\n            this.patchDate();\n            this.dateInputSub.unsubscribe();\n          }\n        });\n      }\n    }\n    updateFileInputArray() {\n      if (this.fileInput && this.fileInput.length > 0) {\n        this.fileInputArr = this.fileInput.toArray();\n      }\n    }\n    formDataInit() {\n      this.activityDataFA.push(this.formBuilder.group({\n        activityID: [this.activityID],\n        activityKeyID: [this.activityStdKeyID],\n        activityDataID: [],\n        startDate: [, Validators.required],\n        endDate: [, Validators.required],\n        dataCollectionMethodID: [this.defaultDataCollectionMethodID],\n        gasExported: [, [Validators.required, Validators.min(0)]],\n        gasExportedUnitID: [, Validators.required],\n        docID: [],\n        docType: [],\n        docName: [],\n        docPath: [],\n        docSize: []\n      }));\n      this.formGroupChange.emit(this.activityDataFG);\n    }\n    get activityDataFA() {\n      return this.activityDataFG.get('activityData');\n    }\n    patchActivityData() {\n      this.activityDataFA.push(this.formBuilder.group({\n        activityID: [this.activityID],\n        activityKeyID: [this.activityStdKeyID],\n        activityDataID: [this.activityData.id],\n        startDate: [this.activityData.startDate],\n        endDate: [this.activityData.endDate],\n        dataCollectionMethodID: [this.defaultDataCollectionMethodID],\n        gasExported: [this.activityData.gasExported],\n        gasExportedUnitID: [this.activityData.gasExportedUnit.unitID],\n        docID: [this.activityData.file ? this.activityData.file.id : null],\n        docName: [this.activityData.file ? this.activityData.file.name : null],\n        docPath: [this.activityData.file ? this.activityData.file.path : null],\n        docSize: []\n      }));\n      this.formGroupChange.emit(this.activityDataFG);\n      this.activityDataFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.activityDataFG.value));\n      this.initialObject = this.activityDataFG.value;\n      this.isEqual = true;\n      this.patchDate();\n    }\n    patchDate() {\n      const customDateInputInstance = this.customDateInputs.toArray()[0];\n      if (customDateInputInstance) {\n        customDateInputInstance.daterange.patchValue({\n          startDate: moment(this.activityData['startDate']),\n          endDate: moment(this.activityData['endDate'])\n        });\n      }\n    }\n    setDataCollectionMethod() {\n      this.activityDataFA.controls.forEach(group => {\n        group.get('dataCollectionMethodID').patchValue(this.defaultDataCollectionMethodID);\n      });\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let unit = yield this.unitService.getUnit([]);\n        this.unitM = this.unitService.filterUnit(unit, [UnitTypeKeyID.MASS, UnitTypeKeyID.VOLUME]);\n        this.unitSelectSearch.entityArr = this.unitM;\n        this.unitSelectSearch.createSubscription();\n      });\n    }\n    dateInpChange(formGroup, index) {\n      if (this.customDateInputs) {\n        const customDateInputInstance = this.customDateInputs.toArray()[index];\n        let startDate;\n        let endDate;\n        if (customDateInputInstance) {\n          startDate = customDateInputInstance.startDateFC.value;\n          endDate = customDateInputInstance.endDateFC.value;\n        }\n        if (startDate) {\n          const formatted_startDate = this.dateService.formatDate(startDate, DateFormatEnum.YYYY_MM_DD);\n          formGroup.get('startDate').patchValue(formatted_startDate);\n        }\n        if (endDate) {\n          const formatted_endDate = this.dateService.formatDate(endDate, DateFormatEnum.YYYY_MM_DD);\n          formGroup.get('endDate').patchValue(formatted_endDate);\n        }\n      }\n    }\n    fileUpload(event, formGroup, index) {\n      let file = event.target.files[0];\n      if (file) {\n        if (file.type !== 'application/pdf') {\n          this.toastrService.error(NocFileUploadEnum.INVALID_FILE_TYPE_ERROR);\n          return;\n        }\n        if (file.size > NocFileUploadEnum.MAX_FILE_SIZE) {\n          this.toastrService.error(NocFileUploadEnum.INVAID_FILE_SIZE_ERROR);\n          return;\n        }\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = e => {};\n        this.billFile = file;\n        this.billFileName = file['name'];\n        formGroup.get('docName').patchValue(file['name']);\n        formGroup.get('docSize').patchValue(this.getFileSizeWithUnit(file['size']));\n        this.docFileList[index] = this.billFile;\n        if (this.action == 'update') {\n          this.fileCreateUpdate(formGroup);\n        }\n      } else {\n        this.toastrService.error('Please upload a file!');\n        return;\n      }\n    }\n    getFileSizeWithUnit(billFileSize) {\n      const fileSizeInKB = Math.round(billFileSize / 1024);\n      const fileSizeInMB = Math.round(fileSizeInKB / 1024);\n      const fileSizeInGB = Math.round(fileSizeInMB / 1024);\n      if (fileSizeInGB > 1) {\n        return fileSizeInGB + ' GB';\n      } else if (fileSizeInMB > 1) {\n        return fileSizeInMB + ' MB';\n      } else {\n        return fileSizeInKB + ' KB';\n      }\n    }\n    removeFile(formGroup, index) {\n      if (this.action == 'create') {\n        this.fileInputArr[index].nativeElement.value = null;\n      }\n      this.billFile = null;\n      this.billFileName = '';\n      formGroup.get('docName').reset();\n      formGroup.get('docSize').reset();\n      formGroup.get('docPath').reset(null);\n      formGroup.get('docID').reset();\n      this.docFileList[index] = this.billFile;\n    }\n    toFormData() {\n      const formData = new FormData();\n      formData.append('payload', this.billFile);\n      return formData;\n    }\n    fileCreateUpdate(formGroup) {\n      if (formGroup.get('docID').value == null) {\n        this.carbonDocumentController.createDocument(this.currentOrgID, formGroup.get('activityDataID').value, ActivityKeyIDEnum.PROCESS_WASTE_GAS_EXPORT, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileCreate -\", error);\n        });\n      } else {\n        this.carbonDocumentController.updateDocument(this.currentOrgID, formGroup.get('docID').value, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileUpdate -\", error);\n        });\n      }\n    }\n    updateFileFormControl(formGroup) {\n      formGroup.get('docID').patchValue(this.file.id);\n      formGroup.get('docName').patchValue(this.file.name);\n      formGroup.get('docPath').patchValue(this.file.path);\n    }\n    deleteConfirmation(formGroup, index) {\n      const dialogRef = this.dialog.open(TypeConfirmationDialog, {\n        minWidth: '650px',\n        maxWidth: '600px',\n        data: {\n          icon: 'delete',\n          header: 'Are you sure you want to delete ?',\n          body: '<p class = \"ps-1\"><strong class=\"pe-1\"> Note:</strong>This file will be deleted permanently and you won`t be able to track it`s progress.</p><span class=\"fw-bold ps-1\">Are you sure you want to delete?</span>',\n          confirmationInput: 'DELETE',\n          buttonOne: 'Cancel',\n          buttonTwo: 'Delete'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.deleteDocument(formGroup.get('docID').value, formGroup, index);\n        } else {\n          dialogRef.close();\n        }\n      });\n    }\n    deleteDocument(docID, formGroup, index) {\n      this.carbonDocumentController.deleteDocument(this.currentOrgID, docID).subscribe(res => {\n        this.removeFile(formGroup, index);\n      }, error => {\n        console.log(\"error in deleteDocument -\", error);\n      });\n    }\n  }\n  TotalAmountComponent.ɵfac = function TotalAmountComponent_Factory(t) {\n    return new (t || TotalAmountComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.CarbonDocumentController), i0.ɵɵdirectiveInject(i4.UnitService), i0.ɵɵdirectiveInject(i5.DateService), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.StorageService), i0.ɵɵdirectiveInject(i8.ActivatedRoute));\n  };\n  TotalAmountComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TotalAmountComponent,\n    selectors: [[\"app-total-amount\"]],\n    viewQuery: function TotalAmountComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customDateInputs = _t);\n      }\n    },\n    inputs: {\n      activityConfig: \"activityConfig\",\n      activityDataFG: \"activityDataFG\",\n      docFileList: \"docFileList\",\n      defaultDataCollectionMethodID: \"defaultDataCollectionMethodID\"\n    },\n    outputs: {\n      formGroupChange: \"formGroupChange\",\n      docUploadChange: \"docUploadChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [\"formArrayName\", \"activityData\"], [4, \"ngFor\", \"ngForOf\"], [\"docImg\", \"\"], [3, \"formGroupName\"], [1, \"row\"], [1, \"col-sm-8\"], [1, \"cursorPointer\", 3, \"materialFieldWidthInp\", \"materialFormFieldAppearanceInp\", \"isMandatoryFieldInp\", \"dateInputTypeInp\", \"cdrFormatInp\", \"labelInp\", \"emitFilter\"], [\"customDateInput\", \"\"], [1, \"col-sm-5\"], [\"floatPlaceholder\", \"never\", 1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"type\", \"number\", \"placeholder\", \"0.00\", \"matInput\", \"\", \"formControlName\", \"gasExported\", \"min\", \"0\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [1, \"col-sm-3\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [\"formControlName\", \"gasExportedUnitID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by unit name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"col-sm-8\", \"fileInput\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"row\", \"pt-2\"], [1, \"border\", \"rounded\", \"d-flex\", 3, \"ngClass\"], [1, \"p-1\"], [4, \"ngTemplateOutlet\"], [1, \"centerAlignVertical\", \"p-1\"], [1, \"ms-auto\", \"p-1\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-danger\"], [1, \"border\", \"rounded\", \"d-flex\"], [1, \"centerAlignVertical\", \"p-3\"], [\"target\", \"_blank\", 3, \"href\", \"ngClass\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Edit\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-primary\", \"updateIconHover\", \"fs-5\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 2, \"display\", \"none\", 3, \"change\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Delete\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"mat-raised-button\", \"\", \"matTooltipPosition\", \"below\", 1, \"docIcon\", \"p-1\", 3, \"matTooltip\"], [\"height\", \"40px\", \"src\", \"assets/images/default-doc.ico\", \"alt\", \"bill document preview\"]],\n    template: function TotalAmountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \"Activity Data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementContainerStart(4, 3);\n        i0.ɵɵtemplate(5, TotalAmountComponent_ng_container_5_Template, 26, 19, \"ng-container\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, TotalAmountComponent_ng_template_6_Template, 3, 1, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityDataFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityDataFA.controls);\n      }\n    },\n    directives: [i9.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormArrayName, i10.NgForOf, i2.FormGroupName, i5.DateInputComponent, i11.MatFormField, i11.MatLabel, i2.NumberValueAccessor, i2.MinValidator, i12.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i10.NgIf, i13.MatSelect, i14.MatOption, i15.MatSelectSearchComponent, i2.FormControlDirective, i11.MatError, i10.NgClass, i10.NgTemplateOutlet, i16.MatButton, i17.MatTooltip, i11.MatSuffix],\n    pipes: [i10.AsyncPipe],\n    encapsulation: 2\n  });\n  return TotalAmountComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}