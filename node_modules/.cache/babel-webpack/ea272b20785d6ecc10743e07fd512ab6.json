{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as moment from 'moment';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { isEqual } from 'lodash';\nimport { ConfirmationDailog } from '../../../_shared/confirmation-dailog/confirmation-dailog.component';\nimport { EquipmentTabEnum } from '@carbon/enum/equiment.enum';\n// tsc-library\nimport { BulkUploadEnum, ButtonLabelEnum, DialogEnum, DialogResponseEnum, FormAction, InvalidForm, MatSelectSearchService, MaterialFormFieldAppearance, NocFileUploadEnum } from '@library/tsc-common';\nimport { ToastrColor, ToastrTitle } from '@library/toastr-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@carbon/service/fugitive-activity-type.service\";\nimport * as i4 from \"@carbon/service/gas.service\";\nimport * as i5 from \"@library/unit-service\";\nimport * as i6 from \"@carbon/controller/fugitive-myself-manufacture.controller\";\nimport * as i7 from \"@carbon/service/fugitive.service\";\nimport * as i8 from \"@library/toastr-service\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/tooltip\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/select\";\nimport * as i13 from \"@angular/material/core\";\nimport * as i14 from \"ngx-mat-select-search\";\nimport * as i15 from \"@angular/common\";\nimport * as i16 from \"@library/date\";\nimport * as i17 from \"@angular/material/input\";\nimport * as i18 from \"@angular/material/datepicker\";\nconst _c0 = [\"fileInput\"];\nfunction MyselfPurchaseSaleRetrofitDialog_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 34);\n    i0.ɵɵelementStart(1, \"span\", 35);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const gas_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", gas_r17.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", gas_r17.name, \" \");\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Gas is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Date is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Gas quantity is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_error_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Gas quantity can not be negative \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_option_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 34);\n    i0.ɵɵelementStart(1, \"span\", 35);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r18 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r18.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", unit_r18.name, \" -- \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r18.uomCode);\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_error_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Unit ID is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_option_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵlistener(\"click\", function MyselfPurchaseSaleRetrofitDialog_mat_option_45_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r21);\n      const type_r19 = restoredCtx.$implicit;\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.showTotalEquipmentCapacity(type_r19);\n    });\n    i0.ɵɵelementStart(1, \"span\", 35);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r19 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r19.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", type_r19.name, \" \");\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_error_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Type is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_form_field_47_mat_error_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r22.totalEquipmentCapacityHeader, \" is required \");\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_form_field_47_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r23.totalEquipmentCapacityHeader, \" can not be negative \");\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_form_field_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 17);\n    i0.ɵɵelementStart(1, \"mat-label\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 37);\n    i0.ɵɵtemplate(4, MyselfPurchaseSaleRetrofitDialog_mat_form_field_47_mat_error_4_Template, 2, 1, \"mat-error\", 11);\n    i0.ɵɵtemplate(5, MyselfPurchaseSaleRetrofitDialog_mat_form_field_47_mat_error_5_Template, 2, 1, \"mat-error\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", ctx_r10.totalEquipmentCapacityHeader);\n    i0.ɵɵproperty(\"appearance\", ctx_r10.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.totalEquipmentCapacityHeader, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.isTotalCapacityRequired && ctx_r10.errorHandling(\"totalEquipmentCapacity\", \"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.isTotalCapacityRequired && ctx_r10.errorHandling(\"totalEquipmentCapacity\", \"min\"));\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_form_field_48_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 34);\n    i0.ɵɵelementStart(1, \"span\", 35);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r26.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", unit_r26.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r26.uomCode);\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_form_field_48_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Unit ID is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_mat_form_field_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 19);\n    i0.ɵɵelementStart(1, \"mat-label\", 7);\n    i0.ɵɵtext(2, \"Unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-select\", 38);\n    i0.ɵɵelementStart(4, \"mat-option\", 21);\n    i0.ɵɵtext(5, \"Select unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, MyselfPurchaseSaleRetrofitDialog_mat_form_field_48_mat_option_6_Template, 5, 3, \"mat-option\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, MyselfPurchaseSaleRetrofitDialog_mat_form_field_48_mat_error_7_Template, 2, 0, \"mat-error\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"appearance\", ctx_r11.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r11.unitList);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r11.isTotalCapacityRequired && ctx_r11.errorHandling(\"totalEquipmentCapacityUnitID\", \"required\"));\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction MyselfPurchaseSaleRetrofitDialog_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 39);\n    i0.ɵɵelementStart(2, \"div\", 40);\n    i0.ɵɵelementStart(3, \"div\", 35);\n    i0.ɵɵelementStart(4, \"span\", 41);\n    i0.ɵɵtext(5, \" Attach bill\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function MyselfPurchaseSaleRetrofitDialog_div_49_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.uploadFile();\n    });\n    i0.ɵɵtext(7, \"Upload file\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"input\", 43, 44);\n    i0.ɵɵlistener(\"change\", function MyselfPurchaseSaleRetrofitDialog_div_49_Template_input_change_8_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.fileUpload($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 45);\n    i0.ɵɵelementStart(11, \"div\", 46);\n    i0.ɵɵelement(12, \"img\", 47);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 48);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 49);\n    i0.ɵɵelementStart(16, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function MyselfPurchaseSaleRetrofitDialog_div_49_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.removeFile();\n    });\n    i0.ɵɵelementStart(17, \"span\", 51);\n    i0.ɵɵtext(18, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c1, !ctx_r12.noFileSelected));\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c1, ctx_r12.noFileSelected));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.uploadedFileName, \" \");\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_button_59_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 52);\n    i0.ɵɵlistener(\"click\", function MyselfPurchaseSaleRetrofitDialog_button_59_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r33);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.createRecord();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.ButtonLabelEnum.CREATE_BTN_LABEL, \" \");\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\nfunction MyselfPurchaseSaleRetrofitDialog_button_60_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 53);\n    i0.ɵɵlistener(\"click\", function MyselfPurchaseSaleRetrofitDialog_button_60_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.getConfirmation();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c2, ctx_r15.isEqual));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r15.ButtonLabelEnum.SAVE_BTN_LABEL, \" \");\n  }\n}\nfunction MyselfPurchaseSaleRetrofitDialog_button_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 54);\n  }\n}\n// /tsc-library\nexport let MyselfPurchaseSaleRetrofitDialog = /*#__PURE__*/(() => {\n  class MyselfPurchaseSaleRetrofitDialog {\n    constructor(dialog, formBuilder, dialogRef, fugitiveActivityTypeService, gasService, unitService, fugitiveMyselfManufacturerController, fugitiveService, toastrService, data) {\n      this.dialog = dialog;\n      this.formBuilder = formBuilder;\n      this.dialogRef = dialogRef;\n      this.fugitiveActivityTypeService = fugitiveActivityTypeService;\n      this.gasService = gasService;\n      this.unitService = unitService;\n      this.fugitiveMyselfManufacturerController = fugitiveMyselfManufacturerController;\n      this.fugitiveService = fugitiveService;\n      this.toastrService = toastrService;\n      this.data = data;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.FormAction = FormAction;\n      this.ButtonLabelEnum = ButtonLabelEnum;\n      this.title = 'Create';\n      this.isCreate = false;\n      this.uploadedFile = null;\n      this.noFileSelected = true;\n      this.isReadOnly = false;\n      this.isTotalCapacityRequired = false;\n      this.gasFilterFC = new FormControl();\n      this.gasFilterUnsubscribe = new Subject();\n      this.gasFiltered = new ReplaySubject(1);\n      this.maxLength = 800;\n      this.gasSearchUtil = new MatSelectSearchService(['name']);\n      this.errorHandling = (control, error) => {\n        return this.fugitiveFormFG.get(control).hasError(error);\n      };\n      this.action = this.data['action'];\n      this.currentOrgID = this.data['currentOrgID'];\n      this.type = this.data['type'];\n      this.calculationApproachKeyID = this.data['calculationApproachKeyID'];\n      this.recordDate = this.data['recordDate'];\n      this.dialogRef.disableClose = true;\n    }\n    ngOnInit() {\n      this.fugitiveFormFGInit();\n      this.getUnit();\n      this.getGas();\n      this.getActivityTypeList();\n      //form field headers\n      this.titleName = this.data['titleName'];\n      this.getFormHeaderRecordDate();\n      this.getFormHeaderGasQuantity();\n      this.getFormHeaderTypeName();\n      this.getFormHeaderTotalEquipmentCapacity();\n      if (this.action == FormAction.CREATE) {\n        this.isCreate = true;\n      } else if (this.action == FormAction.UPDATE) {\n        this.isCreate = false;\n        this.isReadOnly = true;\n        this.title = \"Update\";\n        this.equipmentCapacityID = this.data['equipmentCapacityID'];\n        this.getRecordByID();\n      } else {\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, 'Unrecognized action!', ToastrColor.ERROR);\n        this.dialogRef.close();\n      }\n    }\n    fugitiveFormFGInit() {\n      this.fugitiveFormFG = this.formBuilder.group({\n        recordID: [],\n        gasID: [, Validators.required],\n        recordDate: [, Validators.required],\n        gasQuantity: [, Validators.required],\n        gasQuantityUnitID: [, Validators.required],\n        totalEquipmentCapacity: [],\n        totalEquipmentCapacityUnitID: [],\n        equipmentType: this.type,\n        equipmentTypeID: [],\n        note: [],\n        calculationApproachKeyID: [this.calculationApproachKeyID]\n      });\n    }\n    formatDate(control) {\n      let date = moment(this.fugitiveFormFG.controls[control].value).format(\"YYYY-MM-DD\");\n      this.fugitiveFormFG.controls[control].patchValue(date);\n    }\n    getGas() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.gasList = yield this.gasService.getGas();\n        // ngx mat select search\n        this.gasSearchUtil.entityArr = this.gasList;\n        this.gasSearchUtil.createSubscription();\n        // this.gasFiltered.next(this.gasList.slice());\n        // this.gasFilterFC.valueChanges\n        // \t.pipe(takeUntil(this.gasFilterUnsubscribe)).subscribe(async () => {\n        // \t\tthis.gasFiltered = await this.utility.filterValue(this.gasList, this.gasFilterFC.value, 'name');\n        // \t});\n      });\n    }\n\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let unitFilter = [];\n        unitFilter = ['unitType:MASS'];\n        this.unitList = yield this.unitService.getUnit(unitFilter);\n      });\n    }\n    fileUpload(event) {\n      let file = event.target.files[0];\n      if (file) {\n        if (file.type !== 'application/pdf') {\n          this.toastrService.openToast(ToastrTitle.ERROR, NocFileUploadEnum.INVALID_FILE_TYPE_ERROR, ToastrColor.ERROR);\n          return;\n        }\n        if (file.size > BulkUploadEnum.MAX_FILE_SIZE) {\n          this.toastrService.openToast(ToastrTitle.ERROR, NocFileUploadEnum.INVAID_FILE_SIZE_ERROR, ToastrColor.ERROR);\n          return;\n        }\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = e => {};\n        this.uploadedFile = file;\n        this.noFileSelected = false;\n        this.uploadedFileName = file['name'];\n      }\n    }\n    removeFile() {\n      this.uploadedFile = null;\n      this.uploadedFileName = '';\n      this.noFileSelected = true;\n      this.fileInput.nativeElement.value = null;\n    }\n    uploadFile() {\n      this.fileInput.nativeElement.click();\n    }\n    toFormData() {\n      const formData = new FormData();\n      formData.append(\"file\", this.uploadedFile);\n      formData.append(\"data\", JSON.stringify(this.fugitiveFormFG.value));\n      return formData;\n    }\n    getRecordByID() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.fugitiveRecord = yield this.fugitiveService.getServiceMyselfRecordByID(this.currentOrgID, this.equipmentCapacityID, this.calculationApproachKeyID);\n        this.patchRecord(this.fugitiveRecord);\n      });\n    }\n    createRecord() {\n      if (!this.checkForValidForm()) {\n        return [];\n      }\n      this.fugitiveMyselfManufacturerController.createEquipmentGasQuantityRecord(this.currentOrgID, this.toFormData(), this.calculationApproachKeyID).subscribe(createRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in createRecord -', error);\n      });\n    }\n    patchRecord(fugitiveRecord) {\n      this.fugitiveFormFG.patchValue({\n        recordID: fugitiveRecord['recordID'],\n        gasID: fugitiveRecord['gasID'],\n        recordDate: fugitiveRecord['recordDate'],\n        gasQuantity: fugitiveRecord['gasQuantity'],\n        gasQuantityUnitID: fugitiveRecord['gasQuantityUnitID'],\n        totalEquipmentCapacity: fugitiveRecord['totalEquipmentCapacity'],\n        totalEquipmentCapacityUnitID: fugitiveRecord['totalEquipmentCapacityUnitID'],\n        equipmentTypeID: fugitiveRecord['equipmentTypeID'],\n        note: fugitiveRecord['note']\n      });\n      if (fugitiveRecord['totalEquipmentCapacity'] != null && fugitiveRecord['totalEquipmentCapacityUnitID'] != null) {\n        this.isTotalCapacityRequired = true;\n      }\n      this.initialObject = this.fugitiveFormFG.value;\n      this.isEqual = true;\n    }\n    getConfirmation() {\n      if (!this.checkForValidForm()) {\n        return [];\n      }\n      if (this.showConfirmationDialog()) {\n        let recalculationDate = moment(this.recordDate).startOf('month').format('DD-MMM-YYYY');\n        const message = 'This will cause re-calculation from ' + recalculationDate + '. Fugitive emissions from refrigeration, air conditioning and fire suppression after the above date will be re-calculated.';\n        const dialogRef = this.dialog.open(ConfirmationDailog, {\n          data: {\n            currentOrgID: this.currentOrgID,\n            message: message\n          },\n          maxWidth: '500px',\n          maxHeight: '600px'\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          if (result == DialogResponseEnum.YES) {\n            this.updateRecord();\n          }\n          // else {\n          // \tthis.dialogRef.close('close');\n          // }\n        });\n      } else {\n        this.updateRecord();\n      }\n    }\n    updateRecord() {\n      this.fugitiveMyselfManufacturerController.updateEquipmentGasQuantityRecord(this.currentOrgID, this.equipmentCapacityID, this.fugitiveFormFG.value, this.calculationApproachKeyID).subscribe(updateRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in updateRecord -', error);\n      });\n    }\n    getActivityTypeList() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.activityTypeList = yield this.fugitiveActivityTypeService.getFugitiveActivityType(this.type, this.calculationApproachKeyID);\n      });\n    }\n    getFormHeaderRecordDate() {\n      if (this.type == EquipmentTabEnum.PURCHASE) {\n        this.recordDateHeader = 'Purchase/ Acquired on';\n      } else if (this.type == EquipmentTabEnum.SALES) {\n        this.recordDateHeader = 'Sold / Disposed on';\n      } else {\n        this.recordDateHeader = 'Date';\n      }\n    }\n    getFormHeaderGasQuantity() {\n      if (this.type == EquipmentTabEnum.PURCHASE) {\n        this.gasQuantityHeader = 'Quantity of gas used to charge new equipment on-site (Enter 0 if it was pre-charged by manufacturer)';\n      } else if (this.type == EquipmentTabEnum.SALES) {\n        this.gasQuantityHeader = 'Quantity of gas sold/ disposed';\n      } else {\n        this.gasQuantityHeader = 'Quantity of gas';\n      }\n    }\n    getFormHeaderTypeName() {\n      if (this.type == EquipmentTabEnum.PURCHASE) {\n        this.typeHeader = 'Purchase type';\n      } else if (this.type == EquipmentTabEnum.SALES) {\n        this.typeHeader = 'Sale type';\n      } else if (this.type == EquipmentTabEnum.RETROFIT) {\n        this.typeHeader = 'Retrofit type';\n      } else {\n        this.typeHeader = 'Type';\n      }\n    }\n    getFormHeaderTotalEquipmentCapacity() {\n      if (this.type == EquipmentTabEnum.PURCHASE) {\n        this.totalEquipmentCapacityHeader = 'Total gas capacity of new equipment';\n      } else if (this.type == EquipmentTabEnum.SALES) {\n        this.totalEquipmentCapacityHeader = 'Total gas capacity of retiring equipment';\n      } else {\n        this.totalEquipmentCapacityHeader = 'Total gas capacity of equipment';\n      }\n    }\n    showTotalEquipmentCapacity(type) {\n      this.isTotalCapacityRequired = type.totalCapacityRequired;\n      if (!this.isCreate) {\n        if (type.id != this.fugitiveRecord['equipmentTypeID']) {\n          this.setEquipmentCapacityAndUnit(null, null);\n        } else {\n          this.setEquipmentCapacityAndUnit(this.fugitiveRecord['totalEquipmentCapacity'], this.fugitiveRecord['totalEquipmentCapacityUnitID']);\n        }\n      }\n    }\n    checkForValidForm() {\n      let isFormValid = true;\n      if (this.fugitiveFormFG.invalid) {\n        this.fugitiveFormFG.markAllAsTouched();\n        if (!this.isTotalCapacityRequired && this.fugitiveFormFG.get('equipmentTypeID').value != null) {\n          this.setEquipmentCapacityAndUnit(null, null);\n          isFormValid = true;\n        } else {\n          console.log('invalid form -', this.fugitiveFormFG.value);\n          this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n          isFormValid = false;\n        }\n      }\n      return isFormValid;\n    }\n    showConfirmationDialog() {\n      // if only note is updated, no need to show confirmation dailog box because it will not affect calculations\n      let showConfirmationDialog = false;\n      if (this.fugitiveFormFG.get('gasQuantity').touched || this.fugitiveFormFG.get('gasQuantityUnitID').touched || this.fugitiveFormFG.get('totalEquipmentCapacity').touched || this.fugitiveFormFG.get('totalEquipmentCapacityUnitID').touched || this.fugitiveFormFG.get('equipmentTypeID').touched) {\n        showConfirmationDialog = true;\n      }\n      if (!showConfirmationDialog) {\n        let newRecordDate = this.fugitiveFormFG.get('recordDate').value;\n        if (newRecordDate !== this.fugitiveRecord['recordDate']) {\n          showConfirmationDialog = true;\n        }\n      }\n      return showConfirmationDialog;\n    }\n    setEquipmentCapacityAndUnit(totalEquipmentCapacity, totalEquipmentCapacityUnitID) {\n      this.fugitiveFormFG.patchValue({\n        totalEquipmentCapacity: totalEquipmentCapacity,\n        totalEquipmentCapacityUnitID: totalEquipmentCapacityUnitID\n      });\n    }\n    ngAfterViewInit() {\n      this.fugitiveFormFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.fugitiveFormFG.value));\n    }\n    openDatepicker(datepicker) {\n      if (!datepicker.opened) {\n        datepicker.open();\n      }\n    }\n  }\n  MyselfPurchaseSaleRetrofitDialog.ɵfac = function MyselfPurchaseSaleRetrofitDialog_Factory(t) {\n    return new (t || MyselfPurchaseSaleRetrofitDialog)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i3.FugitiveActivityTypeService), i0.ɵɵdirectiveInject(i4.GasService), i0.ɵɵdirectiveInject(i5.UnitService), i0.ɵɵdirectiveInject(i6.FugitiveMyselfManufacturerController), i0.ɵɵdirectiveInject(i7.FugitiveService), i0.ɵɵdirectiveInject(i8.ToastrService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  MyselfPurchaseSaleRetrofitDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MyselfPurchaseSaleRetrofitDialog,\n    selectors: [[\"app-myself-purchase-sale-retrofit-dialog\"]],\n    viewQuery: function MyselfPurchaseSaleRetrofitDialog_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n      }\n    },\n    decls: 62,\n    vars: 38,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogTitle\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", \"cdkFocusInitial\", \"\", \"matTooltip\", \"Close\", \"matTooltipPosition\", \"before\", 1, \"float-end\", \"matDialogClose\"], [1, \"material-symbols-outlined\"], [\"mat-dialog-content\", \"\", 1, \"matDialogContent\"], [3, \"formGroup\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"gasID\", \"required\", \"\", 3, \"disabled\"], [\"placeholderLabel\", \"Search by gas name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"appDateMonthYearFormat\", \"\", 1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\", \"click\", \"keydown.enter\", \"keydown.arrowdown\"], [\"matInput\", \"\", \"formControlName\", \"recordDate\", \"required\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"readonly\", \"dateInput\"], [\"matSuffix\", \"\", 3, \"for\"], [\"disabled\", \"false\"], [\"date\", \"\"], [3, \"appearance\", \"matTooltip\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"placeholder\", \"0\", \"formControlName\", \"gasQuantity\", \"required\", \"\", 1, \"formPlaceholder\"], [1, \"ms-2\", 3, \"appearance\"], [\"formControlName\", \"gasQuantityUnitID\", \"required\", \"\"], [\"disabled\", \"\"], [\"formControlName\", \"equipmentTypeID\", \"required\", \"\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"appearance\", \"matTooltip\", 4, \"ngIf\"], [\"class\", \"ms-2\", 3, \"appearance\", 4, \"ngIf\"], [1, \"matFieldWidth100\", \"mt-2\", 3, \"appearance\"], [\"matInput\", \"\", \"formControlName\", \"note\", 1, \"formPlaceholder\", 3, \"maxlength\"], [\"myInput\", \"\"], [\"mat-dialog-footer\", \"\", \"align\", \"end\"], [1, \"d-inline\", 3, \"ngSwitch\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"click\", 4, \"ngSwitchCase\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"ngClass\", \"click\", 4, \"ngSwitchCase\"], [\"class\", \"d-none\", 4, \"ngSwitchDefault\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [3, \"value\", \"click\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"placeholder\", \"0\", \"formControlName\", \"totalEquipmentCapacity\", \"required\", \"\", 1, \"formPlaceholder\"], [\"formControlName\", \"totalEquipmentCapacityUnitID\", \"required\", \"\"], [1, \"row\", \"my-3\", 3, \"ngClass\"], [1, \"col-sm-8\"], [1, \"my-auto\", \"fw-bold\", \"ms-1\", \"uploadDocumentFont\"], [\"type\", \"button\", 1, \"button\", \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"d-none\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"row\", \"border\", \"border-2\", \"rounded\", \"m-1\", \"p-2\", 3, \"ngClass\"], [1, \"col-sm-3\", \"docIcon\"], [\"height\", \"80px\", \"src\", \"assets/images/default-doc.ico\", \"alt\", \"noc document preview\"], [1, \"col-sm-7\", \"centerAlignVertical\", \"uploadDocumentFont\"], [1, \"col-sm-2\", \"centerAlign\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-danger\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"click\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"ngClass\", \"click\"], [1, \"d-none\"]],\n    template: function MyselfPurchaseSaleRetrofitDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r36 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 2);\n        i0.ɵɵelementStart(4, \"span\", 3);\n        i0.ɵɵtext(5, \"close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"form\", 5);\n        i0.ɵɵelementStart(8, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(9, \"mat-label\", 7);\n        i0.ɵɵtext(10, \"Select gas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-select\", 8);\n        i0.ɵɵelementStart(12, \"mat-option\");\n        i0.ɵɵelement(13, \"ngx-mat-select-search\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, MyselfPurchaseSaleRetrofitDialog_mat_option_14_Template, 3, 2, \"mat-option\", 10);\n        i0.ɵɵpipe(15, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, MyselfPurchaseSaleRetrofitDialog_mat_error_16_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-form-field\", 12);\n        i0.ɵɵlistener(\"click\", function MyselfPurchaseSaleRetrofitDialog_Template_mat_form_field_click_17_listener() {\n          i0.ɵɵrestoreView(_r36);\n          const _r2 = i0.ɵɵreference(23);\n          return ctx.openDatepicker(_r2);\n        })(\"keydown.enter\", function MyselfPurchaseSaleRetrofitDialog_Template_mat_form_field_keydown_enter_17_listener() {\n          i0.ɵɵrestoreView(_r36);\n          const _r2 = i0.ɵɵreference(23);\n          return ctx.openDatepicker(_r2);\n        })(\"keydown.arrowdown\", function MyselfPurchaseSaleRetrofitDialog_Template_mat_form_field_keydown_arrowdown_17_listener() {\n          i0.ɵɵrestoreView(_r36);\n          const _r2 = i0.ɵɵreference(23);\n          return ctx.openDatepicker(_r2);\n        });\n        i0.ɵɵelementStart(18, \"mat-label\", 7);\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 13);\n        i0.ɵɵlistener(\"dateInput\", function MyselfPurchaseSaleRetrofitDialog_Template_input_dateInput_20_listener() {\n          return ctx.formatDate(\"recordDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"mat-datepicker-toggle\", 14);\n        i0.ɵɵelement(22, \"mat-datepicker\", 15, 16);\n        i0.ɵɵtemplate(24, MyselfPurchaseSaleRetrofitDialog_mat_error_24_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-form-field\", 17);\n        i0.ɵɵelementStart(26, \"mat-label\", 7);\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"input\", 18);\n        i0.ɵɵtemplate(29, MyselfPurchaseSaleRetrofitDialog_mat_error_29_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵtemplate(30, MyselfPurchaseSaleRetrofitDialog_mat_error_30_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"mat-form-field\", 19);\n        i0.ɵɵelementStart(32, \"mat-label\", 7);\n        i0.ɵɵtext(33, \"Unit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"mat-select\", 20);\n        i0.ɵɵelementStart(35, \"mat-option\", 21);\n        i0.ɵɵtext(36, \"Select unit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(37, MyselfPurchaseSaleRetrofitDialog_mat_option_37_Template, 5, 3, \"mat-option\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(38, MyselfPurchaseSaleRetrofitDialog_mat_error_38_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(40, \"mat-label\", 7);\n        i0.ɵɵtext(41);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"mat-select\", 22);\n        i0.ɵɵelementStart(43, \"mat-option\", 21);\n        i0.ɵɵtext(44, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(45, MyselfPurchaseSaleRetrofitDialog_mat_option_45_Template, 3, 2, \"mat-option\", 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(46, MyselfPurchaseSaleRetrofitDialog_mat_error_46_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(47, MyselfPurchaseSaleRetrofitDialog_mat_form_field_47_Template, 6, 5, \"mat-form-field\", 24);\n        i0.ɵɵtemplate(48, MyselfPurchaseSaleRetrofitDialog_mat_form_field_48_Template, 8, 3, \"mat-form-field\", 25);\n        i0.ɵɵtemplate(49, MyselfPurchaseSaleRetrofitDialog_div_49_Template, 19, 7, \"div\", 11);\n        i0.ɵɵelementStart(50, \"mat-form-field\", 26);\n        i0.ɵɵelementStart(51, \"mat-label\", 7);\n        i0.ɵɵtext(52, \" Add a note \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(53, \"input\", 27, 28);\n        i0.ɵɵelementStart(55, \"mat-hint\");\n        i0.ɵɵtext(56);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"div\", 29);\n        i0.ɵɵelementStart(58, \"div\", 30);\n        i0.ɵɵtemplate(59, MyselfPurchaseSaleRetrofitDialog_button_59_Template, 2, 1, \"button\", 31);\n        i0.ɵɵtemplate(60, MyselfPurchaseSaleRetrofitDialog_button_60_Template, 2, 4, \"button\", 32);\n        i0.ɵɵtemplate(61, MyselfPurchaseSaleRetrofitDialog_button_61_Template, 1, 0, \"button\", 33);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(23);\n        const _r13 = i0.ɵɵreference(54);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\" \", ctx.title, \" \", ctx.titleName, \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.fugitiveFormFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isReadOnly);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.gasSearchUtil.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 36, ctx.gasSearchUtil.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.recordDateHeader, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matDatepicker\", _r2)(\"readonly\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r2);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"recordDate\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"matTooltip\", ctx.gasQuantityHeader);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.gasQuantityHeader);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasQuantity\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasQuantity\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.unitList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasQuantityUnitID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.typeHeader);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityTypeList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"equipmentTypeID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isTotalCapacityRequired);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isTotalCapacityRequired);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isReadOnly);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"maxlength\", ctx.maxLength);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\"Total number of character remaining: \", _r13.value.length, \" /\", ctx.maxLength, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.action);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.FormAction.CREATE);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.FormAction.UPDATE);\n      }\n    },\n    directives: [i1.MatDialogTitle, i9.MatButton, i1.MatDialogClose, i10.MatTooltip, i1.MatDialogContent, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i11.MatFormField, i11.MatLabel, i12.MatSelect, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i13.MatOption, i14.MatSelectSearchComponent, i2.FormControlDirective, i15.NgForOf, i15.NgIf, i16.DateMonthYearFormatDirective, i17.MatInput, i2.DefaultValueAccessor, i18.MatDatepickerInput, i18.MatDatepickerToggle, i11.MatSuffix, i18.MatDatepicker, i2.MinValidator, i2.NumberValueAccessor, i2.MaxLengthValidator, i11.MatHint, i15.NgSwitch, i15.NgSwitchCase, i15.NgSwitchDefault, i11.MatError, i15.NgClass],\n    pipes: [i15.AsyncPipe],\n    encapsulation: 2\n  });\n  return MyselfPurchaseSaleRetrofitDialog;\n})();","map":null,"metadata":{},"sourceType":"module"}