{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { ActivityConfig } from '@carbon/component/activity-config/activity-config';\nimport { SupplierTypeKeyIDEnum } from '@netzero/enum/supplier.enum';\nimport { PROCESS_INPUT_ENUM } from '@netzero/enum/process.enum';\nimport { DataInputMethod } from '@carbon/enum/data-input-method.enum';\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\n//tsc-library\nimport { COMMON_CONSTANT, MatSelectSearchService } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@netzero/service/supplier.service\";\nimport * as i5 from \"@carbon/service/data-input-method.service\";\nimport * as i6 from \"@netzero/service/product-and-service.service\";\nimport * as i7 from \"@library/tsc-common\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"ngx-mat-select-search\";\nimport * as i14 from \"@angular/material/chips\";\nimport * as i15 from \"@angular/material/input\";\nimport * as i16 from \"@angular/material/icon\";\nfunction CreateUpdateComponent_ng_container_4_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵelementStart(2, \"div\", 8);\n    i0.ɵɵelementStart(3, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(4, \"mat-label\", 10);\n    i0.ɵɵtext(5, \"Activity form name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 20);\n    i0.ɵɵtemplate(7, CreateUpdateComponent_ng_container_4_mat_error_7_Template, 2, 1, \"mat-error\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandling(ctx_r0.activityConfigFG, \"activityConfig.configName\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_div_6_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 25);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_div_6_mat_option_8_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const product_r13 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.setSourceTypeID(product_r13);\n    });\n    i0.ɵɵelementStart(1, \"span\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const product_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", product_r13.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(product_r13.name);\n  }\n}\nfunction CreateUpdateComponent_div_6_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"div\", 21);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(3, \"mat-label\", 10);\n    i0.ɵɵtext(4, \"Select precursor\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-select\", 22);\n    i0.ɵɵelementStart(6, \"mat-option\");\n    i0.ɵɵelement(7, \"ngx-mat-select-search\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, CreateUpdateComponent_div_6_mat_option_8_Template, 3, 2, \"mat-option\", 24);\n    i0.ɵɵpipe(9, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, CreateUpdateComponent_div_6_mat_error_10_Template, 2, 1, \"mat-error\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r10 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r1.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r1.productSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx_r1.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 6, ctx_r1.productSearchUtil.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorHandlingForFormArrayData(\"sourceID\", \"required\", i_r10));\n  }\n}\nfunction CreateUpdateComponent_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 27);\n    i0.ɵɵelementStart(1, \"span\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const supplier_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", supplier_r16.supplierID);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(supplier_r16.supplierName);\n  }\n}\nfunction CreateUpdateComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵelementStart(1, \"a\", 29);\n    i0.ɵɵtext(2, \"Click here to create a new supplier\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_chip_27_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 32);\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_chip_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 30);\n    i0.ɵɵlistener(\"removed\", function CreateUpdateComponent_mat_chip_27_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const email_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.removeEmail(email_r17);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, CreateUpdateComponent_mat_chip_27_button_2_Template, 3, 0, \"button\", 31);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const email_r17 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"removable\", ctx_r6.removable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", email_r17, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.removable);\n  }\n}\nfunction CreateUpdateComponent_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.FormErrorEnum.REQUIRED, \" \");\n  }\n}\n// /tsc-library/\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent extends ActivityConfig {\n    constructor(activatedRoute, formBuilder, storageService, supplierService, dataInputMethodService, productService, tscCommonService) {\n      super();\n      this.activatedRoute = activatedRoute;\n      this.formBuilder = formBuilder;\n      this.storageService = storageService;\n      this.supplierService = supplierService;\n      this.dataInputMethodService = dataInputMethodService;\n      this.productService = productService;\n      this.tscCommonService = tscCommonService;\n      this.ActivityConfigEnum = ActivityConfigEnum;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.productSearchUtil = new MatSelectSearchService(['name']);\n      this.supplierSearchUtil = new MatSelectSearchService(['supplierName']);\n      this.dataInputMethodList = [];\n      this.inputPlaceholder = \"email1@domain.com, email2@domain.com\";\n      this.removable = true;\n      this.addOnBlur = true;\n      this.separatorKeysCodes = [ENTER, COMMA];\n      this.errorHandlingForFormArrayData = (control, error, index) => {\n        const activityConfigSourceFA = this.activityConfigFG.get('activityConfigSource');\n        const formGroup = activityConfigSourceFA.at(index);\n        return formGroup.get(control).hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams.activityID) {\n          this.activityID = queryParams.activityID;\n          this.origin = queryParams.origin;\n        }\n      });\n      this.activatedRoute.data.subscribe(data => {\n        this.activityKeyID = data.activityKeyID;\n      });\n      this.formGroupInit();\n      this.getPrecursor();\n      this.getDataInputMethodList(this.activityID);\n      this.getSupplierByType();\n    }\n    formGroupInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: this.activityID,\n          activityKeyID: this.activityKeyID,\n          configName: [],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          supplierID: [],\n          dataInputMethodStdID: [, Validators.required],\n          producerEmails: [[], Validators.required]\n        }),\n        activityConfigSource: this.formBuilder.array([])\n      });\n      this.createFormGroup();\n    }\n    createFormGroup() {\n      this.activityConfigSourceFA.push(this.formBuilder.group({\n        sourceID: [[]],\n        sourceTypeID: null\n      }));\n    }\n    setSourceTypeID(data) {\n      this.activityConfigFG.get('activityConfigSource').get([0]).get('sourceTypeID').patchValue(data.sourceTypeID, {\n        emitEvent: false\n      });\n    }\n    get activityConfigSourceFA() {\n      return this.activityConfigFG.get('activityConfigSource');\n    }\n    getPrecursor() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.allProduct = yield this.productService.getProductList(this.currentOrgID);\n        this.allPrecursor = this.allProduct.filter(p => p.productCategory.some(c => c.keyID == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT));\n        this.productSearchUtil.entityArr = this.allPrecursor;\n        this.productSearchUtil.createSubscription();\n      });\n    }\n    getSupplierByType() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.suppliers = yield this.supplierService.getSupplierByType(this.currentOrgID, SupplierTypeKeyIDEnum.PRECURSOR_SUPPLIER);\n        this.supplierSearchUtil.entityArr = this.suppliers;\n        this.supplierSearchUtil.createSubscription();\n      });\n    }\n    get producerEmails() {\n      return this.activityConfigDataAC.get('producerEmails');\n    }\n    add(event) {\n      const value = (event.value || '').trim();\n      if (value) {\n        const emails = value.split(',').map(email => email.trim());\n        const validEmails = emails.filter(email => this.tscCommonService.isValidEmail(email));\n        if (validEmails.length > 0) {\n          this.producerEmails.patchValue(this.producerEmails.value.concat(validEmails));\n        }\n      }\n      event.chipInput.clear();\n    }\n    removeEmail(email) {\n      const index = this.producerEmails.value.indexOf(email);\n      if (index >= 0) {\n        const emails = [...this.producerEmails.value];\n        emails.splice(index, 1);\n        this.producerEmails.setValue(emails);\n      }\n    }\n    onInput() {\n      this.inputPlaceholder = '';\n    }\n    getDataInputMethodList(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.dataInputMethodList = yield this.dataInputMethodService.getDataInputMethodByActivityAndType(id, DataInputMethod.STANDARD);\n        this.activityConfigFG.get('activityConfigData.dataInputMethodStdID').patchValue(this.dataInputMethodList[0].id);\n      });\n    }\n    patchConfiguration(configuration) {\n      let activityConfig = configuration.activityConfig != null ? configuration.activityConfig : null;\n      let activityConfigData = configuration.activityConfigData;\n      let activityConfigSource = configuration.activityConfigSource;\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig.configName\n        });\n      } else {\n        this.readOnlyForm();\n      }\n      this.activityConfigDataAC.patchValue({\n        supplierID: activityConfigData.supplier.id,\n        dataInputMethodStdID: activityConfigData.dataInputMethod.id,\n        producerEmails: activityConfigData.producerEmails\n      });\n      this.activityConfigSourceFA.clear();\n      if (activityConfig != null) {\n        activityConfigSource.forEach(source => {\n          this.activityConfigSourceFA.push(this.formBuilder.group({\n            sourceID: [source.sourceID[0]],\n            sourceTypeID: source.sourceTypeID\n          }));\n        });\n      } else {\n        const source = configuration.source;\n        this.activityConfigSourceFA.push(this.formBuilder.group({\n          sourceID: [source.source.id],\n          sourceTypeID: source.sourceType.id\n        }));\n        this.readOnlyForm();\n      }\n      this.activityConfigFG.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n      });\n      this.isEqual.next(true);\n      this.initialObject = this.activityConfigFG.value;\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.SupplierService), i0.ɵɵdirectiveInject(i5.DataInputMethodService), i0.ɵɵdirectiveInject(i6.ProductAndServiceService), i0.ɵɵdirectiveInject(i7.TSCCommonService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 30,\n    vars: 17,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [4, \"ngIf\"], [\"formArrayName\", \"activityConfigSource\", 1, \"row\"], [\"class\", \"col-sm-6\", 4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"activityConfigData\"], [1, \"row\"], [1, \"col-sm-6\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"supplierID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by supplier name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"col-sm-6 centerAlignVertical\", 4, \"ngIf\"], [\"formControlName\", \"producerEmails\", \"required\", \"\"], [\"chipList\", \"\"], [3, \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [3, \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputAddOnBlur\", \"matChipInputTokenEnd\", \"input\"], [\"formGroupName\", \"activityConfig\", 1, \"row\"], [\"formControlName\", \"configName\", \"type\", \"text\", \"matInput\", \"\", \"required\", \"\"], [3, \"formGroupName\"], [\"formControlName\", \"sourceID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by precursor name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"], [1, \"d-flex\", \"justify-content-between\"], [3, \"value\"], [1, \"col-sm-6\", \"centerAlignVertical\"], [\"href\", \"/source/supplier/page\"], [3, \"removable\", \"removed\"], [\"matChipRemove\", \"\", 4, \"ngIf\"], [\"matChipRemove\", \"\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵtemplate(4, CreateUpdateComponent_ng_container_4_Template, 8, 2, \"ng-container\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, CreateUpdateComponent_div_6_Template, 11, 8, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵelementStart(10, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(11, \"mat-label\", 10);\n        i0.ɵɵtext(12, \"Select supplier\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-select\", 11);\n        i0.ɵɵelementStart(14, \"mat-option\");\n        i0.ɵɵelement(15, \"ngx-mat-select-search\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, CreateUpdateComponent_mat_option_16_Template, 3, 2, \"mat-option\", 13);\n        i0.ɵɵpipe(17, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, CreateUpdateComponent_mat_error_18_Template, 2, 1, \"mat-error\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, CreateUpdateComponent_div_19_Template, 3, 0, \"div\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 7);\n        i0.ɵɵelementStart(21, \"div\", 8);\n        i0.ɵɵelementStart(22, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(23, \"mat-label\", 10);\n        i0.ɵɵtext(24, \"Enter precursor producer\\u2019s email ID \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-chip-list\", 15, 16);\n        i0.ɵɵtemplate(27, CreateUpdateComponent_mat_chip_27_Template, 3, 3, \"mat-chip\", 17);\n        i0.ɵɵelementStart(28, \"input\", 18);\n        i0.ɵɵlistener(\"matChipInputTokenEnd\", function CreateUpdateComponent_Template_input_matChipInputTokenEnd_28_listener($event) {\n          return ctx.add($event);\n        })(\"input\", function CreateUpdateComponent_Template_input_input_28_listener() {\n          return ctx.onInput();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(29, CreateUpdateComponent_mat_error_29_Template, 2, 1, \"mat-error\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r5 = i0.ɵɵreference(26);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == ctx.ActivityConfigEnum.PFF);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityConfigSourceFA.controls);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.supplierSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 15, ctx.supplierSearchUtil.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfigData.supplierID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == ctx.ActivityConfigEnum.PFF);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.producerEmails.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matChipInputFor\", _r5)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes)(\"matChipInputAddOnBlur\", ctx.addOnBlur);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfigData.producerEmails\", \"required\"));\n      }\n    },\n    directives: [i8.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i9.NgIf, i2.FormArrayName, i9.NgForOf, i2.FormGroupName, i10.MatFormField, i10.MatLabel, i11.MatSelect, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i12.MatOption, i13.MatSelectSearchComponent, i2.FormControlDirective, i14.MatChipList, i14.MatChipInput, i2.DefaultValueAccessor, i15.MatInput, i10.MatError, i14.MatChip, i14.MatChipRemove, i16.MatIcon],\n    pipes: [i9.AsyncPipe],\n    encapsulation: 2\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}