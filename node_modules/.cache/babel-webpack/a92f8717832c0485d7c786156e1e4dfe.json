{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { cloneDeep } from 'lodash-es';\nimport { merge } from 'rxjs';\nimport { PROCESS_INPUT_ENUM, PROCESS_OUTPUT_ENUM } from '@netzero/enum/process.enum';\nimport { InvalidForm } from '@library/tsc-common';\nimport { SharedComponent } from '../_shared/shared.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@library/toastr-service\";\nimport * as i5 from \"@netzero/service/product-and-service.service\";\nimport * as i6 from \"@carbon/controller/fuel.controller\";\nimport * as i7 from \"@carbon/controller/process.controller\";\nimport * as i8 from \"../create-update-form.service\";\nimport * as i9 from \"@netzero/controller/cutom-fuel.controller\";\nimport * as i10 from \"../_shared/shared.component\";\nexport let UpdateComponent = /*#__PURE__*/(() => {\n  class UpdateComponent {\n    constructor(storageService, activatedRoute, router, formBuilder, toastrService, productService, fuelController, processController, processFormService, customFuelController) {\n      this.router = router;\n      this.formBuilder = formBuilder;\n      this.toastrService = toastrService;\n      this.productService = productService;\n      this.fuelController = fuelController;\n      this.processController = processController;\n      this.processFormService = processFormService;\n      this.customFuelController = customFuelController;\n      this.PROCESS_INPUT_ENUM = PROCESS_INPUT_ENUM;\n      this.PROCESS_OUTPUT_ENUM = PROCESS_OUTPUT_ENUM;\n      this.isEqual = true;\n      this.currentOrgID = storageService.getStorage(['currentOrgID']);\n      activatedRoute.params.subscribe(params => this.processID = params['processID']);\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.processFGInit();\n        yield this.getAllNecessaryValues();\n      });\n    }\n    processFGInit() {\n      this.processFG = this.formBuilder.group({\n        name: [, [Validators.required]],\n        description: [],\n        dataInputField: [, [Validators.required]],\n        isCBAMProcess: [, Validators.required],\n        input: this.formBuilder.array([]),\n        output: this.formBuilder.array([])\n      });\n    }\n    getProcessByID(processID) {\n      this.processController.getProcessByID(this.currentOrgID, processID).subscribe(process => {\n        this.patchProcess(process);\n      });\n    }\n    get inputFA() {\n      return this.processFG.get('input');\n    }\n    get outputFA() {\n      return this.processFG.get('output');\n    }\n    patchProcess(process) {\n      this.processFG.patchValue(process);\n      let inputs = process.input;\n      let have_fuel_input = false;\n      if (process.isCBAMProcess) {\n        for (let input of inputs) {\n          let formGroup = null;\n          let type_key_id = input.type.keyID;\n          if (type_key_id == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT) {\n            let entities = input.entities.slice();\n            let entitySource = input.entitySource.slice();\n            entities.forEach((entity, index) => {\n              let entity_list = entities.slice(index);\n              let entity_source_list = entitySource.filter(es => es.entityID == entity.id);\n              formGroup = this.processFormService.patchAndGetInputFG(input, entity_list, entity_source_list, this.getOutputList(type_key_id), this.getOptionList('INPUT', type_key_id));\n              this.inputFA.push(formGroup);\n            });\n          } else {\n            formGroup = this.processFormService.patchAndGetInputFG(input, input.entities, input.entitySource, this.getInputList(type_key_id), this.getOptionList('INPUT', type_key_id));\n            this.inputFA.push(formGroup);\n          }\n          if (type_key_id == PROCESS_INPUT_ENUM.FUEL) {\n            have_fuel_input = true;\n            this.process.initFuelControls(this.fuel, this.standardFuel);\n            let custom_fuel_ids = input.entities.filter(fuel => !fuel.isStandard).map(fuel => fuel.id);\n            let standard_fuel_ids = input.entities.filter(fuel => fuel.isStandard).map(fuel => fuel.id);\n            this.process.customFuelFC.patchValue(custom_fuel_ids);\n            this.process.standardFuelFC.patchValue(standard_fuel_ids);\n          }\n        }\n        let outputs = process.output;\n        for (let output of outputs) {\n          let formGroup;\n          let type_key_id = output.type.keyID;\n          if (type_key_id == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || type_key_id == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT) {\n            let entities = output.entities.slice();\n            let entitySource = output.entitySource.slice();\n            entities.forEach((entity, index) => {\n              let entity_list = entities.slice(index);\n              let entity_source_list = entitySource.filter(es => es.entityID == entity.id);\n              formGroup = this.processFormService.patchAndGetOutputFG(output, entity_list, entity_source_list, this.getOutputList(type_key_id), this.getOptionList('OUTPUT', type_key_id));\n              this.outputFA.push(formGroup);\n            });\n          } else {\n            formGroup = this.processFormService.patchAndGetOutputFG(output, output.entities, output.entitySource, this.getOutputList(type_key_id), this.getOptionList('OUTPUT', type_key_id));\n            this.outputFA.push(formGroup);\n          }\n        }\n      }\n      this.initialObject = this.processFG.getRawValue();\n      if (have_fuel_input) {\n        this.initialCustomFuel = this.process.customFuelFC.value;\n        this.initialStandardFuel = this.process.standardFuelFC.value;\n        merge(this.processFG.valueChanges, this.process.customFuelFC.valueChanges, this.process.standardFuelFC.valueChanges).subscribe(() => {\n          this.isEqual = isEqual(this.initialObject, this.processFG.getRawValue()) && isEqual(this.initialCustomFuel, this.process.customFuelFC.value) && isEqual(this.initialStandardFuel, this.process.standardFuelFC.value);\n        });\n      } else {\n        this.processFG.valueChanges.subscribe(() => {\n          this.isEqual = isEqual(this.initialObject, this.processFG.getRawValue());\n        });\n      }\n    }\n    getInputList(typeKeyID) {\n      let inputTypeList;\n      let optionList;\n      if (typeKeyID == PROCESS_INPUT_ENUM.FUEL) {\n        // inputTypeList = this.fuel.map(f => f);\n      } else if (typeKeyID == PROCESS_INPUT_ENUM.RAW_MATERIAL || typeKeyID == PROCESS_INPUT_ENUM.INTERMEDIATE_PRODUCT || typeKeyID == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT) {\n        inputTypeList = this.products.filter(p => p.productCategory.find(c => c.keyID == typeKeyID));\n        if (typeKeyID == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT) {\n          let inputs = this.input.find(i => i.keyID == typeKeyID);\n          optionList = inputs.source;\n        }\n      } else {\n        let input = this.input.find(i => i.keyID == typeKeyID);\n        inputTypeList = input.source;\n      }\n      return inputTypeList;\n    }\n    getOutputList(typeKeyID) {\n      let outputTypeList;\n      if (typeKeyID == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT || typeKeyID == PROCESS_OUTPUT_ENUM.CO_PRODUCT) {\n        outputTypeList = this.products.filter(p => p.productCategory.find(c => c.keyID == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT));\n      } else if (typeKeyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || typeKeyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT) {\n        outputTypeList = this.products.filter(p => p.productCategory.find(c => c.keyID == typeKeyID));\n      } else if (typeKeyID == PROCESS_OUTPUT_ENUM.BY_PRODUCT_AND_WASTE) {\n        outputTypeList = this.products.filter(p => p.productCategory.some(c => c.keyID == typeKeyID));\n      } else if (typeKeyID == PROCESS_OUTPUT_ENUM.PROCESS_EMISSIONS) {\n        outputTypeList = this.processes;\n      } else {\n        let output = this.output.find(o => o.keyID == typeKeyID);\n        outputTypeList = output.source;\n      }\n      return outputTypeList;\n    }\n    getOptionList(type, typeKeyID) {\n      let optionList = null;\n      if (type == 'INPUT') {\n        if (typeKeyID == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT) {\n          let inputs = this.input.find(i => i.keyID == typeKeyID);\n          optionList = inputs.source;\n        }\n      } else {\n        if (typeKeyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || typeKeyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT) {\n          let outputs = this.output.find(i => i.keyID == typeKeyID);\n          optionList = outputs.source;\n        }\n      }\n      return optionList;\n    }\n    getAllNecessaryValues() {\n      return __awaiter(this, void 0, void 0, function* () {\n        [this.products, this.input, this.output, this.fuel, this.processes, this.standardFuel] = yield Promise.all([this.productService.getProductList(this.currentOrgID), this.processController.getProcessInputs().toPromise(), this.processController.getProcessOutputs().toPromise(), this.customFuelController.getCustomFuels(this.currentOrgID).toPromise(), this.processController.getProcessList(this.currentOrgID).toPromise(), this.fuelController.getFuelStationaryCombustion().toPromise()]);\n        this.getProcessByID(this.processID);\n      });\n    }\n    getProducts() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.products = yield this.productService.getProductList(this.currentOrgID);\n      });\n    }\n    updateProcess() {\n      if (this.process.haveFuelInput) {\n        if (this.processFG.invalid || this.process.customFuelFC.invalid && this.process.standardFuelFC.invalid) {\n          this.processFG.markAllAsTouched();\n          this.process.customFuelFC.markAsTouched();\n          console.error('invalid form - ', this.processFG);\n          this.toastrService.error(InvalidForm.INVALID_FORM_MESSAGE);\n          return;\n        }\n      } else {\n        if (this.processFG.invalid) {\n          this.processFG.markAllAsTouched();\n          console.error('invalid form - ', this.processFG);\n          this.toastrService.error(InvalidForm.INVALID_FORM_MESSAGE);\n          return;\n        }\n      }\n      let process = cloneDeep(this.processFG.getRawValue());\n      this.processFormService.createValueJson(process, this.process);\n      this.processController.updateProcess(this.currentOrgID, this.processID, process).subscribe(res => {\n        /* TODO restore redirect to view page */\n        // this.router.navigate(['/source/process', this.processID, 'view']);\n        this.router.navigate(['/source/process/page']);\n      });\n    }\n  }\n  UpdateComponent.ɵfac = function UpdateComponent_Factory(t) {\n    return new (t || UpdateComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.ProductAndServiceService), i0.ɵɵdirectiveInject(i6.FuelController), i0.ɵɵdirectiveInject(i7.ProcessController), i0.ɵɵdirectiveInject(i8.FormService), i0.ɵɵdirectiveInject(i9.CustomFuelController));\n  };\n  UpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateComponent,\n    selectors: [[\"app-update\"]],\n    viewQuery: function UpdateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(SharedComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.process = _t.first);\n      }\n    },\n    decls: 11,\n    vars: 9,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\", \"h100\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"headerRightContainerInner\"], [1, \"pageTitle\"], [3, \"delete\", \"processFG\", \"products\", \"processes\", \"input\", \"output\", \"fuel\", \"standardFuel\", \"entitiyCreated\"], [\"process\", \"\"], [1, \"centerAlign\", \"justify-content-end\", \"m-3\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"ms-2\", 3, \"disabled\", \"click\"]],\n    template: function UpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtext(5, \" Update process \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"app-process\", 5, 6);\n        i0.ɵɵlistener(\"entitiyCreated\", function UpdateComponent_Template_app_process_entitiyCreated_6_listener() {\n          return ctx.getProducts();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function UpdateComponent_Template_button_click_9_listener() {\n          return ctx.updateProcess();\n        });\n        i0.ɵɵtext(10, \" Update Process \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"delete\", false)(\"processFG\", ctx.processFG)(\"products\", ctx.products)(\"processes\", ctx.processes)(\"input\", ctx.input)(\"output\", ctx.output)(\"fuel\", ctx.fuel)(\"standardFuel\", ctx.standardFuel);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isEqual);\n      }\n    },\n    directives: [i10.SharedComponent],\n    styles: [\"\"]\n  });\n  return UpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}