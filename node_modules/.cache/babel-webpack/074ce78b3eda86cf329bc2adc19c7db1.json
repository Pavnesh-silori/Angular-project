{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { PROCESS_OUTPUT_ENUM } from '@netzero/enum/process.enum';\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\nimport { DataInputMethod, DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport { ENTITY_KEY_ID_ENUM } from '@carbon/enum/entity.enum';\nimport { ActivityFormTypeEnum } from '@carbon/enum/activity-form-type.enum';\nimport { ActivityConfig } from '@carbon/component/activity-config/activity-config';\nimport { COMMON_CONSTANT, FormAction, FormErrorEnum, MaterialFormFieldAppearance, MatSelectSearchService, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@carbon/service/data-input-method.service\";\nimport * as i5 from \"@carbon/service/process.service\";\nimport * as i6 from \"@library/unit-service\";\nimport * as i7 from \"@carbon/service/asset.service\";\nimport * as i8 from \"@library/toastr-service\";\nimport * as i9 from \"@carbon/service/activity.service\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"ngx-mat-select-search\";\nimport * as i16 from \"@angular/material/radio\";\nimport * as i17 from \"@library/tsc-common\";\nimport * as i18 from \"@angular/material/input\";\nimport * as i19 from \"@angular/material/tooltip\";\nfunction CreateUpdateComponent_ng_container_5_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 24);\n    i0.ɵɵelementStart(2, \"div\", 7);\n    i0.ɵɵelementStart(3, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(4, \"mat-label\", 9);\n    i0.ɵɵtext(5, \"Activity form name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 25);\n    i0.ɵɵtemplate(7, CreateUpdateComponent_ng_container_5_mat_error_7_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandling(ctx_r0.activityConfigAC, \"configName\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_mat_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const process_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", process_r11.recordID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", process_r11.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_21_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"dotdotdot\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const outputSource_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", outputSource_r13.length >= 30 ? outputSource_r13 : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(3, 2, outputSource_r13, 30), \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"strong\", 27);\n    i0.ɵɵelementStart(2, \"ul\");\n    i0.ɵɵtemplate(3, CreateUpdateComponent_ng_container_21_ng_container_3_Template, 4, 5, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.outputSources);\n  }\n}\nfunction CreateUpdateComponent_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.COMMON_CONSTANT.HYPHEN, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 29);\n    i0.ɵɵelementStart(2, \"mat-radio-button\", 30);\n    i0.ɵɵlistener(\"change\", function CreateUpdateComponent_ng_container_30_Template_mat_radio_button_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const input_r14 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.inputMethodChange(input_r14.keyID);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const input_r14 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", input_r14.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r14.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_34_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Meter reading can't be negative. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_ng_container_34_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r18.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_34_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r21 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r21.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r21.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_34_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"div\", 31);\n    i0.ɵɵelementStart(3, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(4, \"mat-label\", 9);\n    i0.ɵɵtext(5, \"Meter rollover value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 32);\n    i0.ɵɵtemplate(7, CreateUpdateComponent_ng_container_34_mat_error_7_Template, 2, 0, \"mat-error\", 4);\n    i0.ɵɵtemplate(8, CreateUpdateComponent_ng_container_34_mat_error_8_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 33);\n    i0.ɵɵelementStart(10, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(11, \"mat-label\", 9);\n    i0.ɵɵtext(12, \"Select Unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-select\", 34);\n    i0.ɵɵtemplate(14, CreateUpdateComponent_ng_container_34_mat_option_14_Template, 2, 2, \"mat-option\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(15, CreateUpdateComponent_ng_container_34_mat_error_15_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r8.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.errorHandling(ctx_r8.activityConfigDataAC, \"meterRolloverValue\", \"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.errorHandling(ctx_r8.activityConfigDataAC, \"meterRolloverValue\", \"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r8.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.distanceUnit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.errorHandling(ctx_r8.activityConfigDataAC, \"meterRolloverUnitID\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_ng_container_36_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 39);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_ng_container_36_mat_option_11_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r27);\n      const combustionEquipment_r25 = restoredCtx.$implicit;\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return ctx_r26.setSourceTypeID(combustionEquipment_r25);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const combustionEquipment_r25 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", combustionEquipment_r25.assetID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", combustionEquipment_r25.assetName, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵelementStart(2, \"div\", 35);\n    i0.ɵɵelementStart(3, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(4, \"mat-label\", 9);\n    i0.ɵɵtext(5, \"Select Combustion Equipment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-select\", 36);\n    i0.ɵɵelementStart(7, \"mat-option\");\n    i0.ɵɵelement(8, \"ngx-mat-select-search\", 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-option\", 26);\n    i0.ɵɵtext(10, \" Select none \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, CreateUpdateComponent_ng_container_36_mat_option_11_Template, 2, 2, \"mat-option\", 38);\n    i0.ɵɵpipe(12, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r23 = ctx.index;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r23);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r9.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r9.combustionEquipmentSearch.filterFC);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 5, ctx_r9.combustionEquipmentSearch.filteredEntities));\n  }\n}\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent extends ActivityConfig {\n    constructor(storageService, activatedRoute, formBuilder, dataInputMethodService, processService, unitService, assetService, toastrService, activityService) {\n      super();\n      this.formBuilder = formBuilder;\n      this.dataInputMethodService = dataInputMethodService;\n      this.processService = processService;\n      this.unitService = unitService;\n      this.assetService = assetService;\n      this.toastrService = toastrService;\n      this.activityService = activityService;\n      this.FormAction = FormAction;\n      this.formErrorEnum = FormErrorEnum;\n      this.DataInputMethod = DataInputMethod;\n      this.ActivityKeyIDEnum = ActivityKeyIDEnum;\n      this.ActivityConfigEnum = ActivityConfigEnum;\n      this.MessageAlertTypeEnum = MessageAlertTypeEnum;\n      this.MessageAlertIconEnum = MessageAlertIconEnum;\n      this.DataInputMethodKeyIDEnum = DataInputMethodKeyIDEnum;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.sourceName = 'Electricity';\n      this.processList = [];\n      this.origin = null;\n      this.sourceArr = [];\n      this.distanceUnit = [];\n      this.dataInputMethodList = [];\n      this.opSource = [];\n      this.isActivityDataAdHoc = false;\n      this.processSearch = new MatSelectSearchService(['name']);\n      this.combustionEquipmentSearch = new MatSelectSearchService(['assetName']);\n      this.infoMsg = null;\n      this.isActivityFormUpdate = false;\n      this.isPffForm = false;\n      this.formDataEvent = new EventEmitter();\n      this.isEqual = new EventEmitter();\n      this.validity = new EventEmitter();\n      this.outputSources = [];\n      this.errorHandling = (formGroup, controlPath, error) => {\n        return formGroup.get(controlPath).hasError(error);\n      };\n      this.radioError = (control, error) => {\n        return this.activityConfigFG.get(control).hasError(error) && this.activityConfigFG.get(control).touched;\n      };\n      this.errorHandlingForFormArrayData = (control, error, index) => {\n        const activityConfigSourceFA = this.activityConfigFG.get('activityConfigSource');\n        const formGroup = activityConfigSourceFA.at(index);\n        return formGroup.get(control).hasError(error);\n      };\n      this.initComponent(storageService, activatedRoute);\n    }\n    ngOnInit() {\n      this.infoMsg = `For the exported ${this.sourceName}, either the\n        emissions of the actually known fuel mix shall be used, or – if the actual fuel mix is unknown – the standard emission factor of fuel\n        most commonly used in the country and industrial sector.`;\n      this.formGroupInit();\n      this.getProcessList();\n      this.getUnit();\n      this.getActivityID(this.activityKeyID);\n      this.getCombustionEquipment();\n    }\n    initComponent(storageService, activatedRoute) {\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n      activatedRoute.queryParams.subscribe(queryParams => {\n        this.action = queryParams['action'];\n        if (queryParams['activityID']) {\n          this.activityID = queryParams['activityID'];\n        }\n        if (queryParams['origin']) {\n          this.origin = queryParams['origin'];\n          this.isPffForm = this.origin == ActivityFormTypeEnum.PFF;\n        }\n      });\n      let routeData = activatedRoute.snapshot.data;\n      if (routeData.action == FormAction.UPDATE && routeData.entity == ENTITY_KEY_ID_ENUM.ACTIVITY_FORM) {\n        this.isActivityFormUpdate = true;\n      }\n      this.activityKeyID = routeData.activityKeyID;\n      if (this.activityKeyID == ActivityKeyIDEnum.PROCESS_HEAT_EXPORT) {\n        this.sourceName = 'Heat';\n      }\n      if (routeData.entity == ENTITY_KEY_ID_ENUM.ACTIVITY_DATA) {\n        this.isActivityDataAdHoc = true;\n      }\n    }\n    formGroupInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: [this.activityID, [Validators.required]],\n          activityKeyID: [this.activityKeyID, [Validators.required]],\n          configName: [, Validators.required],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          processID: [, Validators.required],\n          processRecordID: [, Validators.required],\n          dataInputMethodStdID: [, Validators.required],\n          meterRolloverValue: [],\n          meterRolloverUnitID: []\n        }),\n        activityConfigSource: this.formBuilder.array([])\n      });\n      if (!this.isActivityFormUpdate && !this.isActivityDataAdHoc) {\n        this.activityConfigSourceFA.push(this.sourceFG);\n      }\n      ;\n      if (!this.isPffForm) {\n        this.configNameAC.disable();\n      }\n    }\n    get activityConfigSourceFA() {\n      return this.activityConfigFG.get('activityConfigSource');\n    }\n    get activityConfigAC() {\n      return this.activityConfigFG.get('activityConfig');\n    }\n    get activityConfigSourceAC() {\n      return this.activityConfigFG.get('activityConfigSource');\n    }\n    get configNameAC() {\n      return this.activityConfigAC.get('configName');\n    }\n    get activityConfigDataAC() {\n      return this.activityConfigFG.get('activityConfigData');\n    }\n    get sourceFG() {\n      return this.formBuilder.group({\n        sourceID: [],\n        sourceTypeID: []\n      });\n    }\n    setSourceTypeID(data) {\n      this.activityConfigFG.get('activityConfigSource').get([0]).get('sourceTypeID').patchValue(data.sourceTypeID, {\n        emitEvent: false\n      });\n    }\n    getActivityID(activityKeyID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let activities = yield this.activityService.getAllActivityNew();\n        const activity = activities.find(activity => activity.keyID == activityKeyID);\n        this.activityID = activity.id;\n        this.getDataInputMethodList(this.activityID);\n      });\n    }\n    getDataInputMethodList(activityID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.dataInputMethodList = yield this.dataInputMethodService.getDataInputMethodByActivityAndType(activityID, DataInputMethod.STANDARD);\n      });\n    }\n    inputMethodChange(value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.inputMethod = value;\n        const controls = ['meterRolloverValue', 'meterRolloverUnitID'];\n        if (this.inputMethod == DataInputMethodKeyIDEnum.METER_READING) {\n          controls.forEach(control => {\n            this.addValidators(this.activityConfigDataAC, control, [Validators.required]);\n          });\n        } else {\n          controls.forEach(control => {\n            this.resetAndRemoveValidators(this.activityConfigDataAC, control, [Validators.required]);\n          });\n        }\n        return this.inputMethod;\n      });\n    }\n    addValidators(formGroup, controlPath, validators) {\n      formGroup.get(controlPath).addValidators(validators);\n      formGroup.get(controlPath).updateValueAndValidity();\n    }\n    resetAndRemoveValidators(formGroup, controlPath, validators) {\n      formGroup.get(controlPath).reset(null);\n      formGroup.get(controlPath).removeValidators(validators);\n      formGroup.get(controlPath).updateValueAndValidity();\n    }\n    activityConfigValidity() {\n      this.activityConfigFG.valueChanges.subscribe(() => this.validity.emit(this.activityConfigFG.invalid));\n    }\n    readOnlyForm() {\n      this.activityConfigFG.disable();\n    }\n    patchConfiguration(configuration) {\n      var _a, _b;\n      this.activityConfigFG.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n      });\n      const activityConfig = (_a = configuration['activityConfig']) !== null && _a !== void 0 ? _a : null;\n      const activityConfigData = configuration['activityConfigData'];\n      const dataInputMethod = activityConfigData.dataInputMethod;\n      this.inputMethodChange(dataInputMethod.keyID);\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig.configName\n        });\n        const activityConfigSource = configuration['activityConfigSource'];\n        if (activityConfigSource.length > 0) {\n          activityConfigSource.forEach(source => {\n            this.activityConfigSourceFA.push(this.formBuilder.group({\n              sourceID: [source.sourceID[0]],\n              sourceTypeID: source.sourceTypeID\n            }));\n          });\n        }\n      } else {\n        const activityData = configuration.activityData;\n        if ((_b = activityData.source) !== null && _b !== void 0 ? _b : false) {\n          this.activityConfigSourceFA.push(this.formBuilder.group({\n            sourceID: [activityData.source.id],\n            sourceTypeID: activityData.sourceType.id\n          }));\n        }\n        this.readOnlyForm();\n      }\n      const process = activityConfigData.process;\n      this.activityConfigDataAC.patchValue({\n        processID: process.id,\n        processRecordID: process.recordID,\n        dataInputMethodStdID: dataInputMethod.id\n      });\n      this.setProcessIDAndGetProcess(process.id, false);\n      if (dataInputMethod.keyID == DataInputMethodKeyIDEnum.METER_READING) {\n        const meterRollover = activityConfigData.meterRollover;\n        this.activityConfigDataAC.patchValue({\n          meterRolloverValue: meterRollover.value,\n          meterRolloverUnitID: meterRollover.unit.unitID\n        });\n      }\n      this.isEqual.next(true);\n      this.initialObject = this.activityConfigFG.value;\n    }\n    get getConfigJson() {\n      this.configuration = {};\n      this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.value));\n      this.configuration['activityConfigSource']['sourceID'] = this.configuration['activityConfigSource']['sourceID'];\n      return this.configuration;\n    }\n    emitFormData() {\n      if (this.formGroup.valid) {\n        this.formDataEvent.emit(this.formGroup.value);\n      } else {\n        this.formGroup.markAllAsTouched();\n      }\n    }\n    getProcessList() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.processList = yield this.processService.getProcessList(this.currentOrgID);\n        const cbam_process_list = this.processList.filter(process => process.isCBAMProcess);\n        this.processSearch.entityArr = cbam_process_list;\n        this.processSearch.createSubscription();\n      });\n    }\n    setProcessIDAndGetProcess(processRecordID, isLatest = true) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.outputSources = [];\n        let current_process = yield this.processService.getProcessByID(this.currentOrgID, processRecordID, isLatest);\n        const output_type = this.activityKeyID == ActivityKeyIDEnum.PROCESS_ELECTRICITY_EXPORT ? PROCESS_OUTPUT_ENUM.ELECTRICITY : PROCESS_OUTPUT_ENUM.HEAT;\n        const output_type_list = current_process.output.find(output => output.type.keyID == output_type);\n        if (output_type_list == undefined) {\n          this.activityConfigDataAC.get('processID').reset();\n          // this.activityConfigDataAC.get('processRecordID').reset();\n          this.toastrService.error(`Process does not have ${this.sourceName.toLowerCase()} as an output! Please select another process.`);\n          return;\n        }\n        output_type_list.entitySource.forEach(source => {\n          this.outputSources.push(source.name);\n        });\n        if (isLatest) {\n          this.activityConfigDataAC.get('processID').patchValue(current_process.processID);\n        }\n      });\n    }\n    getCombustionEquipment() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.allcombustionEquipment = yield this.assetService.getAllAsset(this.currentOrgID);\n        this.combustionEquipmentSearch.entityArr = this.allcombustionEquipment;\n        this.combustionEquipmentSearch.createSubscription();\n      });\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.distanceUnit = yield this.unitService.getUnit([`type:${UnitTypeKeyID.ENERGY}`]);\n      });\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.DataInputMethodService), i0.ɵɵdirectiveInject(i5.ProcessService), i0.ɵɵdirectiveInject(i6.UnitService), i0.ɵɵdirectiveInject(i7.AssetService), i0.ɵɵdirectiveInject(i8.ToastrService), i0.ɵɵdirectiveInject(i9.ActivityService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create-update\"]],\n    outputs: {\n      formDataEvent: \"formDataEvent\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 37,\n    vars: 19,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"ps-2\"], [1, \"cardTitle\"], [3, \"formGroup\"], [4, \"ngIf\"], [\"formGroupName\", \"activityConfigData\"], [1, \"row\"], [1, \"col-sm-7\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"processRecordID\", \"required\", \"\", 3, \"selectionChange\"], [\"placeholderLabel\", \"Search by name\", \"noEntriesFoundLabel\", \"No matching name found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"my-1\"], [1, \"col-sm-4\", \"formLabel\", \"ms-2\", \"pb-2\"], [4, \"ngIf\", \"ngIfElse\"], [\"noSource\", \"\"], [1, \"row\", \"mb-3\"], [1, \"formLabel\", \"ms-2\", \"pb-2\"], [\"formControlName\", \"dataInputMethodStdID\"], [4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"mb-2\"], [1, \"col-sm-7\", 3, \"messageAlertTypeInp\", \"messageAlertIconInp\", \"contentInp\"], [\"formArrayName\", \"activityConfigSource\", 1, \"row\"], [\"formGroupName\", \"activityConfig\", 1, \"row\"], [\"placeholder\", \"Activity form name\", \"matInput\", \"\", \"formControlName\", \"configName\", \"type\", \"text\", \"required\", \"\"], [3, \"value\"], [1, \"col-sm-3\"], [\"matTooltipClass\", \"infoTooltip\", \"matTooltipPosition\", \"above\", 3, \"matTooltip\"], [1, \"col-sm-6\", \"ps-3\", \"mt-2\"], [3, \"value\", \"change\"], [1, \"col-sm-5\"], [\"matInput\", \"\", \"min\", \"0\", \"type\", \"number\", \"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"meterRolloverValue\"], [1, \"col-sm-2\"], [\"formControlName\", \"meterRolloverUnitID\"], [3, \"formGroupName\"], [\"formControlName\", \"sourceID\"], [\"placeholderLabel\", \"Search by name\", \"noEntriesFoundLabel\", \"No matching equipment found.\", 3, \"formControl\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3, \"Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"form\", 3);\n        i0.ɵɵtemplate(5, CreateUpdateComponent_ng_container_5_Template, 8, 2, \"ng-container\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"mat-form-field\", 8);\n        i0.ɵɵelementStart(10, \"mat-label\", 9);\n        i0.ɵɵtext(11, \"Select Process\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-select\", 10);\n        i0.ɵɵlistener(\"selectionChange\", function CreateUpdateComponent_Template_mat_select_selectionChange_12_listener($event) {\n          return ctx.setProcessIDAndGetProcess($event.value);\n        });\n        i0.ɵɵelementStart(13, \"mat-option\");\n        i0.ɵɵelement(14, \"ngx-mat-select-search\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, CreateUpdateComponent_mat_option_15_Template, 2, 2, \"mat-option\", 12);\n        i0.ɵɵpipe(16, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, CreateUpdateComponent_mat_error_17_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 13);\n        i0.ɵɵelementStart(19, \"mat-label\", 14);\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(21, CreateUpdateComponent_ng_container_21_Template, 4, 1, \"ng-container\", 15);\n        i0.ɵɵtemplate(22, CreateUpdateComponent_ng_template_22_Template, 1, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 17);\n        i0.ɵɵelementStart(25, \"div\", 7);\n        i0.ɵɵelementStart(26, \"mat-label\", 18);\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"mat-radio-group\", 19);\n        i0.ɵɵelementStart(29, \"div\", 6);\n        i0.ɵɵtemplate(30, CreateUpdateComponent_ng_container_30_Template, 4, 2, \"ng-container\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(31, CreateUpdateComponent_mat_error_31_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 21);\n        i0.ɵɵelement(33, \"lib-message-alert\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(34, CreateUpdateComponent_ng_container_34_Template, 16, 6, \"ng-container\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 23);\n        i0.ɵɵtemplate(36, CreateUpdateComponent_ng_container_36_Template, 13, 7, \"ng-container\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r4 = i0.ɵɵreference(23);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == ctx.ActivityConfigEnum.PFF);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.processSearch.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(16, 17, ctx.processSearch.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigDataAC, \"processID\", \"required\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.sourceName, \" source\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.outputSources.length > 0)(\"ngIfElse\", _r4);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" Enter \", ctx.sourceName, \" data using\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dataInputMethodList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.radioError(\"activityConfigData.dataInputMethodStdID\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"messageAlertTypeInp\", ctx.MessageAlertTypeEnum.INFO)(\"messageAlertIconInp\", ctx.MessageAlertIconEnum.INFO_ICON)(\"contentInp\", ctx.infoMsg);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.inputMethod == ctx.DataInputMethodKeyIDEnum.METER_READING);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityConfigSourceFA.controls);\n      }\n    },\n    directives: [i10.MatCard, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i11.NgIf, i3.FormGroupName, i12.MatFormField, i12.MatLabel, i13.MatSelect, i3.NgControlStatus, i3.FormControlName, i3.RequiredValidator, i14.MatOption, i15.MatSelectSearchComponent, i3.FormControlDirective, i11.NgForOf, i16.MatRadioGroup, i17.MessageAlertComponent, i3.FormArrayName, i18.MatInput, i3.DefaultValueAccessor, i12.MatError, i19.MatTooltip, i16.MatRadioButton, i3.MinValidator, i3.NumberValueAccessor],\n    pipes: [i11.AsyncPipe, i17.EllipsisPipeService],\n    encapsulation: 2\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}