{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// /tsc-library\nexport let ReportConfigController = /*#__PURE__*/(() => {\n  class ReportConfigController {\n    constructor(http) {\n      this.http = http;\n    }\n    saveReportConfig(orgID, formData) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting/config`, formData);\n    }\n    getReportConfigByID(orgID, id) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting/config/${id}`);\n    }\n    updateReportConfig(orgID, id, formData) {\n      return this.http.patch(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting/config/${id}`, formData);\n    }\n    getRecordConfigPage(orgID, pageNo, pageSize, sortBy, orderBy, searchValue, filter) {\n      let body = {\n        pageNo: pageNo,\n        pageSize: pageSize,\n        sortBy: sortBy,\n        orderBy: orderBy,\n        searchBy: searchValue,\n        filter: filter\n      };\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting/config/page`, body);\n    }\n    getRecordHistoryPage(pageNo, pageSize, sortBy, orderBy, orgID, filterArr, searchValue, searchFlag) {\n      let body;\n      if (searchFlag || filterArr.length > 0) {\n        body = {\n          pageNo: pageNo,\n          pageSize: pageSize,\n          sortBy: sortBy,\n          orderBy: orderBy,\n          searchBy: searchValue,\n          filter: filterArr\n        };\n      } else {\n        body = {\n          pageNo: pageNo,\n          pageSize: pageSize,\n          sortBy: sortBy,\n          orderBy: orderBy\n        };\n      }\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-history`, body);\n    }\n    getReportTrackingDetails(orgID, id) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config/${id}/config-interval`);\n    }\n    getReportConfigData(orgID, id) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting/config/${id}`);\n    }\n    deleteConfig(orgID, id) {\n      return this.http.delete(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/config/${id}`);\n    }\n    getReportingFrameworkExistYear(orgID, reportingFrameworkID) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-framework/${reportingFrameworkID}/year`);\n    }\n    getFrequency(orgID, formData) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-frequency`, formData);\n    }\n  }\n  ReportConfigController.ɵfac = function ReportConfigController_Factory(t) {\n    return new (t || ReportConfigController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ReportConfigController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReportConfigController,\n    factory: ReportConfigController.ɵfac,\n    providedIn: \"root\"\n  });\n  return ReportConfigController;\n})();","map":null,"metadata":{},"sourceType":"module"}