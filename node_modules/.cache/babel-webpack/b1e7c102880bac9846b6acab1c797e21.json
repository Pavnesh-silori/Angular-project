{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { CARBON_CONSTANT } from '@carbon/constant/carbon.constant';\nimport { MeterReadingComponent } from './meter-reading/meter-reading.component';\nimport { TotalAmountComponent } from './total-amount/total-amount.component';\nimport { DataCollectionMethodKeyIDEnum } from '@carbon/enum/data-collection-method.enum';\nimport { DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@library/toastr-service\";\nimport * as i3 from \"@library/tsc-common\";\nimport * as i4 from \"@carbon/service/data-collection-method.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"./total-amount/total-amount.component\";\nimport * as i8 from \"./meter-reading/meter-reading.component\";\nfunction FuelConsumptionActivityDataCreateComponent_app_total_amount_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-total-amount\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"activityConfig\", ctx_r0.activityConfig)(\"activityDataFG\", ctx_r0.activityDataFG)(\"defaultDataCollectionMethodID\", ctx_r0.defaultDataCollectionMethodID)(\"docFileList\", ctx_r0.docFileList);\n  }\n}\nfunction FuelConsumptionActivityDataCreateComponent_app_meter_reading_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-meter-reading\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"activityConfig\", ctx_r1.activityConfig)(\"activityDataFG\", ctx_r1.activityDataFG)(\"defaultDataCollectionMethodID\", ctx_r1.defaultDataCollectionMethodID)(\"docFileList\", ctx_r1.docFileList);\n  }\n}\n/* tsc-library */\nexport let FuelConsumptionActivityDataCreateComponent = /*#__PURE__*/(() => {\n  class FuelConsumptionActivityDataCreateComponent {\n    constructor(formBuilder, toastrService, tscCommonService, dataCollectionMethodService, activatedRoute) {\n      this.formBuilder = formBuilder;\n      this.toastrService = toastrService;\n      this.tscCommonService = tscCommonService;\n      this.dataCollectionMethodService = dataCollectionMethodService;\n      this.DataInputMethodKeyIDEnum = DataInputMethodKeyIDEnum;\n      this.dataInputMethoutStdKeyID = null;\n      this.currentDataComponent = null;\n      this.validity = new EventEmitter();\n      this.action = null;\n      this.isUpdate = false;\n      this.haveMultipleSource = false;\n      this.excluded_controls = ['sourceID', 'sourceName', 'sourceTypeID', 'activityID', 'activityKeyID', 'fuelName', 'dateRange', 'dataCollectionMethodID', 'meterUnitID'];\n      activatedRoute.queryParams.subscribe(qParams => {\n        this.action = qParams['action'];\n        this.isUpdate = this.action == 'update';\n      });\n    }\n    ngOnInit() {\n      this.activityDataFG = this.formBuilder.group({\n        activityData: this.formBuilder.array([])\n      });\n      this.getDataCollectionMethod();\n    }\n    get activityDataFA() {\n      return this.activityDataFG.get('activityData');\n    }\n    ngAfterViewInit() {}\n    getConfiguration(configuration) {\n      if (configuration != null) {\n        this.activityConfig = configuration;\n        let activityConfigData = configuration.activityConfigData;\n        this.dataInputMethoutStdKeyID = activityConfigData.dataInputMethod.keyID;\n        if (this.isUpdate) {\n          this.docFileList = new Array(1).fill(null);\n        } else {\n          let activityConfigSource = configuration.activityConfigSource;\n          this.docFileList = new Array(activityConfigSource[0].source.length).fill(null);\n          this.haveMultipleSource = activityConfigSource[0].source.length > 1;\n        }\n      }\n    }\n    getDataCollectionMethod() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let dataCollectionMethods = yield this.dataCollectionMethodService.getDataCollectionMethod();\n        let manual_entry = this.tscCommonService.getUniqueObject(dataCollectionMethods, 'keyID', DataCollectionMethodKeyIDEnum.MANUAL_ENTRY);\n        this.defaultDataCollectionMethodID = manual_entry.dataCollectionMethodID;\n      });\n    }\n    haveValue(formGroup) {\n      for (let control in formGroup.controls) {\n        if (!this.excluded_controls.includes(control)) {\n          let value = formGroup.get(control).value;\n          if (control == 'oxidationFactor' || control == 'biomassPct') {\n            if (control == 'oxidationFactor' && value !== CARBON_CONSTANT.DEFAULT_OXIDATION_FACTOR) {\n              return true;\n            }\n            if (control == 'biomassPct' && value !== CARBON_CONSTANT.DEFAULT_BIOMASS_PCT) {\n              return true;\n            }\n          } else if (value !== null && value !== void 0 ? value : false) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    isAnyRowFilled() {\n      for (let i = 0; i < this.activityDataFA.controls.length; ++i) {\n        let formGroup = this.activityDataFA.get(`${i}`);\n        if (this.haveValue(formGroup)) return true;\n      }\n      return false;\n    }\n    setDateInputError() {\n      this.currentDataComponent = this.dataInputMethoutStdKeyID == DataInputMethodKeyIDEnum.METER_READING ? this.meterReadingComponent : this.totalAmountComponent;\n      if (!this.haveMultipleSource) {\n        this.currentDataComponent.customDateInputs.toArray()[0].daterange.markAsTouched();\n        return;\n      }\n      for (let i = 0; i < this.activityDataFA.controls.length; ++i) {\n        let formGroup = this.activityDataFA.get(`${i}`);\n        if (this.haveValue(formGroup)) {\n          this.currentDataComponent.customDateInputs.toArray()[i].daterange.markAsTouched();\n        } else {\n          this.currentDataComponent.customDateInputs.toArray()[i].daterange.markAsUntouched();\n        }\n      }\n    }\n    isValidForm() {\n      if (this.haveMultipleSource) {\n        let isAnyRowFilled = this.isAnyRowFilled();\n        if (!isAnyRowFilled) {\n          this.toastrService.error('Fill atleast one data row!');\n          return false;\n        }\n      }\n      if (this.activityDataFG.invalid) {\n        this.setDateInputError();\n        this.activityDataFG.markAllAsTouched();\n        console.error('invalid form -', this.activityDataFG);\n        return false;\n      }\n      this.activityData = {};\n      this.activityData = JSON.parse(JSON.stringify(this.activityDataFG.getRawValue()));\n      return true;\n    }\n    activityDataValidity() {\n      this.activityDataFG.valueChanges.subscribe(() => this.validity.emit(!this.activityDataFG.invalid));\n    }\n    getActivityDataToPost() {\n      let dataToPost = [];\n      let docListToPost = [];\n      let postJson = [dataToPost, docListToPost];\n      for (let i = 0; i < this.activityDataFA.controls.length; ++i) {\n        let formGroup = this.activityDataFA.get(`${i}`);\n        if (this.haveValue(formGroup)) {\n          docListToPost.push(this.docFileList[i]);\n          dataToPost.push(formGroup.getRawValue());\n        }\n      }\n      return postJson;\n    }\n    getActivityData() {\n      let postJson = this.getActivityDataToPost();\n      return {\n        'activityData': postJson[0],\n        'activityDataFile': postJson[1]\n      };\n    }\n    updateActivityData() {\n      return this.activityData.activityData[0];\n    }\n  }\n  FuelConsumptionActivityDataCreateComponent.ɵfac = function FuelConsumptionActivityDataCreateComponent_Factory(t) {\n    return new (t || FuelConsumptionActivityDataCreateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ToastrService), i0.ɵɵdirectiveInject(i3.TSCCommonService), i0.ɵɵdirectiveInject(i4.DataCollectionMethodService), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n  };\n  FuelConsumptionActivityDataCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuelConsumptionActivityDataCreateComponent,\n    selectors: [[\"app-create\"]],\n    viewQuery: function FuelConsumptionActivityDataCreateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TotalAmountComponent, 5);\n        i0.ɵɵviewQuery(MeterReadingComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.totalAmountComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.meterReadingComponent = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"activityConfig\", \"activityDataFG\", \"defaultDataCollectionMethodID\", \"docFileList\", 4, \"ngIf\"], [3, \"activityConfig\", \"activityDataFG\", \"defaultDataCollectionMethodID\", \"docFileList\"]],\n    template: function FuelConsumptionActivityDataCreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FuelConsumptionActivityDataCreateComponent_app_total_amount_0_Template, 1, 4, \"app-total-amount\", 0);\n        i0.ɵɵtemplate(1, FuelConsumptionActivityDataCreateComponent_app_meter_reading_1_Template, 1, 4, \"app-meter-reading\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.dataInputMethoutStdKeyID == ctx.DataInputMethodKeyIDEnum.TOTAL_AMOUNT);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dataInputMethoutStdKeyID == ctx.DataInputMethodKeyIDEnum.METER_READING);\n      }\n    },\n    directives: [i6.NgIf, i7.TotalAmountComponent, i8.MeterReadingComponent],\n    styles: [\"\"]\n  });\n  return FuelConsumptionActivityDataCreateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}