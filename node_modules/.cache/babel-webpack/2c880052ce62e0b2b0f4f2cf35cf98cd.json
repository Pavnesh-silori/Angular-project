{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\n//tsc-library\nimport { MaterialFormFieldAppearance } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@carbon/controller/employee-survey.controller\";\nimport * as i4 from \"@library/toastr-service\";\nimport * as i5 from \"@carbon/service/token.service\";\nimport * as i6 from \"@library/unit-service\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/tooltip\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@library/generate-otp\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/button\";\nimport * as i15 from \"@angular/material/core\";\nconst _c0 = [\"emailResendCountdown\"];\nfunction CreateComponent_mat_error_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Working days is required field \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Working days cannot be less than 0 \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_mat_error_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Working days cannot be greater than 31 \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_tr_41_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-option\", 49);\n    i0.ɵɵtext(2, \"No data available\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", \"no-data\");\n  }\n}\nfunction CreateComponent_tr_41_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 50);\n    i0.ɵɵlistener(\"click\", function CreateComponent_tr_41_mat_option_9_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      const distanceDetail_r4 = ctx_r21.$implicit;\n      const i_r5 = ctx_r21.index;\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.onRowClick(distanceDetail_r4.get(\"modeOfTransportID\").value, i_r5);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const method_r19 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", method_r19.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", method_r19.name, \" \");\n  }\n}\nfunction CreateComponent_tr_41_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Mode of transport is a required field \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_tr_41_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 51);\n    i0.ɵɵlistener(\"click\", function CreateComponent_tr_41_mat_option_16_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      const distanceDetail_r4 = ctx_r25.$implicit;\n      const i_r5 = ctx_r25.index;\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.onRowClickForChildMode(distanceDetail_r4.get(\"modeOfTransportLevelOneID\").value, i_r5);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r23 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", type_r23.description);\n    i0.ɵɵproperty(\"value\", type_r23.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r23.name, \" \");\n  }\n}\nfunction CreateComponent_tr_41_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" These field is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_tr_41_mat_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 51);\n    i0.ɵɵlistener(\"click\", function CreateComponent_tr_41_mat_option_23_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      const distanceDetail_r4 = ctx_r29.$implicit;\n      const i_r5 = ctx_r29.index;\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.onRowClickforChildren2(distanceDetail_r4.get(\"modeOfTransportLevelTwoID\").value, i_r5);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r27 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", type_r27.description);\n    i0.ɵɵproperty(\"value\", type_r27.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r27.name, \" \");\n  }\n}\nfunction CreateComponent_tr_41_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" These field is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_tr_41_mat_option_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 52);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r31 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", type_r31.description);\n    i0.ɵɵproperty(\"value\", type_r31.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r31.name, \" \");\n  }\n}\nfunction CreateComponent_tr_41_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" These field is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_tr_41_mat_error_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Minimum value is 0. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_tr_41_mat_error_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This field is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_tr_41_ng_container_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-option\", 53);\n    i0.ɵɵelementStart(2, \"span\", 54);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const units_r32 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", units_r32.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", units_r32.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", units_r32.uomCode, \" \");\n  }\n}\nfunction CreateComponent_tr_41_mat_error_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This field is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction CreateComponent_tr_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementContainerStart(1, 31);\n    i0.ɵɵelementStart(2, \"div\", 11);\n    i0.ɵɵelementStart(3, \"div\", 32);\n    i0.ɵɵelementStart(4, \"mat-form-field\", 33);\n    i0.ɵɵelementStart(5, \"mat-label\", 19);\n    i0.ɵɵtext(6, \"Mode of transport\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-select\", 34);\n    i0.ɵɵtemplate(8, CreateComponent_tr_41_ng_container_8_Template, 3, 1, \"ng-container\", 21);\n    i0.ɵɵtemplate(9, CreateComponent_tr_41_mat_option_9_Template, 2, 2, \"mat-option\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, CreateComponent_tr_41_mat_error_10_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 36);\n    i0.ɵɵelementStart(12, \"mat-form-field\", 33);\n    i0.ɵɵelementStart(13, \"mat-label\", 19);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"mat-select\", 37);\n    i0.ɵɵtemplate(16, CreateComponent_tr_41_mat_option_16_Template, 2, 3, \"mat-option\", 38);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(17, CreateComponent_tr_41_mat_error_17_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 39);\n    i0.ɵɵelementStart(19, \"mat-form-field\", 33);\n    i0.ɵɵelementStart(20, \"mat-label\", 19);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"mat-select\", 40);\n    i0.ɵɵtemplate(23, CreateComponent_tr_41_mat_option_23_Template, 2, 3, \"mat-option\", 38);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, CreateComponent_tr_41_mat_error_24_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 39);\n    i0.ɵɵelementStart(26, \"mat-form-field\", 33);\n    i0.ɵɵelementStart(27, \"mat-label\", 19);\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"mat-select\", 41);\n    i0.ɵɵtemplate(30, CreateComponent_tr_41_mat_option_30_Template, 2, 3, \"mat-option\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(31, CreateComponent_tr_41_mat_error_31_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"div\", 43);\n    i0.ɵɵelementStart(33, \"mat-form-field\", 33);\n    i0.ɵɵelementStart(34, \"mat-label\", 19);\n    i0.ɵɵtext(35, \"Distance \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(36, \"input\", 44);\n    i0.ɵɵtemplate(37, CreateComponent_tr_41_mat_error_37_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵtemplate(38, CreateComponent_tr_41_mat_error_38_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(39, \"div\", 32);\n    i0.ɵɵelementStart(40, \"mat-form-field\", 33);\n    i0.ɵɵelementStart(41, \"mat-label\", 19);\n    i0.ɵɵtext(42, \"Select unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(43, \"mat-select\", 45);\n    i0.ɵɵtemplate(44, CreateComponent_tr_41_ng_container_44_Template, 6, 3, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(45, CreateComponent_tr_41_mat_error_45_Template, 2, 0, \"mat-error\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(46, \"div\", 46);\n    i0.ɵɵelementStart(47, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function CreateComponent_tr_41_Template_button_click_47_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r34);\n      const i_r5 = restoredCtx.index;\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.onDeleteRow(i_r5);\n    });\n    i0.ɵɵelementStart(48, \"span\", 48);\n    i0.ɵɵtext(49, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const distanceDetail_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r5);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.modeOfTransport.length == 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.modeOfTransport);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorHandlingForFormArrayData(\"modeOfTransportID\", \"required\", i_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(26, _c1, ctx_r3.surveyFG.get(\"distanceDetails\").at(i_r5).controls[\"rows\"].value == null));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.rowDetails[i_r5] == null ? null : ctx_r3.rowDetails[i_r5].labels.label1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.surveyFG.get(\"distanceDetails\").at(i_r5).controls[\"rows\"].value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorHandlingForFormArrayData(\"modeOfTransportLevelOneID\", \"required\", i_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(28, _c1, ctx_r3.surveyFG.get(\"distanceDetails\").at(i_r5).controls[\"childRows\"].value == null));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.rowDetails[i_r5] == null ? null : ctx_r3.rowDetails[i_r5].labels.label2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.surveyFG.get(\"distanceDetails\").at(i_r5).controls[\"childRows\"].value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorHandlingForFormArrayData(\"modeOfTransportLevelTwoID\", \"required\", i_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(30, _c1, ctx_r3.surveyFG.get(\"distanceDetails\").at(i_r5).controls[\"childRows1\"].value == null));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.rowDetails[i_r5] == null ? null : ctx_r3.rowDetails[i_r5].labels.label3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.surveyFG.get(\"distanceDetails\").at(i_r5).controls[\"childRows1\"].value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorHandlingForFormArrayData(\"modeOfTransportLevelThreeID\", \"required\", i_r5));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", distanceDetail_r4.controls[\"distance\"].hasError(\"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorHandlingForFormArrayData(\"distance\", \"required\", i_r5));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.unitM);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorHandlingForFormArrayData(\"distanceUnitID\", \"required\", i_r5));\n  }\n}\n// /tsc-library/\nexport let CreateComponent = /*#__PURE__*/(() => {\n  class CreateComponent {\n    constructor(activatedRoute, formBuilder, employeeSurveyController, toastrService, router, tokenService, unitService) {\n      this.activatedRoute = activatedRoute;\n      this.formBuilder = formBuilder;\n      this.employeeSurveyController = employeeSurveyController;\n      this.toastrService = toastrService;\n      this.router = router;\n      this.tokenService = tokenService;\n      this.unitService = unitService;\n      this.checkBoolean = new EventEmitter();\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.isValidOTP1 = false;\n      this.filled = false;\n      this.submit = false;\n      this.otpField = false;\n      this.modeOfTransport = [];\n      this.surveyForm = {};\n      this.resendEmailDisable = 'YES';\n      this.status = false;\n      this.submitBtnLblInput = 'Submit and Save';\n      this.remainingTimeInput = 600;\n      this.rowDetails = [];\n      this.errorHandling = (control, error) => {\n        return this.surveyFG.get(control).hasError(error);\n      };\n      this.errorHandlingForFormArrayData = (control, error, index) => {\n        const distanceDetailsArray = this.surveyFG.get('distanceDetails');\n        const formGroup = distanceDetailsArray.at(index);\n        const formControl = formGroup.get(control);\n        if (!formControl) {\n          return false;\n        }\n        return formControl.hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.activatedRoute.queryParams.subscribe(queryParam => {\n        this.authToken = queryParam.token;\n        this.tokenID = queryParam.tokenID;\n        this.rootOrgID = queryParam.rootOrgID;\n        this.employeeID = Number(queryParam.employeeID);\n        this.tokenValidate();\n      });\n      this.getEmployeeData();\n      this.getUnit();\n      this.employeeFG();\n    }\n    employeeFG() {\n      this.surveyFG = this.formBuilder.group({\n        employeeID: [this.employeeID],\n        workingDays: ['', [Validators.required, Validators.min(0), Validators.max(31)]],\n        distanceDetails: this.formBuilder.array([])\n      });\n      this.createDistanceDetailFormGroup();\n      this.updatevalidators();\n      this.modeOfTravel();\n    }\n    modeOfTravel() {\n      this.employeeSurveyController.getAllModeOfTransport(this.rootOrgID).subscribe(res => {\n        if (res == null) {\n          this.modeOfTransport = [];\n        } else {\n          this.modeOfTransport = res;\n        }\n      }, error => {\n        this.modeOfTransport = [];\n        console.error('mode of transport', error);\n      });\n    }\n    createDistanceDetailFormGroup() {\n      this.distanceDetailsArray.push(this.formBuilder.group({\n        distance: ['', [Validators.min(0)]],\n        distanceUnitID: ['', Validators.required],\n        modeOfTransportID: ['', Validators.required],\n        modeOfTransportLevelOneID: [],\n        modeOfTransportLevelTwoID: [],\n        modeOfTransportLevelThreeID: [],\n        rows: [],\n        childRows: [],\n        childRows1: []\n      }));\n    }\n    get distanceDetailsArray() {\n      return this.surveyFG.get('distanceDetails');\n    }\n    add() {\n      this.distanceDetailsArray.push(this.newFormArray());\n      this.updatevalidators();\n    }\n    newFormArray() {\n      return this.formBuilder.group({\n        distance: ['', [Validators.min(0)]],\n        distanceUnitID: [''],\n        modeOfTransportID: [''],\n        rows: [],\n        modeOfTransportLevelOneID: [],\n        modeOfTransportLevelTwoID: [],\n        modeOfTransportLevelThreeID: [],\n        childRows: [],\n        childRows1: []\n      });\n    }\n    updatevalidators() {\n      this.currentFormArr = this.surveyFG.get('distanceDetails');\n      for (let i = 0; i < this.currentFormArr.controls.length; i++) {\n        let item = this.currentFormArr.controls[i];\n        this.removeValidators(item);\n        item.valueChanges.subscribe(() => {\n          this.removeValidators(item);\n          this.isFormFilled(item);\n          this.submit = false;\n          if (this.filled) {\n            this.submit = true;\n            this.addValidators(item);\n          }\n          this.filled = false;\n        });\n      }\n    }\n    addValidators(formGroup) {\n      formGroup.get('distance').addValidators([Validators.required]);\n      formGroup.get('distanceUnitID').addValidators([Validators.required]);\n      formGroup.get('modeOfTransportID').addValidators([Validators.required]);\n      // this.handleDynamicValidation(formGroup.get('modeOfTransport'), );\n      this.handleDynamicValidation(formGroup.get('modeOfTransportLevelOneID'), formGroup.get('rows'));\n      this.handleDynamicValidation(formGroup.get('modeOfTransportLevelTwoID'), formGroup.get('childRows'));\n      this.handleDynamicValidation(formGroup.get('modeOfTransportLevelThreeID'), formGroup.get('childRows1'));\n      this.updateValueAndValidity(formGroup);\n    }\n    handleDynamicValidation(control, control1) {\n      if (control1.value !== null) {\n        control.setValidators([Validators.required]);\n      } else {\n        control.clearValidators();\n      }\n    }\n    removeValidators(formGroup) {\n      formGroup.get('distance').clearValidators();\n      formGroup.get('distanceUnitID').clearValidators();\n      formGroup.get('modeOfTransportID').clearValidators();\n      formGroup.get('modeOfTransportLevelOneID').clearValidators();\n      formGroup.get('modeOfTransportLevelTwoID').clearValidators();\n      this.updateValueAndValidity(formGroup);\n    }\n    updateValueAndValidity(formGroup) {\n      formGroup.get('distance').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('distanceUnitID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('modeOfTransportID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('modeOfTransportLevelOneID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('modeOfTransportLevelTwoID').updateValueAndValidity({\n        emitEvent: false\n      });\n      formGroup.get('modeOfTransportLevelThreeID').updateValueAndValidity({\n        emitEvent: false\n      });\n    }\n    isFormFilled(formGroup) {\n      if (formGroup.get('distance').value != null) this.filled = true;\n      if (formGroup.get('distanceUnitID').value != null) this.filled = true;\n      if (formGroup.get('modeOfTransportID').value != null) this.filled = true;\n      if (formGroup.get('modeOfTransportLevelOneID').value != null) this.filled = true;\n      if (formGroup.get('modeOfTransportLevelTwoID').value != null) this.filled = true;\n      if (formGroup.get('modeOfTransportLevelThreeID').value != null) this.filled = true;\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          this.unitM = yield this.unitService.getUnitUsingPublicUrl([`type:${UnitTypeKeyID.LENGTH}`]);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    }\n    getEmployeeData() {\n      this.employeeSurveyController.getEmployeeData(this.employeeID).subscribe(res => {\n        this.employeeCode = res['code'];\n        this.employeeName = res['firstName'];\n        this.employeeLastName = res['lastName'];\n      });\n    }\n    tokenValidate() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let tokenM;\n        let tokenRes;\n        tokenM = yield this.tokenService.tokenValidate(this.authToken, this.tokenID);\n        tokenRes = tokenM.status;\n        if (tokenRes != 'success') {\n          this.router.navigate(['/link-expired']);\n        } else {\n          return tokenM;\n        }\n      });\n    }\n    onRowClick(event, index) {\n      this.modeOfTransport.forEach(res => {\n        if (event == res.id) {\n          this.allTypes = res.subList;\n        }\n      });\n      this.setModeOfTravelLabels(event, index);\n      const formArray = this.surveyFG.get('distanceDetails');\n      const formGroup = formArray.at(index);\n      formGroup.get('rows').setValue(this.allTypes);\n      if (formGroup.get('modeOfTransportID').value != null) {\n        formGroup.patchValue({\n          modeOfTransportLevelOneID: null,\n          modeOfTransportLevelTwoID: null,\n          modeOfTransportLevelThreeID: null\n        });\n      }\n    }\n    setModeOfTravelLabels(event, index) {\n      while (this.rowDetails.length <= index) {\n        this.rowDetails.push({\n          event: 0,\n          labels: {\n            label1: '',\n            label2: '',\n            label3: ''\n          }\n        });\n      }\n      switch (event) {\n        case 1:\n          this.rowDetails[index].labels.label1 = 'Choose vehicle for land';\n          this.rowDetails[index].labels.label2 = 'Choose vehicle by size';\n          this.rowDetails[index].labels.label3 = 'Choose your vehicle';\n          break;\n        case 2:\n          this.rowDetails[index].labels.label1 = 'Choose vehicle for water';\n          this.rowDetails[index].labels.label2 = 'Choose Vehicle by segment';\n          this.rowDetails[index].labels.label3 = 'Choose your vehicle';\n          break;\n        case 3:\n          this.rowDetails[index].labels.label1 = 'Choose vehicle for air';\n          this.rowDetails[index].labels.label2 = 'Choose Vehicle by distance';\n          this.rowDetails[index].labels.label3 = 'Choose Vehicle by class';\n          break;\n        case 4:\n          this.rowDetails[index].labels.label1 = 'Select type of railways';\n          this.rowDetails[index].labels.label2 = 'Select railway by category';\n          this.rowDetails[index].labels.label3 = 'Label for railway 3';\n          break;\n      }\n      this.rowDetails[index].event = event;\n    }\n    onRowClickForChildMode(event, index) {\n      const formArray = this.surveyFG.get('distanceDetails');\n      const formGroup = formArray.at(index);\n      let loop = formGroup.value['rows'];\n      loop.forEach(res => {\n        if (res.id == event) {\n          formGroup.get('childRows').setValue(res.subList);\n        }\n      });\n    }\n    onRowClickforChildren2(event, index) {\n      const formArray = this.surveyFG.get('distanceDetails');\n      const formGroup = formArray.at(index);\n      let loop = formGroup.value['childRows'];\n      loop.forEach(res => {\n        if (res.id == event) {\n          formGroup.get('childRows1').setValue(res.subList);\n        }\n      });\n    }\n    onDeleteRow(index) {\n      const distanceDetailsArray = this.surveyFG.get('distanceDetails');\n      if (distanceDetailsArray.length > 1) {\n        distanceDetailsArray.removeAt(index);\n      } else {\n        this.toastrService.openToast('Error', 'Fill at least one mode of transport', 'error');\n      }\n    }\n    checkForm() {\n      if (this.surveyFG.invalid || this.submit == false) {\n        this.toastrService.openToast('Error', 'Fill all valid form', 'error');\n      } else {\n        const formArray = this.surveyFG.get('distanceDetails');\n        const modifiedValue = formArray.controls.map(control => {\n          const filteredControl = control.value;\n          if ('rows' in filteredControl && Array.isArray(filteredControl.rows)) {\n            filteredControl.rows = null;\n          }\n          if ('childRows' in filteredControl && Array.isArray(filteredControl.childRows)) {\n            filteredControl.childRows = null;\n          }\n          if ('childRows1' in filteredControl && Array.isArray(filteredControl.childRows1)) {\n            filteredControl.childRows1 = null;\n          }\n          return filteredControl;\n        });\n        // Set the modified value back to the formArray\n        this.surveyFG.get('distanceDetails').setValue(modifiedValue);\n        // Here i remove those row not field by user\n        for (let i = formArray.length - 1; i >= 0; i--) {\n          const control = formArray.at(i);\n          if (control.get('modeOfTransportLevelOneID').value === null) {\n            formArray.removeAt(i);\n          }\n        }\n        this.surveyFG.value.otp = this.receivedOtp;\n        this.surveyFG.value.token = this.otpToken;\n        this.surveyForm = this.surveyFG.value;\n        // Send data to the backend\n        this.employeeSurveyController.createSurveyData(this.surveyForm).subscribe(res => {\n          this.toastrService.openToast(res['title'], res['message'], res['result']);\n          this.router.navigate(['employee-commuting/survey/data/submitted-successfully']);\n        }, error => {\n          console.error('error in form', error);\n        });\n      }\n    }\n    // \"I check whether the 'Generate OTP' button is shown in the UI through a library function call.\"\n    onOtpEmitted(data) {\n      this.receivedOtp = data.otp;\n      this.resendOtp = data.resendOtp;\n      if (this.surveyFG.invalid) {\n        this.surveyFG.markAllAsTouched();\n        this.surveyFG.get('distanceDetails').markAllAsTouched();\n        this.toastrService.openToast('Error', 'Please fill in all the required fields', 'error');\n      } else if (this.submit == true && (this.isValidOTP1 == false || this.resendOtp == true)) {\n        this.isValidOTP1 = true;\n        this.resendOtp = false;\n        this.employeeSurveyController.genreateOTP(this.authToken).subscribe(res => {\n          this.otpToken = res.response;\n        });\n      } else if (this.receivedOtp != undefined) {\n        this.resendOtp = false;\n        this.checkForm();\n      } else if (this.submit == false) {\n        this.surveyFG.markAllAsTouched();\n        this.toastrService.openToast('Error', 'Fill at least one mode of transport', 'error');\n      }\n    }\n  }\n  CreateComponent.ɵfac = function CreateComponent_Factory(t) {\n    return new (t || CreateComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.EmployeeSurveyController), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i5.TokenService), i0.ɵɵdirectiveInject(i6.UnitService));\n  };\n  CreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateComponent,\n    selectors: [[\"app-create\"]],\n    viewQuery: function CreateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emailResendCountdown = _t.first);\n      }\n    },\n    inputs: {\n      receivedOtp: \"receivedOtp\"\n    },\n    outputs: {\n      checkBoolean: \"checkBoolean\"\n    },\n    decls: 48,\n    vars: 12,\n    consts: [[1, \"container\"], [1, \"card\", \"main-card\", \"cardOverwrite\", \"h100\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"pageSubtitle\"], [1, \"card-body\"], [3, \"formGroup\"], [1, \"border\", \"cardOverwrite\"], [1, \"card-title\"], [1, \"cardTitle\"], [1, \"row\"], [1, \"col-sm-2\", \"col-form-label\", \"fs-6\"], [1, \"col-sm-2\"], [1, \"form-control-plaintext\"], [1, \"row\", \"pt-2\"], [1, \"row\", \"col-sm-5\"], [1, \"col-sm-3\", \"pt-2\"], [\"matTooltip\", \"Working day\", 1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"max\", \"31\", \"placeholder\", \"0\", \"formControlName\", \"workingDays\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [1, \"pt-3\"], [1, \"border\", \"cardOverwrite\", \"pt-2\"], [1, \"theadStickyOverwrite\"], [\"formArrayName\", \"distanceDetails\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"pt-2\", \"ms-3\"], [3, \"showEnterOtpInput\", \"remainingTimeInput\", \"submitBtnLblInput\", \"otpEmitter\"], [1, \"d-none\", \"btn\", \"btn-success\", \"float-end\", \"me-2\", 3, \"click\"], [3, \"formGroupName\"], [1, \"col-sm-2\", \"largeField\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [\"formControlName\", \"modeOfTransportID\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-sm-2\", \"largeField\", 3, \"ngClass\"], [\"formControlName\", \"modeOfTransportLevelOneID\"], [3, \"value\", \"matTooltip\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"mode\", \"col-sm-2\", \"largeField\", 3, \"ngClass\"], [\"formControlName\", \"modeOfTransportLevelTwoID\"], [\"formControlName\", \"modeOfTransportLevelThreeID\"], [3, \"value\", \"matTooltip\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-sm-1\", \"largeField\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"placeholder\", \"0\", \"formControlName\", \"distance\", 1, \"formPlaceholder\"], [\"formControlName\", \"distanceUnitID\"], [1, \"col-sm-1\", \"pt-1\", \"size\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-danger\"], [\"disabled\", \"\", 3, \"value\"], [3, \"value\", \"click\"], [3, \"value\", \"matTooltip\", \"click\"], [3, \"value\", \"matTooltip\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"]],\n    template: function CreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtext(5, \"Employee commute emissions survey\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"form\", 7);\n        i0.ɵɵelementStart(9, \"mat-card\", 8);\n        i0.ɵɵelementStart(10, \"div\", 9);\n        i0.ɵɵelementStart(11, \"div\", 10);\n        i0.ɵɵtext(12, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵelementStart(14, \"label\", 12);\n        i0.ɵɵtext(15, \"Employee code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 13);\n        i0.ɵɵelementStart(17, \"span\", 14);\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 15);\n        i0.ɵɵelementStart(20, \"label\", 12);\n        i0.ɵɵtext(21, \"Employee name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 16);\n        i0.ɵɵelementStart(23, \"span\", 14);\n        i0.ɵɵtext(24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 17);\n        i0.ɵɵelementStart(26, \"mat-form-field\", 18);\n        i0.ɵɵelementStart(27, \"mat-label\", 19);\n        i0.ɵɵtext(28, \"Average working days in a month \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"input\", 20);\n        i0.ɵɵtemplate(30, CreateComponent_mat_error_30_Template, 2, 0, \"mat-error\", 21);\n        i0.ɵɵtemplate(31, CreateComponent_mat_error_31_Template, 2, 0, \"mat-error\", 21);\n        i0.ɵɵtemplate(32, CreateComponent_mat_error_32_Template, 2, 0, \"mat-error\", 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"div\", 22);\n        i0.ɵɵelementStart(34, \"mat-card\", 23);\n        i0.ɵɵelementStart(35, \"table\");\n        i0.ɵɵelementStart(36, \"thead\", 24);\n        i0.ɵɵelementStart(37, \"div\", 9);\n        i0.ɵɵelementStart(38, \"div\", 10);\n        i0.ɵɵtext(39, \" Commute profile \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"tbody\", 25);\n        i0.ɵɵtemplate(41, CreateComponent_tr_41_Template, 50, 32, \"tr\", 26);\n        i0.ɵɵelementStart(42, \"button\", 27);\n        i0.ɵɵlistener(\"click\", function CreateComponent_Template_button_click_42_listener() {\n          return ctx.add();\n        });\n        i0.ɵɵtext(43, \" Add another transport \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"div\", 28);\n        i0.ɵɵelementStart(45, \"lib-generate-otp\", 29);\n        i0.ɵɵlistener(\"otpEmitter\", function CreateComponent_Template_lib_generate_otp_otpEmitter_45_listener($event) {\n          return ctx.onOtpEmitted($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"button\", 30);\n        i0.ɵɵlistener(\"click\", function CreateComponent_Template_button_click_46_listener() {\n          return ctx.checkForm();\n        });\n        i0.ɵɵtext(47, \" Save \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.surveyFG);\n        i0.ɵɵadvance(10);\n        i0.ɵɵtextInterpolate1(\" \", ctx.employeeCode, \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate2(\" \", ctx.employeeName, \" \", ctx.employeeLastName, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"workingDays\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"workingDays\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"workingDays\", \"max\"));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.distanceDetailsArray.controls);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"showEnterOtpInput\", ctx.isValidOTP1)(\"remainingTimeInput\", ctx.remainingTimeInput)(\"submitBtnLblInput\", ctx.submitBtnLblInput);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i7.MatCard, i8.MatFormField, i9.MatTooltip, i8.MatLabel, i10.MatInput, i2.MinValidator, i2.MaxValidator, i2.NumberValueAccessor, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i11.NgIf, i2.FormArrayName, i11.NgForOf, i12.GenerateOtpComponent, i8.MatError, i2.FormGroupName, i13.MatSelect, i11.NgClass, i14.MatButton, i15.MatOption],\n    styles: [\".largeField[_ngcontent-%COMP%]{min-width:130px}.size[_ngcontent-%COMP%]{width:10px;height:10px}\"]\n  });\n  return CreateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}