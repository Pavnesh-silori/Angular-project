{"ast":null,"code":"// tsc-library\nimport { ToastrColor } from \"@library/toastr-service\";\nimport { InvalidForm } from \"@library/tsc-common\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/fugitive-activity-type.controller\";\nimport * as i2 from \"@carbon/controller/other-fugitive-source.controller\";\nimport * as i3 from \"@library/toastr-service\";\n// /tsc-library\nexport let FugitiveActivityTypeService = /*#__PURE__*/(() => {\n  class FugitiveActivityTypeService {\n    constructor(fugitiveActivityTypeController, otherFugitiveSourceController, toastrService) {\n      this.fugitiveActivityTypeController = fugitiveActivityTypeController;\n      this.otherFugitiveSourceController = otherFugitiveSourceController;\n      this.toastrService = toastrService;\n    }\n    getGasesByFugitiveSourceID(currentOrgID, sourceID) {\n      return new Promise(resole => {\n        let sourceGas;\n        this.otherFugitiveSourceController.getGasesByFugitiveSourceID(currentOrgID, sourceID).subscribe(sourceGasRes => {\n          sourceGas = sourceGasRes;\n          resole(sourceGas);\n        }, error => {\n          this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, 'Error in getting source gas', ToastrColor.ERROR);\n        });\n      });\n    }\n    getFugitiveActivityType(type, calculationapproachKeyID) {\n      return new Promise(resole => {\n        let activityType;\n        this.fugitiveActivityTypeController.getFugitiveActivityType(type, calculationapproachKeyID).subscribe(equipmentRes => {\n          activityType = equipmentRes;\n          resole(activityType);\n        }, error => {\n          console.log('error in getFugitiveActivityType -', error);\n        });\n      });\n    }\n  }\n  FugitiveActivityTypeService.ɵfac = function FugitiveActivityTypeService_Factory(t) {\n    return new (t || FugitiveActivityTypeService)(i0.ɵɵinject(i1.FugitiveActivityTypeController), i0.ɵɵinject(i2.OtherFugitiveSourceController), i0.ɵɵinject(i3.ToastrService));\n  };\n  FugitiveActivityTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FugitiveActivityTypeService,\n    factory: FugitiveActivityTypeService.ɵfac,\n    providedIn: 'root'\n  });\n  return FugitiveActivityTypeService;\n})();","map":null,"metadata":{},"sourceType":"module"}