{"ast":null,"code":"/*!\r\n * Ladda\r\n * http://lab.hakim.se/ladda\r\n * MIT licensed\r\n *\r\n * Copyright (C) 2018 Hakim El Hattab, http://hakim.se\r\n */\n\nimport { Spinner } from 'spin.js';\n\n// All currently instantiated instances of Ladda\nvar ALL_INSTANCES = [];\n\n/**\r\n * Creates a new instance of Ladda which wraps the\r\n * target button element.\r\n *\r\n * @return An API object that can be used to control\r\n * the loading animation state.\r\n */\nexport function create(button) {\n  if (typeof button === 'undefined') {\n    console.warn(\"Ladda button target must be defined.\");\n    return;\n  }\n\n  // The button must have the class \"ladda-button\"\n  if (!button.classList.contains('ladda-button')) {\n    button.classList.add('ladda-button');\n  }\n\n  // Style is required, default to \"expand-right\"\n  if (!button.hasAttribute('data-style')) {\n    button.setAttribute('data-style', 'expand-right');\n  }\n\n  // The text contents must be wrapped in a ladda-label\n  // element, create one if it doesn't already exist\n  if (!button.querySelector('.ladda-label')) {\n    var laddaLabel = document.createElement('span');\n    laddaLabel.className = 'ladda-label';\n    wrapContent(button, laddaLabel);\n  }\n\n  // The spinner component\n  var spinnerWrapper = button.querySelector('.ladda-spinner');\n\n  // Wrapper element for the spinner\n  if (!spinnerWrapper) {\n    spinnerWrapper = document.createElement('span');\n    spinnerWrapper.className = 'ladda-spinner';\n  }\n  button.appendChild(spinnerWrapper);\n\n  // Timer used to delay starting/stopping\n  var timer;\n  var spinner;\n  var instance = {\n    /**\r\n     * Enter the loading state.\r\n     */\n    start: function () {\n      // Create the spinner if it doesn't already exist\n      if (!spinner) {\n        spinner = createSpinner(button);\n      }\n      button.disabled = true;\n      button.setAttribute('data-loading', '');\n      clearTimeout(timer);\n      spinner.spin(spinnerWrapper);\n      this.setProgress(0);\n      return this; // chain\n    },\n\n    /**\r\n     * Enter the loading state, after a delay.\r\n     */\n    startAfter: function (delay) {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        instance.start();\n      }, delay);\n      return this; // chain\n    },\n\n    /**\r\n     * Exit the loading state.\r\n     */\n    stop: function () {\n      if (instance.isLoading()) {\n        button.disabled = false;\n        button.removeAttribute('data-loading');\n      }\n\n      // Kill the animation after a delay to make sure it\n      // runs for the duration of the button transition\n      clearTimeout(timer);\n      if (spinner) {\n        timer = setTimeout(function () {\n          spinner.stop();\n        }, 1000);\n      }\n      return this; // chain\n    },\n\n    /**\r\n     * Toggle the loading state on/off.\r\n     */\n    toggle: function () {\n      return this.isLoading() ? this.stop() : this.start();\n    },\n    /**\r\n     * Sets the width of the visual progress bar inside of\r\n     * this Ladda button\r\n     *\r\n     * @param {number} progress in the range of 0-1\r\n     */\n    setProgress: function (progress) {\n      // Cap it\n      progress = Math.max(Math.min(progress, 1), 0);\n      var progressElement = button.querySelector('.ladda-progress');\n\n      // Remove the progress bar if we're at 0 progress\n      if (progress === 0 && progressElement && progressElement.parentNode) {\n        progressElement.parentNode.removeChild(progressElement);\n      } else {\n        if (!progressElement) {\n          progressElement = document.createElement('div');\n          progressElement.className = 'ladda-progress';\n          button.appendChild(progressElement);\n        }\n        progressElement.style.width = (progress || 0) * button.offsetWidth + 'px';\n      }\n    },\n    isLoading: function () {\n      return button.hasAttribute('data-loading');\n    },\n    remove: function () {\n      clearTimeout(timer);\n      button.disabled = false;\n      button.removeAttribute('data-loading');\n      if (spinner) {\n        spinner.stop();\n        spinner = null;\n      }\n      ALL_INSTANCES.splice(ALL_INSTANCES.indexOf(instance), 1);\n    }\n  };\n  ALL_INSTANCES.push(instance);\n  return instance;\n}\n\n/**\r\n * Binds the target buttons to automatically enter the\r\n * loading state when clicked.\r\n *\r\n * @param target Either an HTML element or a CSS selector.\r\n * @param options\r\n *          - timeout Number of milliseconds to wait before\r\n *            automatically cancelling the animation.\r\n *          - callback A function to be called with the Ladda\r\n *            instance when a target button is clicked.\r\n */\nexport function bind(target, options) {\n  var targets;\n  if (typeof target === 'string') {\n    targets = document.querySelectorAll(target);\n  } else if (typeof target === 'object') {\n    targets = [target];\n  } else {\n    throw new Error('target must be string or object');\n  }\n  options = options || {};\n  for (var i = 0; i < targets.length; i++) {\n    bindElement(targets[i], options);\n  }\n}\n\n/**\r\n * Stops ALL current loading animations.\r\n */\nexport function stopAll() {\n  for (var i = 0, len = ALL_INSTANCES.length; i < len; i++) {\n    ALL_INSTANCES[i].stop();\n  }\n}\n\n/**\r\n* Get the first ancestor node from an element, having a\r\n* certain type.\r\n*\r\n* @param elem An HTML element\r\n* @param type an HTML tag type (uppercased)\r\n*\r\n* @return An HTML element\r\n*/\nfunction getAncestorOfTagType(elem, type) {\n  while (elem.parentNode && elem.tagName !== type) {\n    elem = elem.parentNode;\n  }\n  return type === elem.tagName ? elem : undefined;\n}\nfunction createSpinner(button) {\n  var height = button.offsetHeight,\n    spinnerColor,\n    spinnerLines;\n  if (height === 0) {\n    // We may have an element that is not visible so\n    // we attempt to get the height in a different way\n    height = parseFloat(window.getComputedStyle(button).height);\n  }\n\n  // If the button is tall we can afford some padding\n  if (height > 32) {\n    height *= 0.8;\n  }\n\n  // Prefer an explicit height if one is defined\n  if (button.hasAttribute('data-spinner-size')) {\n    height = parseInt(button.getAttribute('data-spinner-size'), 10);\n  }\n\n  // Allow buttons to specify the color of the spinner element\n  if (button.hasAttribute('data-spinner-color')) {\n    spinnerColor = button.getAttribute('data-spinner-color');\n  }\n\n  // Allow buttons to specify the number of lines of the spinner\n  if (button.hasAttribute('data-spinner-lines')) {\n    spinnerLines = parseInt(button.getAttribute('data-spinner-lines'), 10);\n  }\n  var radius = height * 0.2,\n    length = radius * 0.6,\n    width = radius < 7 ? 2 : 3;\n  return new Spinner({\n    color: spinnerColor || '#fff',\n    lines: spinnerLines || 12,\n    radius: radius,\n    length: length,\n    width: width,\n    animation: 'ladda-spinner-line-fade',\n    zIndex: 'auto',\n    top: 'auto',\n    left: 'auto',\n    className: ''\n  });\n}\nfunction wrapContent(node, wrapper) {\n  var r = document.createRange();\n  r.selectNodeContents(node);\n  r.surroundContents(wrapper);\n  node.appendChild(wrapper);\n}\nfunction bindElement(element, options) {\n  if (typeof element.addEventListener !== 'function') {\n    return;\n  }\n  var instance = create(element);\n  var timeout = -1;\n  element.addEventListener('click', function () {\n    // If the button belongs to a form, make sure all the\n    // fields in that form are filled out\n    var valid = true;\n    var form = getAncestorOfTagType(element, 'FORM');\n    if (typeof form !== 'undefined' && !form.hasAttribute('novalidate')) {\n      // Modern form validation\n      if (typeof form.checkValidity === 'function') {\n        valid = form.checkValidity();\n      }\n    }\n    if (valid) {\n      // This is asynchronous to avoid an issue where disabling\n      // the button prevents forms from submitting\n      instance.startAfter(1);\n\n      // Set a loading timeout if one is specified\n      if (typeof options.timeout === 'number') {\n        clearTimeout(timeout);\n        timeout = setTimeout(instance.stop, options.timeout);\n      }\n\n      // Invoke callbacks\n      if (typeof options.callback === 'function') {\n        options.callback.apply(null, [instance]);\n      }\n    }\n  }, false);\n}","map":{"version":3,"names":["Spinner","ALL_INSTANCES","create","button","console","warn","classList","contains","add","hasAttribute","setAttribute","querySelector","laddaLabel","document","createElement","className","wrapContent","spinnerWrapper","appendChild","timer","spinner","instance","start","createSpinner","disabled","clearTimeout","spin","setProgress","startAfter","delay","setTimeout","stop","isLoading","removeAttribute","toggle","progress","Math","max","min","progressElement","parentNode","removeChild","style","width","offsetWidth","remove","splice","indexOf","push","bind","target","options","targets","querySelectorAll","Error","i","length","bindElement","stopAll","len","getAncestorOfTagType","elem","type","tagName","undefined","height","offsetHeight","spinnerColor","spinnerLines","parseFloat","window","getComputedStyle","parseInt","getAttribute","radius","color","lines","animation","zIndex","top","left","node","wrapper","r","createRange","selectNodeContents","surroundContents","element","addEventListener","timeout","valid","form","checkValidity","callback","apply"],"sources":["/home/silori/projects/gitClones/account-ui/node_modules/ladda/js/ladda.js"],"sourcesContent":["/*!\r\n * Ladda\r\n * http://lab.hakim.se/ladda\r\n * MIT licensed\r\n *\r\n * Copyright (C) 2018 Hakim El Hattab, http://hakim.se\r\n */\r\n\r\nimport {Spinner} from 'spin.js';\r\n\r\n// All currently instantiated instances of Ladda\r\nvar ALL_INSTANCES = [];\r\n\r\n/**\r\n * Creates a new instance of Ladda which wraps the\r\n * target button element.\r\n *\r\n * @return An API object that can be used to control\r\n * the loading animation state.\r\n */\r\nexport function create(button) {\r\n    if (typeof button === 'undefined') {\r\n        console.warn(\"Ladda button target must be defined.\");\r\n        return;\r\n    }\r\n\r\n    // The button must have the class \"ladda-button\"\r\n    if (!button.classList.contains('ladda-button')) {\r\n        button.classList.add('ladda-button');\r\n    }\r\n\r\n    // Style is required, default to \"expand-right\"\r\n    if (!button.hasAttribute('data-style')) {\r\n        button.setAttribute('data-style', 'expand-right');\r\n    }\r\n\r\n    // The text contents must be wrapped in a ladda-label\r\n    // element, create one if it doesn't already exist\r\n    if (!button.querySelector('.ladda-label')) {\r\n        var laddaLabel = document.createElement('span');\r\n        laddaLabel.className = 'ladda-label';\r\n        wrapContent(button, laddaLabel);\r\n    }\r\n\r\n    // The spinner component\r\n    var spinnerWrapper = button.querySelector('.ladda-spinner');\r\n\r\n    // Wrapper element for the spinner\r\n    if (!spinnerWrapper) {\r\n        spinnerWrapper = document.createElement('span');\r\n        spinnerWrapper.className = 'ladda-spinner';\r\n    }\r\n\r\n    button.appendChild(spinnerWrapper);\r\n\r\n    // Timer used to delay starting/stopping\r\n    var timer;\r\n    var spinner;\r\n\r\n    var instance = {\r\n        /**\r\n         * Enter the loading state.\r\n         */\r\n        start: function() {\r\n            // Create the spinner if it doesn't already exist\r\n            if (!spinner) {\r\n                spinner = createSpinner(button);\r\n            }\r\n\r\n            button.disabled = true;\r\n            button.setAttribute('data-loading', '');\r\n\r\n            clearTimeout(timer);\r\n            spinner.spin(spinnerWrapper);\r\n\r\n            this.setProgress(0);\r\n\r\n            return this; // chain\r\n        },\r\n\r\n        /**\r\n         * Enter the loading state, after a delay.\r\n         */\r\n        startAfter: function(delay) {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(function() { instance.start(); }, delay);\r\n\r\n            return this; // chain\r\n        },\r\n\r\n        /**\r\n         * Exit the loading state.\r\n         */\r\n        stop: function() {\r\n            if (instance.isLoading()) {\r\n                button.disabled = false;\r\n                button.removeAttribute('data-loading');   \r\n            }\r\n\r\n            // Kill the animation after a delay to make sure it\r\n            // runs for the duration of the button transition\r\n            clearTimeout(timer);\r\n\r\n            if (spinner) {\r\n                timer = setTimeout(function() { spinner.stop(); }, 1000);\r\n            }\r\n\r\n            return this; // chain\r\n        },\r\n\r\n        /**\r\n         * Toggle the loading state on/off.\r\n         */\r\n        toggle: function() {\r\n            return this.isLoading() ? this.stop() : this.start();\r\n        },\r\n\r\n        /**\r\n         * Sets the width of the visual progress bar inside of\r\n         * this Ladda button\r\n         *\r\n         * @param {number} progress in the range of 0-1\r\n         */\r\n        setProgress: function(progress) {\r\n            // Cap it\r\n            progress = Math.max(Math.min(progress, 1), 0);\r\n\r\n            var progressElement = button.querySelector('.ladda-progress');\r\n\r\n            // Remove the progress bar if we're at 0 progress\r\n            if (progress === 0 && progressElement && progressElement.parentNode) {\r\n                progressElement.parentNode.removeChild(progressElement);\r\n            } else {\r\n                if (!progressElement) {\r\n                    progressElement = document.createElement('div');\r\n                    progressElement.className = 'ladda-progress';\r\n                    button.appendChild(progressElement);\r\n                }\r\n\r\n                progressElement.style.width = ((progress || 0) * button.offsetWidth) + 'px';\r\n            }\r\n        },\r\n\r\n        isLoading: function() {\r\n            return button.hasAttribute('data-loading');\r\n        },\r\n\r\n        remove: function() {\r\n            clearTimeout(timer);\r\n            button.disabled = false;\r\n            button.removeAttribute('data-loading');\r\n\r\n            if (spinner) {\r\n                spinner.stop();\r\n                spinner = null;\r\n            }\r\n\r\n            ALL_INSTANCES.splice(ALL_INSTANCES.indexOf(instance), 1);\r\n        }\r\n    };\r\n\r\n    ALL_INSTANCES.push(instance);\r\n\r\n    return instance;\r\n}\r\n\r\n/**\r\n * Binds the target buttons to automatically enter the\r\n * loading state when clicked.\r\n *\r\n * @param target Either an HTML element or a CSS selector.\r\n * @param options\r\n *          - timeout Number of milliseconds to wait before\r\n *            automatically cancelling the animation.\r\n *          - callback A function to be called with the Ladda\r\n *            instance when a target button is clicked.\r\n */\r\nexport function bind(target, options) {\r\n    var targets;\r\n\r\n    if (typeof target === 'string') {\r\n        targets = document.querySelectorAll(target);\r\n    } else if (typeof target === 'object') {\r\n        targets = [target];\r\n    } else {\r\n        throw new Error('target must be string or object');\r\n    }\r\n\r\n    options = options || {};\r\n\r\n    for (var i = 0; i < targets.length; i++) {\r\n        bindElement(targets[i], options);\r\n    }\r\n}\r\n\r\n/**\r\n * Stops ALL current loading animations.\r\n */\r\nexport function stopAll() {\r\n    for (var i = 0, len = ALL_INSTANCES.length; i < len; i++) {\r\n        ALL_INSTANCES[i].stop();\r\n    }\r\n}\r\n\r\n/**\r\n* Get the first ancestor node from an element, having a\r\n* certain type.\r\n*\r\n* @param elem An HTML element\r\n* @param type an HTML tag type (uppercased)\r\n*\r\n* @return An HTML element\r\n*/\r\nfunction getAncestorOfTagType(elem, type) {\r\n    while (elem.parentNode && elem.tagName !== type) {\r\n        elem = elem.parentNode;\r\n    }\r\n\r\n    return (type === elem.tagName) ? elem : undefined;\r\n}\r\n\r\nfunction createSpinner(button) {\r\n    var height = button.offsetHeight,\r\n        spinnerColor,\r\n        spinnerLines;\r\n\r\n    if (height === 0) {\r\n        // We may have an element that is not visible so\r\n        // we attempt to get the height in a different way\r\n        height = parseFloat(window.getComputedStyle(button).height);\r\n    }\r\n\r\n    // If the button is tall we can afford some padding\r\n    if (height > 32) {\r\n        height *= 0.8;\r\n    }\r\n\r\n    // Prefer an explicit height if one is defined\r\n    if (button.hasAttribute('data-spinner-size')) {\r\n        height = parseInt(button.getAttribute('data-spinner-size'), 10);\r\n    }\r\n\r\n    // Allow buttons to specify the color of the spinner element\r\n    if (button.hasAttribute('data-spinner-color')) {\r\n        spinnerColor = button.getAttribute('data-spinner-color');\r\n    }\r\n\r\n    // Allow buttons to specify the number of lines of the spinner\r\n    if (button.hasAttribute('data-spinner-lines')) {\r\n        spinnerLines = parseInt(button.getAttribute('data-spinner-lines'), 10);\r\n    }\r\n\r\n    var radius = height * 0.2,\r\n        length = radius * 0.6,\r\n        width = radius < 7 ? 2 : 3;\r\n\r\n    return new Spinner({\r\n        color: spinnerColor || '#fff',\r\n        lines: spinnerLines || 12,\r\n        radius: radius,\r\n        length: length,\r\n        width: width,\r\n        animation: 'ladda-spinner-line-fade',\r\n        zIndex: 'auto',\r\n        top: 'auto',\r\n        left: 'auto',\r\n        className: ''\r\n    });\r\n}\r\n\r\nfunction wrapContent(node, wrapper) {\r\n    var r = document.createRange();\r\n    r.selectNodeContents(node);\r\n    r.surroundContents(wrapper);\r\n    node.appendChild(wrapper);\r\n}\r\n\r\nfunction bindElement(element, options) {\r\n    if (typeof element.addEventListener !== 'function') {\r\n        return;\r\n    }\r\n\r\n    var instance = create(element);\r\n    var timeout = -1;\r\n\r\n    element.addEventListener('click', function() {\r\n        // If the button belongs to a form, make sure all the\r\n        // fields in that form are filled out\r\n        var valid = true;\r\n        var form = getAncestorOfTagType(element, 'FORM');\r\n\r\n        if (typeof form !== 'undefined' && !form.hasAttribute('novalidate')) {\r\n            // Modern form validation\r\n            if (typeof form.checkValidity === 'function') {\r\n                valid = form.checkValidity();\r\n            }\r\n        }\r\n\r\n        if (valid) {\r\n            // This is asynchronous to avoid an issue where disabling\r\n            // the button prevents forms from submitting\r\n            instance.startAfter(1);\r\n\r\n            // Set a loading timeout if one is specified\r\n            if (typeof options.timeout === 'number') {\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(instance.stop, options.timeout);\r\n            }\r\n\r\n            // Invoke callbacks\r\n            if (typeof options.callback === 'function') {\r\n                options.callback.apply(null, [instance]);\r\n            }\r\n        }\r\n\r\n    }, false);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}