{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { isEqual } from 'lodash';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ToastrColor, ToastrTitle } from '@library/toastr-service';\nimport { DialogResponseEnum, InvalidForm, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@library/toastr-service\";\nimport * as i5 from \"@carbon/controller/custom-factor.controller\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nfunction UpdateFactorDialog_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Factor name is mandatory \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateFactorDialog_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Name already taken. Please choose another one \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let UpdateFactorDialog = /*#__PURE__*/(() => {\n  class UpdateFactorDialog {\n    constructor(formBuilder, data, dialogRef, storageService, toastrService, customFactorController) {\n      this.formBuilder = formBuilder;\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.toastrService = toastrService;\n      this.customFactorController = customFactorController;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.isUpdate = false;\n      this.isEqual = false;\n      this.dialogRef.disableClose = true;\n      this.currentOrgID = storageService.getStorage(['currentOrgID']);\n    }\n    ngOnInit() {\n      this.formGroupInit();\n      this.isUpdate = true;\n      this.factorID = this.data['factorID'];\n      this.getFactorByID();\n    }\n    formGroupInit() {\n      this.factorFG = this.formBuilder.group({\n        name: [, Validators.required]\n      });\n    }\n    getFactorByID() {\n      this.customFactorController.getFactorByID(this.currentOrgID, this.factorID).subscribe(factorRes => {\n        this.patchFactorFG(factorRes);\n      }, error => {\n        console.log('error in getFactorByID() -', error);\n        this.toastrService.openToast(`${error.error['title']}`, `${error.error['message']}`, `${error.error['result']}`);\n      });\n    }\n    patchFactorFG(factor) {\n      this.factorFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.factorFG.value));\n      this.factorFG.patchValue({\n        name: factor['details']['name']\n      });\n      this.isEqual = true;\n      this.initialObject = this.factorFG.value;\n    }\n    isValidForm() {\n      if (this.factorFG.invalid) {\n        console.log('invalid form -', this.factorFG);\n        this.toastrService.openToast(ToastrTitle.ERROR, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.updateFactor();\n    }\n    updateFactor() {\n      this.customFactorController.updateFactor(this.currentOrgID, this.factorFG.value, this.factorID).subscribe(updateRes => {\n        if ((updateRes === null || updateRes === void 0 ? void 0 : updateRes['response']) && updateRes['reponse']['nameAlreadyExists'] == 'YES') {\n          this.factorFG.get('name').setErrors({\n            nameAlreadyExists: true\n          });\n          this.toastrService.openToast(`${updateRes['title']}`, `${updateRes['message']}`, `${updateRes['result']}`);\n          return;\n        } else {\n          this.dialogRef.close(DialogResponseEnum.SUCCESS);\n        }\n      }, error => {\n        this.toastrService.openToast(`${error.error['title']}`, `${error.error['message']}`, `${error.error['result']}`);\n      });\n    }\n  }\n  UpdateFactorDialog.ɵfac = function UpdateFactorDialog_Factory(t) {\n    return new (t || UpdateFactorDialog)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.CustomFactorController));\n  };\n  UpdateFactorDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateFactorDialog,\n    selectors: [[\"app-update-factor\"]],\n    decls: 18,\n    vars: 5,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogHeader\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\", \"submit\"], [1, \"row\"], [1, \"col-sm-12\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"type\", \"text\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"align\", \"end\"], [\"type\", \"button\", \"mat-dialog-close\", \"\", 1, \"button\", \"btn\", \"btn-secondary\", \"me-2\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"disabled\"]],\n    template: function UpdateFactorDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2, \" Update factor \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"form\", 3);\n        i0.ɵɵlistener(\"submit\", function UpdateFactorDialog_Template_form_submit_4_listener() {\n          return ctx.isValidForm();\n        });\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(8, \"mat-label\", 7);\n        i0.ɵɵtext(9, \" Factor name \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵtemplate(11, UpdateFactorDialog_mat_error_11_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵtemplate(12, UpdateFactorDialog_mat_error_12_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵelementStart(14, \"button\", 11);\n        i0.ɵɵtext(15, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 12);\n        i0.ɵɵtext(17, \" Update \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.factorFG);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.factorFG.get(\"name\").hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.factorFG.get(\"name\").hasError(\"nameAlreadyExists\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.isEqual);\n      }\n    },\n    directives: [i2.MatDialogTitle, i2.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i6.MatFormField, i6.MatLabel, i7.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i8.NgIf, i2.MatDialogClose, i6.MatError],\n    encapsulation: 2\n  });\n  return UpdateFactorDialog;\n})();\nexport let UpdateFactorModule = /*#__PURE__*/(() => {\n  class UpdateFactorModule {}\n  UpdateFactorModule.ɵfac = function UpdateFactorModule_Factory(t) {\n    return new (t || UpdateFactorModule)();\n  };\n  UpdateFactorModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: UpdateFactorModule\n  });\n  UpdateFactorModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, MatInputModule, MatDialogModule, MatFormFieldModule]]\n  });\n  return UpdateFactorModule;\n})();","map":null,"metadata":{},"sourceType":"module"}