{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CARBON_CONSTANT } from '@carbon/constant/carbon.constant';\nimport { ScopeKeyIDEnum } from '@carbon/enum/scope.enum';\nimport { CalculationApproachKeyIDEnum } from '@carbon/enum/calculation-approach.enum';\n// tsc-library\nimport { ToastrColor } from '@library/toastr-service';\nimport { MaterialFormFieldAppearance, InvalidForm, ButtonLabelEnum } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@carbon/controller/preference.controller\";\nimport * as i3 from \"@carbon/service/consolidation-approach.service\";\nimport * as i4 from \"@carbon/service/calculation-approach.service\";\nimport * as i5 from \"@library/storage-service\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/radio\";\nimport * as i10 from \"@angular/router\";\nimport * as i11 from \"@angular/material/checkbox\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/core\";\nfunction CalculationPreferenceComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 42);\n    i0.ɵɵelement(2, \"use\", 43);\n    i0.ɵɵelementEnd();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵelementStart(4, \"span\", 44);\n    i0.ɵɵtext(5, \"Preferences saved successfully!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 25);\n    i0.ɵɵtext(7, \" Your calculation preferences have been saved successfully. These settings will be used to pick standard emission factors for all calculations in your organization and facilities. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalculationPreferenceComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 45);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 42);\n    i0.ɵɵelement(2, \"use\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4, \" These settings once saved will apply to all facilities within this organization. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalculationPreferenceComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 46);\n    i0.ɵɵlistener(\"change\", function CalculationPreferenceComponent_div_20_Template_mat_checkbox_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const consolidationApproaches_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.consApps.toggle(consolidationApproaches_r9.id);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const consolidationApproaches_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r2.consApps.isSelected(consolidationApproaches_r9[\"id\"]))(\"value\", consolidationApproaches_r9[\"id\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", consolidationApproaches_r9[\"name\"], \" \");\n  }\n}\nfunction CalculationPreferenceComponent_mat_error_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 47);\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2, \"Please select atleast one consolidation approach \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalculationPreferenceComponent_mat_radio_button_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-radio-button\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const gwpDatasetsM_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", gwpDatasetsM_r13.gwpDatasetID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", gwpDatasetsM_r13.gwpDatasetName, \" \");\n  }\n}\nfunction CalculationPreferenceComponent_mat_error_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 47);\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2, \"Please select one GWP dataset \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalculationPreferenceComponent_mat_radio_button_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-radio-button\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const calApproach_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", calApproach_r14.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", calApproach_r14.name, \" \");\n  }\n}\nfunction CalculationPreferenceComponent_mat_error_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 47);\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2, \"Please select one calculation approach \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalculationPreferenceComponent_div_77_mat_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 60);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const emissionFactorSources_r21 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", emissionFactorSources_r21.emissionFactorSourceID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", emissionFactorSources_r21.emissionFactorSourceName, \" \");\n  }\n}\nfunction CalculationPreferenceComponent_div_77_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 60);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const version_r22 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", version_r22.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", version_r22.name, \" \");\n  }\n}\nfunction CalculationPreferenceComponent_div_77_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61);\n    i0.ɵɵtext(1, \"Yes\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalculationPreferenceComponent_div_77_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 62);\n    i0.ɵɵtext(1, \"No\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalculationPreferenceComponent_div_77_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵelementStart(1, \"div\", 50);\n    i0.ɵɵelementStart(2, \"div\", 10);\n    i0.ɵɵelementStart(3, \"div\", 51);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 30);\n    i0.ɵɵelementStart(6, \"mat-form-field\", 52);\n    i0.ɵɵelementStart(7, \"mat-select\", 53);\n    i0.ɵɵlistener(\"selectionChange\", function CalculationPreferenceComponent_div_77_Template_mat_select_selectionChange_7_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r24);\n      const i_r16 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.onEmissionFactorSourceSelected($event.value, i_r16);\n    });\n    i0.ɵɵelementStart(8, \"mat-option\", 54);\n    i0.ɵɵtext(9, \"Select Emission Factor Source\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, CalculationPreferenceComponent_div_77_mat_option_10_Template, 2, 2, \"mat-option\", 55);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 29);\n    i0.ɵɵelementStart(12, \"mat-form-field\", 52);\n    i0.ɵɵelementStart(13, \"mat-select\", 56);\n    i0.ɵɵelementStart(14, \"mat-option\", 54);\n    i0.ɵɵtext(15, \"Select Version\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, CalculationPreferenceComponent_div_77_mat_option_16_Template, 2, 2, \"mat-option\", 55);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 57);\n    i0.ɵɵtemplate(18, CalculationPreferenceComponent_div_77_div_18_Template, 2, 0, \"div\", 58);\n    i0.ɵɵtemplate(19, CalculationPreferenceComponent_div_77_div_19_Template, 2, 0, \"div\", 59);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r16 = ctx.index;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r16);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.standardEFRec[i_r16].activityName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r8.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.standardEFRec[i_r16].emissionFactorSource);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r8.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.selectedEmissionFactorSourceVersions[i_r16]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.standardEFRec[i_r16][\"bq\"] == \"YES\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.standardEFRec[i_r16][\"bq\"] == \"NO\");\n  }\n}\n// /tsc-library/\nexport let CalculationPreferenceComponent = /*#__PURE__*/(() => {\n  class CalculationPreferenceComponent {\n    constructor(formBuilder, preferenceController, consolidationApproachService, calculationApproachService, stroageService, toastrService) {\n      this.formBuilder = formBuilder;\n      this.preferenceController = preferenceController;\n      this.consolidationApproachService = consolidationApproachService;\n      this.calculationApproachService = calculationApproachService;\n      this.stroageService = stroageService;\n      this.toastrService = toastrService;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.ButtonLabelEnum = ButtonLabelEnum;\n      this.hasPreference = false;\n      this.consApps = new SelectionModel(true, []);\n      this.selectedEmissionFactorSourceVersions = [];\n      this.errorHandling = (control, error) => {\n        return this.preferenceFG.controls[control].hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.stroageService.getStorage('currentOrgID');\n      this.preferenceInit();\n      this.getGwpDataset();\n      this.getOrgPreference();\n      this.getConsolidationAppraoches();\n      this.getScope2CalculationApproach();\n    }\n    preferenceInit() {\n      this.preferenceFG = this.formBuilder.group({\n        gwpDatasetID: [, [Validators.required]],\n        scope2CalculationApproachID: [, [Validators.required]],\n        consolidationApproachID: [, [Validators.required]],\n        orgEFSourcePriority: this.formBuilder.array([])\n      });\n    }\n    get orgEFSourcePriorityFA() {\n      return this.preferenceFG.get('orgEFSourcePriority');\n    }\n    getGwpDataset() {\n      this.preferenceController.getGwpDataset().subscribe(getGwpDatasetRes => {\n        this.gwpDatasetM = getGwpDatasetRes;\n      }, error => {\n        console.log('error in getGwpDataset() -', error);\n      });\n    }\n    getOrgPreference() {\n      this.orgEFSourcePriorityFA.clear();\n      this.preferenceController.getOrgPreference(this.currentOrgID).subscribe(preferenceRes => {\n        this.preference = preferenceRes;\n        this.preferenceID = this.preference['preferenceID'];\n        // for consolidation approach set\n        if (this.preferenceID != null) {\n          this.preference['consolidationApproachID'].map(caID => this.consApps.select(caID));\n        } else {\n          this.consolidationApproach.map(ca => this.consApps.select(ca['id']));\n        }\n        //calculation Approach set\n        let calApproachID = this.preference['scope2CalculationApproachID'] != null ? this.preference['scope2CalculationApproachID'] : this.scope2CalculationApproach.find(calApproach => calApproach['keyID'] == CalculationApproachKeyIDEnum.MARKET_BASED)['id'];\n        this.patchcalculationApproach(calApproachID);\n        let _GWPDataSetID;\n        if (this.preference['gwpDatasetID'] == null) {\n          this.hasPreference = false;\n          // finding GWPDataset with CARBON_CONSTANT.LATEST_GWP_DATASET_KEY_ID\n          let gWPDataset = this.gwpDatasetM.find(gwpDataset => gwpDataset['gwpDatasetKeyID'] == CARBON_CONSTANT.LATEST_GWP_DATASET_KEY_ID);\n          _GWPDataSetID = gWPDataset['gwpDatasetID'];\n        } else {\n          this.hasPreference = true;\n          _GWPDataSetID = this.preference['gwpDatasetID'];\n        }\n        this.patchGWPDataSet(_GWPDataSetID);\n        /* SEF: Standard Emission Factor */\n        this.standardEFRec = this.preference['activity'];\n        this.addSEFactors(this.standardEFRec);\n      }, error => {\n        console.log('error in getOrgPreference() -', error);\n      });\n    }\n    patchGWPDataSet(_GWPDataSetID) {\n      this.preferenceFG.patchValue({\n        gwpDatasetID: _GWPDataSetID\n      });\n    }\n    patchcalculationApproach(calculationApproachID) {\n      this.preferenceFG.patchValue({\n        scope2CalculationApproachID: calculationApproachID\n      });\n    }\n    onEmissionFactorSourceSelected(emissionFactorSourceID, index) {\n      const selectedActivity = this.standardEFRec[index];\n      if (selectedActivity) {\n        const selectedEmissionFactorSource = selectedActivity.emissionFactorSource.find(source => source.emissionFactorSourceID == emissionFactorSourceID);\n        if (selectedEmissionFactorSource) {\n          this.orgEFSourcePriorityFA.at(index).get('emissionFactorSourceVersionID').setValue(null);\n          this.selectedEmissionFactorSourceVersions[index] = selectedEmissionFactorSource.emissionFactorSourceVersion;\n        }\n      }\n    }\n    addSEFactors(sEFactors) {\n      sEFactors.forEach((sEFactor, index) => {\n        const emissionFactorSourceID = sEFactor['emissionFactorSourceID'];\n        const selectedEmissionFactorSource = sEFactor['emissionFactorSource'].find(source => source.emissionFactorSourceID == emissionFactorSourceID);\n        const selectedVersionID = selectedEmissionFactorSource ? selectedEmissionFactorSource.emissionFactorSourceVersionID : null;\n        this.orgEFSourcePriorityFA.push(this.formBuilder.group({\n          bq: sEFactor['bq'],\n          activityID: [sEFactor['activityID'], [Validators.required]],\n          emissionFactorSourceID: sEFactor['emissionFactorSourceID'],\n          emissionFactorSourceVersionID: [selectedVersionID]\n        }));\n        // Initialize the selectedEmissionFactorSourceVersions array\n        this.selectedEmissionFactorSourceVersions[index] = selectedEmissionFactorSource ? selectedEmissionFactorSource.emissionFactorSourceVersion : [];\n        // if (this.hasPreference) {\n        //     this.preferenceFG.disable();\n        // }\n      });\n    }\n\n    updateOrgPreference() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.preferenceFG.get('consolidationApproachID').patchValue(this.consApps.selected);\n        if (this.preferenceFG.invalid) {\n          console.log('invalid form -', this.preferenceFG.value);\n          this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n          return;\n        }\n        this.preferenceController.updateOrgPreference(this.currentOrgID, this.preferenceID, this.preferenceFG.value).subscribe(preferenceRes => {\n          this.getOrgPreference();\n        }, error => {\n          console.log('error in updateOrgPreference -', error);\n        });\n      });\n    }\n    getConsolidationAppraoches() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.consolidationApproach = yield this.consolidationApproachService.getAllConsolidationApproach();\n      });\n    }\n    getScope2CalculationApproach() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let calculationApproach = yield this.calculationApproachService.getCalculationApproachScope(ScopeKeyIDEnum.SCOPE_2_KEY_ID);\n        this.scope2CalculationApproach = calculationApproach['calculationApproach'];\n      });\n    }\n  }\n  CalculationPreferenceComponent.ɵfac = function CalculationPreferenceComponent_Factory(t) {\n    return new (t || CalculationPreferenceComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PreferenceController), i0.ɵɵdirectiveInject(i3.ConsolidationApproachService), i0.ɵɵdirectiveInject(i4.CalculationApproachService), i0.ɵɵdirectiveInject(i5.StorageService), i0.ɵɵdirectiveInject(i6.ToastrService));\n  };\n  CalculationPreferenceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalculationPreferenceComponent,\n    selectors: [[\"app-calculation-preference\"]],\n    decls: 86,\n    vars: 11,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"pageSubtitle\"], [1, \"extraInfoCard\", \"pt-2\", \"px-3\"], [\"class\", \"alert alert-success mb-0 centerAlignVertical roundedBorder\", 4, \"ngIf\"], [\"class\", \"alert alert-primary m-0 centerAlignVertical roundedBorder\", 4, \"ngIf\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-sm-12\"], [1, \"border\", \"cardOverwrite\"], [1, \"card-title\"], [1, \"cardTitle\"], [1, \"cardSubtitle\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"textMatError ms-2\", 4, \"ngIf\"], [1, \"border\", \"mt-3\", \"cardOverwrite\"], [\"formControlName\", \"gwpDatasetID\", \"required\", \"\", 1, \"radioButtonGroup\"], [\"class\", \"radioButton\", 3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"scope2CalculationApproachID\", \"required\", \"\", 1, \"radioButtonGroup\"], [1, \"alert\", \"alert-primary\", \"centerAlignVertical\", \"roundedBorder\"], [1, \"bi\", \"flex-shrink-0\", \"me-3\", \"extraInfoCardIcon\"], [0, \"xlink\", \"href\", \"#info-fill\"], [1, \"extraInfoCardText\"], [\"routerLink\", \"/sustainability-accounting/carbon\", \"target\", \"_blank\"], [1, \"border-0\", \"cardOverwrite\"], [1, \"row\", \"tableHeader\"], [1, \"col-sm-3\"], [1, \"col-sm-4\"], [1, \"col-sm-2\", \"centerAlignHorizontal\"], [\"routerLink\", \"/carbon-setting/boundary-question\", \"target\", \"_blank\"], [\"formArrayName\", \"orgEFSourcePriority\", 4, \"ngFor\", \"ngForOf\"], [1, \"float-end\", \"mt-3\", \"mb-1\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"d-none\"], [\"id\", \"check-circle-fill\", \"fill\", \"currentColor\", \"viewBox\", \"0 0 16 16\"], [\"d\", \"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"], [\"id\", \"info-fill\", \"fill\", \"currentColor\", \"viewBox\", \"0 0 16 16\"], [\"d\", \"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\"], [1, \"alert\", \"alert-success\", \"mb-0\", \"centerAlignVertical\", \"roundedBorder\"], [1, \"bi\", \"flex-shrink-0\", \"me-3\", \"extraInfoCardHeaderIcon\"], [0, \"xlink\", \"href\", \"#check-circle-fill\"], [1, \"mb-1\", \"extraInfoCardHeading\", \"fw-bold\"], [1, \"alert\", \"alert-primary\", \"m-0\", \"centerAlignVertical\", \"roundedBorder\"], [3, \"checked\", \"value\", \"change\"], [1, \"textMatError\", \"ms-2\"], [1, \"radioButton\", 3, \"value\"], [\"formArrayName\", \"orgEFSourcePriority\"], [3, \"formGroupName\"], [1, \"col-sm-3\", \"pb-3\", \"centerAlignVertical\"], [1, \"mat-field-width-100\", 3, \"appearance\"], [\"formControlName\", \"emissionFactorSourceID\", 3, \"selectionChange\"], [\"disabled\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"emissionFactorSourceVersionID\"], [1, \"col-sm-2\", \"centerAlign\"], [\"class\", \"pb-3 text-success\", 4, \"ngIf\"], [\"class\", \"pb-3 text-danger\", 4, \"ngIf\"], [3, \"value\"], [1, \"pb-3\", \"text-success\"], [1, \"pb-3\", \"text-danger\"]],\n    template: function CalculationPreferenceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4, \" Calculation Preferences \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtext(6, \" Select the standard emission factors and GWP dataset you want to use for emission calculations. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵtemplate(8, CalculationPreferenceComponent_div_8_Template, 8, 0, \"div\", 6);\n        i0.ɵɵtemplate(9, CalculationPreferenceComponent_div_9_Template, 5, 0, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelementStart(11, \"form\", 9);\n        i0.ɵɵlistener(\"ngSubmit\", function CalculationPreferenceComponent_Template_form_ngSubmit_11_listener() {\n          return ctx.updateOrgPreference();\n        });\n        i0.ɵɵelementStart(12, \"div\", 10);\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵelementStart(14, \"mat-card\", 12);\n        i0.ɵɵelementStart(15, \"div\", 13);\n        i0.ɵɵelementStart(16, \"div\", 14);\n        i0.ɵɵtext(17, \" Select consolidation approach \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"small\", 15);\n        i0.ɵɵtext(19, \" Consolidation approach is used to define your organizational boundaries for the purpose of accounting and reporting carbon emissions. It consistently applies to define those businesses and operations that constitute the company. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(20, CalculationPreferenceComponent_div_20_Template, 3, 3, \"div\", 16);\n        i0.ɵɵtemplate(21, CalculationPreferenceComponent_mat_error_21_Template, 3, 0, \"mat-error\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 10);\n        i0.ɵɵelementStart(23, \"div\", 11);\n        i0.ɵɵelementStart(24, \"mat-card\", 18);\n        i0.ɵɵelementStart(25, \"div\", 13);\n        i0.ɵɵelementStart(26, \"div\", 14);\n        i0.ɵɵtext(27, \" Select GWP dataset (IPCC Assessment Report) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"small\", 15);\n        i0.ɵɵtext(29, \" A GWP dataset is a set of values that indicate the global warming potential of each gas as compared to CO\");\n        i0.ɵɵelementStart(30, \"sub\");\n        i0.ɵɵtext(31, \"2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(32, \". This is used to convert emissions from various gases to their carbon dioxide equivalents (CO\");\n        i0.ɵɵelementStart(33, \"sub\");\n        i0.ɵɵtext(34, \"2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(35, \"e). \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"mat-radio-group\", 19);\n        i0.ɵɵtemplate(37, CalculationPreferenceComponent_mat_radio_button_37_Template, 2, 2, \"mat-radio-button\", 20);\n        i0.ɵɵtemplate(38, CalculationPreferenceComponent_mat_error_38_Template, 3, 0, \"mat-error\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"div\", 10);\n        i0.ɵɵelementStart(40, \"div\", 11);\n        i0.ɵɵelementStart(41, \"mat-card\", 18);\n        i0.ɵɵelementStart(42, \"div\", 13);\n        i0.ɵɵelementStart(43, \"div\", 14);\n        i0.ɵɵtext(44, \" Select scope 2 reporting preference \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"small\", 15);\n        i0.ɵɵtext(46, \" Reporting preference depends on type of supplier you are purchasing energy from. If your supplier is private and provides you emission factor then it is market based else location based. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"mat-radio-group\", 21);\n        i0.ɵɵtemplate(48, CalculationPreferenceComponent_mat_radio_button_48_Template, 2, 2, \"mat-radio-button\", 20);\n        i0.ɵɵtemplate(49, CalculationPreferenceComponent_mat_error_49_Template, 3, 0, \"mat-error\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"mat-card\", 18);\n        i0.ɵɵelementStart(51, \"div\", 13);\n        i0.ɵɵelementStart(52, \"div\", 14);\n        i0.ɵɵtext(53, \" Select standard emission factor source \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"small\", 15);\n        i0.ɵɵtext(55, \" Standard emission factors are released by various agencies like US EPA, UK DEFRA etc. Select which emission factors you want to use from our standard emission factor database. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"div\", 22);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(57, \"svg\", 23);\n        i0.ɵɵelement(58, \"use\", 24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(59, \"div\", 25);\n        i0.ɵɵtext(60, \" Calculation for activity types that are not mentioned below do not require emission factors. Such calculations are done directly by our calculation engine once activity data is provided. You can input data for any activity type from the \");\n        i0.ɵɵelementStart(61, \"a\", 26);\n        i0.ɵɵtext(62, \" carbon ledger \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(63, \". \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(64, \"mat-card\", 27);\n        i0.ɵɵelementStart(65, \"div\", 28);\n        i0.ɵɵelementStart(66, \"div\", 29);\n        i0.ɵɵtext(67, \"Activity type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"div\", 30);\n        i0.ɵɵtext(69, \"Select emission factor source\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"div\", 29);\n        i0.ɵɵtext(71, \"Version\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(72, \"div\", 31);\n        i0.ɵɵtext(73, \" via \\u00A0\");\n        i0.ɵɵelementStart(74, \"a\", 32);\n        i0.ɵɵtext(75, \" Boundary Questions \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(76, \"br\");\n        i0.ɵɵtemplate(77, CalculationPreferenceComponent_div_77_Template, 20, 8, \"div\", 33);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(78, \"div\", 34);\n        i0.ɵɵelementStart(79, \"button\", 35);\n        i0.ɵɵtext(80);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(81, \"svg\", 36);\n        i0.ɵɵelementStart(82, \"symbol\", 37);\n        i0.ɵɵelement(83, \"path\", 38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(84, \"symbol\", 39);\n        i0.ɵɵelement(85, \"path\", 40);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasPreference);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasPreference);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.preferenceFG);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.consolidationApproach);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.consApps.isEmpty());\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gwpDatasetM);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gwpDatasetID\", \"required\"));\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", ctx.scope2CalculationApproach);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scope2CalculationApproachID\", \"required\"));\n        i0.ɵɵadvance(28);\n        i0.ɵɵproperty(\"ngForOf\", ctx.orgEFSourcePriorityFA[\"controls\"]);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.ButtonLabelEnum.SAVE_BTN_LABEL, \" \");\n      }\n    },\n    directives: [i7.NgIf, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i8.MatCard, i7.NgForOf, i9.MatRadioGroup, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i10.RouterLinkWithHref, i11.MatCheckbox, i12.MatError, i9.MatRadioButton, i1.FormArrayName, i1.FormGroupName, i12.MatFormField, i13.MatSelect, i14.MatOption],\n    styles: [\".radioButtonGroup[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin:15px 0;align-items:flex-start}.radioButton[_ngcontent-%COMP%]{margin:5px}\"]\n  });\n  return CalculationPreferenceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}