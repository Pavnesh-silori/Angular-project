{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, Validators } from '@angular/forms';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { ActivityM } from '@carbon/model/activity.model';\nimport { FormErrorEnum, MATERIAL_CONSTANT, MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@library/unit-service\";\nimport * as i4 from \"@carbon/service/activity.service\";\nimport * as i5 from \"@carbon/controller/gas.controller\";\nimport * as i6 from \"@library/storage-service\";\nimport * as i7 from \"@library/toastr-service\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"ngx-mat-select-search\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/material/tooltip\";\nimport * as i15 from \"@angular/material/input\";\nimport * as i16 from \"@angular/material/button\";\nimport * as i17 from \"@library/tsc-common\";\nfunction PurchasedEnergyComponent_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const gas_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", gas_r3)(\"disabled\", ctx_r0.selectedGases.isSelected(gas_r3.id))(\"matTooltip\", ctx_r0.selectedGases.isSelected(gas_r3.id) ? \"Gas already added to list\" : null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", gas_r3[\"name\"], \" \");\n  }\n}\nfunction PurchasedEnergyComponent_ng_container_15_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction PurchasedEnergyComponent_ng_container_15_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Negative value is not allowed \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PurchasedEnergyComponent_ng_container_15_mat_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 27);\n    i0.ɵɵelementStart(1, \"span\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r12.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", unit_r12.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r12.uomCode);\n  }\n}\nfunction PurchasedEnergyComponent_ng_container_15_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction PurchasedEnergyComponent_ng_container_15_mat_option_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 27);\n    i0.ɵɵelementStart(1, \"span\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r13.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", unit_r13.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r13.uomCode);\n  }\n}\nfunction PurchasedEnergyComponent_ng_container_15_mat_error_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r11.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction PurchasedEnergyComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainerStart(1, 14);\n    i0.ɵɵelementStart(2, \"div\", 3);\n    i0.ɵɵelementStart(3, \"div\", 15);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"dotdotdot\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 16);\n    i0.ɵɵelementStart(7, \"div\", 3);\n    i0.ɵɵelementStart(8, \"div\", 17);\n    i0.ɵɵelementStart(9, \"mat-form-field\", 5);\n    i0.ɵɵelementStart(10, \"mat-label\", 6);\n    i0.ɵɵtext(11, \" Quantity of gas released\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 18);\n    i0.ɵɵtemplate(13, PurchasedEnergyComponent_ng_container_15_mat_error_13_Template, 2, 1, \"mat-error\", 19);\n    i0.ɵɵtemplate(14, PurchasedEnergyComponent_ng_container_15_mat_error_14_Template, 2, 0, \"mat-error\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 17);\n    i0.ɵɵelementStart(16, \"mat-form-field\", 5);\n    i0.ɵɵelementStart(17, \"mat-label\", 6);\n    i0.ɵɵtext(18, \" Select numerator \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"mat-select\", 20);\n    i0.ɵɵelementStart(20, \"mat-option\");\n    i0.ɵɵelement(21, \"ngx-mat-select-search\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(22, PurchasedEnergyComponent_ng_container_15_mat_option_22_Template, 5, 3, \"mat-option\", 22);\n    i0.ɵɵpipe(23, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, PurchasedEnergyComponent_ng_container_15_mat_error_24_Template, 2, 1, \"mat-error\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 17);\n    i0.ɵɵelementStart(26, \"mat-form-field\", 5);\n    i0.ɵɵelementStart(27, \"mat-label\", 6);\n    i0.ɵɵtext(28, \" Select denominator unit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"mat-select\", 23);\n    i0.ɵɵelementStart(30, \"mat-option\");\n    i0.ɵɵelement(31, \"ngx-mat-select-search\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(32, PurchasedEnergyComponent_ng_container_15_mat_option_32_Template, 5, 3, \"mat-option\", 22);\n    i0.ɵɵpipe(33, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(34, PurchasedEnergyComponent_ng_container_15_mat_error_34_Template, 2, 1, \"mat-error\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"div\", 24);\n    i0.ɵɵelementStart(36, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function PurchasedEnergyComponent_ng_container_15_Template_button_click_36_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const i_r5 = restoredCtx.index;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.removeGasFromArray(i_r5);\n    });\n    i0.ɵɵelementStart(37, \"span\", 26);\n    i0.ɵɵtext(38, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const formGroup_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r5);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matTooltip\", formGroup_r4.get(\"gasStdName\").value.length > 12 ? formGroup_r4.get(\"gasStdName\").value : null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(5, 15, formGroup_r4.get(\"gasStdName\").value, 12), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"appearance\", ctx_r1.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorHandlingFA(formGroup_r4, \"factor\", \"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorHandlingFA(formGroup_r4, \"factor\", \"min\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r1.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r1.getNumeratorSearchUtil(i_r5).filterFC);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(23, 18, ctx_r1.getNumeratorSearchUtil(i_r5).filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorHandlingFA(formGroup_r4, \"numeratorUnitID\", \"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r1.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r1.getDenominatorSearchUtil(i_r5).filterFC);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(33, 20, ctx_r1.getDenominatorSearchUtil(i_r5).filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorHandlingFA(formGroup_r4, \"denominatorUnitID\", \"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matRippleCentered\", ctx_r1.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n  }\n}\nfunction PurchasedEnergyComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 29);\n    i0.ɵɵtext(1, \" Please add atleast one gas \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"border-danger\": a0\n  };\n};\n// /tsc-library/\nexport let PurchasedEnergyComponent = /*#__PURE__*/(() => {\n  class PurchasedEnergyComponent {\n    constructor(router, route, formBuilder, unitService, activityService, gasController,\n    // tsc-library\n    storageService, toastrService\n    // /tsc-library/\n    ) {\n      this.router = router;\n      this.route = route;\n      this.formBuilder = formBuilder;\n      this.unitService = unitService;\n      this.activityService = activityService;\n      this.gasController = gasController;\n      this.toastrService = toastrService;\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      this.FormErrorEnum = FormErrorEnum;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.unitM = null;\n      this.activity = new ActivityM();\n      this.formFields = [{\n        for: 'other',\n        key: 'isCO2e',\n        control: 'isCo2e',\n        value: 'NO',\n        validators: [{\n          validator: 'required',\n          error: 'CO2e value is mandatory'\n        }]\n      }, {\n        for: 'co2e',\n        width: 'col-sm-6',\n        key: 'co2e',\n        label: 'CO2e',\n        control: 'co2e',\n        value: null,\n        placeholder: '0',\n        input: 'input',\n        type: 'number',\n        validators: [{\n          validator: 'required',\n          error: 'CO2e value is mandatory'\n        }]\n      }, {\n        for: 'co2e',\n        width: 'col-sm-3',\n        key: 'co2eNumerator',\n        label: 'Numerator',\n        control: 'co2eNumeratorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'co2eNSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'co2e',\n        width: 'col-sm-3',\n        key: 'co2eDenominator',\n        label: 'Denominator',\n        control: 'co2eDenominatorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'co2eDSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-6',\n        key: 'fossilCo2',\n        label: 'Fossil CO2',\n        control: 'fossilCo2',\n        value: null,\n        placeholder: '0',\n        input: 'input',\n        type: 'number',\n        validators: [{\n          validator: 'required',\n          error: 'Fossil CO2 Value is mandatory'\n        }, {\n          validator: 'min',\n          value: -0.000000000000000000001,\n          error: 'Value cannot be negative!'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'co2Numerator',\n        label: 'Numerator',\n        control: 'co2NumeratorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'co2NSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'co2Denominator',\n        label: 'Denominator',\n        control: 'co2DenominatorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'co2DSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-6',\n        key: 'ch4',\n        label: 'CH4',\n        control: 'ch4',\n        value: null,\n        placeholder: '0',\n        input: 'input',\n        type: 'number',\n        validators: [{\n          validator: 'required',\n          error: 'CH4 value is mandatory'\n        }, {\n          validator: 'min',\n          value: -0.000000000000000000001,\n          error: 'Value cannot be negative!'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'ch4Numerator',\n        label: 'Numerator',\n        control: 'ch4NumeratorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'ch4NSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'ch4Denominator',\n        label: 'Denominator',\n        control: 'ch4DenominatorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'ch4DSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-6',\n        key: 'n2o',\n        label: 'N2O',\n        control: 'n2o',\n        value: null,\n        placeholder: '0',\n        input: 'input',\n        type: 'number',\n        validators: [{\n          validator: 'required',\n          error: 'N2O value is mandatory'\n        }, {\n          validator: 'min',\n          value: -0.000000000000000000001,\n          error: 'Value cannot be negative!'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'n2oNumerator',\n        label: 'Numerator',\n        control: 'n2oNumeratorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'n2oNSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'n2oDenominator',\n        label: 'Denominator',\n        control: 'n2oDenominatorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'n2oDSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-6',\n        key: 'biogenicCo2',\n        label: 'Biogenic CO2',\n        control: 'biogenicCo2',\n        value: null,\n        placeholder: '0',\n        input: 'input',\n        type: 'number',\n        validators: [{\n          validator: 'required',\n          error: 'Biogenic CO2 Value is mandatory'\n        }, {\n          validator: 'min',\n          value: -0.000000000000000000001,\n          error: 'Value cannot be negative!'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'biogenicCo2Numerator',\n        label: 'Numerator',\n        control: 'biogenicCo2NumeratorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'biogenicCo2NSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }, {\n        for: 'gas',\n        width: 'col-sm-3',\n        key: 'biogenicCo2Denominator',\n        label: 'Denominator',\n        control: 'biogenicCo2DenominatorUnitID',\n        value: null,\n        input: 'select',\n        type: 'select',\n        multiple: false,\n        search: true,\n        searchUtil: {\n          name: 'biogenicCo2DSearchUtil',\n          placeholderLabel: 'Search by unit name',\n          noEntriesFoundLabel: 'No matching unit found',\n          searchBy: 'uomName'\n        },\n        entityList: [],\n        validators: [{\n          validator: 'required',\n          error: 'Select a unit'\n        }]\n      }];\n      this.searchUtility = {};\n      this.referenceData = {};\n      this.gasSearchUtil = new MatSelectSearchService(['name']);\n      this.selectedGases = new SelectionModel(true, []);\n      this.isIndividualGasesFC = new FormControl(true);\n      this.gasSelectFC = new FormControl();\n      this.getNumeratorSearchUtil = index => {\n        return this.gasFormArray.get(`${index}.numeratorSearchUtil`).value;\n      };\n      this.getDenominatorSearchUtil = index => {\n        return this.gasFormArray.get(`${index}.denominatorSearchUtil`).value;\n      };\n      this.showError = () => {\n        return this.valueFG.touched && this.valueFG.invalid && this.valueFG.value.gases.length == 0;\n      };\n      this.errorHandling = (control, error) => {\n        return this.valueFG.get(control).hasError(error);\n      };\n      this.errorHandlingFA = (formGroup, control, error) => {\n        return formGroup.get(`${control}`).hasError(error);\n      };\n      this.currentOrgID = storageService.getStorage(['currentOrgID']);\n    }\n    createSearchUtilities() {\n      this.formFields.forEach(ff => {\n        if (ff['input'] == 'select' && ff['search']) {\n          let searchUtil = ff['searchUtil'];\n          let name = searchUtil['name'];\n          this.searchUtility[name] = new MatSelectSearchService([searchUtil['searchBy']]);\n        }\n      });\n    }\n    getSearchUtil(util) {\n      return this.searchUtility[util];\n    }\n    displayFields(fieldType = 'gas') {\n      this.displayedFields = this.formFields.filter(ff => ff['for'] == fieldType);\n      let displayedControls = this.displayedFields.map(d => d['control']);\n      displayedControls.unshift('isCo2e');\n      Object.keys(this.valueFG.controls).filter(f => !displayedControls.includes(f)).forEach(r => this.valueFG.get(r).reset());\n    }\n    setEntityList(key, list) {\n      this.formFields.find(f => (f === null || f === void 0 ? void 0 : f.key) == key)['entityList'] = list;\n    }\n    ngOnInit() {\n      this.route.queryParams.subscribe(queryParams => {\n        if (queryParams['activityID']) {\n          this.activityID = queryParams['activityID'];\n          this.getActivityByID(this.activityID);\n        }\n      });\n      this.getUnit();\n      this.createSearchUtilities();\n      this.initFormGroup();\n      this.displayFields();\n      this.getAllGasFromPreferredDataset();\n    }\n    ngAfterViewInit() {}\n    set isCO2e(isCO2e) {\n      this.valueFG.get('isCo2e').patchValue(isCO2e);\n    }\n    set Validator(_isTrue) {\n      let _CO2eKeys = Object.keys(this.valueFG.controls).filter(key => key.includes('co2e'));\n      let _nonCO2eKeys = Object.keys(this.valueFG.controls).filter(key => !key.includes('co2e'));\n      if (_isTrue) {\n        this.setValidators(_nonCO2eKeys);\n        this.removeValidators(_CO2eKeys);\n      } else {\n        this.setValidators(_CO2eKeys);\n        this.removeValidators(_nonCO2eKeys);\n      }\n    }\n    setValidators(formControls) {\n      formControls.forEach(key => {\n        const control = this.valueFG.controls[key];\n        control.setValidators([Validators.required]);\n        control.updateValueAndValidity();\n      });\n    }\n    removeValidators(formControls) {\n      formControls.forEach(key => {\n        const control = this.valueFG.controls[key];\n        control.clearValidators();\n        control.updateValueAndValidity();\n      });\n    }\n    initFormGroup() {\n      this.valueFG = this.formBuilder.group({\n        gases: this.formBuilder.array([], Validators.required)\n      });\n    }\n    get gasFormArray() {\n      return this.valueFG.get('gases');\n    }\n    createFormGroup() {\n      let formGroup = {};\n      let formFields = this.formFields.filter(ff => ff['key'] != 'other');\n      formFields.forEach(ff => {\n        formGroup[ff['control']] = this.formBuilder.control(ff['value'], ff['for'] == 'gas' ? Validators.compose(ff['validators'].map(v => (v === null || v === void 0 ? void 0 : v.value) ? Validators[v['validator']](v['value']) : Validators[v['validator']])) : null);\n      });\n      return formGroup;\n    }\n    get gasFG() {\n      const gas = this.gasSelectFC.value;\n      const numeratorSearchUtil = new MatSelectSearchService(['name']);\n      numeratorSearchUtil.entityArr = this.unitMMass;\n      numeratorSearchUtil.createSubscription();\n      const denominatorSearchUtil = new MatSelectSearchService(['name']);\n      let denominatorUnit = this.unitMEnergy;\n      if (this.activityKeyID == ActivityKeyIDEnum.STATIONARY_COMBUSTION) {\n        denominatorUnit = this.unitMSationaryDenomenator;\n      } else if (this.activityKeyID == ActivityKeyIDEnum.MOBILE_COMBUSTION) {\n        denominatorUnit = this.unitMMobileDenomenator;\n      }\n      denominatorSearchUtil.entityArr = denominatorUnit;\n      denominatorSearchUtil.createSubscription();\n      this.selectedGases.select(gas.id);\n      let formGroup = this.formBuilder.group({\n        gasStdID: [gas.id, [Validators.required]],\n        gasStdName: [gas.name],\n        factor: [, [Validators.required, Validators.min(0)]],\n        numeratorUnitID: [, [Validators.required]],\n        numeratorSearchUtil: [numeratorSearchUtil],\n        denominatorUnitID: [, [Validators.required]],\n        denominatorSearchUtil: [denominatorSearchUtil]\n      });\n      this.gasSelectFC.reset();\n      return formGroup;\n    }\n    getAndSetGasFG(value) {\n      const gas = value.gas;\n      const numeratorSearchUtil = new MatSelectSearchService(['name']);\n      numeratorSearchUtil.entityArr = this.unitMMass;\n      numeratorSearchUtil.createSubscription();\n      const denominatorSearchUtil = new MatSelectSearchService(['name']);\n      let denominatorUnit = this.unitMEnergy;\n      if (this.activityKeyID == ActivityKeyIDEnum.STATIONARY_COMBUSTION) {\n        denominatorUnit = this.unitMSationaryDenomenator;\n      } else if (this.activityKeyID == ActivityKeyIDEnum.MOBILE_COMBUSTION) {\n        denominatorUnit = this.unitMMobileDenomenator;\n      }\n      denominatorSearchUtil.entityArr = denominatorUnit;\n      denominatorSearchUtil.createSubscription();\n      this.selectedGases.select(gas.id);\n      let formGroup = this.formBuilder.group({\n        gasStdID: [gas.id, [Validators.required]],\n        gasStdName: [gas.name],\n        factor: [value.factor, [Validators.required, Validators.min(0)]],\n        numeratorUnitID: [value.numeratorUnitID, [Validators.required]],\n        numeratorSearchUtil: [numeratorSearchUtil],\n        denominatorUnitID: [value.denominatorUnitID, [Validators.required]],\n        denominatorSearchUtil: [denominatorSearchUtil]\n      });\n      this.gasSelectFC.reset();\n      return formGroup;\n    }\n    removeGasFromArray(index) {\n      let gasStdID = this.gasFormArray.get(`${index}.gasStdID`).value;\n      this.selectedGases.deselect(gasStdID);\n      this.gasFormArray.removeAt(index);\n    }\n    addGas() {\n      this.gasFormArray.push(this.gasFG);\n    }\n    getAllGasFromPreferredDataset() {\n      this.gasController.getAllGasesFromOrgIDPreferenceDataset(this.currentOrgID).subscribe(response => {\n        this.gases = response['gases'];\n        this.router.navigate([], {\n          relativeTo: this.route,\n          queryParams: {\n            gwpDatasetID: response['gwpDatasetID']\n          },\n          queryParamsHandling: 'merge'\n        });\n        this.gasSearchUtil.entityArr = this.gases;\n        this.gasSearchUtil.createSubscription();\n      });\n    }\n    getActivityByID(activityID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.activity = yield this.activityService.getActivityByID(activityID);\n        this.activityKeyID = this.activity.keyID;\n      });\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.unitM = yield this.unitService.getUnit([]);\n        this.unitMMass = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.MASS]);\n        this.unitMEnergy = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.ENERGY]);\n        this.unitMMobileDenomenator = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.LENGTH, UnitTypeKeyID.VOLUME]);\n        this.unitMSationaryDenomenator = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.ENERGY, UnitTypeKeyID.VOLUME, UnitTypeKeyID.MASS]);\n      });\n    }\n    patchValue(values) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.unitM == null) yield this.getUnit();\n        values.forEach(value => {\n          this.gasFormArray.push(this.getAndSetGasFG(value));\n        });\n      });\n    }\n    isValidForm() {\n      if (this.valueFG.invalid) {\n        this.valueFG.markAllAsTouched();\n        console.log('invalid form -', this.valueFG);\n        return false;\n      }\n      return true;\n    }\n    getValuesJson() {\n      this.referenceData = {};\n      let value = this.valueFG.get('gases').value;\n      this.referenceData = value.map(({\n        gasStdID,\n        factor,\n        numeratorUnitID,\n        denominatorUnitID\n      }) => {\n        return {\n          gasStdID,\n          factor,\n          numeratorUnitID,\n          denominatorUnitID\n        };\n      });\n      return this.referenceData;\n    }\n  }\n  PurchasedEnergyComponent.ɵfac = function PurchasedEnergyComponent_Factory(t) {\n    return new (t || PurchasedEnergyComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.UnitService), i0.ɵɵdirectiveInject(i4.ActivityService), i0.ɵɵdirectiveInject(i5.GasController), i0.ɵɵdirectiveInject(i6.StorageService), i0.ɵɵdirectiveInject(i7.ToastrService));\n  };\n  PurchasedEnergyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PurchasedEnergyComponent,\n    selectors: [[\"app-purchased-energy\"]],\n    decls: 17,\n    vars: 13,\n    consts: [[1, \"border\", \"cardOverwrite\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-sm-12\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [3, \"formControl\", \"selectionChange\"], [\"placeholderLabel\", \"Search by gas name\", \"noEntriesFoundLabel\", \"No gas found with such name.\", 3, \"formControl\"], [\"matTooltipPosition\", \"left\", \"matTooltipClass\", \"infoTooltip\", 3, \"value\", \"disabled\", \"matTooltip\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"gases\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"customError\", 4, \"ngIf\"], [\"matTooltipPosition\", \"left\", \"matTooltipClass\", \"infoTooltip\", 3, \"value\", \"disabled\", \"matTooltip\"], [3, \"formGroupName\"], [\"matTooltipPosition\", \"above\", 1, \"col-sm-3\", \"centerAlignVertical\", \"pb-4\", 3, \"matTooltip\"], [1, \"col-sm-8\"], [1, \"col-sm-4\"], [\"type\", \"number\", \"placeholder\", \"Quantity of gas released\", \"matInput\", \"\", \"formControlName\", \"factor\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"formControlName\", \"numeratorUnitID\"], [\"placeholderLabel\", \"Search by unit name\", \"noEntriesFoundLabel\", \"No unit found with such name.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"denominatorUnitID\"], [1, \"col-sm-1\", \"centerAlignVertical\", \"p-0\", \"pb-3\"], [\"mat-icon-button\", \"\", \"matTooltipPosition\", \"below\", \"matTooltip\", \"Remove gas\", \"matRipple\", \"\", 1, \"text-danger\", \"deleteIconHover\", 3, \"matRippleCentered\", \"click\"], [1, \"material-symbols-outlined\", \"icon\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [1, \"customError\"]],\n    template: function PurchasedEnergyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Factor values \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"mat-form-field\", 5);\n        i0.ɵɵelementStart(7, \"mat-label\", 6);\n        i0.ɵɵtext(8, \" Select gas \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-select\", 7);\n        i0.ɵɵlistener(\"selectionChange\", function PurchasedEnergyComponent_Template_mat_select_selectionChange_9_listener() {\n          return ctx.addGas();\n        });\n        i0.ɵɵelementStart(10, \"mat-option\");\n        i0.ɵɵelement(11, \"ngx-mat-select-search\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, PurchasedEnergyComponent_mat_option_12_Template, 2, 4, \"mat-option\", 9);\n        i0.ɵɵpipe(13, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerStart(14, 10);\n        i0.ɵɵtemplate(15, PurchasedEnergyComponent_ng_container_15_Template, 39, 22, \"ng-container\", 11);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, PurchasedEnergyComponent_mat_error_16_Template, 2, 0, \"mat-error\", 12);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(i0.ɵɵpureFunction1(11, _c0, ctx.showError()));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.valueFG);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.gasSelectFC);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.gasSearchUtil.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(13, 9, ctx.gasSearchUtil.filteredEntities));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gasFormArray[\"controls\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError());\n      }\n    },\n    directives: [i8.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i9.MatFormField, i9.MatLabel, i10.MatSelect, i2.NgControlStatus, i2.FormControlDirective, i11.MatOption, i12.MatSelectSearchComponent, i13.NgForOf, i2.FormArrayName, i13.NgIf, i14.MatTooltip, i2.FormGroupName, i2.NumberValueAccessor, i15.MatInput, i2.DefaultValueAccessor, i2.FormControlName, i2.RequiredValidator, i16.MatButton, i11.MatRipple, i9.MatError],\n    pipes: [i13.AsyncPipe, i17.EllipsisPipeService],\n    styles: [\".factorValue .mat-slide-toggle.mat-checked .mat-slide-toggle-bar{background-color:#3ac47d}  .factorValue .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background-color:#157443}  .factorValue .mat-slide-toggle .mat-slide-toggle-bar{background-color:#3ac47d}  .factorValue .mat-slide-toggle .mat-slide-toggle-thumb{background-color:#157443}.customError[_ngcontent-%COMP%]{font-size:11.5px;margin-top:4px;padding-left:10px}\"]\n  });\n  return PurchasedEnergyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}