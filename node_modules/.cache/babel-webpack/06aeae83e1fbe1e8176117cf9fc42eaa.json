{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WasteGeneratedController = /*#__PURE__*/(() => {\n  class WasteGeneratedController {\n    constructor(http) {\n      this.http = http;\n    }\n    getWasteGenerationActivities(orgID, activityKeyID, pageNo, pageSize, sortBy, orderBy, filterArr, searchValue, searchFlag, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('pageNo', (pageNo + 1).toString());\n      params = params.append('pageSize', pageSize.toString());\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      if (startDate != null) {\n        params = params.append('startDate', startDate);\n        params = params.append('endDate', endDate);\n      }\n      if (searchFlag) {\n        params = params.append('searchValue', searchValue);\n      }\n      filterArr.forEach(filter => params = params.append('filter', filter));\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/activity/${activityKeyID}/data/page`, {\n        params: params\n      });\n    }\n    getAllWasteTypes(activityID) {\n      let params = new HttpParams();\n      params = params.append('activityID', activityID);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}waste-types`, {\n        params: params\n      });\n    }\n    getAllWasteTreatmentMethod(activityID) {\n      let params = new HttpParams();\n      params = params.append('activityID', activityID);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}waste-treatment-method`, {\n        params: params\n      });\n    }\n  }\n  WasteGeneratedController.ɵfac = function WasteGeneratedController_Factory(t) {\n    return new (t || WasteGeneratedController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  WasteGeneratedController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WasteGeneratedController,\n    factory: WasteGeneratedController.ɵfac,\n    providedIn: 'root'\n  });\n  return WasteGeneratedController;\n})();","map":null,"metadata":{},"sourceType":"module"}