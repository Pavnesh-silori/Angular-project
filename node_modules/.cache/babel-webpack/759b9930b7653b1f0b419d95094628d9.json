{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Inject, Input, Output, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { of, EMPTY, Subject, asyncScheduler, Observable } from 'rxjs';\nimport { throttleTime, switchMap } from 'rxjs/operators';\nclass ChangeFilter {\n  constructor(changes) {\n    this.changes = changes;\n  }\n  static of(changes) {\n    return new ChangeFilter(changes);\n  }\n  notEmpty(key) {\n    if (this.changes[key]) {\n      const value = this.changes[key].currentValue;\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n  has(key) {\n    if (this.changes[key]) {\n      const value = this.changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n  notFirst(key) {\n    if (this.changes[key] && !this.changes[key].isFirstChange()) {\n      const value = this.changes[key].currentValue;\n      return of(value);\n    }\n    return EMPTY;\n  }\n  notFirstAndEmpty(key) {\n    if (this.changes[key] && !this.changes[key].isFirstChange()) {\n      const value = this.changes[key].currentValue;\n      if (value !== undefined && value !== null) {\n        return of(value);\n      }\n    }\n    return EMPTY;\n  }\n}\nconst NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');\nclass NgxEchartsDirective {\n  constructor(config, el, ngZone) {\n    this.el = el;\n    this.ngZone = ngZone;\n    this.autoResize = true;\n    this.loadingType = 'default';\n    // ngx-echarts events\n    this.chartInit = new EventEmitter();\n    this.optionsError = new EventEmitter();\n    // echarts mouse events\n    this.chartClick = this.createLazyEvent('click');\n    this.chartDblClick = this.createLazyEvent('dblclick');\n    this.chartMouseDown = this.createLazyEvent('mousedown');\n    this.chartMouseMove = this.createLazyEvent('mousemove');\n    this.chartMouseUp = this.createLazyEvent('mouseup');\n    this.chartMouseOver = this.createLazyEvent('mouseover');\n    this.chartMouseOut = this.createLazyEvent('mouseout');\n    this.chartGlobalOut = this.createLazyEvent('globalout');\n    this.chartContextMenu = this.createLazyEvent('contextmenu');\n    // echarts mouse events\n    this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n    this.chartLegendSelected = this.createLazyEvent('legendselected');\n    this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n    this.chartLegendScroll = this.createLazyEvent('legendscroll');\n    this.chartDataZoom = this.createLazyEvent('datazoom');\n    this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n    this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n    this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n    this.chartRestore = this.createLazyEvent('restore');\n    this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n    this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n    this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n    this.chartPieSelected = this.createLazyEvent('pieselected');\n    this.chartPieUnselected = this.createLazyEvent('pieunselected');\n    this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n    this.chartMapSelected = this.createLazyEvent('mapselected');\n    this.chartMapUnselected = this.createLazyEvent('mapunselected');\n    this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n    this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n    this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n    this.chartBrush = this.createLazyEvent('brush');\n    this.chartBrushEnd = this.createLazyEvent('brushend');\n    this.chartBrushSelected = this.createLazyEvent('brushselected');\n    this.chartRendered = this.createLazyEvent('rendered');\n    this.chartFinished = this.createLazyEvent('finished');\n    this.animationFrameID = null;\n    this.resize$ = new Subject();\n    this.echarts = config.echarts;\n  }\n  ngOnChanges(changes) {\n    const filter = ChangeFilter.of(changes);\n    filter.notFirstAndEmpty('options').subscribe(opt => this.onOptionsChange(opt));\n    filter.notFirstAndEmpty('merge').subscribe(opt => this.setOption(opt));\n    filter.has('loading').subscribe(v => this.toggleLoading(!!v));\n    filter.notFirst('theme').subscribe(() => this.refreshChart());\n  }\n  ngOnInit() {\n    if (!window.ResizeObserver) {\n      throw new Error('please install a polyfill for ResizeObserver');\n    }\n    this.resizeSub = this.resize$.pipe(throttleTime(100, asyncScheduler, {\n      leading: false,\n      trailing: true\n    })).subscribe(() => this.resize());\n    if (this.autoResize) {\n      this.resizeOb = this.ngZone.runOutsideAngular(() => new window.ResizeObserver(() => {\n        this.animationFrameID = window.requestAnimationFrame(() => this.resize$.next());\n      }));\n      this.resizeOb.observe(this.el.nativeElement);\n    }\n  }\n  ngOnDestroy() {\n    window.clearTimeout(this.initChartTimer);\n    if (this.resizeSub) {\n      this.resizeSub.unsubscribe();\n    }\n    if (this.animationFrameID) {\n      window.cancelAnimationFrame(this.animationFrameID);\n    }\n    if (this.resizeOb) {\n      this.resizeOb.unobserve(this.el.nativeElement);\n    }\n    this.dispose();\n  }\n  ngAfterViewInit() {\n    this.initChartTimer = window.setTimeout(() => this.initChart());\n  }\n  dispose() {\n    if (this.chart) {\n      if (!this.chart.isDisposed()) {\n        this.chart.dispose();\n      }\n      this.chart = null;\n    }\n  }\n  /**\n   * resize chart\n   */\n  resize() {\n    if (this.chart) {\n      this.chart.resize();\n    }\n  }\n  toggleLoading(loading) {\n    if (this.chart) {\n      loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n    }\n  }\n  setOption(option, opts) {\n    if (this.chart) {\n      try {\n        this.chart.setOption(option, opts);\n      } catch (e) {\n        console.error(e);\n        this.optionsError.emit(e);\n      }\n    }\n  }\n  /**\n   * dispose old chart and create a new one.\n   */\n  refreshChart() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.dispose();\n      yield this.initChart();\n    });\n  }\n  createChart() {\n    const dom = this.el.nativeElement;\n    if (window && window.getComputedStyle) {\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n      if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n        dom.style.height = '400px';\n      }\n    }\n    // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\n    // otherwise create the function that imitates behaviour above with a provided as is module\n    return this.ngZone.runOutsideAngular(() => {\n      const load = typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);\n      return load().then(({\n        init\n      }) => init(dom, this.theme, this.initOpts));\n    });\n  }\n  initChart() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.onOptionsChange(this.options);\n      if (this.merge && this.chart) {\n        this.setOption(this.merge);\n      }\n    });\n  }\n  onOptionsChange(opt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!opt) {\n        return;\n      }\n      if (this.chart) {\n        this.setOption(this.options, true);\n      } else {\n        this.chart = yield this.createChart();\n        this.chartInit.emit(this.chart);\n        this.setOption(this.options, true);\n      }\n    });\n  }\n  // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n  // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n  createLazyEvent(eventName) {\n    return this.chartInit.pipe(switchMap(chart => new Observable(observer => {\n      chart.on(eventName, data => this.ngZone.run(() => observer.next(data)));\n      return () => {\n        if (this.chart) {\n          if (!this.chart.isDisposed()) {\n            chart.off(eventName);\n          }\n        }\n      };\n    })));\n  }\n}\nNgxEchartsDirective.ɵfac = function NgxEchartsDirective_Factory(t) {\n  return new (t || NgxEchartsDirective)(i0.ɵɵdirectiveInject(NGX_ECHARTS_CONFIG), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nNgxEchartsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxEchartsDirective,\n  selectors: [[\"echarts\"], [\"\", \"echarts\", \"\"]],\n  inputs: {\n    options: \"options\",\n    theme: \"theme\",\n    loading: \"loading\",\n    initOpts: \"initOpts\",\n    merge: \"merge\",\n    autoResize: \"autoResize\",\n    loadingType: \"loadingType\",\n    loadingOpts: \"loadingOpts\"\n  },\n  outputs: {\n    chartInit: \"chartInit\",\n    optionsError: \"optionsError\",\n    chartClick: \"chartClick\",\n    chartDblClick: \"chartDblClick\",\n    chartMouseDown: \"chartMouseDown\",\n    chartMouseMove: \"chartMouseMove\",\n    chartMouseUp: \"chartMouseUp\",\n    chartMouseOver: \"chartMouseOver\",\n    chartMouseOut: \"chartMouseOut\",\n    chartGlobalOut: \"chartGlobalOut\",\n    chartContextMenu: \"chartContextMenu\",\n    chartLegendSelectChanged: \"chartLegendSelectChanged\",\n    chartLegendSelected: \"chartLegendSelected\",\n    chartLegendUnselected: \"chartLegendUnselected\",\n    chartLegendScroll: \"chartLegendScroll\",\n    chartDataZoom: \"chartDataZoom\",\n    chartDataRangeSelected: \"chartDataRangeSelected\",\n    chartTimelineChanged: \"chartTimelineChanged\",\n    chartTimelinePlayChanged: \"chartTimelinePlayChanged\",\n    chartRestore: \"chartRestore\",\n    chartDataViewChanged: \"chartDataViewChanged\",\n    chartMagicTypeChanged: \"chartMagicTypeChanged\",\n    chartPieSelectChanged: \"chartPieSelectChanged\",\n    chartPieSelected: \"chartPieSelected\",\n    chartPieUnselected: \"chartPieUnselected\",\n    chartMapSelectChanged: \"chartMapSelectChanged\",\n    chartMapSelected: \"chartMapSelected\",\n    chartMapUnselected: \"chartMapUnselected\",\n    chartAxisAreaSelected: \"chartAxisAreaSelected\",\n    chartFocusNodeAdjacency: \"chartFocusNodeAdjacency\",\n    chartUnfocusNodeAdjacency: \"chartUnfocusNodeAdjacency\",\n    chartBrush: \"chartBrush\",\n    chartBrushEnd: \"chartBrushEnd\",\n    chartBrushSelected: \"chartBrushSelected\",\n    chartRendered: \"chartRendered\",\n    chartFinished: \"chartFinished\"\n  },\n  exportAs: [\"echarts\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxEchartsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'echarts, [echarts]',\n      exportAs: 'echarts'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_ECHARTS_CONFIG]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    initOpts: [{\n      type: Input\n    }],\n    merge: [{\n      type: Input\n    }],\n    autoResize: [{\n      type: Input\n    }],\n    loadingType: [{\n      type: Input\n    }],\n    loadingOpts: [{\n      type: Input\n    }],\n    chartInit: [{\n      type: Output\n    }],\n    optionsError: [{\n      type: Output\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartDblClick: [{\n      type: Output\n    }],\n    chartMouseDown: [{\n      type: Output\n    }],\n    chartMouseMove: [{\n      type: Output\n    }],\n    chartMouseUp: [{\n      type: Output\n    }],\n    chartMouseOver: [{\n      type: Output\n    }],\n    chartMouseOut: [{\n      type: Output\n    }],\n    chartGlobalOut: [{\n      type: Output\n    }],\n    chartContextMenu: [{\n      type: Output\n    }],\n    chartLegendSelectChanged: [{\n      type: Output\n    }],\n    chartLegendSelected: [{\n      type: Output\n    }],\n    chartLegendUnselected: [{\n      type: Output\n    }],\n    chartLegendScroll: [{\n      type: Output\n    }],\n    chartDataZoom: [{\n      type: Output\n    }],\n    chartDataRangeSelected: [{\n      type: Output\n    }],\n    chartTimelineChanged: [{\n      type: Output\n    }],\n    chartTimelinePlayChanged: [{\n      type: Output\n    }],\n    chartRestore: [{\n      type: Output\n    }],\n    chartDataViewChanged: [{\n      type: Output\n    }],\n    chartMagicTypeChanged: [{\n      type: Output\n    }],\n    chartPieSelectChanged: [{\n      type: Output\n    }],\n    chartPieSelected: [{\n      type: Output\n    }],\n    chartPieUnselected: [{\n      type: Output\n    }],\n    chartMapSelectChanged: [{\n      type: Output\n    }],\n    chartMapSelected: [{\n      type: Output\n    }],\n    chartMapUnselected: [{\n      type: Output\n    }],\n    chartAxisAreaSelected: [{\n      type: Output\n    }],\n    chartFocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartUnfocusNodeAdjacency: [{\n      type: Output\n    }],\n    chartBrush: [{\n      type: Output\n    }],\n    chartBrushEnd: [{\n      type: Output\n    }],\n    chartBrushSelected: [{\n      type: Output\n    }],\n    chartRendered: [{\n      type: Output\n    }],\n    chartFinished: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxEchartsModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxEchartsModule,\n      providers: [{\n        provide: NGX_ECHARTS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n  static forChild() {\n    return {\n      ngModule: NgxEchartsModule\n    };\n  }\n}\nNgxEchartsModule.ɵfac = function NgxEchartsModule_Factory(t) {\n  return new (t || NgxEchartsModule)();\n};\nNgxEchartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxEchartsModule\n});\nNgxEchartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxEchartsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgxEchartsDirective],\n      exports: [NgxEchartsDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-echarts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_ECHARTS_CONFIG, NgxEchartsDirective, NgxEchartsModule };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Directive","Inject","Input","Output","NgModule","__awaiter","of","EMPTY","Subject","asyncScheduler","Observable","throttleTime","switchMap","ChangeFilter","constructor","changes","notEmpty","key","value","currentValue","undefined","has","notFirst","isFirstChange","notFirstAndEmpty","NGX_ECHARTS_CONFIG","NgxEchartsDirective","config","el","ngZone","autoResize","loadingType","chartInit","optionsError","chartClick","createLazyEvent","chartDblClick","chartMouseDown","chartMouseMove","chartMouseUp","chartMouseOver","chartMouseOut","chartGlobalOut","chartContextMenu","chartLegendSelectChanged","chartLegendSelected","chartLegendUnselected","chartLegendScroll","chartDataZoom","chartDataRangeSelected","chartTimelineChanged","chartTimelinePlayChanged","chartRestore","chartDataViewChanged","chartMagicTypeChanged","chartPieSelectChanged","chartPieSelected","chartPieUnselected","chartMapSelectChanged","chartMapSelected","chartMapUnselected","chartAxisAreaSelected","chartFocusNodeAdjacency","chartUnfocusNodeAdjacency","chartBrush","chartBrushEnd","chartBrushSelected","chartRendered","chartFinished","animationFrameID","resize$","echarts","ngOnChanges","filter","subscribe","opt","onOptionsChange","setOption","v","toggleLoading","refreshChart","ngOnInit","window","ResizeObserver","Error","resizeSub","pipe","leading","trailing","resize","resizeOb","runOutsideAngular","requestAnimationFrame","next","observe","nativeElement","ngOnDestroy","clearTimeout","initChartTimer","unsubscribe","cancelAnimationFrame","unobserve","dispose","ngAfterViewInit","setTimeout","initChart","chart","isDisposed","loading","showLoading","loadingOpts","hideLoading","option","opts","e","console","error","emit","createChart","dom","getComputedStyle","prop","getPropertyValue","style","height","load","Promise","resolve","then","init","theme","initOpts","options","merge","eventName","observer","on","data","run","off","ɵfac","NgxEchartsDirective_Factory","t","ɵɵdirectiveInject","ElementRef","NgZone","ɵdir","ɵɵdefineDirective","type","selectors","inputs","outputs","exportAs","features","ɵɵNgOnChangesFeature","ngDevMode","ɵsetClassMetadata","args","selector","decorators","NgxEchartsModule","forRoot","ngModule","providers","provide","useValue","forChild","NgxEchartsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["/home/silori/projects/gitClones/netzero-ui/node_modules/ngx-echarts/fesm2015/ngx-echarts.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Inject, Input, Output, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { of, EMPTY, Subject, asyncScheduler, Observable } from 'rxjs';\nimport { throttleTime, switchMap } from 'rxjs/operators';\n\nclass ChangeFilter {\n    constructor(changes) {\n        this.changes = changes;\n    }\n    static of(changes) {\n        return new ChangeFilter(changes);\n    }\n    notEmpty(key) {\n        if (this.changes[key]) {\n            const value = this.changes[key].currentValue;\n            if (value !== undefined && value !== null) {\n                return of(value);\n            }\n        }\n        return EMPTY;\n    }\n    has(key) {\n        if (this.changes[key]) {\n            const value = this.changes[key].currentValue;\n            return of(value);\n        }\n        return EMPTY;\n    }\n    notFirst(key) {\n        if (this.changes[key] && !this.changes[key].isFirstChange()) {\n            const value = this.changes[key].currentValue;\n            return of(value);\n        }\n        return EMPTY;\n    }\n    notFirstAndEmpty(key) {\n        if (this.changes[key] && !this.changes[key].isFirstChange()) {\n            const value = this.changes[key].currentValue;\n            if (value !== undefined && value !== null) {\n                return of(value);\n            }\n        }\n        return EMPTY;\n    }\n}\n\nconst NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');\nclass NgxEchartsDirective {\n    constructor(config, el, ngZone) {\n        this.el = el;\n        this.ngZone = ngZone;\n        this.autoResize = true;\n        this.loadingType = 'default';\n        // ngx-echarts events\n        this.chartInit = new EventEmitter();\n        this.optionsError = new EventEmitter();\n        // echarts mouse events\n        this.chartClick = this.createLazyEvent('click');\n        this.chartDblClick = this.createLazyEvent('dblclick');\n        this.chartMouseDown = this.createLazyEvent('mousedown');\n        this.chartMouseMove = this.createLazyEvent('mousemove');\n        this.chartMouseUp = this.createLazyEvent('mouseup');\n        this.chartMouseOver = this.createLazyEvent('mouseover');\n        this.chartMouseOut = this.createLazyEvent('mouseout');\n        this.chartGlobalOut = this.createLazyEvent('globalout');\n        this.chartContextMenu = this.createLazyEvent('contextmenu');\n        // echarts mouse events\n        this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n        this.chartLegendSelected = this.createLazyEvent('legendselected');\n        this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n        this.chartLegendScroll = this.createLazyEvent('legendscroll');\n        this.chartDataZoom = this.createLazyEvent('datazoom');\n        this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n        this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n        this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n        this.chartRestore = this.createLazyEvent('restore');\n        this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n        this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n        this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\n        this.chartPieSelected = this.createLazyEvent('pieselected');\n        this.chartPieUnselected = this.createLazyEvent('pieunselected');\n        this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\n        this.chartMapSelected = this.createLazyEvent('mapselected');\n        this.chartMapUnselected = this.createLazyEvent('mapunselected');\n        this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n        this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\n        this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\n        this.chartBrush = this.createLazyEvent('brush');\n        this.chartBrushEnd = this.createLazyEvent('brushend');\n        this.chartBrushSelected = this.createLazyEvent('brushselected');\n        this.chartRendered = this.createLazyEvent('rendered');\n        this.chartFinished = this.createLazyEvent('finished');\n        this.animationFrameID = null;\n        this.resize$ = new Subject();\n        this.echarts = config.echarts;\n    }\n    ngOnChanges(changes) {\n        const filter = ChangeFilter.of(changes);\n        filter.notFirstAndEmpty('options').subscribe((opt) => this.onOptionsChange(opt));\n        filter.notFirstAndEmpty('merge').subscribe((opt) => this.setOption(opt));\n        filter.has('loading').subscribe((v) => this.toggleLoading(!!v));\n        filter.notFirst('theme').subscribe(() => this.refreshChart());\n    }\n    ngOnInit() {\n        if (!window.ResizeObserver) {\n            throw new Error('please install a polyfill for ResizeObserver');\n        }\n        this.resizeSub = this.resize$.pipe(throttleTime(100, asyncScheduler, { leading: false, trailing: true })).subscribe(() => this.resize());\n        if (this.autoResize) {\n            this.resizeOb = this.ngZone.runOutsideAngular(() => new window.ResizeObserver(() => {\n                this.animationFrameID = window.requestAnimationFrame(() => this.resize$.next());\n            }));\n            this.resizeOb.observe(this.el.nativeElement);\n        }\n    }\n    ngOnDestroy() {\n        window.clearTimeout(this.initChartTimer);\n        if (this.resizeSub) {\n            this.resizeSub.unsubscribe();\n        }\n        if (this.animationFrameID) {\n            window.cancelAnimationFrame(this.animationFrameID);\n        }\n        if (this.resizeOb) {\n            this.resizeOb.unobserve(this.el.nativeElement);\n        }\n        this.dispose();\n    }\n    ngAfterViewInit() {\n        this.initChartTimer = window.setTimeout(() => this.initChart());\n    }\n    dispose() {\n        if (this.chart) {\n            if (!this.chart.isDisposed()) {\n                this.chart.dispose();\n            }\n            this.chart = null;\n        }\n    }\n    /**\n     * resize chart\n     */\n    resize() {\n        if (this.chart) {\n            this.chart.resize();\n        }\n    }\n    toggleLoading(loading) {\n        if (this.chart) {\n            loading\n                ? this.chart.showLoading(this.loadingType, this.loadingOpts)\n                : this.chart.hideLoading();\n        }\n    }\n    setOption(option, opts) {\n        if (this.chart) {\n            try {\n                this.chart.setOption(option, opts);\n            }\n            catch (e) {\n                console.error(e);\n                this.optionsError.emit(e);\n            }\n        }\n    }\n    /**\n     * dispose old chart and create a new one.\n     */\n    refreshChart() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.dispose();\n            yield this.initChart();\n        });\n    }\n    createChart() {\n        const dom = this.el.nativeElement;\n        if (window && window.getComputedStyle) {\n            const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n            if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n                dom.style.height = '400px';\n            }\n        }\n        // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\n        // otherwise create the function that imitates behaviour above with a provided as is module\n        return this.ngZone.runOutsideAngular(() => {\n            const load = typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);\n            return load().then(({ init }) => init(dom, this.theme, this.initOpts));\n        });\n    }\n    initChart() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.onOptionsChange(this.options);\n            if (this.merge && this.chart) {\n                this.setOption(this.merge);\n            }\n        });\n    }\n    onOptionsChange(opt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!opt) {\n                return;\n            }\n            if (this.chart) {\n                this.setOption(this.options, true);\n            }\n            else {\n                this.chart = yield this.createChart();\n                this.chartInit.emit(this.chart);\n                this.setOption(this.options, true);\n            }\n        });\n    }\n    // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n    createLazyEvent(eventName) {\n        return this.chartInit.pipe(switchMap((chart) => new Observable((observer) => {\n            chart.on(eventName, (data) => this.ngZone.run(() => observer.next(data)));\n            return () => {\n                if (this.chart) {\n                    if (!this.chart.isDisposed()) {\n                        chart.off(eventName);\n                    }\n                }\n            };\n        })));\n    }\n}\nNgxEchartsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxEchartsDirective, deps: [{ token: NGX_ECHARTS_CONFIG }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nNgxEchartsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: NgxEchartsDirective, selector: \"echarts, [echarts]\", inputs: { options: \"options\", theme: \"theme\", loading: \"loading\", initOpts: \"initOpts\", merge: \"merge\", autoResize: \"autoResize\", loadingType: \"loadingType\", loadingOpts: \"loadingOpts\" }, outputs: { chartInit: \"chartInit\", optionsError: \"optionsError\", chartClick: \"chartClick\", chartDblClick: \"chartDblClick\", chartMouseDown: \"chartMouseDown\", chartMouseMove: \"chartMouseMove\", chartMouseUp: \"chartMouseUp\", chartMouseOver: \"chartMouseOver\", chartMouseOut: \"chartMouseOut\", chartGlobalOut: \"chartGlobalOut\", chartContextMenu: \"chartContextMenu\", chartLegendSelectChanged: \"chartLegendSelectChanged\", chartLegendSelected: \"chartLegendSelected\", chartLegendUnselected: \"chartLegendUnselected\", chartLegendScroll: \"chartLegendScroll\", chartDataZoom: \"chartDataZoom\", chartDataRangeSelected: \"chartDataRangeSelected\", chartTimelineChanged: \"chartTimelineChanged\", chartTimelinePlayChanged: \"chartTimelinePlayChanged\", chartRestore: \"chartRestore\", chartDataViewChanged: \"chartDataViewChanged\", chartMagicTypeChanged: \"chartMagicTypeChanged\", chartPieSelectChanged: \"chartPieSelectChanged\", chartPieSelected: \"chartPieSelected\", chartPieUnselected: \"chartPieUnselected\", chartMapSelectChanged: \"chartMapSelectChanged\", chartMapSelected: \"chartMapSelected\", chartMapUnselected: \"chartMapUnselected\", chartAxisAreaSelected: \"chartAxisAreaSelected\", chartFocusNodeAdjacency: \"chartFocusNodeAdjacency\", chartUnfocusNodeAdjacency: \"chartUnfocusNodeAdjacency\", chartBrush: \"chartBrush\", chartBrushEnd: \"chartBrushEnd\", chartBrushSelected: \"chartBrushSelected\", chartRendered: \"chartRendered\", chartFinished: \"chartFinished\" }, exportAs: [\"echarts\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxEchartsDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'echarts, [echarts]',\n                    exportAs: 'echarts',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [NGX_ECHARTS_CONFIG]\n                    }] }, { type: i0.ElementRef }, { type: i0.NgZone }];\n    }, propDecorators: { options: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], initOpts: [{\n                type: Input\n            }], merge: [{\n                type: Input\n            }], autoResize: [{\n                type: Input\n            }], loadingType: [{\n                type: Input\n            }], loadingOpts: [{\n                type: Input\n            }], chartInit: [{\n                type: Output\n            }], optionsError: [{\n                type: Output\n            }], chartClick: [{\n                type: Output\n            }], chartDblClick: [{\n                type: Output\n            }], chartMouseDown: [{\n                type: Output\n            }], chartMouseMove: [{\n                type: Output\n            }], chartMouseUp: [{\n                type: Output\n            }], chartMouseOver: [{\n                type: Output\n            }], chartMouseOut: [{\n                type: Output\n            }], chartGlobalOut: [{\n                type: Output\n            }], chartContextMenu: [{\n                type: Output\n            }], chartLegendSelectChanged: [{\n                type: Output\n            }], chartLegendSelected: [{\n                type: Output\n            }], chartLegendUnselected: [{\n                type: Output\n            }], chartLegendScroll: [{\n                type: Output\n            }], chartDataZoom: [{\n                type: Output\n            }], chartDataRangeSelected: [{\n                type: Output\n            }], chartTimelineChanged: [{\n                type: Output\n            }], chartTimelinePlayChanged: [{\n                type: Output\n            }], chartRestore: [{\n                type: Output\n            }], chartDataViewChanged: [{\n                type: Output\n            }], chartMagicTypeChanged: [{\n                type: Output\n            }], chartPieSelectChanged: [{\n                type: Output\n            }], chartPieSelected: [{\n                type: Output\n            }], chartPieUnselected: [{\n                type: Output\n            }], chartMapSelectChanged: [{\n                type: Output\n            }], chartMapSelected: [{\n                type: Output\n            }], chartMapUnselected: [{\n                type: Output\n            }], chartAxisAreaSelected: [{\n                type: Output\n            }], chartFocusNodeAdjacency: [{\n                type: Output\n            }], chartUnfocusNodeAdjacency: [{\n                type: Output\n            }], chartBrush: [{\n                type: Output\n            }], chartBrushEnd: [{\n                type: Output\n            }], chartBrushSelected: [{\n                type: Output\n            }], chartRendered: [{\n                type: Output\n            }], chartFinished: [{\n                type: Output\n            }] } });\n\nclass NgxEchartsModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxEchartsModule,\n            providers: [{ provide: NGX_ECHARTS_CONFIG, useValue: config }],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxEchartsModule,\n        };\n    }\n}\nNgxEchartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxEchartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxEchartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxEchartsModule, declarations: [NgxEchartsDirective], exports: [NgxEchartsDirective] });\nNgxEchartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxEchartsModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxEchartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [NgxEchartsDirective],\n                    exports: [NgxEchartsDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-echarts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_ECHARTS_CONFIG, NgxEchartsDirective, NgxEchartsModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}