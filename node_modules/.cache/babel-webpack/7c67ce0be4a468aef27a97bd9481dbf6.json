{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { environment } from 'src/environments/environment';\nimport { ActivityConfig } from '@carbon/component/activity-config/activity-config';\nimport { DataInputMethod } from '@carbon/enum/data-input-method.enum';\nimport { HeatTransferMediumKeyIDEnum } from '@carbon/enum/cbam.enum';\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\nimport { COMMON_CONSTANT, MatSelectSearchService } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@carbon/service/asset.service\";\nimport * as i4 from \"@carbon/service/data-input-method.service\";\nimport * as i5 from \"@library/tsc-common\";\nimport * as i6 from \"@library/storage-service\";\nimport * as i7 from \"@library/date\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/datepicker\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"ngx-mat-select-search\";\nimport * as i16 from \"@angular/material/radio\";\nfunction CreateUpdateComponent_ng_container_4_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵelementStart(2, \"div\", 8);\n    i0.ɵɵelementStart(3, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(4, \"mat-label\", 15);\n    i0.ɵɵtext(5, \"Activity form name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 20);\n    i0.ɵɵtemplate(7, CreateUpdateComponent_ng_container_4_mat_error_7_Template, 2, 1, \"mat-error\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandling(ctx_r0.activityConfigFG, \"activityConfig.configName\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_div_6_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 25);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_div_6_mat_option_8_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const assest_r13 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.setSourceTypeID(assest_r13);\n    });\n    i0.ɵɵelementStart(1, \"span\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assest_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", assest_r13.assetID);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", assest_r13.assetName, \"\");\n  }\n}\nfunction CreateUpdateComponent_div_6_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"div\", 21);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 14);\n    i0.ɵɵelementStart(3, \"mat-label\", 15);\n    i0.ɵɵtext(4, \"Select combustion equipment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-select\", 22);\n    i0.ɵɵelementStart(6, \"mat-option\");\n    i0.ɵɵelement(7, \"ngx-mat-select-search\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, CreateUpdateComponent_div_6_mat_option_8_Template, 3, 2, \"mat-option\", 24);\n    i0.ɵɵpipe(9, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, CreateUpdateComponent_div_6_mat_error_10_Template, 2, 1, \"mat-error\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r10 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r1.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r1.assestSearchUtil.filterFC)(\"noEntriesFoundLabel\", ctx_r1.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 6, ctx_r1.assestSearchUtil.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorHandlingForFormArrayData(\"sourceID\", \"required\", i_r10));\n  }\n}\nfunction CreateUpdateComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 27);\n    i0.ɵɵelementStart(1, \"span\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const medium_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", medium_r16.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", medium_r16.name, \"\");\n  }\n}\nfunction CreateUpdateComponent_mat_error_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_div_26_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵelementStart(2, \"div\", 29);\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Does your steam plant account for condensate return? *\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-radio-group\", 30);\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelementStart(7, \"div\", 31);\n    i0.ɵɵelementStart(8, \"mat-radio-button\", 32);\n    i0.ɵɵtext(9, \"Yes \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 31);\n    i0.ɵɵelementStart(11, \"mat-radio-button\", 32);\n    i0.ɵɵtext(12, \"No \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, CreateUpdateComponent_div_26_mat_error_13_Template, 2, 1, \"mat-error\", 33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"value\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandlingForRadio(ctx_r6.activityConfigFG, \"activityConfigData.isCondensateReturn\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_div_27_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r18.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵelementStart(2, \"div\", 29);\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Is the temperature of the exhaust gas 250\\u00B0C or higher?*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-radio-group\", 35);\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelementStart(7, \"div\", 31);\n    i0.ɵɵelementStart(8, \"mat-radio-button\", 32);\n    i0.ɵɵtext(9, \"Yes \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 31);\n    i0.ɵɵelementStart(11, \"mat-radio-button\", 32);\n    i0.ɵɵtext(12, \"No \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, CreateUpdateComponent_div_27_mat_error_13_Template, 2, 1, \"mat-error\", 33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"value\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.errorHandlingForRadio(ctx_r7.activityConfigFG, \"activityConfigData.isTemprature250orHigh\", \"required\"));\n  }\n}\n// /tsc-library/\nconst carbon_lookup_url = environment.CARBON_ACCOUNTING_API_URL;\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent extends ActivityConfig {\n    constructor(formBuilder, activatedRoute, assetService, dataInputMethodService, lookupService, storageService, dateService) {\n      super();\n      this.formBuilder = formBuilder;\n      this.activatedRoute = activatedRoute;\n      this.assetService = assetService;\n      this.dataInputMethodService = dataInputMethodService;\n      this.lookupService = lookupService;\n      this.storageService = storageService;\n      this.dateService = dateService;\n      this.ActivityConfigEnum = ActivityConfigEnum;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.assestSearchUtil = new MatSelectSearchService(['assetName']);\n      this.date = new Date();\n      this.dataInputMethodList = [];\n      this.errorHandlingForFormArrayData = (control, error, index) => {\n        const activityConfigSourceFA = this.activityConfigFG.get('activityConfigSource');\n        const formGroup = activityConfigSourceFA.at(index);\n        return formGroup.get(control).hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams.activityID) {\n          this.activityID = queryParams.activityID;\n          this.origin = queryParams.origin;\n        }\n      });\n      this.activatedRoute.data.subscribe(data => {\n        this.activityKeyID = data.activityKeyID;\n      });\n      this.formGroupInit();\n      this.getAllAsset();\n      this.getHeatMedium();\n      this.getDataInputMethodList(this.activityID);\n    }\n    formGroupInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: this.activityID,\n          activityKeyID: this.activityKeyID,\n          configName: [],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          heatTransferMediumID: [],\n          yearOfConstruction: [],\n          isCondensateReturn: [],\n          isTemprature250orHigh: [],\n          dataInputMethodStdID: [, Validators.required]\n        }),\n        activityConfigSource: this.formBuilder.array([])\n      });\n      this.createFormGroup();\n    }\n    createFormGroup() {\n      this.activityConfigSourceFA.push(this.formBuilder.group({\n        sourceID: [[]],\n        sourceTypeID: null\n      }));\n    }\n    setSourceTypeID(data) {\n      this.activityConfigFG.get('activityConfigSource').get([0]).get('sourceTypeID').patchValue(data.sourceTypeID, {\n        emitEvent: false\n      });\n    }\n    get activityConfigSourceFA() {\n      return this.activityConfigFG.get('activityConfigSource');\n    }\n    getAllAsset() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.allAssests = yield this.assetService.getAllAsset(this.currentOrgID);\n        this.assestSearchUtil.entityArr = this.allAssests;\n        this.assestSearchUtil.createSubscription();\n      });\n    }\n    yearDateInput(selectedDate, datepicker) {\n      let duration = this.dateService.handleDateInput(selectedDate, datepicker, \"YYYY\");\n      this.activityConfigFG.get('activityConfigData.yearOfConstruction').patchValue(duration);\n    }\n    getHeatMedium() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let requestBody = [{\n          lookupCode: ['heat-extraction-method'],\n          lookupKey: []\n        }];\n        this.heatMedium = yield this.lookupService.getLookup(carbon_lookup_url, requestBody);\n        this.activityConfigFG.get('activityConfigData.heatTransferMediumID').valueChanges.subscribe(value => {\n          this.updateValidators(value);\n        });\n      });\n    }\n    updateValidators(heatTransferMediumKeyID) {\n      var _a, _b;\n      this.steam = ((_a = this.heatMedium.find(medium => medium.id === heatTransferMediumKeyID)) === null || _a === void 0 ? void 0 : _a.keyID) === HeatTransferMediumKeyIDEnum.STEAM;\n      this.exhaustGases = ((_b = this.heatMedium.find(medium => medium.id === heatTransferMediumKeyID)) === null || _b === void 0 ? void 0 : _b.keyID) === HeatTransferMediumKeyIDEnum.DIRECT_USE_OF_EXHAUST_GASES;\n      const isCondensateReturnControl = this.activityConfigFG.get('activityConfigData.isCondensateReturn');\n      const isTemprature250orHighControl = this.activityConfigFG.get('activityConfigData.isTemprature250orHigh');\n      if (this.steam) {\n        isCondensateReturnControl.setValidators([Validators.required]);\n        isTemprature250orHighControl.clearValidators();\n        isTemprature250orHighControl.reset();\n      } else if (this.exhaustGases) {\n        isTemprature250orHighControl.setValidators([Validators.required]);\n        isCondensateReturnControl.clearValidators();\n        isCondensateReturnControl.reset();\n      } else {\n        isCondensateReturnControl.clearValidators();\n        isCondensateReturnControl.reset();\n        isTemprature250orHighControl.reset();\n        isTemprature250orHighControl.clearValidators();\n      }\n      isCondensateReturnControl.updateValueAndValidity();\n      isTemprature250orHighControl.updateValueAndValidity();\n    }\n    getDataInputMethodList(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.dataInputMethodList = yield this.dataInputMethodService.getDataInputMethodByActivityAndType(id, DataInputMethod.STANDARD);\n        this.activityConfigFG.get('activityConfigData.dataInputMethodStdID').patchValue(this.dataInputMethodList[0].id);\n      });\n    }\n    patchConfiguration(configuration) {\n      let activityConfig = configuration.activityConfig != null ? configuration.activityConfig : null;\n      let activityConfigData = configuration.activityConfigData;\n      let activityConfigSource = configuration.activityConfigSource;\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig.configName\n        });\n      } else {\n        this.readOnlyForm();\n      }\n      this.activityConfigDataAC.patchValue({\n        heatTransferMediumID: activityConfigData.heatTransferMedium.id,\n        yearOfConstruction: activityConfigData.yearOfConstruction,\n        isCondensateReturn: activityConfigData.isCondensateReturn,\n        isTemprature250orHigh: activityConfigData.isTemprature250orHigh\n      });\n      this.activityConfigSourceFA.clear();\n      if (activityConfig != null) {\n        activityConfigSource.forEach(source => {\n          this.activityConfigSourceFA.push(this.formBuilder.group({\n            sourceID: [source.sourceID[0]],\n            sourceTypeID: source.sourceTypeID\n          }));\n        });\n      } else {\n        const source = configuration.source;\n        this.activityConfigSourceFA.push(this.formBuilder.group({\n          sourceID: [source.source.id],\n          sourceTypeID: source.sourceType.id\n        }));\n        this.readOnlyForm();\n      }\n      this.activityConfigFG.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n      });\n      this.isEqual.next(true);\n      this.initialObject = this.activityConfigFG.value;\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.AssetService), i0.ɵɵdirectiveInject(i4.DataInputMethodService), i0.ɵɵdirectiveInject(i5.LookupService), i0.ɵɵdirectiveInject(i6.StorageService), i0.ɵɵdirectiveInject(i7.DateService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 28,\n    vars: 13,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [4, \"ngIf\"], [\"formArrayName\", \"activityConfigSource\", 1, \"row\"], [\"class\", \"col-sm-6\", 4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"activityConfigData\"], [1, \"row\"], [1, \"col-sm-6\"], [\"id\", \"yearlyField\", \"appYearFormat\", \"\", 1, \"matFieldWidth100\", 3, \"appearance\", \"click\", \"keydown.arrowdown\", \"keydown.enter\"], [\"matInput\", \"\", \"formControlName\", \"yearOfConstruction\", \"readonly\", \"\", 1, \"cursorPointer\", 3, \"matDatepicker\", \"max\"], [\"matSuffix\", \"\", 3, \"for\"], [\"startView\", \"multi-year\", \"panelClass\", \"yearPicker\", 3, \"yearSelected\", \"closed\"], [\"yearly\", \"\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"heatTransferMediumID\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"pb-4\", 4, \"ngIf\"], [\"formGroupName\", \"activityConfig\", 1, \"row\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"configName\", \"required\", \"\"], [3, \"formGroupName\"], [\"formControlName\", \"sourceID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by combustion equipment name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"], [1, \"d-flex\", \"justify-content-between\"], [3, \"value\"], [1, \"pb-4\"], [1, \"col-sm-12\"], [\"formControlName\", \"isCondensateReturn\", \"required\", \"\"], [1, \"col-sm-5\"], [1, \"pt-2\", 3, \"value\"], [\"class\", \"mt-2\", 4, \"ngIf\"], [1, \"mt-2\"], [\"formControlName\", \"isTemprature250orHigh\", \"required\", \"\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r19 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵtemplate(4, CreateUpdateComponent_ng_container_4_Template, 8, 2, \"ng-container\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, CreateUpdateComponent_div_6_Template, 11, 8, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵelementStart(10, \"mat-form-field\", 9);\n        i0.ɵɵlistener(\"click\", function CreateUpdateComponent_Template_mat_form_field_click_10_listener() {\n          i0.ɵɵrestoreView(_r19);\n          const _r2 = i0.ɵɵreference(16);\n          return ctx.dateService.openDatepickerOnClick(_r2);\n        })(\"keydown.arrowdown\", function CreateUpdateComponent_Template_mat_form_field_keydown_arrowdown_10_listener() {\n          i0.ɵɵrestoreView(_r19);\n          const _r2 = i0.ɵɵreference(16);\n          return ctx.dateService.openDatepickerOnClick(_r2);\n        })(\"keydown.enter\", function CreateUpdateComponent_Template_mat_form_field_keydown_enter_10_listener() {\n          i0.ɵɵrestoreView(_r19);\n          const _r2 = i0.ɵɵreference(16);\n          return ctx.dateService.openDatepickerOnClick(_r2);\n        });\n        i0.ɵɵelementStart(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Year of construction\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 10);\n        i0.ɵɵelement(14, \"mat-datepicker-toggle\", 11);\n        i0.ɵɵelementStart(15, \"mat-datepicker\", 12, 13);\n        i0.ɵɵlistener(\"yearSelected\", function CreateUpdateComponent_Template_mat_datepicker_yearSelected_15_listener($event) {\n          i0.ɵɵrestoreView(_r19);\n          const _r2 = i0.ɵɵreference(16);\n          return ctx.yearDateInput($event, _r2);\n        })(\"closed\", function CreateUpdateComponent_Template_mat_datepicker_closed_15_listener() {\n          return ctx.dateService.takeFocusAway(\"yearlyField\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, CreateUpdateComponent_mat_error_17_Template, 2, 1, \"mat-error\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 7);\n        i0.ɵɵelementStart(19, \"div\", 8);\n        i0.ɵɵelementStart(20, \"mat-form-field\", 14);\n        i0.ɵɵelementStart(21, \"mat-label\", 15);\n        i0.ɵɵtext(22, \"Select heat transfer medium\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"mat-select\", 16);\n        i0.ɵɵtemplate(24, CreateUpdateComponent_mat_option_24_Template, 3, 2, \"mat-option\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, CreateUpdateComponent_mat_error_25_Template, 2, 1, \"mat-error\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, CreateUpdateComponent_div_26_Template, 14, 3, \"div\", 18);\n        i0.ɵɵtemplate(27, CreateUpdateComponent_div_27_Template, 14, 3, \"div\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(16);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == ctx.ActivityConfigEnum.PFF);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityConfigSourceFA.controls);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r2)(\"max\", ctx.date);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r2);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfigData.yearOfConstruction\", \"required\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.heatMedium);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfigData.heatTransferMediumID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.steam);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.exhaustGases);\n      }\n    },\n    directives: [i8.MatCard, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i9.NgIf, i1.FormArrayName, i9.NgForOf, i1.FormGroupName, i10.MatFormField, i7.YearFormatDirective, i10.MatLabel, i11.MatInput, i1.DefaultValueAccessor, i12.MatDatepickerInput, i1.NgControlStatus, i1.FormControlName, i12.MatDatepickerToggle, i10.MatSuffix, i12.MatDatepicker, i13.MatSelect, i1.RequiredValidator, i10.MatError, i14.MatOption, i15.MatSelectSearchComponent, i1.FormControlDirective, i16.MatRadioGroup, i16.MatRadioButton],\n    pipes: [i9.AsyncPipe],\n    encapsulation: 2\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}