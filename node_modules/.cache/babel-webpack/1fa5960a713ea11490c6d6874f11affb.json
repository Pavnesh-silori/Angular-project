{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SupplierController = /*#__PURE__*/(() => {\n  class SupplierController {\n    constructor(http) {\n      this.http = http;\n    }\n    createSupplier(supplier, currentOrgID) {\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${currentOrgID}/supplier`, supplier);\n    }\n    getSupplier(pageNo, pazeSize, sortBy, orderBy, currentOrgID, filters) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${currentOrgID}/org/supplier/page`, filters, {\n        params: params\n      });\n    }\n    getSupplierType() {\n      return this.http.get(`${environment.COMMON_API_URL}supplier/type`);\n    }\n    bulkUpload(currentOrgID, file) {\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${currentOrgID}/supplier/bulk-upload`, file);\n    }\n    getSupplierActivityForm(supplierID, currentOrgID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity-config/supplier/${supplierID}`);\n    }\n    updateAssign(supplierID, currentOrgID, assignValue) {\n      return this.http.post(`${environment.COMMON_API_URL}organizations/${currentOrgID}/supplier/assigned/${supplierID}/${assignValue}`, '');\n    }\n    getSupplierByID(supplierID, currentOrgID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${currentOrgID}/supplier/${supplierID}`);\n    }\n    updateSupplier(supplier, supplierID, currentOrgID) {\n      return this.http.patch(`${environment.COMMON_API_URL}organizations/${currentOrgID}/org/supplier/${supplierID}`, supplier);\n    }\n    isSupplierCodeExist(currentOrgID, supplierCode) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${currentOrgID}/supplier/code/${supplierCode}`);\n    }\n    getGrid(countryCode) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}grids/country/${countryCode}`);\n    }\n    getSupplierByType(orgID, type) {\n      let params = new HttpParams();\n      params = params.append('type', type);\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${orgID}/suppliers`, {\n        params: params\n      });\n    }\n  }\n  SupplierController.ɵfac = function SupplierController_Factory(t) {\n    return new (t || SupplierController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SupplierController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SupplierController,\n    factory: SupplierController.ɵfac,\n    providedIn: 'root'\n  });\n  return SupplierController;\n})();","map":null,"metadata":{},"sourceType":"module"}