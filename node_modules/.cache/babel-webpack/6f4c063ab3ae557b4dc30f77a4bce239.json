{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as moment from 'moment';\nimport { isEqual } from 'lodash';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { ConfirmationDailog } from '../../../_shared/confirmation-dailog/confirmation-dailog.component';\nimport { ToastrColor } from '@library/toastr-service';\n// tsc-library\nimport { ButtonLabelEnum, DialogEnum, DialogResponseEnum, FormAction, InvalidForm, MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@carbon/controller/fugitive-inventory.controller\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@library/unit-service\";\nimport * as i5 from \"@carbon/service/gas.service\";\nimport * as i6 from \"@carbon/service/fugitive.service\";\nimport * as i7 from \"@library/toastr-service\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/tooltip\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"ngx-mat-select-search\";\nimport * as i14 from \"@angular/common\";\nimport * as i15 from \"@library/date\";\nimport * as i16 from \"@angular/material/input\";\nimport * as i17 from \"@angular/material/datepicker\";\nfunction InventoryCreateUpdateDialog_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 29);\n    i0.ɵɵelementStart(1, \"span\", 30);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const gas_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", gas_r12.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", gas_r12.name, \" \");\n  }\n}\nfunction InventoryCreateUpdateDialog_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Gas is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InventoryCreateUpdateDialog_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Date is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InventoryCreateUpdateDialog_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Total amount is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InventoryCreateUpdateDialog_mat_error_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Total amount can not be negative \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InventoryCreateUpdateDialog_mat_option_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 29);\n    i0.ɵɵelementStart(1, \"span\", 30);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r13.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", unit_r13.name, \" -- \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r13.uomCode);\n  }\n}\nfunction InventoryCreateUpdateDialog_mat_error_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Unit ID is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InventoryCreateUpdateDialog_button_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function InventoryCreateUpdateDialog_button_48_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.createInventoryRecord();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.ButtonLabelEnum.CREATE_BTN_LABEL, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\nfunction InventoryCreateUpdateDialog_button_49_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function InventoryCreateUpdateDialog_button_49_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.getConfirmation();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r10.isEqual));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.ButtonLabelEnum.SAVE_BTN_LABEL, \" \");\n  }\n}\nfunction InventoryCreateUpdateDialog_button_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 33);\n  }\n}\n// /tsc-library\nexport let InventoryCreateUpdateDialog = /*#__PURE__*/(() => {\n  class InventoryCreateUpdateDialog {\n    constructor(dialog, fugitiveInventoryController, formBuilder, unitService, dialogRef, gasService, fugitiveService, toastrService, data) {\n      this.dialog = dialog;\n      this.fugitiveInventoryController = fugitiveInventoryController;\n      this.formBuilder = formBuilder;\n      this.unitService = unitService;\n      this.dialogRef = dialogRef;\n      this.gasService = gasService;\n      this.fugitiveService = fugitiveService;\n      this.toastrService = toastrService;\n      this.data = data;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.FormAction = FormAction;\n      this.ButtonLabelEnum = ButtonLabelEnum;\n      this.title = 'Create';\n      this.isCreate = false;\n      this.isReadOnly = false;\n      this.gasFilterFC = new FormControl();\n      this.gasFilterUnsubscribe = new Subject();\n      this.gasFiltered = new ReplaySubject(1);\n      this.maxLength = 800;\n      this.gasSearchUtil = new MatSelectSearchService(['name']);\n      this.errorHandling = (control, error) => {\n        return this.inventoryFG.get(control).hasError(error);\n      };\n      this.action = this.data['action'];\n      this.currentOrgID = this.data['currentOrgID'];\n      this.calculationApproachKeyID = this.data['calculationApproachKeyID'];\n      this.recordDate = this.data['recordDate'];\n      this.dialogRef.disableClose = true;\n    }\n    ngOnInit() {\n      this.inventoryFGInit();\n      this.getUnit();\n      this.getGas();\n      if (this.action == FormAction.CREATE) {\n        this.isCreate = true;\n      } else if (this.action == FormAction.UPDATE) {\n        this.isCreate = false;\n        this.isReadOnly = true;\n        this.title = \"Update\";\n        this.inventoryID = this.data['id'];\n        this.getInventoryRecordByID();\n      } else {\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, 'Unrecognized action!', ToastrColor.ERROR);\n        this.dialogRef.close();\n      }\n    }\n    inventoryFGInit() {\n      this.inventoryFG = this.formBuilder.group({\n        recordID: [],\n        gasID: [, Validators.required],\n        recordDate: [, Validators.required],\n        gasQuantity: [, Validators.required],\n        gasQuantityUnitID: [, Validators.required],\n        note: [],\n        calculationApproachKeyID: [this.calculationApproachKeyID]\n      });\n    }\n    formatDate(control) {\n      let date = moment(this.inventoryFG.controls[control].value).format(\"YYYY-MM-DD\");\n      this.inventoryFG.controls[control].patchValue(date);\n    }\n    getGas() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.gasList = yield this.gasService.getGas();\n        // ngx mat select search\n        this.gasSearchUtil.entityArr = this.gasList;\n        this.gasSearchUtil.createSubscription();\n        // this.gasFiltered.next(this.gasList.slice());\n        // this.gasFilterFC.valueChanges\n        // \t.pipe(takeUntil(this.gasFilterUnsubscribe)).subscribe(async () => {\n        // \t\tthis.gasFiltered = await this.utility.filterValue(this.gasList, this.gasFilterFC.value, 'name');\n        // \t});\n      });\n    }\n\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let unitFilter = [];\n        unitFilter = ['unitType:MASS'];\n        this.unitList = yield this.unitService.getUnit(unitFilter);\n      });\n    }\n    getInventoryRecordByID() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.inventoryM = yield this.fugitiveService.getInventoryRecordByID(this.currentOrgID, this.inventoryID);\n        this.patchInventoryRecord(this.inventoryM);\n      });\n    }\n    createInventoryRecord() {\n      if (!this.checkForValidForm()) {\n        return [];\n      }\n      this.fugitiveInventoryController.createInventoryRecord(this.currentOrgID, this.inventoryFG.value).subscribe(createRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in createInventoryRecord -', error);\n      });\n    }\n    patchInventoryRecord(inventoryRecord) {\n      this.inventoryFG.patchValue({\n        recordID: inventoryRecord['recordID'],\n        gasID: inventoryRecord['gasID'],\n        recordDate: inventoryRecord['recordDate'],\n        gasQuantity: inventoryRecord['gasQuantity'],\n        gasQuantityUnitID: inventoryRecord['gasQuantityUnitID'],\n        note: inventoryRecord['note']\n      });\n      this.initialObject = this.inventoryFG.value;\n      this.isEqual = true;\n    }\n    getConfirmation() {\n      if (!this.checkForValidForm()) {\n        return [];\n      }\n      if (this.showConfirmationDialog()) {\n        let recalculationDate = moment(this.recordDate).startOf('month').format('DD-MMM-YYYY');\n        const message = 'This will cause re-calculation from ' + recalculationDate + '. Fugitive emissions from refrigeration, air conditioning and fire suppression after the above date will be re-calculated.';\n        const dialogRef = this.dialog.open(ConfirmationDailog, {\n          data: {\n            currentOrgID: this.currentOrgID,\n            message: message\n          },\n          maxWidth: '500px',\n          maxHeight: '600px'\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          if (result == DialogResponseEnum.YES) {\n            this.updateInventoryRecord();\n          }\n          // else {\n          // \tthis.dialogRef.close('close');\n          // }\n        });\n      } else {\n        this.updateInventoryRecord();\n      }\n    }\n    updateInventoryRecord() {\n      this.fugitiveInventoryController.updateInventoryRecord(this.currentOrgID, this.inventoryID, this.inventoryFG.value).subscribe(updateRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in updateInventoryRecord -', error);\n      });\n    }\n    checkForValidForm() {\n      if (this.inventoryFG.invalid) {\n        this.inventoryFG.markAllAsTouched();\n        console.log('invalid form -', this.inventoryFG.value);\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return false;\n      } else {\n        return true;\n      }\n    }\n    showConfirmationDialog() {\n      // if only note is updated, no need to show confirmation dailog box because it will not affect calculations\n      let showConfirmationDialog = false;\n      if (this.inventoryFG.get('gasQuantity').touched || this.inventoryFG.get('gasQuantityUnitID').touched) {\n        showConfirmationDialog = true;\n      }\n      if (!showConfirmationDialog) {\n        let newRecordDate = this.inventoryFG.get('recordDate').value;\n        if (newRecordDate !== this.inventoryM['recordDate']) {\n          showConfirmationDialog = true;\n        }\n      }\n      return showConfirmationDialog;\n    }\n    ngAfterViewInit() {\n      this.inventoryFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.inventoryFG.value));\n    }\n    openDatepicker(datepicker) {\n      if (!datepicker.opened) {\n        datepicker.open();\n      }\n    }\n  }\n  InventoryCreateUpdateDialog.ɵfac = function InventoryCreateUpdateDialog_Factory(t) {\n    return new (t || InventoryCreateUpdateDialog)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FugitiveInventoryController), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.UnitService), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i5.GasService), i0.ɵɵdirectiveInject(i6.FugitiveService), i0.ɵɵdirectiveInject(i7.ToastrService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  InventoryCreateUpdateDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InventoryCreateUpdateDialog,\n    selectors: [[\"app-inventory-create-update-dialog\"]],\n    decls: 51,\n    vars: 27,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogTitle\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", \"cdkFocusInitial\", \"\", \"matTooltip\", \"Close\", \"matTooltipPosition\", \"before\", 1, \"float-end\", \"matDialogClose\"], [1, \"material-symbols-outlined\"], [\"mat-dialog-content\", \"\", 1, \"matDialogContent\"], [3, \"formGroup\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"gasID\", \"required\", \"\", 3, \"disabled\"], [\"placeholderLabel\", \"Search by gas name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"appDateMonthYearFormat\", \"\", 1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\", \"click\", \"keydown.enter\", \"keydown.arrowdown\"], [\"matInput\", \"\", \"formControlName\", \"recordDate\", \"required\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"readonly\", \"dateInput\"], [\"matSuffix\", \"\", 3, \"for\"], [\"disabled\", \"false\"], [\"date\", \"\"], [\"matTooltip\", \"Total amount of gas in inventory\", 3, \"appearance\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"placeholder\", \"0\", \"formControlName\", \"gasQuantity\", \"required\", \"\", 1, \"formPlaceholder\"], [1, \"ms-2\", 3, \"appearance\"], [\"formControlName\", \"gasQuantityUnitID\", \"required\", \"\"], [\"disabled\", \"\"], [\"matInput\", \"\", \"formControlName\", \"note\", 1, \"formPlaceholder\", 3, \"maxlength\"], [\"myInput\", \"\"], [\"mat-dialog-footer\", \"\", \"align\", \"end\"], [1, \"d-inline\", 3, \"ngSwitch\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"click\", 4, \"ngSwitchCase\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"ngClass\", \"click\", 4, \"ngSwitchCase\"], [\"class\", \"d-none\", 4, \"ngSwitchDefault\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"click\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"ngClass\", \"click\"], [1, \"d-none\"]],\n    template: function InventoryCreateUpdateDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r18 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 2);\n        i0.ɵɵelementStart(4, \"span\", 3);\n        i0.ɵɵtext(5, \"close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"form\", 5);\n        i0.ɵɵelementStart(8, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(9, \"mat-label\", 7);\n        i0.ɵɵtext(10, \"Select gas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-select\", 8);\n        i0.ɵɵelementStart(12, \"mat-option\");\n        i0.ɵɵelement(13, \"ngx-mat-select-search\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, InventoryCreateUpdateDialog_mat_option_14_Template, 3, 2, \"mat-option\", 10);\n        i0.ɵɵpipe(15, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, InventoryCreateUpdateDialog_mat_error_16_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-form-field\", 12);\n        i0.ɵɵlistener(\"click\", function InventoryCreateUpdateDialog_Template_mat_form_field_click_17_listener() {\n          i0.ɵɵrestoreView(_r18);\n          const _r2 = i0.ɵɵreference(23);\n          return ctx.openDatepicker(_r2);\n        })(\"keydown.enter\", function InventoryCreateUpdateDialog_Template_mat_form_field_keydown_enter_17_listener() {\n          i0.ɵɵrestoreView(_r18);\n          const _r2 = i0.ɵɵreference(23);\n          return ctx.openDatepicker(_r2);\n        })(\"keydown.arrowdown\", function InventoryCreateUpdateDialog_Template_mat_form_field_keydown_arrowdown_17_listener() {\n          i0.ɵɵrestoreView(_r18);\n          const _r2 = i0.ɵɵreference(23);\n          return ctx.openDatepicker(_r2);\n        });\n        i0.ɵɵelementStart(18, \"mat-label\", 7);\n        i0.ɵɵtext(19, \" Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 13);\n        i0.ɵɵlistener(\"dateInput\", function InventoryCreateUpdateDialog_Template_input_dateInput_20_listener() {\n          return ctx.formatDate(\"recordDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"mat-datepicker-toggle\", 14);\n        i0.ɵɵelement(22, \"mat-datepicker\", 15, 16);\n        i0.ɵɵtemplate(24, InventoryCreateUpdateDialog_mat_error_24_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-form-field\", 17);\n        i0.ɵɵelementStart(26, \"mat-label\", 7);\n        i0.ɵɵtext(27, \" Total amount of gas in inventory\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"input\", 18);\n        i0.ɵɵtemplate(29, InventoryCreateUpdateDialog_mat_error_29_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵtemplate(30, InventoryCreateUpdateDialog_mat_error_30_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"mat-form-field\", 19);\n        i0.ɵɵelementStart(32, \"mat-label\", 7);\n        i0.ɵɵtext(33, \"Unit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"mat-select\", 20);\n        i0.ɵɵelementStart(35, \"mat-option\", 21);\n        i0.ɵɵtext(36, \"Select unit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(37, InventoryCreateUpdateDialog_mat_option_37_Template, 5, 3, \"mat-option\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(38, InventoryCreateUpdateDialog_mat_error_38_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(40, \"mat-label\", 7);\n        i0.ɵɵtext(41, \" Add a note \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(42, \"input\", 22, 23);\n        i0.ɵɵelementStart(44, \"mat-hint\");\n        i0.ɵɵtext(45);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"div\", 24);\n        i0.ɵɵelementStart(47, \"div\", 25);\n        i0.ɵɵtemplate(48, InventoryCreateUpdateDialog_button_48_Template, 2, 1, \"button\", 26);\n        i0.ɵɵtemplate(49, InventoryCreateUpdateDialog_button_49_Template, 2, 4, \"button\", 27);\n        i0.ɵɵtemplate(50, InventoryCreateUpdateDialog_button_50_Template, 1, 0, \"button\", 28);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(23);\n        const _r8 = i0.ɵɵreference(43);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.title, \" inventory record \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.inventoryFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isReadOnly);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.gasSearchUtil.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 25, ctx.gasSearchUtil.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r2)(\"readonly\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r2);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"recordDate\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasQuantity\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasQuantity\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.unitList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"gasQuantityUnitID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"maxlength\", ctx.maxLength);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\"Total number of character remaining: \", _r8.value.length, \" /\", ctx.maxLength, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.action);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.FormAction.CREATE);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.FormAction.UPDATE);\n      }\n    },\n    directives: [i1.MatDialogTitle, i8.MatButton, i1.MatDialogClose, i9.MatTooltip, i1.MatDialogContent, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i10.MatFormField, i10.MatLabel, i11.MatSelect, i3.NgControlStatus, i3.FormControlName, i3.RequiredValidator, i12.MatOption, i13.MatSelectSearchComponent, i3.FormControlDirective, i14.NgForOf, i14.NgIf, i15.DateMonthYearFormatDirective, i16.MatInput, i3.DefaultValueAccessor, i17.MatDatepickerInput, i17.MatDatepickerToggle, i10.MatSuffix, i17.MatDatepicker, i3.MinValidator, i3.NumberValueAccessor, i3.MaxLengthValidator, i10.MatHint, i14.NgSwitch, i14.NgSwitchCase, i14.NgSwitchDefault, i10.MatError, i14.NgClass],\n    pipes: [i14.AsyncPipe],\n    encapsulation: 2\n  });\n  return InventoryCreateUpdateDialog;\n})();","map":null,"metadata":{},"sourceType":"module"}