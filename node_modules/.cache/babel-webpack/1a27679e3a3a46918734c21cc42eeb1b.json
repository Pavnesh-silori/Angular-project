{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport { PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM, PROCESS_OUTPUT_ENUM } from '@netzero/enum/process.enum';\nimport { COMMON_CONSTANT } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@carbon/service/process.service\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/card\";\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵelementStart(2, \"div\", 12);\n    i0.ɵɵelementStart(3, \"li\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entities_r8 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(entities_r8.name);\n  }\n}\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_9_div_1_Template, 5, 1, \"div\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.entity);\n  }\n}\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_12_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_12_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c0 = function (a1) {\n  return {\n    label: \"Rollover Value\",\n    value: a1,\n    class: \"pt-1\"\n  };\n};\nconst _c1 = function (a1) {\n  return {\n    label: \"Unit\",\n    value: a1,\n    class: \"pt-1\"\n  };\n};\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtext(2, \" Meter \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_12_ng_container_3_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵtemplate(4, ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_12_ng_container_4_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    const _r1 = i0.ɵɵreference(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c0, ctx_r6.activityConfigData.meterRollover.value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c1, ctx_r6.activityConfigData.meterRollover.unit.uomName));\n  }\n}\nconst _c2 = function (a1) {\n  return {\n    label: \"Name\",\n    value: a1,\n    class: \"pt-1\"\n  };\n};\nconst _c3 = function (a1) {\n  return {\n    label: \"Data Input Method\",\n    value: a1,\n    class: \"pt-1\"\n  };\n};\nfunction ProductionLevelActivityConfigViewComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-card\", 2);\n    i0.ɵɵelementStart(2, \"div\", 3);\n    i0.ɵɵtext(3, \" Process \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_4_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementStart(5, \"div\", 5);\n    i0.ɵɵelementStart(6, \"div\", 6);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 7);\n    i0.ɵɵtemplate(9, ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_9_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-card\", 9);\n    i0.ɵɵtemplate(11, ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_11_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵtemplate(12, ProductionLevelActivityConfigViewComponent_ng_container_0_ng_container_12_Template, 5, 8, \"ng-container\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(8, _c2, ctx_r0.activityConfigData.process.name));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.entityTypeLabel);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.entity.length > 0)(\"ngIfElse\", ctx_r0.noEntity);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c3, ctx_r0.activityConfigData.dataInputMethod.name));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.activityConfigData.dataInputMethod.keyID == ctx_r0.DataInputMethodKeyIDEnum.METER_READING);\n  }\n}\nfunction ProductionLevelActivityConfigViewComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 14);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const label_r12 = ctx.label;\n    const value_r13 = ctx.value;\n    const class_r14 = ctx.class;\n    const valueClass_r15 = ctx.valueClass;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(class_r14);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", label_r12, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(valueClass_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", value_r13 ? value_r13 : ctx_r2.COMMON_CONSTANT.HYPHEN, \" \");\n  }\n}\n// /tsc-library/\nexport let ProductionLevelActivityConfigViewComponent = /*#__PURE__*/(() => {\n  class ProductionLevelActivityConfigViewComponent {\n    constructor(activatedRoute, processService,\n    // tsc-library\n    storageService\n    // tsc-library\n    ) {\n      this.processService = processService;\n      // tsc-library\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      // /tsc-library/\n      this.ActivityKeyIDEnum = ActivityKeyIDEnum;\n      this.DataInputMethodKeyIDEnum = DataInputMethodKeyIDEnum;\n      this.getProcessByIDCall = true;\n      this.entityTypeLabel = 'Entity';\n      this.entity = [];\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n      this.activityKeyID = activatedRoute.snapshot.data.activityKeyID;\n    }\n    ngOnInit() {\n      this.setEntityTypeLabel(this.activityKeyID);\n    }\n    ngAfterContentChecked() {\n      if (this.activityConfig) {\n        this.activityConfigData = this.activityConfig.activityConfigData;\n        if (this.getProcessByIDCall && !this.process && this.activityConfigData) {\n          this.getProcessByIDCall = false;\n          this.getProcessByID(this.currentOrgID, this.activityConfigData.process.id, false);\n        }\n      }\n    }\n    setEntityTypeLabel(activityKeyID) {\n      switch (activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_WASTE_GAS_EXPORT:\n          this.entityTypeLabel = 'Waste Gas Source';\n          break;\n        case ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT:\n          this.entityTypeLabel = 'Precursor Source';\n          break;\n        case ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT:\n          this.entityTypeLabel = 'Intermediate Product';\n          break;\n        case ActivityKeyIDEnum.PROCESS_PRODUCTION_LEVEL:\n          this.entityTypeLabel = 'Product';\n          break;\n      }\n    }\n    getProcessByID(orgID, processID, isLatest) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.process = yield this.processService.getProcessByID(orgID, processID, isLatest);\n        this.createEntitySource(this.process);\n      });\n    }\n    createEntitySource(process) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      let inputOutput;\n      let coProduct;\n      let finishProduct;\n      switch (this.activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_WASTE_GAS_EXPORT:\n          {\n            this.entityTypeLabel = 'Waste Gas';\n            inputOutput = (_a = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.WASTE_GAS_STREAM && output.entitySource.some(source => source.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.VENTED_OR_FLARED || source.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_TO_NON_CBAM_INSTALLATION || source.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_TO_CBAM_INSTALLATION))) === null || _a === void 0 ? void 0 : _a.entitySource;\n            break;\n          }\n        case ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT:\n          {\n            let entityID = null;\n            this.entityTypeLabel = 'Precursor Source';\n            entityID = [...((_d = new Set((_c = (_b = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT)) === null || _b === void 0 ? void 0 : _b.entitySource.filter(entity => entity.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_FROM_THIS_PROCESS)) === null || _c === void 0 ? void 0 : _c.map(entity => entity.entityID))) !== null && _d !== void 0 ? _d : [])];\n            if ((entityID === null || entityID === void 0 ? void 0 : entityID.length) > 0) {\n              inputOutput = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT).entities.filter(entity => entityID.includes(entity.id));\n            }\n            break;\n          }\n        case ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT:\n          {\n            let entityID = null;\n            this.entityTypeLabel = 'Intermediate Product';\n            entityID = [...((_g = new Set((_f = (_e = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT)) === null || _e === void 0 ? void 0 : _e.entitySource.filter(entity => entity.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_FROM_THIS_PROCESS)) === null || _f === void 0 ? void 0 : _f.map(entity => entity.entityID))) !== null && _g !== void 0 ? _g : [])];\n            if ((entityID === null || entityID === void 0 ? void 0 : entityID.length) > 0) {\n              inputOutput = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT).entities.filter(entity => entityID.includes(entity.id));\n            }\n            break;\n          }\n        case ActivityKeyIDEnum.PROCESS_PRODUCTION_LEVEL:\n          {\n            this.entityTypeLabel = 'Product';\n            coProduct = (_h = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.CO_PRODUCT)) === null || _h === void 0 ? void 0 : _h.entities;\n            finishProduct = (_j = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT)) === null || _j === void 0 ? void 0 : _j.entities;\n            if (coProduct) {\n              inputOutput = coProduct;\n              this.entityTypeLabel = 'Co-product';\n            } else if (finishProduct) {\n              inputOutput = finishProduct;\n              this.entityTypeLabel = 'Finished Product';\n            } else {\n              inputOutput = null;\n              this.entityTypeLabel = 'Product';\n            }\n            break;\n          }\n      }\n      if (inputOutput) {\n        this.entity = inputOutput;\n      } else {\n        this.entity = [];\n      }\n    }\n  }\n  ProductionLevelActivityConfigViewComponent.ɵfac = function ProductionLevelActivityConfigViewComponent_Factory(t) {\n    return new (t || ProductionLevelActivityConfigViewComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ProcessService), i0.ɵɵdirectiveInject(i3.StorageService));\n  };\n  ProductionLevelActivityConfigViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductionLevelActivityConfigViewComponent,\n    selectors: [[\"app-production-level-activity-config-view\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"labelValue\", \"\"], [1, \"border\", \"cardOverwrite\"], [1, \"cardTitle\", \"pb-2\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"row\", \"pt-3\"], [1, \"col-sm-4\"], [1, \"col-sm-8\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"border\", \"cardOverwrite\", \"mt-3\"], [4, \"ngFor\", \"ngForOf\"], [1, \"row\"], [1, \"col-sm-12\", \"fw-bold\"], [1, \"cardTitle\", \"mt-3\"], [1, \"col-sm-8\", \"fw-bold\"]],\n    template: function ProductionLevelActivityConfigViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ProductionLevelActivityConfigViewComponent_ng_container_0_Template, 13, 12, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, ProductionLevelActivityConfigViewComponent_ng_template_1_Template, 5, 6, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.activityConfig);\n      }\n    },\n    directives: [i4.NgIf, i5.MatCard, i4.NgTemplateOutlet, i4.NgForOf],\n    encapsulation: 2\n  });\n  return ProductionLevelActivityConfigViewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}