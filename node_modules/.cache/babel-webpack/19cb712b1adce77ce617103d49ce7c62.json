{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ActivityMappingComponent } from '../activity-mapping/activity-mapping.component';\nimport { ACTIVITY_FORM_TYPE_KEYID_ENUM } from '@carbon/enum/activity-form-enum';\nimport { PROCESS_INPUT_ENUM } from '@netzero/enum/process.enum';\nimport { MessageAlertTypeEnum, MessageAlertIconEnum } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@carbon/controller/process-map.controller\";\nimport * as i4 from \"@library/toastr-service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/expansion\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/radio\";\nimport * as i10 from \"@library/tsc-common\";\nconst _c0 = function (a0) {\n  return {\n    \"cursorDefault\": a0\n  };\n};\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_mat_expansion_panel_header_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-expansion-panel-header\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r5 = i0.ɵɵnextContext().$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(i0.ɵɵpureFunction1(3, _c0, !ctx_r6.canAddRecord(\"INPUT\", input_r5.keyID)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r5.name, \" \");\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_1_strong_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"strong\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const source_r9 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(source_r9.name);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_1_strong_1_Template, 2, 1, \"strong\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const source_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", source_r9.name);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const activity_r18 = i0.ɵɵnextContext(2).$implicit;\n      const source_r9 = i0.ɵɵnextContext().$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.selectActivityForms(activity_r18, source_r9.processInputOutputID, process_r1.id, \"INPUT\", 0);\n    });\n    i0.ɵɵtext(1, \" Select activity form \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 28);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_span_12_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const activity_r18 = i0.ɵɵnextContext(2).$implicit;\n      const source_r9 = i0.ɵɵnextContext().$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.selectActivityForms(activity_r18, source_r9.processInputOutputID, process_r1.id, \"INPUT\", activity_r18.mappedActivityFormID);\n    });\n    i0.ɵɵelementStart(1, \"button\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const activity_r18 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", activity_r18.mappedFormCount, \" forms selected \");\n  }\n}\nconst _c1 = function (a0, a1) {\n  return {\n    \"cbamBadge\": a0,\n    \"ghgBadge\": a1\n  };\n};\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelementStart(2, \"div\", 19);\n    i0.ɵɵelementStart(3, \"div\", 20);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"span\", 21);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 22);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 23);\n    i0.ɵɵelementStart(10, \"div\", 24);\n    i0.ɵɵtemplate(11, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_button_11_Template, 2, 0, \"button\", 25);\n    i0.ɵɵtemplate(12, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_span_12_Template, 3, 1, \"span\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r18 = i0.ɵɵnextContext().$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", activity_r18.name ? activity_r18.name : \"No need to required a map a form\", \"\\u00A0 \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c1, activity_r18.type[0].keyID == ctx_r19.ACTIVITY_FORM_TYPE_KEYID_ENUM.CBAM_FORM, activity_r18.type[0].keyID == ctx_r19.ACTIVITY_FORM_TYPE_KEYID_ENUM.GHG_FORM));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", activity_r18.type[0].name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(activity_r18.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", activity_r18.mappedFormCount <= 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r18.mappedFormCount > 0);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_ng_container_1_Template, 13, 9, \"ng-container\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r18 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r18.isVisible);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵelementStart(1, \"p\", 31);\n    i0.ɵɵtext(2, \"No form required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_div_6_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵelementStart(1, \"mat-radio-button\", 44);\n    i0.ɵɵlistener(\"change\", function ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_div_6_div_4_Template_mat_radio_button_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r41);\n      const subtype_r39 = restoredCtx.$implicit;\n      const source_r9 = i0.ɵɵnextContext(4).$implicit;\n      const ctx_r40 = i0.ɵɵnextContext(3);\n      return ctx_r40.checkSubtype(subtype_r39, source_r9);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const subtype_r39 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", subtype_r39.name)(\"checked\", subtype_r39.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", subtype_r39.name, \" \");\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 39);\n    i0.ɵɵelementStart(2, \"mat-radio-group\", 40);\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtemplate(4, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_div_6_div_4_Template, 3, 3, \"div\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const allocation_r35 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", allocation_r35.subtype);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-radio-button\", 35);\n    i0.ɵɵlistener(\"change\", function ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_Template_mat_radio_button_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r45);\n      const allocation_r35 = restoredCtx.$implicit;\n      const source_r9 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r44 = i0.ɵɵnextContext(3);\n      return ctx_r44.checkSubMeter(allocation_r35, source_r9);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 36);\n    i0.ɵɵelementStart(4, \"div\", 37);\n    i0.ɵɵelement(5, \"lib-message-alert\", 38);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_div_6_Template, 5, 1, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const allocation_r35 = ctx.$implicit;\n    const ctx_r34 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", allocation_r35.name)(\"checked\", allocation_r35.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", allocation_r35.name, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"contentInp\", allocation_r35.description);\n    i0.ɵɵproperty(\"messageAlertTypeInp\", ctx_r34.messageAlertTypeEnum.INFO)(\"messageAlertIconInp\", ctx_r34.messageAlertIconEnum.INFO_ICON);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", allocation_r35.subtype && allocation_r35.showSubtype == true);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 33);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 34);\n    i0.ɵɵelementStart(6, \"mat-radio-group\");\n    i0.ɵɵtemplate(7, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_div_7_Template, 7, 7, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const source_r9 = i0.ɵɵnextContext().$implicit;\n    const input_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", input_r5.name, \" consumption\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Select a method to track \", input_r5.name, \" consumed in this process\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", source_r9.allocations);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r55 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r55);\n      const activity_r49 = i0.ɵɵnextContext(2).$implicit;\n      const source_r9 = i0.ɵɵnextContext().$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r53 = i0.ɵɵnextContext();\n      return ctx_r53.selectActivityForms(activity_r49, source_r9.processInputOutputID, process_r1.id, \"INPUT\", 0);\n    });\n    i0.ɵɵtext(1, \" Select activity form \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r60 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 28);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_span_12_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r60);\n      const activity_r49 = i0.ɵɵnextContext(2).$implicit;\n      const source_r9 = i0.ɵɵnextContext().$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r58 = i0.ɵɵnextContext();\n      return ctx_r58.selectActivityForms(activity_r49, source_r9.processInputOutputID, process_r1.id, \"INPUT\", activity_r49.mappedActivityFormID);\n    });\n    i0.ɵɵelementStart(1, \"button\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const activity_r49 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", activity_r49.mappedFormCount, \" forms selected \");\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelementStart(2, \"div\", 19);\n    i0.ɵɵelementStart(3, \"div\", 20);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"span\", 21);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 22);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 23);\n    i0.ɵɵelementStart(10, \"div\", 24);\n    i0.ɵɵtemplate(11, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_button_11_Template, 2, 0, \"button\", 25);\n    i0.ɵɵtemplate(12, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_span_12_Template, 3, 1, \"span\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r49 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", activity_r49.name, \"\\u00A0 \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c1, activity_r49.type[0].name === \"CBAM form\", activity_r49.type[0].name !== \"CBAM form\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", activity_r49.type[0].name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(activity_r49.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", activity_r49.mappedFormCount == 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r49.mappedFormCount > 0);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_ng_container_1_Template, 13, 9, \"ng-container\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r49 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r49.afterShow);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_1_Template, 2, 1, \"div\", 13);\n    i0.ɵɵtemplate(2, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_2_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵtemplate(3, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_3_Template, 3, 0, \"div\", 14);\n    i0.ɵɵelementContainerStart(4);\n    i0.ɵɵtemplate(5, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_div_5_Template, 8, 3, \"div\", 15);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵtemplate(6, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_ng_container_6_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const source_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", source_r9.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", source_r9.activity);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", source_r9.activity.length === 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", source_r9.allocations.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", source_r9.activity);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-expansion-panel\", 11);\n    i0.ɵɵtemplate(2, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_mat_expansion_panel_header_2_Template, 2, 5, \"mat-expansion-panel-header\", 12);\n    i0.ɵɵtemplate(3, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_ng_container_3_Template, 7, 5, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const input_r5 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r3.canAddRecord(\"INPUT\", input_r5.keyID));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", input_r5.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", input_r5.source);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const source_r67 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", source_r67.name, \" \");\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r81 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r81);\n      const activity_r75 = i0.ɵɵnextContext(2).$implicit;\n      const source_r67 = i0.ɵɵnextContext(2).$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r79 = i0.ɵɵnextContext();\n      return ctx_r79.selectActivityForms(activity_r75, source_r67.processInputOutputID, process_r1.id, \"OUTPUT\", 0);\n    });\n    i0.ɵɵtext(1, \" Select activity form \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r86 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 28);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_span_12_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r86);\n      const activity_r75 = i0.ɵɵnextContext(2).$implicit;\n      const source_r67 = i0.ɵɵnextContext(2).$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r84 = i0.ɵɵnextContext();\n      return ctx_r84.selectActivityForms(activity_r75, source_r67.processInputOutputID, process_r1.id, \"OUTPUT\", activity_r75.mappedActivityFormID);\n    });\n    i0.ɵɵelementStart(1, \"button\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const activity_r75 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", activity_r75.mappedFormCount, \" forms selected \");\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelementStart(2, \"div\", 19);\n    i0.ɵɵelementStart(3, \"div\", 20);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"span\", 21);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 22);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 23);\n    i0.ɵɵelementStart(10, \"div\", 24);\n    i0.ɵɵtemplate(11, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_button_11_Template, 2, 0, \"button\", 25);\n    i0.ɵɵtemplate(12, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_span_12_Template, 3, 1, \"span\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r75 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", activity_r75.name, \"\\u00A0 \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c1, activity_r75.type[0].name === \"CBAM form\", activity_r75.type[0].name !== \"CBAM form\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", activity_r75.type[0].name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(activity_r75.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", activity_r75.mappedFormCount <= 0 && activity_r75.mappedActivityFormID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r75.mappedFormCount > 0);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_ng_container_1_Template, 13, 9, \"ng-container\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r75 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r75.isVisible);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_ng_container_1_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const source_r67 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", source_r67.activity);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵelementStart(1, \"p\", 31);\n    i0.ɵɵtext(2, \"No form required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_div_3_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r99 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵelementStart(1, \"mat-radio-button\", 44);\n    i0.ɵɵlistener(\"change\", function ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_div_3_div_4_Template_mat_radio_button_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r99);\n      const subtype_r97 = restoredCtx.$implicit;\n      const source_r67 = i0.ɵɵnextContext(4).$implicit;\n      const ctx_r98 = i0.ɵɵnextContext(3);\n      return ctx_r98.checkSubtype(subtype_r97, source_r67);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const subtype_r97 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", subtype_r97.name)(\"checked\", subtype_r97.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", subtype_r97.name, \" \");\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 39);\n    i0.ɵɵelementStart(2, \"mat-radio-group\", 40);\n    i0.ɵɵelementStart(3, \"div\", 41);\n    i0.ɵɵtemplate(4, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_div_3_div_4_Template, 3, 3, \"div\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const allocation_r93 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", allocation_r93.subtype);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r103 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-radio-button\", 35);\n    i0.ɵɵlistener(\"change\", function ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_Template_mat_radio_button_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r103);\n      const allocation_r93 = restoredCtx.$implicit;\n      const source_r67 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r102 = i0.ɵɵnextContext(3);\n      return ctx_r102.checkSubMeter(allocation_r93, source_r67);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_div_3_Template, 5, 1, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const allocation_r93 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", allocation_r93.name)(\"checked\", allocation_r93.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", allocation_r93.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", allocation_r93.subtype && allocation_r93.showSubtype == true);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 33);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 34);\n    i0.ɵɵelementStart(6, \"mat-radio-group\");\n    i0.ɵɵtemplate(7, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_div_7_Template, 4, 4, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const source_r67 = i0.ɵɵnextContext().$implicit;\n    const ctx_r71 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r71.input.name, \" consumption\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Select a method to track \", ctx_r71.input.name, \" consumed in this process\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", source_r67.allocations);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r112 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r112);\n      const activity_r106 = i0.ɵɵnextContext(2).$implicit;\n      const source_r67 = i0.ɵɵnextContext().$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r110 = i0.ɵɵnextContext();\n      return ctx_r110.selectActivityForms(activity_r106, source_r67.processInputOutputID, process_r1.id, \"INPUT\", 0);\n    });\n    i0.ɵɵtext(1, \" Select activity form \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r117 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 28);\n    i0.ɵɵlistener(\"click\", function ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_span_12_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r117);\n      const activity_r106 = i0.ɵɵnextContext(2).$implicit;\n      const source_r67 = i0.ɵɵnextContext().$implicit;\n      const process_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r115 = i0.ɵɵnextContext();\n      return ctx_r115.selectActivityForms(activity_r106, source_r67.processInputOutputID, process_r1.id, \"INPUT\", activity_r106.mappedActivityFormID);\n    });\n    i0.ɵɵelementStart(1, \"button\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const activity_r106 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", activity_r106.mappedFormCount, \" forms selected \");\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelementStart(2, \"div\", 19);\n    i0.ɵɵelementStart(3, \"div\", 20);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"span\", 21);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 22);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 23);\n    i0.ɵɵelementStart(10, \"div\", 24);\n    i0.ɵɵtemplate(11, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_button_11_Template, 2, 0, \"button\", 25);\n    i0.ɵɵtemplate(12, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_span_12_Template, 3, 1, \"span\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r106 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", activity_r106.name, \"\\u00A0 \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c1, activity_r106.type[0].name === \"CBAM form\", activity_r106.type[0].name !== \"CBAM form\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", activity_r106.type[0].name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(activity_r106.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", activity_r106.mappedFormCount == 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r106.mappedFormCount > 0);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_ng_container_1_Template, 13, 9, \"ng-container\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activity_r106 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activity_r106.afterShow);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_1_Template, 3, 1, \"div\", 13);\n    i0.ɵɵtemplate(2, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_2_Template, 2, 1, \"ng-container\", 17);\n    i0.ɵɵtemplate(3, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_3_Template, 3, 0, \"div\", 14);\n    i0.ɵɵelementContainerStart(4);\n    i0.ɵɵtemplate(5, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_div_5_Template, 8, 3, \"div\", 15);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵtemplate(6, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_ng_container_6_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const source_r67 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", source_r67.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", source_r67.activity && source_r67.activity.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", source_r67.activity.length === 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", source_r67.allocations.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", source_r67.activity);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 45);\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\", 46);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_ng_container_3_Template, 7, 5, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const output_r65 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(output_r65.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", output_r65.source);\n  }\n}\nfunction ProcessMapComponent_mat_expansion_panel_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\", 5);\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 6);\n    i0.ɵɵelementStart(5, \"div\", 7);\n    i0.ɵɵelementStart(6, \"strong\");\n    i0.ɵɵtext(7, \"Input\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-accordion\", 3);\n    i0.ɵɵtemplate(9, ProcessMapComponent_mat_expansion_panel_5_ng_container_9_Template, 4, 3, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 9);\n    i0.ɵɵelementStart(11, \"strong\");\n    i0.ɵɵtext(12, \"Output\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-accordion\", 3);\n    i0.ɵɵtemplate(14, ProcessMapComponent_mat_expansion_panel_5_mat_expansion_panel_14_Template, 4, 2, \"mat-expansion-panel\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const process_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Process Name - \", process_r1.name, \"\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", process_r1.input);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", process_r1.output);\n  }\n}\n// lib\nexport let ProcessMapComponent = /*#__PURE__*/(() => {\n  class ProcessMapComponent {\n    constructor(stroageService, dialog, processMappingController, toastrService, activatedRoute) {\n      this.stroageService = stroageService;\n      this.dialog = dialog;\n      this.processMappingController = processMappingController;\n      this.toastrService = toastrService;\n      this.activatedRoute = activatedRoute;\n      this.ACTIVITY_FORM_TYPE_KEYID_ENUM = ACTIVITY_FORM_TYPE_KEYID_ENUM;\n      this.isAllocation = false;\n      this.isSubMeter = false;\n      this.messageAlertTypeEnum = MessageAlertTypeEnum;\n      this.messageAlertIconEnum = MessageAlertIconEnum;\n      // k: any;\n      this.show = false;\n      this.afterShow = false;\n      this.finalResult = [];\n      this.selectedFormData = [];\n      this.allInputActivityMap = [];\n      this.count = 0;\n      this.entityTypeWithoutRecord = [PROCESS_INPUT_ENUM.RAW_MATERIAL, PROCESS_INPUT_ENUM.INTERMEDIATE_PRODUCT];\n    }\n    ngOnInit() {\n      this.currentOrgID = this.stroageService.getStorage('currentOrgID');\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams.runID) {\n          this.runID = queryParams.runID;\n          this.getProcess();\n        }\n      });\n    }\n    getAllInput() {\n      this.process.forEach(entry => {\n        entry.output.forEach(outputItem => {\n          outputItem.source.forEach(sourceItem => {\n            sourceItem.activity.forEach(activityItem => {\n              this.allInputActivityMap.push({\n                processInputOutputID1: sourceItem.processInputOutputID,\n                id: activityItem.id,\n                isActivityMap: activityItem.mappedFormCount > 0 ? true : false,\n                sourceName: sourceItem.name,\n                sourceKeyID: sourceItem.keyID,\n                activityName: activityItem.name,\n                isVisible: activityItem.isVisible,\n                typeKeyID: 'OUTPUT'\n              });\n              if (activityItem.mappedFormCount) {\n                this.selectedFormData.push({\n                  processInputOutputID: sourceItem.processInputOutputID,\n                  activityID: activityItem.id,\n                  activityFormID: activityItem.mappedActivityFormID,\n                  typeKeyID: 'OUTPUT'\n                });\n              }\n            });\n          });\n        });\n        entry.input.forEach(inputItem => {\n          inputItem.source.forEach(sourceItem => {\n            if (sourceItem.allocations.length > 0) {\n              this.count++;\n            }\n            sourceItem.activity.forEach(activityItem => {\n              if (activityItem.mappedFormCount) {\n                this.selectedFormData.push({\n                  processInputOutputID: sourceItem.processInputOutputID,\n                  activityID: activityItem.id,\n                  activityFormID: activityItem.mappedActivityFormID,\n                  typeKeyID: 'INPUT',\n                  isVisible: activityItem.isVisible\n                });\n              }\n              if (activityItem.isVisible == true) {\n                this.allInputActivityMap.push({\n                  processInputOutputID1: sourceItem.processInputOutputID,\n                  id: activityItem.id,\n                  isActivityMap: activityItem.mappedFormCount > 0 ? true : false,\n                  isVisible: activityItem.isVisible,\n                  sourceName: sourceItem.name,\n                  sourceKeyID: sourceItem.keyID,\n                  activityName: activityItem.name,\n                  typeKeyID: 'INPUT'\n                });\n              } else {\n                this.allInputActivityMap.push({\n                  processInputOutputID1: sourceItem.processInputOutputID,\n                  id: activityItem.id,\n                  isActivityMap: activityItem.mappedFormCount > 0 ? true : false,\n                  isVisible: activityItem.isVisible,\n                  sourceName: sourceItem.name,\n                  sourceKeyID: sourceItem.keyID,\n                  activityName: activityItem.name,\n                  typeKeyID: 'INPUT'\n                });\n                if (sourceItem.allocationMethodStdID != undefined) {\n                  sourceItem.allocations.forEach(allocation => {\n                    if (allocation.id == sourceItem.allocationMethodStdID[0]) {\n                      allocation.isSelected = true;\n                      this.checkSubMeter(allocation, sourceItem, 'update');\n                    }\n                    allocation.subtype.forEach(subType => {\n                      if (sourceItem.allocationMethodStdID.length > 1) {\n                        if (subType.id == sourceItem.allocationMethodStdID[1]) {\n                          subType.isSelected = true;\n                          this.checkSubtype(subType, sourceItem);\n                        }\n                      }\n                    });\n                  });\n                }\n              }\n            });\n          });\n        });\n      });\n    }\n    getProcess() {\n      this.processMappingController.getProcessInput(this.currentOrgID, this.runID).subscribe(res => {\n        this.process = res;\n        this.getAllInput();\n      });\n    }\n    checkSubMeter(allocation, source, action) {\n      let name = allocation.name;\n      this.isSubMeter = allocation.name === 'Process sub-metering';\n      allocation.showSubtype = this.isSubMeter;\n      // Reset showSubtype for other allocations\n      source.allocations.forEach(item => {\n        if (item !== allocation) {\n          item.showSubtype = false;\n        }\n      });\n      let activity = source.activity;\n      activity.forEach(element => {\n        if (!element.isVisible) {\n          this.allInputActivityMap.forEach(input => {\n            if (input.processInputOutputID1 === source.processInputOutputID && element.id == input.id) {\n              if (name === 'Allocation method') {\n                if (element.type[0].keyID == 'ghg-form') {\n                  input.allocationID = allocation.id;\n                  input.allocationSubTypeID = null;\n                  element.formType = 'GHG form';\n                  element.afterShow = true;\n                  element.isShowSubType = true;\n                  element.isShowFormMapping = true;\n                } else {\n                  input.allocationID = null;\n                  input.allocationSubTypeID = null;\n                  element.isShowFormMapping = true;\n                  element.afterShow = false;\n                }\n                this.selectedFormData.push({\n                  id: element.id,\n                  allocationMethodID: allocation.id,\n                  processInputOutputID: input.processInputOutputID1,\n                  typeKeyID: 'INPUT'\n                });\n                if (action !== 'update') {\n                  this.selectedFormData = this.selectedFormData.filter(data => !(data.processInputOutputID == source.processInputOutputID && data.activityID == element.id));\n                  element.mappedFormCount = 0;\n                  input.isActivityMap = false;\n                }\n              } else if (name === 'Process sub-metering') {\n                if (element.type[0].keyID == 'cbam-form') {\n                  input.allocationID = allocation.id;\n                  input.allocationSubTypeID = null;\n                  element.formType = 'CBAM form';\n                  element.afterShow = true;\n                  element.isShowSubType = false;\n                } else {\n                  input.allocationID = null;\n                  input.allocationSubTypeID = null;\n                  element.afterShow = false;\n                  element.isShowSubType = false;\n                }\n                if (action !== 'update') {\n                  this.selectedFormData = this.selectedFormData.filter(data => !(data.processInputOutputID == source.processInputOutputID && data.activityID == element.id));\n                  element.mappedFormCount = 0;\n                  input.isActivityMap = false;\n                }\n              }\n            }\n          });\n        }\n      });\n    }\n    checkSubtype(subtype, source) {\n      this.allInputActivityMap.forEach(input => {\n        if (input.processInputOutputID1 === source.processInputOutputID && input.allocationID) {\n          input.allocationSubTypeID = subtype.id;\n        }\n      });\n      source.activity.forEach(element => {\n        if (!element.isVisible) {\n          if (element.afterShow) {\n            element.isShowSubType = true;\n          } else {\n            element.isShowSubType = false;\n          }\n        }\n      });\n    }\n    selectActivityForms(activity, processInputOutputID, processID, type, mappedActivityArray) {\n      try {\n        activity.isSelected = true;\n        const {\n          id,\n          keyID,\n          name\n        } = activity;\n        const activityKeyID = {\n          id,\n          keyID,\n          name\n        };\n        const existingDataIndex = this.selectedFormData.findIndex(formData => formData.activityID === activity.id && formData.processInputOutputID === processInputOutputID && formData.typeKeyID == type);\n        if (existingDataIndex !== -1) {\n          // If data already exists, open dialog with pre-selected data\n          let dialogRef = this.dialog.open(ActivityMappingComponent, {\n            data: {\n              activityID: activityKeyID,\n              isActivitySelection: true,\n              processID: processID,\n              activityFormID: this.selectedFormData[existingDataIndex].activityFormID\n            },\n            minWidth: '600px',\n            height: \"100%\",\n            position: {\n              right: \"-2px\",\n              top: \"0px\"\n            }\n          });\n          dialogRef.afterClosed().subscribe(result => {\n            // Update the existing data with new selection and close time\n            if (result.length) {\n              const newSelectedFormData = {\n                activityID: activity.id,\n                processInputOutputID: processInputOutputID,\n                activityFormID: result\n              };\n              this.selectedFormData[existingDataIndex] = newSelectedFormData;\n              this.selectedFormData[existingDataIndex].typeKeyID = type;\n              const existingDataIndex1 = this.allInputActivityMap.findIndex(formData => formData.id === activity.id && formData.processInputOutputID1 === processInputOutputID);\n              this.allInputActivityMap[existingDataIndex1].isActivityMap = true;\n              activity.mappedFormCount = result.length;\n            } else {\n              this.selectedFormData.splice(existingDataIndex, 1);\n              const existingDataIndex1 = this.allInputActivityMap.findIndex(formData => formData.id === activity.id && formData.processInputOutputID1 === processInputOutputID && formData.typeKeyID == type);\n              this.allInputActivityMap[existingDataIndex1].isActivityMap = false;\n              activity.mappedFormCount = 0;\n            }\n          });\n        } else {\n          let activityMapped = [];\n          if (mappedActivityArray.length >= 0) {\n            activityMapped = mappedActivityArray;\n          }\n          let dialogRef = this.dialog.open(ActivityMappingComponent, {\n            data: {\n              activityID: activityKeyID,\n              isActivitySelection: true,\n              processID: processID,\n              activityFormID: activityMapped\n            },\n            minWidth: '600px',\n            height: \"100%\",\n            position: {\n              right: \"-2px\",\n              top: \"0px\"\n            }\n          });\n          dialogRef.afterClosed().subscribe(result => {\n            if (result.length) {\n              this.selectedFormData.push({\n                activityID: activity.id,\n                processInputOutputID: processInputOutputID,\n                activityFormID: result,\n                typeKeyID: type\n              });\n              const existingDataIndex1 = this.allInputActivityMap.findIndex(formData => formData.id === activity.id && formData.processInputOutputID1 === processInputOutputID && formData.typeKeyID == type);\n              this.allInputActivityMap[existingDataIndex1].isActivityMap = true;\n              activity.mappedFormCount = result.length;\n            } else {\n              const existingDataIndex1 = this.allInputActivityMap.findIndex(formData => formData.id === activity.id && formData.processInputOutputID1 === processInputOutputID && formData.typeKeyID == type);\n              this.allInputActivityMap[existingDataIndex1].isActivityMap = false;\n            }\n          });\n        }\n      } catch (error) {\n        console.log(error, \"error\");\n      }\n    }\n    onSubmit(runStatus) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // console.log('selected form data', this.selectedFormData, 'process map', this.allInputActivityMap)\n        this.mappingDataWithActivityForm();\n        let unMappedActivity = [];\n        let isChecked = this.isFormValid(unMappedActivity);\n        console.log('isChecked', isChecked, 'unMapped activity', unMappedActivity);\n        if (isChecked == false) {\n          this.toastrService.error('You have not mapped all valid activites');\n          return false;\n        }\n        const groupedData = this.selectedFormData.reduce((result, obj) => {\n          const existingEntry = result.find(entry => entry.processInputOutputID === obj.processInputOutputID && entry.typeKeyID == obj.typeKeyID);\n          if (!existingEntry) {\n            // Create a new entry\n            const newDataEntry = {\n              typeKeyID: obj.typeKeyID,\n              processInputOutputID: obj.processInputOutputID,\n              activityFormMap: [{\n                activityID: obj.activityID,\n                activityFormID: obj.activityFormID\n              }]\n            };\n            // Add allocationMethodID if present\n            if (obj.allocationMethodID) {\n              newDataEntry.allocationMethodID = obj.allocationMethodID;\n            }\n            result.push(newDataEntry);\n          } else {\n            // Add activityID and activityFormIDs to existing entry's activityFormMap\n            existingEntry.activityFormMap.push({\n              activityID: obj.activityID,\n              activityFormID: obj.activityFormID\n            });\n            // Add allocationMethodID if present\n            if (obj.allocationMethodID) {\n              if (!Array.isArray(obj.allocationMethodID)) {\n                obj.allocationMethodID = [obj.allocationMethodID];\n              }\n              existingEntry.allocationMethodID = obj.allocationMethodID;\n            }\n          }\n          return result;\n        }, []);\n        if (isChecked) {\n          let Finalresult = {\n            runStatus: runStatus,\n            configMappedActivites: []\n          };\n          Finalresult.configMappedActivites = groupedData;\n          let promise = this.processMappingController.saveProcessInputByRunID(this.currentOrgID, this.runID, groupedData).toPromise();\n          try {\n            yield promise;\n            return true;\n          } catch (error) {\n            console.log('error in configureData - ', error);\n            return false;\n          }\n        } else {\n          this.toastrService.error('You have not mapped all valid activites');\n          return false;\n          // let errorMessage = 'You have not mapped the following activities:\\n';\n          // unMappedActivity.forEach((form, index) => {\n          //     console.log('form', form);\n          //     errorMessage += `\\n${index + 1}. Source: ${form.source}, Activity: ${form.activity}`;\n          // });\n          // this.toastrService.openToast(ToastrTitle.ERROR, errorMessage, ToastrColor.ERROR);\n          // return false;\n        }\n      });\n    }\n\n    mappingDataWithActivityForm() {\n      let allocation, subAllocation, index;\n      for (let i = 0; i < this.selectedFormData.length; i++) {\n        const {\n          activityID,\n          processInputOutputID\n        } = this.selectedFormData[i];\n        for (let j = 0; j < this.allInputActivityMap.length; j++) {\n          const {\n            processInputOutputID1,\n            id,\n            allocationID,\n            allocationSubTypeID\n          } = this.allInputActivityMap[j];\n          if (processInputOutputID === processInputOutputID1 && this.selectedFormData[i].typeKeyID == 'INPUT') {\n            allocation = allocationID;\n            subAllocation = allocationSubTypeID;\n            index = i;\n            let allocationArray = [];\n            if (allocation !== null && allocation != undefined) {\n              allocationArray.push(allocation);\n            }\n            if (subAllocation !== null && subAllocation != undefined) {\n              allocationArray.push(subAllocation);\n            }\n            if (allocationArray.length > 0) {\n              this.selectedFormData[index].allocationMethodID = allocationArray;\n            }\n          }\n        }\n      }\n    }\n    isFormValid(unMappedActivity) {\n      let isChecked = true;\n      for (const obj2 of this.allInputActivityMap) {\n        if (obj2.isActivityMap) {\n          const matchingObjects = this.selectedFormData.filter(obj1 => obj1.processInputOutputID === obj2.processInputOutputID1 && obj1.activityID === obj2.id && obj2.typeKeyID == obj1.typeKeyID);\n          if (matchingObjects.length <= 0) {\n            console.log('matching object error', obj2);\n            isChecked = false;\n            return;\n          }\n        } else {\n          if (obj2.isVisible) {\n            console.log('matching object error in true case', obj2);\n            unMappedActivity.push({\n              source: obj2.sourceName,\n              activity: obj2.activityName\n            });\n            isChecked = false;\n          }\n          // const hasAllocationMethodID = this.allInputActivityMap.some(obj1 => {\n          //     return obj1.processInputOutputID1 === obj2.processInputOutputID1 && obj1.allocationID !== null;\n          // });\n          let falseActivity = [];\n          let allocationNotFilled = false;\n          this.allInputActivityMap.forEach(data => {\n            if (data.processInputOutputID1 == obj2.processInputOutputID1 && data.typeKeyID == obj2.typeKeyID && data.isVisible == false) {\n              falseActivity.push(data);\n            }\n          });\n          falseActivity.forEach(activity => {\n            if (activity.allocationID) {\n              allocationNotFilled = true;\n              if (activity.sourceKeyID == 'chp' || activity.sourceKeyID == 'non-chp') {} else {\n                if (activity.isActivityMap == false) {\n                  unMappedActivity.push({\n                    source: obj2.sourceName,\n                    activity: obj2.activityName\n                  });\n                  console.log('check false activity in allocation ', activity);\n                  isChecked = false;\n                }\n              }\n            }\n          });\n          // if (!hasAllocationMethodID) {\n          //     console.log('matching object error in false case', obj2)\n          //     unMappedActivity.push({\n          //         source: obj2.sourceName,\n          //         activity: obj2.activityName\n          //     })\n          //     isChecked = false;\n          // }\n        }\n      }\n\n      if (isChecked == true) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    onSaveDraft(runStatus) {\n      this.mappingDataWithActivityForm();\n      let unMappedActivity;\n      let isChecked = this.isFormValid(unMappedActivity);\n      const groupedData = this.selectedFormData.reduce((result, obj) => {\n        const existingEntry = result.find(entry => entry.processInputOutputID === obj.processInputOutputID);\n        if (!existingEntry) {\n          // Create a new entry\n          const newDataEntry = {\n            typeKeyID: obj.typeKeyID,\n            processInputOutputID: obj.processInputOutputID,\n            activityFormMap: [{\n              activityID: obj.activityID,\n              activityFormID: obj.activityFormID\n            }]\n          };\n          // Add allocationMethodID if present\n          if (obj.allocationMethodID) {\n            newDataEntry.allocationMethodID = obj.allocationMethodID;\n          }\n          result.push(newDataEntry);\n        } else {\n          // Add activityID and activityFormIDs to existing entry's activityFormMap\n          existingEntry.activityFormMap.push({\n            activityID: obj.activityID,\n            activityFormID: obj.activityFormID\n          });\n          // Add allocationMethodID if present\n          if (obj.allocationMethodID) {\n            existingEntry.allocationMethodID = obj.allocationMethodID;\n          }\n        }\n        return result;\n      }, []);\n      let returnValue;\n      this.processMappingController.saveProcessInputByRunID(this.currentOrgID, this.runID, groupedData).subscribe(res => {\n        returnValue = true;\n      }, error => {\n        returnValue = false;\n      });\n      if (returnValue) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    canAddRecord(type, typeKeyID) {\n      if (type == 'INPUT') {\n        return !this.entityTypeWithoutRecord.includes(typeKeyID);\n      } else {\n        return true;\n      }\n    }\n  }\n  ProcessMapComponent.ɵfac = function ProcessMapComponent_Factory(t) {\n    return new (t || ProcessMapComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.ProcessMappingController), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n  };\n  ProcessMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProcessMapComponent,\n    selectors: [[\"app-process-map\"]],\n    decls: 6,\n    vars: 1,\n    consts: [[\"href\", \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css\", \"rel\", \"stylesheet\"], [1, \"border\", \"cardOverwrite\"], [1, \"cardTitle\", \"pb-3\"], [\"multi\", \"true\"], [\"class\", \"cardOverwrite matAccordion mb-2\", \"expanded\", \"false\", 4, \"ngFor\", \"ngForOf\"], [\"expanded\", \"false\", 1, \"cardOverwrite\", \"matAccordion\", \"mb-2\"], [1, \"cardOverwrite\", \"border\", \"card-body\", \"bg-light\"], [1, \"text-secondary\", \"fs-5\", \"pb-3\"], [4, \"ngFor\", \"ngForOf\"], [1, \"text-secondary\", \"fs-5\", \"pb-3\", \"pt-3\"], [\"class\", \"cardOverwrite mb-2\", \"expanded\", \"false\", 4, \"ngFor\", \"ngForOf\"], [\"expanded\", \"false\", 1, \"cardOverwrite\", \"mb-2\", 3, \"disabled\"], [3, \"class\", 4, \"ngIf\"], [\"class\", \"text-secondary bg-light p-2 rounded\", 4, \"ngIf\"], [\"class\", \"mt-2 mb-2\", 4, \"ngIf\"], [\"class\", \"ps-3 pt-3\", 4, \"ngIf\"], [1, \"text-secondary\", \"bg-light\", \"p-2\", \"rounded\"], [4, \"ngIf\"], [1, \"activityContainer\"], [1, \"activityContainerLeft\"], [1, \"activityTitle\"], [1, \"badge\", \"rounded-pill\", 3, \"ngClass\"], [1, \"activitySubtitle\"], [1, \"activityContainerRight\"], [1, \"activityContainerRightInner\"], [\"class\", \"btn btn-sm btn-link\", 3, \"click\", 4, \"ngIf\"], [3, \"click\", 4, \"ngIf\"], [1, \"btn\", \"btn-sm\", \"btn-link\", 3, \"click\"], [3, \"click\"], [1, \"btn\", \"btn-link\"], [1, \"mt-2\", \"mb-2\"], [1, \"pt-2\", \"ps-1\"], [1, \"ps-3\", \"pt-3\"], [1, \"text-muted\", \"pt-1\"], [1, \"pt-3\"], [1, \"pt-2\", \"pb-3\", 3, \"value\", \"checked\", \"change\"], [1, \"row\"], [1, \"col-sm-10\", \"pb-3\"], [3, \"messageAlertTypeInp\", \"messageAlertIconInp\", \"contentInp\"], [1, \"ps-3\"], [1, \"pt-1\"], [1, \"ps-3\", \"text-muted\"], [\"class\", \"fs-6\", 4, \"ngFor\", \"ngForOf\"], [1, \"fs-6\"], [\"type\", \"radio\", \"name\", \"subtype.name\", 1, \"subType\", 3, \"value\", \"checked\", \"change\"], [\"expanded\", \"false\", 1, \"cardOverwrite\", \"mb-2\"], [\"expanded\", \"false\"]],\n    template: function ProcessMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"link\", 0);\n        i0.ɵɵelementStart(1, \"mat-card\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3, \" 3. Configure data collection \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-accordion\", 3);\n        i0.ɵɵtemplate(5, ProcessMapComponent_mat_expansion_panel_5_Template, 15, 3, \"mat-expansion-panel\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.process);\n      }\n    },\n    directives: [i6.MatCard, i7.MatAccordion, i8.NgForOf, i7.MatExpansionPanel, i7.MatExpansionPanelHeader, i8.NgIf, i8.NgClass, i9.MatRadioGroup, i9.MatRadioButton, i10.MessageAlertComponent],\n    styles: [\".activityContainer[_ngcontent-%COMP%]{width:100%;margin:0 auto;padding:20px;display:flex;align-items:center}.activityContainerLeft[_ngcontent-%COMP%]{flex:1}.activityContainerRight[_ngcontent-%COMP%]{flex:1;display:flex;justify-content:flex-end}.activityContainerRightInner[_ngcontent-%COMP%]{display:flex;align-items:center}.activityTitle[_ngcontent-%COMP%]{color:gray;text-transform:capitalize;font-size:14px;font-weight:700}.activitySubtitle[_ngcontent-%COMP%]{color:gray;font-size:12px;font-weight:200;text-transform:none}.matAccordion[_ngcontent-%COMP%]{box-shadow:none!important;background:whitesmoke;border-radius:16px!important}.subType[_ngcontent-%COMP%]{margin:5px}.cursor-pointer[_ngcontent-%COMP%]{cursor:pointer}\"]\n  });\n  return ProcessMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}