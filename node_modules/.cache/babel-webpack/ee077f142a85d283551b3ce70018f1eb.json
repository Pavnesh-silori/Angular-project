{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { DaterangepickerDirective } from 'ngx-daterangepicker-material';\nimport { isEqual } from 'lodash';\nimport * as moment from 'moment';\nimport { DATE_CONSTANT } from '@library/date';\nimport { Frequency } from '@library/tsc-common';\nimport { MaterialFormFieldAppearance, MessageAlertIconEnum, MessageAlertTypeEnum } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/date\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@carbon/controller/frequency.controller\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/slide-toggle\";\nimport * as i7 from \"@library/tsc-common\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/checkbox\";\nimport * as i12 from \"@angular/material/input\";\nimport * as i13 from \"@angular/material/datepicker\";\nimport * as i14 from \"@angular/material/core\";\nconst _c0 = [\"filterChild\"];\nconst _c1 = [\"startDatePicker\"];\nconst _c2 = [\"endDatePicker\"];\nfunction SchedulerWorkflowComponent_mat_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignee_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", assignee_r12.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", assignee_r12.firstName, \" \", assignee_r12.lastName, \" \");\n  }\n}\nfunction SchedulerWorkflowComponent_mat_option_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const approver_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", approver_r13.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", approver_r13.firstName, \" \", approver_r13.lastName, \" \");\n  }\n}\nfunction SchedulerWorkflowComponent_mat_error_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Enter how frequently you want this data to be filled \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SchedulerWorkflowComponent_mat_error_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" This field can not be more than \", ctx_r3.maxFrequencyValue, \" \", ctx_r3.frequencyType, \" \");\n  }\n}\nfunction SchedulerWorkflowComponent_mat_error_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This field can not be negative \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SchedulerWorkflowComponent_mat_option_59_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 44);\n    i0.ɵɵlistener(\"click\", function SchedulerWorkflowComponent_mat_option_59_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const frequencies_r14 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.setMaxFrequency(frequencies_r14[\"frequencyKeyID\"]);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const frequencies_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", frequencies_r14[\"frequencyID\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, frequencies_r14[\"frequencyLabel\"]), \" \");\n  }\n}\nfunction SchedulerWorkflowComponent_mat_error_74_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Select a start date \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SchedulerWorkflowComponent_mat_error_75_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Start date cannot be after the end date \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SchedulerWorkflowComponent_mat_error_93_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Select an end date \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SchedulerWorkflowComponent_mat_error_94_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" End date can not be before the start date \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c3 = function (a0) {\n  return {\n    \"text-secondary\": a0\n  };\n};\n// /tsc-library/\nexport let SchedulerWorkflowComponent = /*#__PURE__*/(() => {\n  class SchedulerWorkflowComponent {\n    constructor(dateService, formBuilder, storageService, frequencyController) {\n      this.dateService = dateService;\n      this.formBuilder = formBuilder;\n      this.storageService = storageService;\n      this.frequencyController = frequencyController;\n      this.Frequency = Frequency;\n      this.messageAlertTypeEnum = MessageAlertTypeEnum;\n      this.messageAlertIconEnum = MessageAlertIconEnum;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.isSlideToggleChecked = true;\n      this.isReminderChecked = false;\n      this.isApproved = true;\n      this.assigneData = [];\n      this.reportConfigID = null;\n      this.reportConfigIntervalID = null;\n      this.configID = null;\n      this.configIntervalID = null;\n      this.frequency = [];\n      this.frequencyType = 'days';\n      this.today = new Date();\n      this.assignee = [];\n      this.approver = [];\n      this.emitFilter = new EventEmitter();\n      this.enableWorkflowFC = new FormControl(false);\n      this.isEqual = new EventEmitter();\n      this.isUpdate = false;\n      this.disabled = false;\n      this.endScheduleFC = new FormControl(true, Validators.required);\n      this.maxDays = moment(new Date()).endOf('year').dayOfYear();\n      this.maxFrequencyValue = this.maxDays;\n      this.errorHandling = (control, error) => {\n        return this.schedulerFG.get(control).hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.schedulerFGInit();\n      this.getFrequency();\n    }\n    toggleReminder() {\n      if (this.isReminderSetAC.value) {\n        this.disabled = false;\n        this.schedulerAC.enable();\n        this.endScheduleFC.enable({\n          emitEvent: false\n        });\n        this.endScheduleFC.value ? this.endDateAC.disable() : this.endDateAC.enable();\n      } else {\n        this.disabled = true;\n        this.schedulerAC.disable();\n        this.endScheduleFC.disable({\n          emitEvent: false\n        });\n      }\n    }\n    toggleWorkflowStatus(value) {\n      this.enableWorkflowFC.patchValue(value);\n    }\n    formatDate(date, control) {\n      let formatted = moment(date).format(\"YYYY-MM-DD\");\n      this.schedulerAC.get(control).patchValue(formatted);\n    }\n    schedulerFGInit() {\n      this.schedulerFG = this.formBuilder.group({\n        workflow: this.formBuilder.group({\n          workflowEnabled: [false],\n          activityConfigAssignee: this.formBuilder.group({\n            assigneeID: [[], Validators.required]\n          }),\n          activityConfigApprover: this.formBuilder.group({\n            approverID: [[]]\n          }),\n          activityConfigWorkflow: this.formBuilder.group({\n            autoApprove: [true, Validators.required]\n          }),\n          isReminderSet: [false, Validators.required]\n        }),\n        scheduler: this.formBuilder.group({\n          reminderEnabled: [false],\n          frequencyOffset: [, [Validators.required, Validators.min(0), Validators.max(this.maxFrequencyValue)]],\n          frequencyID: [, Validators.required],\n          startDate: [, Validators.required],\n          endDate: [, Validators.required]\n        })\n      });\n      this.formGroupInitStateAndSubscriptions();\n    }\n    get autoApproveAC() {\n      return this.workflowAC.get('activityConfigWorkflow.autoApprove');\n    }\n    get approverAC() {\n      return this.workflowAC.get('activityConfigApprover.approverID');\n    }\n    get isReminderSetAC() {\n      return this.schedulerFG.get('workflow.isReminderSet');\n    }\n    get workflowAC() {\n      return this.schedulerFG.get('workflow');\n    }\n    get schedulerAC() {\n      return this.schedulerFG.get('scheduler');\n    }\n    get startDateAC() {\n      return this.schedulerAC.get('startDate');\n    }\n    get endDateAC() {\n      return this.schedulerAC.get('endDate');\n    }\n    checkAutoApprove() {\n      this.autoApproveAC.value ? this.approverAC.disable() : this.approverAC.enable();\n    }\n    formGroupInitStateAndSubscriptions() {\n      this.schedulerFG.disable();\n      this.toggleReminder();\n      this.enableWorkflowFC.valueChanges.subscribe(status => {\n        if (status) {\n          this.schedulerFG.enable();\n          this.checkAutoApprove();\n          this.toggleReminder();\n        } else {\n          this.schedulerFG.disable({\n            emitEvent: false\n          });\n          this.endScheduleFC.disable({\n            emitEvent: false\n          });\n        }\n      });\n      this.autoApproveAC.valueChanges.subscribe(autoApprove => autoApprove ? this.approverAC.disable() : this.approverAC.enable());\n      this.isReminderSetAC.valueChanges.subscribe(() => {\n        this.toggleReminder();\n      });\n      this.endScheduleFC.valueChanges.subscribe(isEnding => {\n        if (isEnding) {\n          this.disabled = true;\n          this.schedulerAC.get('endDate').disable();\n        } else {\n          this.disabled = false;\n          this.schedulerAC.get('endDate').enable();\n        }\n      });\n    }\n    isControlDisabled(control) {\n      return this.schedulerAC.get(control).disabled;\n    }\n    patchWorkflow(isWorkflowEnabled, workflow, isSchedulerEnabled, scheduler) {\n      var _a, _b, _c;\n      this.isUpdate = true;\n      this.enableWorkflowFC.patchValue(isWorkflowEnabled);\n      if (isWorkflowEnabled && workflow != null) {\n        let activityConfigAssignee = workflow['activityConfigAssignee'];\n        let activityConfigApprover = workflow['activityConfigApprover'];\n        let activityConfigWorkflow = workflow['activityConfigWorkflow'];\n        this.workflowAC.patchValue({\n          activityConfigAssignee: {\n            assigneeID: (_a = activityConfigAssignee['assigneeID']) !== null && _a !== void 0 ? _a : []\n          },\n          activityConfigApprover: {\n            approverID: (_b = activityConfigApprover['approverID']) !== null && _b !== void 0 ? _b : []\n          },\n          activityConfigWorkflow: {\n            autoApprove: (_c = activityConfigWorkflow['autoApprove']) !== null && _c !== void 0 ? _c : []\n          }\n        });\n      }\n      ;\n      this.isReminderSetAC.patchValue(isSchedulerEnabled);\n      if (isSchedulerEnabled && scheduler != null) {\n        this.schedulerAC.patchValue({\n          frequencyOffset: scheduler['frequencyOffset'],\n          frequencyID: scheduler['frequencyID'],\n          startDate: scheduler['startDate']\n        });\n        if (scheduler['endDate'] == DATE_CONSTANT.MAX_DATE_YYYY_MM_DD) {\n          this.endScheduleFC.patchValue(true);\n        } else {\n          this.endScheduleFC.patchValue(false);\n          this.schedulerAC.patchValue({\n            endDate: scheduler['endDate']\n          });\n        }\n      }\n      this.isEqual.next(true);\n      this.initialObject = this.schedulerFG.getRawValue();\n      this.schedulerFG.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.schedulerFG.getRawValue()));\n      });\n      this.enableWorkflowFC.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(isWorkflowEnabled, this.enableWorkflowFC.value));\n      });\n    }\n    setMaxFrequency(frequencyKeyID) {\n      switch (frequencyKeyID) {\n        case Frequency.DAILY:\n          this.maxFrequencyValue = this.maxDays;\n          this.frequencyType = 'days';\n          break;\n        case Frequency.MONTHLY:\n          this.maxFrequencyValue = 12;\n          this.frequencyType = 'months';\n          break;\n        case Frequency.YEARLY:\n          this.maxFrequencyValue = 1;\n          this.frequencyType = 'year';\n          break;\n        default:\n          console.log('undefined case encountered -', frequencyKeyID);\n      }\n    }\n    getFrequency() {\n      this.frequencyController.getAllFrequency().subscribe(frequencyRes => {\n        this.frequency = frequencyRes;\n        if (!this.isUpdate) {\n          let defaultFrequencyID = this.frequency.find(frequency => frequency['frequencyKeyID'] == Frequency.DAILY)['frequencyID'];\n          this.schedulerAC.get('frequencyID').patchValue(defaultFrequencyID);\n        }\n      }, error => console.log('error in getFrequency -', error));\n    }\n    takeFocusAway(durationField) {\n      this.durationField = document.getElementById(durationField);\n      this.durationField.classList.remove('mat-focused', 'mat-form-field-should-float');\n    }\n    isValidForm() {\n      if (this.schedulerFG.invalid) {\n        this.schedulerFG.markAllAsTouched();\n        console.log('invalid form -', this.schedulerFG);\n        return false;\n      }\n      return true;\n    }\n  }\n  SchedulerWorkflowComponent.ɵfac = function SchedulerWorkflowComponent_Factory(t) {\n    return new (t || SchedulerWorkflowComponent)(i0.ɵɵdirectiveInject(i1.DateService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.FrequencyController));\n  };\n  SchedulerWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SchedulerWorkflowComponent,\n    selectors: [[\"app-scheduler-workflow\"]],\n    viewQuery: function SchedulerWorkflowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(DaterangepickerDirective, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pickerDirective = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startDatePicker = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endDatePicker = _t.first);\n      }\n    },\n    inputs: {\n      assignee: \"assignee\",\n      approver: \"approver\"\n    },\n    outputs: {\n      emitFilter: \"emitFilter\",\n      isEqual: \"isEqual\"\n    },\n    decls: 95,\n    vars: 41,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"content\"], [1, \"cardTitle\", \"pb-2\"], [1, \"row\"], [1, \"col-sm-7\"], [3, \"formControl\", \"checked\", \"change\"], [1, \"cardTitle\"], [1, \"col-sm-7\", \"my-2\"], [\"contentInp\", \"Establishing a workflow is mandatory, while setting a reminder is optional.\", 3, \"messageAlertTypeInp\", \"messageAlertIconInp\"], [1, \"mt-2\"], [3, \"formGroup\"], [\"formGroupName\", \"workflow\"], [\"formGroupName\", \"activityConfigAssignee\"], [1, \"col-sm-7\", \"my-1\"], [1, \"radioBtnGroupLabel\", \"ps-1\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"assigneeID\", \"multiple\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-sm-5\"], [\"formGroupName\", \"activityConfigWorkflow\"], [\"formControlName\", \"autoApprove\", 1, \"float-end\"], [\"formGroupName\", \"activityConfigApprover\"], [\"formControlName\", \"approverID\", \"multiple\", \"\", 3, \"disabled\"], [\"formControlName\", \"isReminderSet\"], [\"formGroupName\", \"scheduler\"], [1, \"pt-2\", \"24\"], [1, \"col-sm-4\", 3, \"appearance\"], [\"matInput\", \"\", \"type\", \"number\", \"placeholder\", \"Send a reminder every\", \"formControlName\", \"frequencyOffset\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [1, \"col-sm-3\", 3, \"appearance\"], [\"formControlName\", \"frequencyID\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"radioBtnGroupLabel\", \"ps-1\", 3, \"ngClass\"], [\"id\", \"startDateFF\", 1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\", \"click\", \"keydown.enter\", \"keydown.arrowdown\"], [\"matInput\", \"\", \"formControlName\", \"startDate\", \"readonly\", \"\", \"required\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"max\", \"disabled\", \"dateInput\"], [\"matSuffix\", \"\", 3, \"for\"], [3, \"disabled\", \"closed\"], [\"startDate\", \"\"], [1, \"float-end\", 3, \"formControl\"], [\"id\", \"endDateFF\", 1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\", \"click\", \"keydown.enter\", \"keydown.arrowdown\"], [\"matInput\", \"\", \"formControlName\", \"endDate\", \"readonly\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"min\", \"disabled\", \"dateInput\"], [\"endDate\", \"\"], [3, \"value\"], [3, \"value\", \"click\"]],\n    template: function SchedulerWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r17 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3, \" Workflow and Reminder \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"mat-slide-toggle\", 5);\n        i0.ɵɵlistener(\"change\", function SchedulerWorkflowComponent_Template_mat_slide_toggle_change_6_listener($event) {\n          return ctx.toggleWorkflowStatus($event.checked);\n        });\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵtext(8, \" Set a workflow \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelement(10, \"lib-message-alert\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵelementStart(12, \"form\", 10);\n        i0.ɵɵelementContainerStart(13, 11);\n        i0.ɵɵelementContainerStart(14, 12);\n        i0.ɵɵelementStart(15, \"div\", 3);\n        i0.ɵɵelementStart(16, \"div\", 4);\n        i0.ɵɵelementStart(17, \"div\", 3);\n        i0.ɵɵelementStart(18, \"div\", 13);\n        i0.ɵɵelementStart(19, \"span\", 14);\n        i0.ɵɵtext(20, \" Who will enter this data? \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 3);\n        i0.ɵɵelementStart(22, \"mat-form-field\", 15);\n        i0.ɵɵelementStart(23, \"mat-label\", 16);\n        i0.ɵɵtext(24, \"Select assignee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-select\", 17);\n        i0.ɵɵtemplate(26, SchedulerWorkflowComponent_mat_option_26_Template, 2, 3, \"mat-option\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementStart(27, \"div\", 3);\n        i0.ɵɵelementStart(28, \"div\", 4);\n        i0.ɵɵelementStart(29, \"div\", 3);\n        i0.ɵɵelementStart(30, \"div\", 13);\n        i0.ɵɵelementStart(31, \"span\", 14);\n        i0.ɵɵtext(32, \" Who will approve this data? \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"div\", 19);\n        i0.ɵɵelementContainerStart(34, 20);\n        i0.ɵɵelementStart(35, \"mat-slide-toggle\", 21);\n        i0.ɵɵtext(36, \" Auto approve \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 3);\n        i0.ɵɵelementContainerStart(38, 22);\n        i0.ɵɵelementStart(39, \"mat-form-field\", 15);\n        i0.ɵɵelementStart(40, \"mat-label\", 16);\n        i0.ɵɵtext(41, \"Select approver\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"mat-select\", 23);\n        i0.ɵɵtemplate(43, SchedulerWorkflowComponent_mat_option_43_Template, 2, 3, \"mat-option\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"mat-checkbox\", 24);\n        i0.ɵɵelementStart(45, \"div\", 6);\n        i0.ɵɵtext(46, \" Schedule reminders for assignee \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(47, 25);\n        i0.ɵɵelementStart(48, \"div\", 26);\n        i0.ɵɵelementStart(49, \"div\", 3);\n        i0.ɵɵelementStart(50, \"mat-form-field\", 27);\n        i0.ɵɵelementStart(51, \"mat-label\", 16);\n        i0.ɵɵtext(52, \" Enter data for every\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(53, \"input\", 28);\n        i0.ɵɵtemplate(54, SchedulerWorkflowComponent_mat_error_54_Template, 2, 0, \"mat-error\", 29);\n        i0.ɵɵtemplate(55, SchedulerWorkflowComponent_mat_error_55_Template, 2, 2, \"mat-error\", 29);\n        i0.ɵɵtemplate(56, SchedulerWorkflowComponent_mat_error_56_Template, 2, 0, \"mat-error\", 29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"mat-form-field\", 30);\n        i0.ɵɵelementStart(58, \"mat-select\", 31);\n        i0.ɵɵtemplate(59, SchedulerWorkflowComponent_mat_option_59_Template, 3, 4, \"mat-option\", 32);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"div\", 3);\n        i0.ɵɵelementStart(61, \"div\", 4);\n        i0.ɵɵelementStart(62, \"div\", 3);\n        i0.ɵɵelementStart(63, \"div\", 4);\n        i0.ɵɵelementStart(64, \"span\", 33);\n        i0.ɵɵtext(65, \" Starts on \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(66, \"div\", 3);\n        i0.ɵɵelementStart(67, \"mat-form-field\", 34);\n        i0.ɵɵlistener(\"click\", function SchedulerWorkflowComponent_Template_mat_form_field_click_67_listener() {\n          i0.ɵɵrestoreView(_r17);\n          const _r6 = i0.ɵɵreference(73);\n          return ctx.dateService.openDatepickerOnClick(_r6);\n        })(\"keydown.enter\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_enter_67_listener() {\n          i0.ɵɵrestoreView(_r17);\n          const _r6 = i0.ɵɵreference(73);\n          return ctx.dateService.openDatepickerOnClick(_r6);\n        })(\"keydown.arrowdown\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_arrowdown_67_listener() {\n          i0.ɵɵrestoreView(_r17);\n          const _r6 = i0.ɵɵreference(73);\n          return ctx.dateService.openDatepickerOnClick(_r6);\n        });\n        i0.ɵɵelementStart(68, \"mat-label\", 16);\n        i0.ɵɵtext(69, \"Start date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"input\", 35);\n        i0.ɵɵlistener(\"dateInput\", function SchedulerWorkflowComponent_Template_input_dateInput_70_listener($event) {\n          return ctx.formatDate($event.value, \"startDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(71, \"mat-datepicker-toggle\", 36);\n        i0.ɵɵelementStart(72, \"mat-datepicker\", 37, 38);\n        i0.ɵɵlistener(\"closed\", function SchedulerWorkflowComponent_Template_mat_datepicker_closed_72_listener() {\n          return ctx.dateService.takeFocusAway(\"startDateFF\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(74, SchedulerWorkflowComponent_mat_error_74_Template, 2, 0, \"mat-error\", 29);\n        i0.ɵɵtemplate(75, SchedulerWorkflowComponent_mat_error_75_Template, 2, 0, \"mat-error\", 29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(76, \"div\", 3);\n        i0.ɵɵelementStart(77, \"div\", 4);\n        i0.ɵɵelementStart(78, \"div\", 3);\n        i0.ɵɵelementStart(79, \"div\", 4);\n        i0.ɵɵelementStart(80, \"span\", 33);\n        i0.ɵɵtext(81, \" Ends on \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(82, \"div\", 19);\n        i0.ɵɵelementStart(83, \"mat-slide-toggle\", 39);\n        i0.ɵɵtext(84, \" Never \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(85, \"div\", 3);\n        i0.ɵɵelementStart(86, \"mat-form-field\", 40);\n        i0.ɵɵlistener(\"click\", function SchedulerWorkflowComponent_Template_mat_form_field_click_86_listener() {\n          i0.ɵɵrestoreView(_r17);\n          const _r9 = i0.ɵɵreference(92);\n          return ctx.dateService.openDatepickerOnClick(_r9);\n        })(\"keydown.enter\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_enter_86_listener() {\n          i0.ɵɵrestoreView(_r17);\n          const _r9 = i0.ɵɵreference(92);\n          return ctx.dateService.openDatepickerOnClick(_r9);\n        })(\"keydown.arrowdown\", function SchedulerWorkflowComponent_Template_mat_form_field_keydown_arrowdown_86_listener() {\n          i0.ɵɵrestoreView(_r17);\n          const _r9 = i0.ɵɵreference(92);\n          return ctx.dateService.openDatepickerOnClick(_r9);\n        });\n        i0.ɵɵelementStart(87, \"mat-label\", 16);\n        i0.ɵɵtext(88, \"End date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(89, \"input\", 41);\n        i0.ɵɵlistener(\"dateInput\", function SchedulerWorkflowComponent_Template_input_dateInput_89_listener($event) {\n          return ctx.formatDate($event.value, \"endDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(90, \"mat-datepicker-toggle\", 36);\n        i0.ɵɵelementStart(91, \"mat-datepicker\", 37, 42);\n        i0.ɵɵlistener(\"closed\", function SchedulerWorkflowComponent_Template_mat_datepicker_closed_91_listener() {\n          return ctx.dateService.takeFocusAway(\"endDateFF\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(93, SchedulerWorkflowComponent_mat_error_93_Template, 2, 0, \"mat-error\", 29);\n        i0.ɵɵtemplate(94, SchedulerWorkflowComponent_mat_error_94_Template, 2, 0, \"mat-error\", 29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r6 = i0.ɵɵreference(73);\n        const _r9 = i0.ɵɵreference(92);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formControl\", ctx.enableWorkflowFC)(\"checked\", ctx.enableWorkflowFC.value);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"messageAlertTypeInp\", ctx.messageAlertTypeEnum.INFO)(\"messageAlertIconInp\", ctx.messageAlertIconEnum.INFO_ICON);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.schedulerFG);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.assignee);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isSlideToggleChecked);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.approver);\n        i0.ɵɵadvance(5);\n        i0.ɵɵclassProp(\"disabled\", ctx.isReminderChecked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scheduler.frequencyOffset\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scheduler.frequencyOffset\", \"max\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scheduler.frequencyOffset\", \"min\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.frequency);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(37, _c3, ctx.disabled));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r6)(\"max\", ctx.endDateAC.value)(\"disabled\", ctx.isControlDisabled(\"startDate\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r6);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.isControlDisabled(\"startDate\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scheduler.startDate\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scheduler.startDate\", \"matDatepickerMax\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(39, _c3, ctx.disabled));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.endScheduleFC);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r9)(\"min\", ctx.startDateAC.value)(\"disabled\", ctx.isControlDisabled(\"endDate\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r9);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.isControlDisabled(\"endDate\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scheduler.endDate\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"scheduler.endDate\", \"matDatepickerMin\"));\n      }\n    },\n    directives: [i5.MatCard, i6.MatSlideToggle, i2.NgControlStatus, i2.FormControlDirective, i7.MessageAlertComponent, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormGroupName, i8.MatFormField, i8.MatLabel, i9.MatSelect, i2.FormControlName, i10.NgForOf, i11.MatCheckbox, i12.MatInput, i2.NumberValueAccessor, i2.DefaultValueAccessor, i10.NgIf, i10.NgClass, i13.MatDatepickerInput, i2.RequiredValidator, i13.MatDatepickerToggle, i8.MatSuffix, i13.MatDatepicker, i14.MatOption, i8.MatError],\n    pipes: [i10.TitleCasePipe],\n    styles: [\".larger-checkbox[_ngcontent-%COMP%]{transform:scale(1.5)}\"]\n  });\n  return SchedulerWorkflowComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}