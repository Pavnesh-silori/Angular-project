{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OtherFugitiveSourceController = /*#__PURE__*/(() => {\n  class OtherFugitiveSourceController {\n    constructor(http) {\n      this.http = http;\n    }\n    getOtherFugitiveSourcePage(pageNo, pazeSize, sortBy, orderBy, filterArr, currentOrgID, startDate, endDate, searchValue, dateFlag) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      if (searchValue !== null) {\n        params = params.append('searchValue', searchValue);\n      }\n      params = params.append('dateFlag', dateFlag);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/activity/sector-specfic-fugitive-emission/data/page`, {\n        params: params\n      });\n    }\n    createOtherFugitiveSource(currentOrgID, formData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/fugitive-release`, formData);\n    }\n    getOtherFugitiveReleasedByID(currentOrgID, fugitvieReleasedID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/fugitive-release/${fugitvieReleasedID}`);\n    }\n    updateOtherFugitiveSource(currentOrgID, equipmentID, data) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/fugitive-release/${equipmentID}`, data);\n    }\n    getGasesByFugitiveSourceID(currentOrgID, sourceID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${currentOrgID}/other-fugitive-source/gas/${sourceID}`);\n    }\n    getOtherFugitiveSourceListByOrg(currentOrgID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${currentOrgID}/other-fugitive-source/list`);\n    }\n    deleteOtherFugitiveSource(currentOrgID, fugitiveSourceID) {\n      return this.http.delete(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/fugitive-release/${fugitiveSourceID}`);\n    }\n  }\n  OtherFugitiveSourceController.ɵfac = function OtherFugitiveSourceController_Factory(t) {\n    return new (t || OtherFugitiveSourceController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  OtherFugitiveSourceController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OtherFugitiveSourceController,\n    factory: OtherFugitiveSourceController.ɵfac,\n    providedIn: 'root'\n  });\n  return OtherFugitiveSourceController;\n})();","map":null,"metadata":{},"sourceType":"module"}