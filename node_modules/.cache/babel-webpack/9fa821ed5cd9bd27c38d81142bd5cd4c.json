{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, PLATFORM_ID, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { create } from 'ladda';\nclass LaddaConfigArgs {}\nlet configAttributes = {\n  \"data-style\": \"style\",\n  \"data-spinner-size\": \"spinnerSize\",\n  \"data-spinner-color\": \"spinnerColor\",\n  \"data-spinner-lines\": \"spinnerLines\"\n};\nclass LaddaConfig {\n  constructor(config = {}) {\n    Object.assign(this, config);\n  }\n}\nLaddaConfig.ɵfac = function LaddaConfig_Factory(t) {\n  return new (t || LaddaConfig)(i0.ɵɵinject(LaddaConfigArgs));\n};\nLaddaConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LaddaConfig,\n  factory: LaddaConfig.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaddaConfig, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LaddaConfigArgs\n    }];\n  }, null);\n})();\nclass LaddaDirective {\n  constructor(el, config, platformId) {\n    this.platformId = platformId;\n    this.ladda = undefined;\n    this.disabled = false;\n    this.el = el.nativeElement;\n    if (!config) {\n      return;\n    }\n    // apply default styles if they aren't overwritten by an attribute\n    for (let attribute in configAttributes) {\n      let configValue = config[configAttributes[attribute]];\n      if (!configValue) {\n        continue; // don't waste time reading the attribute\n      }\n\n      if (!this.el.getAttribute(attribute)) {\n        // attribute isn't set - apply the default config value\n        let value = typeof configValue === \"number\" ? configValue.toString() : configValue;\n        this.el.setAttribute(attribute, value);\n      }\n    }\n  }\n  ngOnChanges(changes) {\n    if (!this.ladda) {\n      return; // needed since ngOnChanges is called before ngOnInit\n    }\n\n    if (changes.loading) {\n      this.updateLadda(changes.loading.previousValue);\n    }\n    if (changes.disabled) {\n      this.updateDisabled();\n    }\n  }\n  ngOnInit() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    this.ladda = create(this.el);\n    // if the initial loading value isn't false, a timeout of 0 ms\n    // is necessary for the calculated spinner size to be correct.\n    setTimeout(() => {\n      this.updateLadda(false);\n    }, 0);\n  }\n  ngOnDestroy() {\n    if (this.ladda) {\n      this.ladda.remove();\n    }\n  }\n  updateLadda(previousValue) {\n    if (!this.ladda) {\n      return;\n    }\n    let loading = typeof this.loading === 'number' || !!this.loading;\n    let wasLoading = typeof previousValue === 'number' || !!previousValue;\n    if (!loading) {\n      if (wasLoading) {\n        this.ladda.stop();\n      }\n      return this.updateDisabled();\n    }\n    if (!wasLoading) {\n      this.ladda.start();\n    }\n    if (typeof this.loading === 'number') {\n      this.ladda.setProgress(this.loading);\n    }\n  }\n  updateDisabled() {\n    this.el.disabled = this.disabled;\n  }\n}\nLaddaDirective.ɵfac = function LaddaDirective_Factory(t) {\n  return new (t || LaddaDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LaddaConfig, 8), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nLaddaDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LaddaDirective,\n  selectors: [[\"\", \"ladda\", \"\"]],\n  inputs: {\n    loading: [\"ladda\", \"loading\"],\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaddaDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ladda]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: LaddaConfigArgs,\n      decorators: [{\n        type: Inject,\n        args: [LaddaConfig]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    loading: [{\n      type: Input,\n      args: ['ladda']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\nclass LaddaModule {\n  static forRoot(config) {\n    return {\n      ngModule: LaddaModule,\n      providers: [{\n        provide: LaddaConfig,\n        useValue: config\n      }]\n    };\n  }\n}\nLaddaModule.ɵfac = function LaddaModule_Factory(t) {\n  return new (t || LaddaModule)();\n};\nLaddaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LaddaModule\n});\nLaddaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaddaModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LaddaDirective],\n      exports: [LaddaDirective]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of ladda\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { LaddaConfig, LaddaConfigArgs, LaddaDirective, LaddaModule, configAttributes };","map":{"version":3,"names":["i0","Injectable","PLATFORM_ID","Directive","Inject","Optional","Input","NgModule","isPlatformBrowser","create","LaddaConfigArgs","configAttributes","LaddaConfig","constructor","config","Object","assign","ɵfac","LaddaConfig_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","LaddaDirective","el","platformId","ladda","undefined","disabled","nativeElement","attribute","configValue","getAttribute","value","toString","setAttribute","ngOnChanges","changes","loading","updateLadda","previousValue","updateDisabled","ngOnInit","setTimeout","ngOnDestroy","remove","wasLoading","stop","start","setProgress","LaddaDirective_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","inputs","features","ɵɵNgOnChangesFeature","args","selector","decorators","LaddaModule","forRoot","ngModule","providers","provide","useValue","LaddaModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","exports"],"sources":["/home/silori/projects/gitClones/account-ui/node_modules/angular2-ladda/fesm2015/angular2-ladda.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, PLATFORM_ID, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { create } from 'ladda';\n\nclass LaddaConfigArgs {\r\n}\r\nlet configAttributes = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\nclass LaddaConfig {\r\n    constructor(config = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\nLaddaConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaConfig, deps: [{ token: LaddaConfigArgs }], target: i0.ɵɵFactoryTarget.Injectable });\r\nLaddaConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaConfig });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaConfig, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: LaddaConfigArgs }]; } });\n\nclass LaddaDirective {\r\n    constructor(el, config, platformId) {\r\n        this.platformId = platformId;\r\n        this.ladda = undefined;\r\n        this.disabled = false;\r\n        this.el = el.nativeElement;\r\n        if (!config) {\r\n            return;\r\n        }\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return;\r\n        }\r\n        this.ladda = create(this.el);\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n    updateLadda(previousValue) {\r\n        if (!this.ladda) {\r\n            return;\r\n        }\r\n        let loading = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading = typeof previousValue === 'number' || !!previousValue;\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n            return this.updateDisabled();\r\n        }\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n    updateDisabled() {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n}\r\nLaddaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaDirective, deps: [{ token: i0.ElementRef }, { token: LaddaConfig, optional: true }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });\r\nLaddaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.3\", type: LaddaDirective, selector: \"[ladda]\", inputs: { loading: [\"ladda\", \"loading\"], disabled: \"disabled\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ladda]',\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef }, { type: LaddaConfigArgs, decorators: [{\r\n                        type: Inject,\r\n                        args: [LaddaConfig]\r\n                    }, {\r\n                        type: Optional\r\n                    }] }, { type: Object, decorators: [{\r\n                        type: Inject,\r\n                        args: [PLATFORM_ID]\r\n                    }] }];\r\n    }, propDecorators: { loading: [{\r\n                type: Input,\r\n                args: ['ladda']\r\n            }], disabled: [{\r\n                type: Input\r\n            }] } });\n\nclass LaddaModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: LaddaModule,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config },\r\n            ],\r\n        };\r\n    }\r\n}\r\nLaddaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nLaddaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaModule, declarations: [LaddaDirective], exports: [LaddaDirective] });\r\nLaddaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.3\", ngImport: i0, type: LaddaModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [LaddaDirective],\r\n                    exports: [LaddaDirective],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ladda\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { LaddaConfig, LaddaConfigArgs, LaddaDirective, LaddaModule, configAttributes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}