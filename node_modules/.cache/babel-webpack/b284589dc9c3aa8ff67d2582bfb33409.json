{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FugitiveServiceByContractorController = /*#__PURE__*/(() => {\n  class FugitiveServiceByContractorController {\n    constructor(http) {\n      this.http = http;\n    }\n    getEquipmentCapacityRecord(pageNo, pazeSize, sortBy, orderBy, filterArr, currentOrgID, activityType, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      params = params.append('activityType', activityType);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/lifecycle-stage-approach-simplified-material-balance-approach/page`, {\n        params: params\n      });\n    }\n    createEquipmentCapacityRecord(currentOrgID, formData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/lifecycle-stage-approach-simplified-material-balance-approach`, formData);\n    }\n    updateEquipmentCapacityRecord(currentOrgID, equipmentCapacityID, data) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/lifecycle-stage-approach-simplified-material-balance-approach/${equipmentCapacityID}`, data);\n    }\n    getEquipmentCapacityRecordByID(currentOrgID, equipmentCapacityID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/lifecycle-stage-approach-simplified-material-balance-approach/${equipmentCapacityID}`);\n    }\n    deleteEquipmentCapacityRecord(currentOrgID, equipmentCapacityID) {\n      return this.http.delete(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/lifecycle-stage-approach-simplified-material-balance-approach/${equipmentCapacityID}`);\n    }\n    getEquipmentServicing(pageNo, pazeSize, sortBy, orderBy, filterArr, currentOrgID, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/equipment-servicing/page`, {\n        params: params\n      });\n    }\n    createEquipmentServicingRecord(currentOrgID, formData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/equipment-servicing`, formData);\n    }\n    updateEquipmentServicingRecord(currentOrgID, equipmentServicingID, data) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/equipment-servicing/${equipmentServicingID}`, data);\n    }\n    getEquipmentServicingRecordByID(currentOrgID, equipmentServicingID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/equipment-servicing/${equipmentServicingID}`);\n    }\n    deleteEquipmentServicingRecord(currentOrgID, equipmentServicingID) {\n      return this.http.delete(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${currentOrgID}/equipment-servicing/${equipmentServicingID}`);\n    }\n  }\n  FugitiveServiceByContractorController.ɵfac = function FugitiveServiceByContractorController_Factory(t) {\n    return new (t || FugitiveServiceByContractorController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  FugitiveServiceByContractorController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FugitiveServiceByContractorController,\n    factory: FugitiveServiceByContractorController.ɵfac,\n    providedIn: 'root'\n  });\n  return FugitiveServiceByContractorController;\n})();","map":null,"metadata":{},"sourceType":"module"}