{"ast":null,"code":"import { __awaiter } from \"tslib\";\n// Below are shared for this component\n// PROCESS_ELECTRICITY_CONSUMPTION\n// PROCESS_HEAT_CONSUMPTION\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ActivityConfig } from '@carbon/component/activity-config/activity-config';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { DataInputMethod, DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport { SupplierTypeKeyIDEnum } from '@netzero/enum/supplier.enum';\nimport { PROCESS_INPUT_ENUM } from '@netzero/enum/process.enum';\nimport { SourceKeyID } from '@carbon/enum/cbam.enum';\nimport { ENTITY_KEY_ID_ENUM } from '@carbon/enum/entity.enum';\nimport { COMMON_CONSTANT, FormAction, MatSelectSearchService, MessageAlertTypeEnum, MessageAlertIconEnum } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@carbon/service/data-input-method.service\";\nimport * as i4 from \"@carbon/service/process.service\";\nimport * as i5 from \"@netzero/service/supplier.service\";\nimport * as i6 from \"@library/storage-service\";\nimport * as i7 from \"@library/toastr-service\";\nimport * as i8 from \"@library/unit-service\";\nimport * as i9 from \"@angular/material/card\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/common\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"ngx-mat-select-search\";\nimport * as i16 from \"@library/tsc-common\";\nimport * as i17 from \"@angular/material/radio\";\nimport * as i18 from \"@angular/material/checkbox\";\nfunction ElectricityConsumptionActivityConfigCreateComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_mat_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const process_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", process_r11.recordID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", process_r11.name, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_ng_container_7_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 29);\n    i0.ɵɵlistener(\"click\", function ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_ng_container_7_mat_option_7_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r21);\n      const supplier_r18 = restoredCtx.$implicit;\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      const entity_r13 = ctx_r20.$implicit;\n      const i_r14 = ctx_r20.index;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return entity_r13.get(\"entityKeyID\").value == ctx_r19.SourceKeyID.GRID || entity_r13.get(\"entityKeyID\").value == ctx_r19.SourceKeyID.PRIVATE_SUPPLIER ? ctx_r19.patchSourceTypeID(supplier_r18.sourceTypeID, i_r14) : null;\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const supplier_r18 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", supplier_r18.supplierID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", supplier_r18.supplierName, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_ng_container_7_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 6);\n    i0.ɵɵelementStart(2, \"mat-label\", 7);\n    i0.ɵɵtext(3, \"Select Supplier\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 26);\n    i0.ɵɵelementStart(5, \"mat-option\");\n    i0.ɵɵelement(6, \"ngx-mat-select-search\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_ng_container_7_mat_option_7_Template, 2, 2, \"mat-option\", 28);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_ng_container_7_mat_error_9_Template, 2, 1, \"mat-error\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext();\n    const entity_r13 = ctx_r22.$implicit;\n    const i_r14 = ctx_r22.index;\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r15.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"required\", entity_r13.get(\"isSelected\").value == true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControl\", ctx_r15.supplierSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx_r15.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 6, ctx_r15.supplierSelectSearch.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.errorHandlingForFormArray(\"sourceID\", i_r14, \"required\"));\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementContainerStart(1, 24);\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵelement(3, \"mat-checkbox\", 25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtemplate(7, ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_ng_container_7_Template, 10, 8, \"ng-container\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entity_r13 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    const _r9 = i0.ɵɵreference(48);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r14);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(entity_r13.get(\"entityName\").value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", entity_r13.get(\"entityKeyID\").value == ctx_r12.SourceKeyID.GRID || entity_r13.get(\"entityKeyID\").value == ctx_r12.SourceKeyID.PRIVATE_SUPPLIER)(\"ngIfElse\", _r9);\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_tr_1_Template, 8, 4, \"tr\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.entityFA.controls);\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_mat_radio_button_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-radio-button\", 30);\n    i0.ɵɵlistener(\"change\", function ElectricityConsumptionActivityConfigCreateComponent_mat_radio_button_42_Template_mat_radio_button_change_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r25);\n      const input_r23 = restoredCtx.$implicit;\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.dataInputMethodChange(input_r23.keyID);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r23 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", input_r23.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r23.name, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_mat_error_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r26.FormErrorEnum.NEGATIVE, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r27.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r30 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r30.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r30.name, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r29.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 31);\n    i0.ɵɵelementStart(2, \"div\", 32);\n    i0.ɵɵelementStart(3, \"mat-form-field\", 6);\n    i0.ɵɵelementStart(4, \"mat-label\", 7);\n    i0.ɵɵtext(5, \"Meter Rollover Value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 33);\n    i0.ɵɵtemplate(7, ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_error_7_Template, 2, 1, \"mat-error\", 9);\n    i0.ɵɵtemplate(8, ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_error_8_Template, 2, 1, \"mat-error\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 32);\n    i0.ɵɵelementStart(10, \"mat-form-field\", 6);\n    i0.ɵɵelementStart(11, \"mat-label\", 7);\n    i0.ɵɵtext(12, \"Select Meter Unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-select\", 34);\n    i0.ɵɵelementStart(14, \"mat-option\");\n    i0.ɵɵelement(15, \"ngx-mat-select-search\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_option_16_Template, 2, 2, \"mat-option\", 13);\n    i0.ɵɵpipe(17, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(18, ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_mat_error_18_Template, 2, 1, \"mat-error\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"appearance\", ctx_r6.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(ctx_r6.activityConfigFG, \"activityConfigData.meterRolloverValue\", \"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(ctx_r6.activityConfigFG, \"activityConfigData.meterRolloverValue\", \"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r6.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r6.unitSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx_r6.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 8, ctx_r6.unitSelectSearch.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandling(ctx_r6.activityConfigFG, \"activityConfigData.meterRolloverUnitID\", \"required\"));\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_template_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"td\");\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r8.COMMON_CONSTANT.HYPHEN);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r8.COMMON_CONSTANT.HYPHEN);\n  }\n}\nfunction ElectricityConsumptionActivityConfigCreateComponent_ng_template_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.COMMON_CONSTANT.HYPHEN, \"\\n\");\n  }\n}\n// /tsc-library/\nexport let ElectricityConsumptionActivityConfigCreateComponent = /*#__PURE__*/(() => {\n  class ElectricityConsumptionActivityConfigCreateComponent extends ActivityConfig {\n    constructor(formBuilder, activatedRoute, dataInputMethodService, processService, supplierService,\n    // tsc-library\n    storageService, toastrService, unitService) {\n      super();\n      this.formBuilder = formBuilder;\n      this.activatedRoute = activatedRoute;\n      this.dataInputMethodService = dataInputMethodService;\n      this.processService = processService;\n      this.supplierService = supplierService;\n      this.toastrService = toastrService;\n      this.unitService = unitService;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.MessageAlertTypeEnum = MessageAlertTypeEnum;\n      this.MessageAlertIconEnum = MessageAlertIconEnum;\n      this.SourceKeyID = SourceKeyID;\n      this.entityTypeLabel = 'Entity';\n      this.noEntityFoundError = 'Please select valid process for this activity form.';\n      this.sourceInfoMsg = 'Select multiple sources in case of a common sub-meter at the process.';\n      this.isMeterReading = false;\n      this.entitySource = [];\n      this.allProcess = [];\n      this.dataInputMethod = [];\n      this.unit = [];\n      this.processSelectSearch = new MatSelectSearchService(['name']);\n      this.unitSelectSearch = new MatSelectSearchService(['name']);\n      this.supplierSelectSearch = new MatSelectSearchService(['supplierName']);\n      this.isEqual = new EventEmitter();\n      this.validity = new EventEmitter();\n      this.errorHandlingForFormArray = (control, index, error) => {\n        const activityConfigDetailsFA = this.activityConfigFG.get('entity');\n        const formGroup = activityConfigDetailsFA.at(index);\n        return formGroup.get(control).hasError(error);\n      };\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n    }\n    ngOnInit() {\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams['activityID']) {\n          this.activityID = queryParams.activityID;\n        }\n      });\n      this.activatedRoute.data.subscribe(data => {\n        this.action = data.action;\n        this.entity = data.entity;\n        this.activityKeyID = data.activityKeyID;\n      });\n      this.setEntityTypeLabel(this.activityKeyID);\n      this.formGroupInit();\n      this.getAllProcess(this.currentOrgID);\n      this.getDataInputMethodByActivityID(this.activityID, DataInputMethod.STANDARD);\n      this.getUnit([`type:${UnitTypeKeyID.ENERGY}`]);\n      this.getSupplierByType();\n    }\n    formGroupInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: [this.activityID, Validators.required],\n          activityKeyID: [this.activityKeyID, Validators.required],\n          configName: [],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          processID: [, Validators.required],\n          processRecordID: [, Validators.required],\n          dataInputMethodStdID: [, Validators.required],\n          meterRolloverValue: [],\n          meterRolloverUnitID: [],\n          ioSourceConfig: this.formBuilder.array([], Validators.required)\n        }),\n        entity: this.formBuilder.array([], Validators.required)\n      });\n    }\n    // createSource(): FormGroup {\n    //     return this.formBuilder.group({\n    //         isSelected: [],\n    //         inputOutputSourceStdID: [, Validators.required],\n    //         entityTypeID: [],\n    //         entityID: [],\n    //         sourceTypeID: [],\n    //         sourceID: [[]],\n    //         entityName: [],\n    //         entityKeyID: []\n    //     });\n    // }\n    get ioSourceConfigFA() {\n      return this.activityConfigFG.get('activityConfigData').get('ioSourceConfig');\n    }\n    get entityFA() {\n      return this.activityConfigFG.get('entity');\n    }\n    getAllProcess(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let filterProcess;\n        this.allProcess = yield this.processService.getProcessList(orgID);\n        filterProcess = this.allProcess.filter(source => source.isCBAMProcess == true);\n        // cbamProcess = this.allProcess.filter(source => source.isCBAMProcess == true && source.input.find(input => input.type.keyID == PROCESS_INPUT_ENUM.ELECTRICITY));\n        this.allProcess = filterProcess;\n        this.processSelectSearch.entityArr = this.allProcess;\n        this.processSelectSearch.createSubscription();\n      });\n    }\n    processChange(orgID, processID, isLatest) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.process = yield this.processService.getProcessByID(orgID, processID, isLatest);\n        this.patchControl(this.activityConfigFG, 'activityConfigData.processID', this.process.processID);\n        this.createEntitySource(this.process);\n      });\n    }\n    getProcessByID(orgID, processID, isLatest) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.process = yield this.processService.getProcessByID(orgID, processID, isLatest);\n        this.createEntitySource(this.process);\n      });\n    }\n    getDataInputMethodByActivityID(activityID, dataInputMethodType) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.dataInputMethod = yield this.dataInputMethodService.getDataInputMethodByActivityAndType(activityID, dataInputMethodType);\n      });\n    }\n    getUnit(filter) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.unit = yield this.unitService.getUnit(filter);\n        this.unitSelectSearch.entityArr = this.unit;\n        this.unitSelectSearch.createSubscription();\n      });\n    }\n    getSupplierByType() {\n      let supplier = [];\n      this.supplierService.getSupplierByType(this.currentOrgID, SupplierTypeKeyIDEnum.ENERGY_SUPPLIER).then(res => {\n        supplier = res;\n        this.supplierSelectSearch.entityArr = supplier;\n        this.supplierSelectSearch.createSubscription();\n      });\n    }\n    dataInputMethodChange(dataInputMethodKeyID) {\n      if (dataInputMethodKeyID == DataInputMethodKeyIDEnum.METER_READING) {\n        this.isMeterReading = true;\n        this.addMeterRolloverValidator();\n      } else {\n        this.isMeterReading = false;\n        this.removeMeterRolloverValidator();\n      }\n    }\n    addMeterRolloverValidator() {\n      this.activityConfigDataAC.get('meterRolloverValue').setValidators([Validators.required, Validators.min(0)]);\n      this.activityConfigDataAC.get('meterRolloverUnitID').setValidators([Validators.required]);\n      this.activityConfigDataAC.get('meterRolloverValue').updateValueAndValidity();\n      this.activityConfigDataAC.get('meterRolloverUnitID').updateValueAndValidity();\n    }\n    removeMeterRolloverValidator() {\n      this.activityConfigDataAC.get('meterRolloverValue').reset();\n      this.activityConfigDataAC.get('meterRolloverUnitID').reset();\n      this.activityConfigDataAC.get('meterRolloverValue').clearValidators();\n      this.activityConfigDataAC.get('meterRolloverUnitID').clearValidators();\n      this.activityConfigDataAC.get('meterRolloverValue').updateValueAndValidity();\n      this.activityConfigDataAC.get('meterRolloverUnitID').updateValueAndValidity();\n    }\n    patchControl(formGroup, controlPath, value) {\n      formGroup.get(controlPath).patchValue(value);\n    }\n    patchSourceTypeID(sourceTypeID, index) {\n      this.entityFA.at(index).patchValue({\n        sourceTypeID: sourceTypeID\n      });\n    }\n    // TODO\n    createEntitySource(process) {\n      let inputOutput;\n      this.entitySource = [];\n      this.ioSourceConfigFA.clear();\n      this.entityFA.clear();\n      switch (this.activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_ELECTRICITY_CONSUMPTION:\n          {\n            inputOutput = process.input.find(input => input.type.keyID == PROCESS_INPUT_ENUM.ELECTRICITY);\n            break;\n          }\n        case ActivityKeyIDEnum.PROCESS_HEAT_CONSUMPTION:\n          {\n            inputOutput = process.input.find(input => input.type.keyID == PROCESS_INPUT_ENUM.HEAT);\n            break;\n          }\n      }\n      if (inputOutput) {\n        this.entitySource = inputOutput.entitySource;\n        // this.entitySource = this.entitySource.map((entitySource: any) => {\n        //     return {\n        //         ...entitySource,\n        //         isSelected: true\n        //     };\n        // });\n        // this.ioSourceConfigFA.clear();\n        // inputOutput.entitySource.forEach((entitySource: any) => {\n        //     this.ioSourceConfigFA.push(\n        //         this.formBuilder.group({\n        //             inputOutputSourceStdID: [entitySource.id, Validators.required],\n        //             entityTypeID: [],\n        //             entityID: [],\n        //             sourceTypeID: [],\n        //             sourceID: [[]],\n        //             entityName: [],\n        //             entityKeyID: []\n        //         })\n        //     );\n        // });\n        this.entitySource.forEach(entitySource => {\n          this.entityFA.push(this.formBuilder.group({\n            isSelected: [this.action == FormAction.CREATE && this.entity == ENTITY_KEY_ID_ENUM.ACTIVITY_FORM ? true : false],\n            inputOutputSourceStdID: [entitySource.id, Validators.required],\n            entityTypeID: [],\n            entityID: [],\n            sourceTypeID: [],\n            // sourceID: (entitySource.keyID == SourceKeyID.GRID || entitySource.keyID == SourceKeyID.PRIVATE_SUPPLIER) ? [, [Validators.required]] : [[]],\n            sourceID: [],\n            entityName: [entitySource.name],\n            entityKeyID: [entitySource.keyID]\n          }));\n          // this.ioSourceConfigFA.push(\n          //     this.formBuilder.group({\n          //         isSelected: [true],\n          //         inputOutputSourceStdID: [entitySource.id, Validators.required],\n          //         entityTypeID: [],\n          //         entityID: [],\n          //         sourceTypeID: [],\n          //         sourceID: [[]],\n          //         entityName: [entitySource.name],\n          //         entityKeyID: [entitySource.keyID]\n          //     })\n          // );\n        });\n      } else {\n        this.entitySource = [];\n        this.ioSourceConfigFA.clear();\n        this.entityFA.clear();\n        // this.ioSourceConfigFA.push(this.createSource());\n        this.toastrService.error(this.noEntityFoundError);\n        this.patchControl(this.activityConfigFG, 'activityConfigData.processID', null);\n      }\n    }\n    isValidForm() {\n      this.ioSourceConfigFA.clear();\n      const isSelectedEntity = this.entityFA.value.filter(entity => entity.isSelected);\n      isSelectedEntity.forEach(entity => this.ioSourceConfigFA.push(this.formBuilder.group({\n        inputOutputSourceStdID: [entity.inputOutputSourceStdID],\n        sourceTypeID: [entity.sourceTypeID],\n        // sourceID: [entity.sourceID]\n        sourceID: entity.sourceID ? [[entity.sourceID]] : []\n      })));\n      if (this.activityConfigFG.invalid) {\n        this.activityConfigFG.markAllAsTouched();\n        console.error('invalid activityConfigFG -', this.activityConfigFG);\n        return false;\n      }\n      this.configuration = {};\n      this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.getRawValue()));\n      return true;\n    }\n    // TODO\n    patchConfiguration(configuration) {\n      let activityConfig;\n      let activityConfigData;\n      activityConfig = configuration.activityConfig != null ? configuration['activityConfig'] : null;\n      activityConfigData = configuration['activityConfigData'];\n      const dataInputMethod = activityConfigData.dataInputMethod;\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig.configName\n        });\n      } else {\n        this.readOnlyForm();\n      }\n      this.activityConfigDataAC.patchValue({\n        processID: activityConfigData.process.id,\n        processRecordID: activityConfigData.process.recordID,\n        dataInputMethodStdID: dataInputMethod.id\n      });\n      if (dataInputMethod.keyID == DataInputMethodKeyIDEnum.METER_READING) {\n        const meterRollover = activityConfigData.meterRollover;\n        this.activityConfigDataAC.patchValue({\n          meterRolloverValue: meterRollover.value,\n          meterRolloverUnitID: meterRollover.unit.unitID\n        });\n      }\n      this.dataInputMethodChange(activityConfigData.dataInputMethod.keyID);\n      this.getProcessByID(this.currentOrgID, activityConfigData.process.id, false).then(process => {\n        activityConfigData.ioSourceConfig.forEach(element => {\n          var _a;\n          const indexFound = this.entityFA.controls.findIndex(control => control.get('inputOutputSourceStdID').value === element.inputOutputSource.id);\n          const control = this.entityFA.at(indexFound);\n          control.patchValue({\n            isSelected: true,\n            sourceTypeID: (_a = element.sourceType) === null || _a === void 0 ? void 0 : _a.id,\n            // sourceID: element.source?.map(s => s.id)\n            sourceID: element.source ? element.source[0].id : null\n          });\n          // if (element.inputOutputSource.keyID == SourceKeyID.GRID || element.inputOutputSource.keyID == SourceKeyID.PRIVATE_SUPPLIER) {\n          //     control.patchValue(\n          //         {\n          //             sourceTypeID: element.sourceType.id,\n          //             sourceID: element.source.id\n          //         }\n          //     );\n          // }\n        });\n\n        if (this.entity == ENTITY_KEY_ID_ENUM.ACTIVITY_DATA) {\n          this.readOnlyForm();\n        }\n        this.updateInitialObject();\n      });\n    }\n    setEntityTypeLabel(activityKeyID) {\n      switch (activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_ELECTRICITY_CONSUMPTION:\n          this.entityTypeLabel = 'Electricity Source';\n          this.noEntityFoundError = 'No electricity source is found in this process.';\n          this.sourceInfoMsg = 'Select multiple electricity sources in case of a common sub-meter at the process.';\n          break;\n        case ActivityKeyIDEnum.PROCESS_HEAT_CONSUMPTION:\n          this.entityTypeLabel = 'Heat Source';\n          this.noEntityFoundError = 'No heat source is found in this process.';\n          this.sourceInfoMsg = 'Select multiple heat sources in case of a common sub-meter at the process.';\n          break;\n      }\n    }\n  }\n  ElectricityConsumptionActivityConfigCreateComponent.ɵfac = function ElectricityConsumptionActivityConfigCreateComponent_Factory(t) {\n    return new (t || ElectricityConsumptionActivityConfigCreateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.DataInputMethodService), i0.ɵɵdirectiveInject(i4.ProcessService), i0.ɵɵdirectiveInject(i5.SupplierService), i0.ɵɵdirectiveInject(i6.StorageService), i0.ɵɵdirectiveInject(i7.ToastrService), i0.ɵɵdirectiveInject(i8.UnitService));\n  };\n  ElectricityConsumptionActivityConfigCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ElectricityConsumptionActivityConfigCreateComponent,\n    selectors: [[\"app-electricity-consumption-create\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 49,\n    vars: 19,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-sm-8\"], [\"formGroupName\", \"activityConfig\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"type\", \"text\", \"placeholder\", \"Activity Form Name\", \"formControlName\", \"configName\", \"matInput\", \"\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"formGroupName\", \"activityConfigData\"], [\"formControlName\", \"processRecordID\", \"required\", \"\", 3, \"selectionChange\"], [\"placeholderLabel\", \"Search by process name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"messageAlertTypeInp\", \"messageAlertIconInp\", \"contentInp\"], [1, \"table\", \"table-bordered\", \"mt-3\"], [\"formArrayName\", \"entity\"], [4, \"ngIf\", \"ngIfElse\"], [\"formControlName\", \"dataInputMethodStdID\"], [\"class\", \"col-sm-3 pt-1\", 3, \"value\", \"change\", 4, \"ngFor\", \"ngForOf\"], [\"noEntitySource\", \"\"], [\"noSupplier\", \"\"], [3, \"value\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroupName\"], [\"formControlName\", \"isSelected\"], [\"formControlName\", \"sourceID\", 3, \"required\"], [\"placeholderLabel\", \"Search by supplier name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"], [1, \"col-sm-3\", \"pt-1\", 3, \"value\", \"change\"], [1, \"row\", \"pt-3\"], [1, \"col-sm-4\"], [\"type\", \"number\", \"placeholder\", \"Meter Rollover Value\", \"matInput\", \"\", \"formControlName\", \"meterRolloverValue\", \"min\", \"0\", \"required\", \"\", 1, \"formPlaceholder\"], [\"formControlName\", \"meterRolloverUnitID\"], [\"placeholderLabel\", \"Search by unit name\", 3, \"formControl\", \"noEntriesFoundLabel\"]],\n    template: function ElectricityConsumptionActivityConfigCreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(8, \"mat-label\", 7);\n        i0.ɵɵtext(9, \"Activity Form Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵtemplate(11, ElectricityConsumptionActivityConfigCreateComponent_mat_error_11_Template, 2, 1, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 10);\n        i0.ɵɵelementStart(13, \"div\", 3);\n        i0.ɵɵelementStart(14, \"div\", 4);\n        i0.ɵɵelementStart(15, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(16, \"mat-label\", 7);\n        i0.ɵɵtext(17, \"Select Process\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-select\", 11);\n        i0.ɵɵlistener(\"selectionChange\", function ElectricityConsumptionActivityConfigCreateComponent_Template_mat_select_selectionChange_18_listener($event) {\n          return ctx.processChange(ctx.currentOrgID, $event.value, true);\n        });\n        i0.ɵɵelementStart(19, \"mat-option\");\n        i0.ɵɵelement(20, \"ngx-mat-select-search\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(21, ElectricityConsumptionActivityConfigCreateComponent_mat_option_21_Template, 2, 2, \"mat-option\", 13);\n        i0.ɵɵpipe(22, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, ElectricityConsumptionActivityConfigCreateComponent_mat_error_23_Template, 2, 1, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 3);\n        i0.ɵɵelementStart(25, \"div\", 4);\n        i0.ɵɵelement(26, \"lib-message-alert\", 14);\n        i0.ɵɵelementStart(27, \"table\", 15);\n        i0.ɵɵelementStart(28, \"thead\");\n        i0.ɵɵelementStart(29, \"tr\");\n        i0.ɵɵelement(30, \"th\");\n        i0.ɵɵelementStart(31, \"th\");\n        i0.ɵɵtext(32);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"th\");\n        i0.ɵɵtext(34, \"Supplier\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"tbody\", 16);\n        i0.ɵɵtemplate(36, ElectricityConsumptionActivityConfigCreateComponent_ng_container_36_Template, 2, 1, \"ng-container\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 10);\n        i0.ɵɵelementStart(38, \"div\", 3);\n        i0.ɵɵelementStart(39, \"mat-label\", 7);\n        i0.ɵɵtext(40, \"Enter Data Using\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"mat-radio-group\", 18);\n        i0.ɵɵtemplate(42, ElectricityConsumptionActivityConfigCreateComponent_mat_radio_button_42_Template, 2, 2, \"mat-radio-button\", 19);\n        i0.ɵɵtemplate(43, ElectricityConsumptionActivityConfigCreateComponent_mat_error_43_Template, 2, 1, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(44, ElectricityConsumptionActivityConfigCreateComponent_ng_container_44_Template, 19, 10, \"ng-container\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(45, ElectricityConsumptionActivityConfigCreateComponent_ng_template_45_Template, 6, 2, \"ng-template\", null, 20, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(47, ElectricityConsumptionActivityConfigCreateComponent_ng_template_47_Template, 1, 1, \"ng-template\", null, 21, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r7 = i0.ɵɵreference(46);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfig.configName\", \"required\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.processSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(22, 17, ctx.processSelectSearch.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfigData.processID\", \"required\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"messageAlertTypeInp\", ctx.MessageAlertTypeEnum.INFO)(\"messageAlertIconInp\", ctx.MessageAlertIconEnum.INFO_ICON)(\"contentInp\", ctx.sourceInfoMsg);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.entityTypeLabel);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.entityFA.controls.length > 0)(\"ngIfElse\", _r7);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dataInputMethod);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandlingForRadio(ctx.activityConfigFG, \"activityConfigData.dataInputMethodStdID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isMeterReading);\n      }\n    },\n    directives: [i9.MatCard, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormGroupName, i10.MatFormField, i10.MatLabel, i1.DefaultValueAccessor, i11.MatInput, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i12.NgIf, i13.MatSelect, i14.MatOption, i15.MatSelectSearchComponent, i1.FormControlDirective, i12.NgForOf, i16.MessageAlertComponent, i1.FormArrayName, i17.MatRadioGroup, i10.MatError, i18.MatCheckbox, i17.MatRadioButton, i1.NumberValueAccessor, i1.MinValidator],\n    pipes: [i12.AsyncPipe],\n    styles: [\"\"]\n  });\n  return ElectricityConsumptionActivityConfigCreateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}