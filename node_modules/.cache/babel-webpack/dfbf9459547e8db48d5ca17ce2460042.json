{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ReportingFrameworkDataController = /*#__PURE__*/(() => {\n  class ReportingFrameworkDataController {\n    constructor(http) {\n      this.http = http;\n    }\n    getReportFormControl(currentOrgID, configIntervalID, groupID) {\n      let url = null;\n      if (configIntervalID == null) {\n        url = this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${currentOrgID}/group/${groupID}/metric`);\n      } else {\n        url = this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${currentOrgID}/config-interval/${configIntervalID}/group/${groupID}/metric`);\n      }\n      return url;\n    }\n    createData(currentOrgID, configIntervalID, groupID, data) {\n      return this.http.post(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${currentOrgID}/config-interval/${configIntervalID}/group/${groupID}/metric`, data);\n    }\n    updateData(currentOrgID, configIntervalID, groupID, data) {\n      return this.http.patch(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${currentOrgID}/config-interval/${configIntervalID}/group/${groupID}/metric`, data);\n    }\n    getSectionList(pageNo, pazeSize, filter, currentOrgID, reportFrameworkStdID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('filter', filter);\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${currentOrgID}/reporting-framework/${reportFrameworkStdID}/section/page`, {\n        params: params\n      });\n    }\n    getReporitngFrameworkList(currentOrgID) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${currentOrgID}/reporting-framework`);\n    }\n    pdfReportGenerate(currentOrgID, reportingPeriodID, reportFramework) {\n      const options = {\n        responseType: 'arraybuffer',\n        headers: new HttpHeaders({\n          'Content-Type': 'application/octet-stream'\n        })\n      };\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${currentOrgID}/brsr/${reportingPeriodID}/report/${reportFramework}`, options);\n    }\n    getAuditTrailDetails(orgID, sectionID, groupID, configIntervalID) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/section/${sectionID}/groupID/${groupID}/config-interval/${configIntervalID}/audit-trail`);\n    }\n    matchingMetricExists(orgID, reportingFrameworkID, groupID, configIntervalID) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-framework/${reportingFrameworkID}/config-interval/${configIntervalID}/group/${groupID}/exists`);\n    }\n    getMatchingMetric(orgID, reportingFrameworkID, configIntervalID, groupID) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-framework/${reportingFrameworkID}/config-interval/${configIntervalID}/group/${groupID}`);\n    }\n    getMatchingMetricByFilter(orgID, reportingFrameworkID, configID, groupID) {\n      return this.http.get(`${environment.REPORTING_FRAMEWORK_API_URL}organizations/${orgID}/reporting-framework/${reportingFrameworkID}/config/${configID}/group/${groupID}`);\n    }\n  }\n  ReportingFrameworkDataController.ɵfac = function ReportingFrameworkDataController_Factory(t) {\n    return new (t || ReportingFrameworkDataController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ReportingFrameworkDataController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReportingFrameworkDataController,\n    factory: ReportingFrameworkDataController.ɵfac,\n    providedIn: \"root\"\n  });\n  return ReportingFrameworkDataController;\n})();","map":null,"metadata":{},"sourceType":"module"}