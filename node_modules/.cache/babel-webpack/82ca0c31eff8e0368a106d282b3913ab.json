{"ast":null,"code":"import * as moment from 'moment';\nimport { FormControl } from '@angular/forms';\nimport { ReminderDialogComponent } from '../reminder-dialog/reminder-dialog/reminder-dialog.component';\nimport { InvalidForm, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@netzero/controller/reminder.controller\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@library/date\";\nimport * as i5 from \"@library/toastr-service\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/datepicker\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@angular/material/grid-list\";\nimport * as i11 from \"@angular/common\";\nfunction ViewComponent_mat_grid_tile_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\");\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r3);\n  }\n}\nfunction ViewComponent_mat_grid_tile_22_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r4.dayOfMonth);\n  }\n}\nfunction ViewComponent_mat_grid_tile_22_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵelementStart(1, \"button\", 26);\n    i0.ɵɵelementStart(2, \"span\", 27);\n    i0.ɵɵtext(3, \" today \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 28);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" Tasks: \", item_r4[\"reminderDetails\"][\"count\"], \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"current-date\": a0\n  };\n};\nfunction ViewComponent_mat_grid_tile_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 20);\n    i0.ɵɵlistener(\"click\", function ViewComponent_mat_grid_tile_22_Template_mat_grid_tile_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const item_r4 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return item_r4[\"reminderDetails\"] && ctx_r9.seeReminders(item_r4[\"monthDate\"], item_r4[\"reminderDetails\"][\"task\"]);\n    });\n    i0.ɵɵelementStart(1, \"div\", 21);\n    i0.ɵɵtemplate(2, ViewComponent_mat_grid_tile_22_div_2_Template, 2, 1, \"div\", 22);\n    i0.ɵɵtemplate(3, ViewComponent_mat_grid_tile_22_div_3_Template, 6, 1, \"div\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, item_r4.isToday));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", item_r4.dayOfMonth !== null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r4[\"reminderDetails\"]);\n  }\n}\nexport let ViewComponent = /*#__PURE__*/(() => {\n  class ViewComponent {\n    constructor(dialog, reminderController, storageService, dateService, toastrService) {\n      this.dialog = dialog;\n      this.reminderController = reminderController;\n      this.dateService = dateService;\n      this.toastrService = toastrService;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.gridRows = 6;\n      this.gridCols = 7;\n      this.daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      this.durationViewFC = new FormControl();\n      this.durationFC = new FormControl(moment().format(\"YYYY-MM\"));\n      this.reminderM = [];\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n    }\n    ngOnInit() {\n      const today = moment().format('YYYY-MM');\n      this.durationViewFC.setValue(today);\n      this.durationFC.setValue(today);\n      this.getReminderList();\n      this.generateGridData(today);\n    }\n    monthSelectedHandler(normalizedMonth, datepicker) {\n      datepicker.close();\n      const duration = normalizedMonth.format('YYYY-MM');\n      this.durationFC.setValue(duration);\n      this.durationViewFC.setValue(duration);\n      this.getReminderList();\n      this.generateGridData(duration);\n    }\n    getReminderList() {\n      if (this.durationViewFC.invalid) {\n        this.toastrService.error(InvalidForm.INVALID_FORM_MESSAGE);\n        return;\n      }\n      this.reminderController.getReminderDetails(this.currentOrgID, this.durationFC.value).subscribe(reminderRes => {\n        this.reminderM = reminderRes;\n        // Call the method to generate grid data\n        this.generateGridData(this.durationFC.value);\n      }, error => {\n        console.log('Error in getReminderList -', error);\n        this.toastrService.error('Error in getting Reminder');\n      });\n    }\n    generateGridData(date) {\n      const firstDayOfMonth = moment(date).startOf('month').day();\n      const daysInMonth = moment(date).daysInMonth();\n      const currentDate = moment().date(); // Get the current day of the month\n      const gridData = [];\n      for (let index = 0; index < this.gridCols * this.gridRows; index++) {\n        const dayOfMonth = index - firstDayOfMonth + 1;\n        const isToday = dayOfMonth === currentDate && moment(date).isSame(moment(), 'month');\n        if (dayOfMonth >= 1 && dayOfMonth <= daysInMonth) {\n          const monthDate = moment(date).startOf('month').add(dayOfMonth - 1, 'days').format('YYYY-MM-DD');\n          const reminderDetails = this.getRemindersForDate(monthDate);\n          gridData.push({\n            dayOfMonth,\n            reminderDetails,\n            isToday,\n            monthDate\n          });\n        } else {\n          gridData.push({\n            dayOfMonth: null,\n            reminderDetails: null\n          });\n        }\n      }\n      this.gridData = gridData;\n    }\n    getRemindersForDate(monthDates) {\n      let reminders = this.reminderM.find(reminder => reminder['date'] == monthDates);\n      if (reminders) {\n        return reminders;\n      }\n    }\n    seeReminders(date, reminderData) {\n      const dialogRef = this.dialog.open(ReminderDialogComponent, {\n        data: {\n          date: date,\n          reminderData: reminderData\n        },\n        width: '500px',\n        height: '400px'\n      });\n      dialogRef.afterClosed();\n    }\n  }\n  ViewComponent.ɵfac = function ViewComponent_Factory(t) {\n    return new (t || ViewComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.ReminderController), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.DateService), i0.ɵɵdirectiveInject(i5.ToastrService));\n  };\n  ViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ViewComponent,\n    selectors: [[\"app-view\"]],\n    decls: 23,\n    vars: 7,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\", \"h100\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"pageSubtitle\"], [1, \"card-body\"], [1, \"row\"], [1, \"col-sm-2\"], [1, \"text-center\"], [\"id\", \"monthlyField\", \"appMonthYearFormat\", \"\", 1, \"mat-field-width-100\", \"cursorPointer\", 3, \"appearance\", \"click\", \"keydown.arrowdown\", \"keydown.enter\"], [1, \"formLabel\"], [\"matInput\", \"\", \"readonly\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"formControl\"], [\"matSuffix\", \"\", 1, \"fs-5\", 3, \"for\"], [\"panelClass\", \"monthPicker\", \"startView\", \"year\", 3, \"monthSelected\", \"closed\"], [\"monthly\", \"\"], [1, \"col-sm-12\"], [\"rowHeight\", \"2:1\", 3, \"cols\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"weekday-header\"], [3, \"ngClass\", \"click\"], [1, \"grid-cell\"], [\"class\", \"mb-1\", 4, \"ngIf\"], [\"class\", \"d-flex align-items-center mt-2\", 4, \"ngIf\"], [1, \"mb-1\"], [1, \"d-flex\", \"align-items-center\", \"mt-2\"], [\"type\", \"button\", 1, \"button\", \"btn\", \"btn-sm\", \"btnBase\"], [1, \"material-symbols-outlined\", \"text-primary\"], [1, \"text-dark\"]],\n    template: function ViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r11 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4, \"Tasks\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtext(6, \"Tasks help you stay organized and remember records that need to be entered. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelementStart(11, \"mat-form-field\", 9);\n        i0.ɵɵlistener(\"click\", function ViewComponent_Template_mat_form_field_click_11_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r0 = i0.ɵɵreference(17);\n          return ctx.dateService.openDatepickerOnClick(_r0);\n        })(\"keydown.arrowdown\", function ViewComponent_Template_mat_form_field_keydown_arrowdown_11_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r0 = i0.ɵɵreference(17);\n          return ctx.dateService.openDatepickerOnClick(_r0);\n        })(\"keydown.enter\", function ViewComponent_Template_mat_form_field_keydown_enter_11_listener() {\n          i0.ɵɵrestoreView(_r11);\n          const _r0 = i0.ɵɵreference(17);\n          return ctx.dateService.openDatepickerOnClick(_r0);\n        });\n        i0.ɵɵelementStart(12, \"mat-label\", 10);\n        i0.ɵɵtext(13, \"Select month\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 11);\n        i0.ɵɵelement(15, \"mat-datepicker-toggle\", 12);\n        i0.ɵɵelementStart(16, \"mat-datepicker\", 13, 14);\n        i0.ɵɵlistener(\"monthSelected\", function ViewComponent_Template_mat_datepicker_monthSelected_16_listener($event) {\n          i0.ɵɵrestoreView(_r11);\n          const _r0 = i0.ɵɵreference(17);\n          return ctx.monthSelectedHandler($event, _r0);\n        })(\"closed\", function ViewComponent_Template_mat_datepicker_closed_16_listener() {\n          return ctx.dateService.takeFocusAway(\"monthlyField\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 6);\n        i0.ɵɵelementStart(19, \"div\", 15);\n        i0.ɵɵelementStart(20, \"mat-grid-list\", 16);\n        i0.ɵɵtemplate(21, ViewComponent_mat_grid_tile_21_Template, 3, 1, \"mat-grid-tile\", 17);\n        i0.ɵɵtemplate(22, ViewComponent_mat_grid_tile_22_Template, 4, 5, \"mat-grid-tile\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(17);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r0)(\"formControl\", ctx.durationViewFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r0);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"cols\", ctx.gridCols);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.daysOfWeek);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridData);\n      }\n    },\n    directives: [i6.MatFormField, i4.MonthYearFormatDirective, i6.MatLabel, i7.MatInput, i8.MatDatepickerInput, i9.DefaultValueAccessor, i9.NgControlStatus, i9.FormControlDirective, i8.MatDatepickerToggle, i6.MatSuffix, i8.MatDatepicker, i10.MatGridList, i11.NgForOf, i10.MatGridTile, i11.NgClass, i11.NgIf],\n    styles: [\"mat-grid-list[_ngcontent-%COMP%]{width:100%}mat-grid-tile[_ngcontent-%COMP%]{background-color:#f5f5f5;text-align:center}.current-date[_ngcontent-%COMP%]{background-color:#faebd7}\"]\n  });\n  return ViewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}