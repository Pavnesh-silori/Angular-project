{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { DataInputMethod, DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport { isEqual } from 'lodash';\nimport { startWith } from 'rxjs/operators';\nimport { FormAction, FormErrorEnum, MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\nimport { PROCESS_INPUT_ENUM } from '@netzero/enum/process.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@library/unit-service\";\nimport * as i5 from \"@carbon/service/asset.service\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@carbon/service/process.service\";\nimport * as i8 from \"@carbon/service/activity.service\";\nimport * as i9 from \"@carbon/service/data-input-method.service\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"ngx-mat-select-search\";\nimport * as i16 from \"@angular/material/radio\";\nimport * as i17 from \"@angular/material/input\";\nfunction CreateUpdateComponent_ng_container_5_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainerStart(1, 20);\n    i0.ɵɵelementStart(2, \"div\", 6);\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵelementStart(4, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(5, \"mat-label\", 9);\n    i0.ɵɵtext(6, \"Activity form name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 21);\n    i0.ɵɵtemplate(8, CreateUpdateComponent_ng_container_5_mat_error_8_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandling(\"activityConfig.configName\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_mat_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const process_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", process_r8.recordID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", process_r8.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_span_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵelementStart(1, \"mat-radio-button\", 24);\n    i0.ɵɵlistener(\"change\", function CreateUpdateComponent_span_23_Template_mat_radio_button_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const input_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.inputMethodChange(input_r9.keyID);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", input_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r9.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_25_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.FormErrorEnum.NEGATIVE, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_25_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_25_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r16.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r16.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_25_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r15.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"div\", 7);\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵelementStart(4, \"div\", 26);\n    i0.ɵɵelementStart(5, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(6, \"mat-label\", 9);\n    i0.ɵɵtext(7, \"Meter rollover value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 27);\n    i0.ɵɵtemplate(9, CreateUpdateComponent_ng_container_25_mat_error_9_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵtemplate(10, CreateUpdateComponent_ng_container_25_mat_error_10_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 26);\n    i0.ɵɵelementStart(12, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(13, \"mat-label\", 9);\n    i0.ɵɵtext(14, \"Select Unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"mat-select\", 28);\n    i0.ɵɵtemplate(16, CreateUpdateComponent_ng_container_25_mat_option_16_Template, 2, 2, \"mat-option\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(17, CreateUpdateComponent_ng_container_25_mat_error_17_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"appearance\", ctx_r5.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.errorHandling(\"activityConfigData.meterRolloverValue\", \"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.errorHandling(\"activityConfigData.meterRolloverValue\", \"required\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r5.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.distanceUnit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.errorHandling(\"activityConfigData.meterRolloverUnitID\", \"required\"));\n  }\n}\nfunction CreateUpdateComponent_ng_container_27_mat_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 32);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_ng_container_27_mat_option_10_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r24);\n      const equipment_r21 = restoredCtx.$implicit;\n      const formGroup_r17 = i0.ɵɵnextContext().$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.setSourceTypeID(formGroup_r17, equipment_r21);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const equipment_r21 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", equipment_r21.assetID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", equipment_r21.assetName, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_27_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction CreateUpdateComponent_ng_container_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementContainerStart(2, 29);\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵelementStart(4, \"mat-form-field\", 8);\n    i0.ɵɵelementStart(5, \"mat-label\", 9);\n    i0.ɵɵtext(6, \"Select Combustion Equipment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-select\", 30);\n    i0.ɵɵelementStart(8, \"mat-option\");\n    i0.ɵɵelement(9, \"ngx-mat-select-search\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, CreateUpdateComponent_ng_container_27_mat_option_10_Template, 2, 2, \"mat-option\", 31);\n    i0.ɵɵpipe(11, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, CreateUpdateComponent_ng_container_27_mat_error_12_Template, 2, 1, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const formGroup_r17 = ctx.$implicit;\n    const i_r18 = ctx.index;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r18);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r6.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r6.combustionEquipmentSearch.filterFC);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(11, 5, ctx_r6.combustionEquipmentSearch.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.errorHandlingFA(formGroup_r17, \"sourceID\", \"required\"));\n  }\n}\n/* tsc-library */\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(storageService, activatedRoute, formBuilder, unitService, assetService, toastrService, processService, activityService, dataInputMethodService) {\n      this.formBuilder = formBuilder;\n      this.unitService = unitService;\n      this.assetService = assetService;\n      this.toastrService = toastrService;\n      this.processService = processService;\n      this.activityService = activityService;\n      this.dataInputMethodService = dataInputMethodService;\n      this.FormAction = FormAction;\n      this.FormErrorEnum = FormErrorEnum;\n      this.ActivityKeyIDEnum = ActivityKeyIDEnum;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.isEqual = new EventEmitter();\n      this.validity = new EventEmitter();\n      this.origin = null;\n      this.isActivityDataAdHoc = false;\n      this.ActivityConfigEnum = ActivityConfigEnum;\n      this.DataInputMethodKeyIDEnum = DataInputMethodKeyIDEnum;\n      this.processSearch = new MatSelectSearchService(['name']);\n      this.combustionEquipmentSearch = new MatSelectSearchService(['assetName']);\n      this.isValid = () => {\n        return !this.activityConfigFG.invalid;\n      };\n      this.errorHandling = (control, error) => {\n        return this.activityConfigFG.get(control).hasError(error);\n      };\n      this.errorHandlingRadio = (control, error) => {\n        return this.activityConfigFG.get(control).hasError(error) && this.activityConfigFG.get(control).touched;\n      };\n      this.errorHandlingFA = (formGroup, control, error) => {\n        return formGroup.get(control).hasError(error);\n      };\n      this.currentOrgID = storageService.getStorage(['currentOrgID']);\n      activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams['origin']) {\n          this.origin = queryParams['origin'];\n        }\n      });\n      let routeData = activatedRoute.snapshot.data;\n      if (routeData.entity == 'activity-data') {\n        this.isActivityDataAdHoc = true;\n      }\n    }\n    formGroupInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: this.activityID,\n          activityKeyID: this.activityKeyID,\n          configName: [, Validators.required],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          processID: [, Validators.required],\n          processRecordID: [, Validators.required],\n          dataInputMethodStdID: [, [Validators.required]],\n          meterRolloverValue: [],\n          meterRolloverUnitID: []\n        }),\n        activityConfigSource: this.formBuilder.array([this.sourceFG])\n      });\n    }\n    get sourceFG() {\n      return this.formBuilder.group({\n        sourceID: [[], Validators.required],\n        sourceTypeID: [, Validators.required]\n      });\n    }\n    get configNameAC() {\n      return this.activityConfigAC.get('configName');\n    }\n    get activityConfigAC() {\n      return this.activityConfigFG.get('activityConfig');\n    }\n    get activityConfigDataAC() {\n      return this.activityConfigFG.get('activityConfigData');\n    }\n    get activityConfigSourceFA() {\n      return this.activityConfigFG.get('activityConfigSource');\n    }\n    ngOnInit() {\n      this.formGroupInit();\n      this.getProcessList();\n      this.getCombustionEquipment();\n      this.getUnit();\n      this.getActivityID(ActivityKeyIDEnum.PROCESS_FUEL_CONSUMPTION);\n    }\n    isValidForm() {\n      if (this.activityConfigFG.invalid) {\n        this.activityConfigFG.markAllAsTouched();\n        console.error('invalid form - ', this.activityConfigFG);\n        return false;\n      }\n      this.configuration = {};\n      this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.getRawValue()));\n      return true;\n    }\n    activityConfigValidity() {\n      this.activityConfigFG.valueChanges.subscribe(() => this.validity.emit(this.activityConfigFG.invalid));\n    }\n    readOnlyForm() {\n      this.activityConfigFG.disable();\n    }\n    setProcessIDAndGetProcess(processRecordID, isLatest = true) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let current_process = yield this.processService.getProcessByID(this.currentOrgID, processRecordID, isLatest);\n        const fuel_input = current_process.input.find(input => input.type.keyID == PROCESS_INPUT_ENUM.FUEL);\n        if (fuel_input == undefined) {\n          this.activityConfigDataAC.get('processID').reset();\n          // this.activityConfigDataAC.get('processRecordID').reset();\n          this.toastrService.error('Process does not have fuel as an input! Please select another process.');\n          return;\n        }\n        this.activityConfigDataAC.get('processID').patchValue(current_process.processID);\n      });\n    }\n    getActivityID(activityKeyID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let allActivity = yield this.activityService.getAllActivity();\n        allActivity.forEach(activity => {\n          if (activity.keyID == activityKeyID) {\n            this.activityID = activity.id;\n            this.getDataInputMethodByActivityAndType(this.activityID);\n          }\n        });\n      });\n    }\n    getDataInputMethodByActivityAndType(activityID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.dataInputMethodList = yield this.dataInputMethodService.getDataInputMethodByActivityAndType(activityID, DataInputMethod.STANDARD);\n      });\n    }\n    getProcessList() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.processList = yield this.processService.getProcessList(this.currentOrgID);\n        const cbam_process_list = this.processList.filter(process => process.isCBAMProcess);\n        this.processSearch.entityArr = cbam_process_list;\n        this.processSearch.createSubscription();\n      });\n    }\n    getCombustionEquipment() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.combustionEquipmentList = yield this.assetService.getAllAsset(this.currentOrgID);\n        this.combustionEquipmentSearch.entityArr = this.combustionEquipmentList;\n        this.combustionEquipmentSearch.createSubscription();\n      });\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.distanceUnit = yield this.unitService.getUnit([`type:${UnitTypeKeyID.VOLUME}`]);\n      });\n    }\n    inputMethodChange(inputMethodKeyID) {\n      this.inputMethod = inputMethodKeyID;\n      if (inputMethodKeyID == DataInputMethodKeyIDEnum.METER_READING) {\n        this.activityConfigDataAC.get('meterRolloverValue').setValidators(Validators.required);\n        this.activityConfigDataAC.get('meterRolloverUnitID').setValidators(Validators.required);\n      } else {\n        this.activityConfigDataAC.get('meterRolloverValue').clearValidators();\n        this.activityConfigDataAC.get('meterRolloverUnitID').clearValidators();\n      }\n      this.activityConfigDataAC.get('meterRolloverValue').updateValueAndValidity();\n      this.activityConfigDataAC.get('meterRolloverUnitID').updateValueAndValidity();\n    }\n    setSourceTypeID(formGroup, data) {\n      formGroup.get('sourceTypeID').patchValue(data.sourceTypeID, {\n        emitEvent: false\n      });\n    }\n    patchConfiguration(configuration) {\n      var _a;\n      const activityConfig = (_a = configuration['activityConfig']) !== null && _a !== void 0 ? _a : null;\n      const activityConfigData = configuration['activityConfigData'];\n      const activityConfigSource = configuration['activityConfigSource'];\n      const dataInputMethod = activityConfigData.dataInputMethod;\n      this.inputMethodChange(dataInputMethod.keyID);\n      if (activityConfig !== null && activityConfig !== void 0 ? activityConfig : false) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig.configName\n        });\n      }\n      const process = activityConfigData.process;\n      this.activityConfigDataAC.patchValue({\n        processID: process.id,\n        processRecordID: process.recordID,\n        dataInputMethodStdID: dataInputMethod.id\n      });\n      if (dataInputMethod.keyID == DataInputMethodKeyIDEnum.METER_READING) {\n        const meterRollover = activityConfigData.meterRollover;\n        this.activityConfigDataAC.patchValue({\n          meterRolloverValue: meterRollover.value,\n          meterRolloverUnitID: meterRollover.unit.unitID\n        });\n      }\n      this.activityConfigSourceFA.clear();\n      if (activityConfig !== null && activityConfig !== void 0 ? activityConfig : false) {\n        activityConfigSource.forEach(source => {\n          this.activityConfigSourceFA.push(this.formBuilder.group({\n            sourceID: [source.sourceID],\n            sourceTypeID: source.sourceTypeID\n          }));\n        });\n      } else {\n        const source = configuration.source;\n        this.activityConfigSourceFA.push(this.formBuilder.group({\n          sourceID: [[source.source.id]],\n          sourceTypeID: source.sourceType.id\n        }));\n      }\n      if (!(activityConfig !== null && activityConfig !== void 0 ? activityConfig : false)) {\n        this.readOnlyForm();\n      } /* disables the form */\n      this.initialObject = this.activityConfigFG.value;\n      this.activityConfigFG.valueChanges.pipe(startWith({})).subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n      });\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.UnitService), i0.ɵɵdirectiveInject(i5.AssetService), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.ProcessService), i0.ɵɵdirectiveInject(i8.ActivityService), i0.ɵɵdirectiveInject(i9.DataInputMethodService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create-update\"]],\n    decls: 28,\n    vars: 12,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"py-2\"], [1, \"cardTitle\"], [3, \"formGroup\"], [4, \"ngIf\"], [\"formGroupName\", \"activityConfigData\"], [1, \"row\"], [1, \"col-sm-8\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"processRecordID\", \"required\", \"\", 3, \"selectionChange\"], [\"placeholderLabel\", \"Search by name\", \"noEntriesFoundLabel\", \"No matching name found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"mb-3\"], [1, \"formLabel\", \"ms-2\", \"pb-2\"], [\"formControlName\", \"dataInputMethodStdID\", 1, \"row\"], [\"class\", \"col-sm-6 ps-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"radioGroupError\", 4, \"ngIf\"], [\"formArrayName\", \"activityConfigSource\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"activityConfig\"], [\"placeholder\", \"Activity form name\", \"matInput\", \"\", \"formControlName\", \"configName\", \"type\", \"text\", \"required\", \"\"], [3, \"value\"], [1, \"col-sm-6\", \"ps-3\"], [1, \"col-sm-3\", 3, \"value\", \"change\"], [1, \"radioGroupError\"], [1, \"col-sm-6\"], [\"matInput\", \"\", \"min\", \"0\", \"type\", \"number\", \"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"meterRolloverValue\", 1, \"formPlaceholder\"], [\"formControlName\", \"meterRolloverUnitID\"], [3, \"formGroupName\"], [\"formControlName\", \"sourceID\", \"multiple\", \"\", \"required\", \"\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3, \"Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"form\", 3);\n        i0.ɵɵtemplate(5, CreateUpdateComponent_ng_container_5_Template, 9, 2, \"ng-container\", 4);\n        i0.ɵɵelementContainerStart(6, 5);\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"mat-form-field\", 8);\n        i0.ɵɵelementStart(10, \"mat-label\", 9);\n        i0.ɵɵtext(11, \"Select Process\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-select\", 10);\n        i0.ɵɵlistener(\"selectionChange\", function CreateUpdateComponent_Template_mat_select_selectionChange_12_listener($event) {\n          return ctx.setProcessIDAndGetProcess($event.value);\n        });\n        i0.ɵɵelementStart(13, \"mat-option\");\n        i0.ɵɵelement(14, \"ngx-mat-select-search\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, CreateUpdateComponent_mat_option_15_Template, 2, 2, \"mat-option\", 12);\n        i0.ɵɵpipe(16, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, CreateUpdateComponent_mat_error_17_Template, 2, 1, \"mat-error\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 13);\n        i0.ɵɵelementStart(19, \"mat-label\", 14);\n        i0.ɵɵtext(20, \" Enter fuel consumption data using\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 7);\n        i0.ɵɵelementStart(22, \"mat-radio-group\", 15);\n        i0.ɵɵtemplate(23, CreateUpdateComponent_span_23_Template, 3, 2, \"span\", 16);\n        i0.ɵɵtemplate(24, CreateUpdateComponent_mat_error_24_Template, 2, 1, \"mat-error\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, CreateUpdateComponent_ng_container_25_Template, 18, 6, \"ng-container\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(26, 18);\n        i0.ɵɵtemplate(27, CreateUpdateComponent_ng_container_27_Template, 13, 7, \"ng-container\", 19);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == ctx.ActivityConfigEnum.PFF);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.processSearch.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(16, 10, ctx.processSearch.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"activityConfigData.processID\", \"required\"));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dataInputMethodList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandlingRadio(\"activityConfigData.dataInputMethodStdID\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.inputMethod == ctx.DataInputMethodKeyIDEnum.METER_READING);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityConfigSourceFA.controls);\n      }\n    },\n    directives: [i10.MatCard, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i11.NgIf, i3.FormGroupName, i12.MatFormField, i12.MatLabel, i13.MatSelect, i3.NgControlStatus, i3.FormControlName, i3.RequiredValidator, i14.MatOption, i15.MatSelectSearchComponent, i3.FormControlDirective, i11.NgForOf, i16.MatRadioGroup, i3.FormArrayName, i17.MatInput, i3.DefaultValueAccessor, i12.MatError, i16.MatRadioButton, i3.MinValidator, i3.NumberValueAccessor],\n    pipes: [i11.AsyncPipe],\n    styles: [\".radioGroupError[_ngcontent-%COMP%]{font-size:10.56px!important;padding-left:23px!important;padding-top:5px!important}\"]\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}