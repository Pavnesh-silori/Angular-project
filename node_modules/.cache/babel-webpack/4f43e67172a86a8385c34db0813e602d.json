{"ast":null,"code":"// tsc-library\nimport { COMMON_CONSTANT } from '@library/tsc-common';\nimport { LOADING_GRAPHIC, NO_DATA_GRAPHIC } from '@library/echart';\n// /tsc-library/\nimport { CommonModule } from '@angular/common';\nimport { NgxEchartsModule } from 'ngx-echarts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-echarts\";\nexport let StackedHorizontalBarChartComponent = /*#__PURE__*/(() => {\n  class StackedHorizontalBarChartComponent {\n    constructor() {\n      this.renderFlag = 'LOADING';\n    }\n    ngOnInit() {\n      this.noDataOption = {\n        title: {\n          text: this.chartMetaData.title,\n          textStyle: {\n            color: this.chartMetaData.titleColor\n          },\n          padding: [7, 0, 0, 20]\n        },\n        graphic: NO_DATA_GRAPHIC,\n        xAxis: {\n          show: false\n        },\n        yAxis: {\n          show: false\n        }\n      };\n      this.chartDataCheck();\n    }\n    ngOnChanges() {\n      this.chartDataCheck();\n    }\n    chartDataCheck() {\n      if (this.renderFlag == 'LOADING') {\n        this.chartDataOption = LOADING_GRAPHIC;\n      } else if (this.renderFlag == 'DATA') {\n        this.drawChart();\n      } else {\n        this.chartDataOption = this.noDataOption;\n      }\n    }\n    drawChart() {\n      this.chartDataOption = {\n        color: this.chartMetaData.color,\n        toolbox: {\n          feature: {\n            // dataView: { show: true, readOnly: true },\n            magicType: {\n              show: true,\n              type: ['line']\n            },\n            restore: {\n              show: true\n            },\n            saveAsImage: {\n              show: true\n            }\n          }\n        },\n        title: {\n          show: true,\n          text: `${this.chartMetaData.title} (${this.chartData.uomName})`,\n          textStyle: {\n            color: this.chartMetaData.titleColor\n          },\n          padding: [7, 0, 0, 20]\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'line'\n          }\n        },\n        legend: {\n          bottom: '1%',\n          left: 'center'\n        },\n        xAxis: {\n          type: 'category',\n          data: this.chartData.data.map(m => ({\n            value: m.duration\n          })),\n          name: this.chartMetaData.xAxisName,\n          nameTextStyle: {\n            align: 'right',\n            verticalAlign: 'top',\n            padding: [30, 0, 0, 0]\n          }\n        },\n        yAxis: {\n          type: 'value',\n          min: 0\n        },\n        series: [{\n          name: 'Scope 1',\n          type: 'bar',\n          stack: ' total',\n          label: {\n            show: false\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: this.chartData.data.map(m => ({\n            value: m.scope1\n          })),\n          tooltip: {\n            valueFormatter: value => {\n              return value == null ? COMMON_CONSTANT.NO_DATA : value + ' ' + this.chartData.uomName;\n            }\n          }\n        }, {\n          name: 'Scope 2',\n          type: 'bar',\n          stack: ' total',\n          label: {\n            show: false\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: this.chartData.data.map(m => ({\n            value: m.scope2\n          })),\n          tooltip: {\n            valueFormatter: value => {\n              return value == null ? COMMON_CONSTANT.NO_DATA : value + ' ' + this.chartData.uomName;\n            }\n          }\n        }, {\n          name: 'Scope 3',\n          type: 'bar',\n          stack: ' total',\n          label: {\n            show: false\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: this.chartData.data.map(m => ({\n            value: m.scope3\n          })),\n          tooltip: {\n            valueFormatter: value => {\n              return value == null ? COMMON_CONSTANT.NO_DATA : value + ' ' + this.chartData.uomName;\n            }\n          }\n        }]\n      };\n    }\n  }\n  StackedHorizontalBarChartComponent.ɵfac = function StackedHorizontalBarChartComponent_Factory(t) {\n    return new (t || StackedHorizontalBarChartComponent)();\n  };\n  StackedHorizontalBarChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StackedHorizontalBarChartComponent,\n    selectors: [[\"app-stacked-horizontal-bar-chart\"]],\n    inputs: {\n      renderFlag: \"renderFlag\",\n      chartData: \"chartData\",\n      chartMetaData: \"chartMetaData\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\"], [1, \"card-body\"], [\"echarts\", \"\", 3, \"options\"]],\n    template: function StackedHorizontalBarChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"options\", ctx.chartDataOption);\n      }\n    },\n    directives: [i1.NgxEchartsDirective],\n    encapsulation: 2\n  });\n  return StackedHorizontalBarChartComponent;\n})();\nexport let StackedHorizontalBarChartModule = /*#__PURE__*/(() => {\n  class StackedHorizontalBarChartModule {}\n  StackedHorizontalBarChartModule.ɵfac = function StackedHorizontalBarChartModule_Factory(t) {\n    return new (t || StackedHorizontalBarChartModule)();\n  };\n  StackedHorizontalBarChartModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: StackedHorizontalBarChartModule\n  });\n  StackedHorizontalBarChartModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, NgxEchartsModule.forRoot({\n      echarts: () => import('echarts')\n    })]]\n  });\n  return StackedHorizontalBarChartModule;\n})();","map":null,"metadata":{},"sourceType":"module"}