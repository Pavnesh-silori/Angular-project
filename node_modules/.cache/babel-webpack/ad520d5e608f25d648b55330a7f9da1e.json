{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SubsidiaryEmissionDataController = /*#__PURE__*/(() => {\n  class SubsidiaryEmissionDataController {\n    constructor(http) {\n      this.http = http;\n    }\n    getEmissionDataByPage(rootOrgID, pageNo, pageSize, sortBy, orderBy, search, filter) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      search.forEach(search => params = params.append('search', search));\n      filter.forEach(filter => params = params.append('filter', filter));\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${rootOrgID}/subsidiary/emission/data/page`, {\n        params: params\n      });\n    }\n    createSubsidaryEmissiondata(orgID, formData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/subsidiary/emission`, formData);\n    }\n    createSubsidiaryEmissionExternalOrg(orgID, formData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_PUBLIC_API_URL}organizations/${orgID}/subsidiary/emission`, formData);\n    }\n    getSubsidaryEmissionDataByID(orgID, subsidaryEmissionDataID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/subsidiary/emission/${subsidaryEmissionDataID}`);\n    }\n    updateSubsidaryEmissiondata(orgID, formData, subsidaryEmissionID) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/subsidiary/emission/${subsidaryEmissionID}`, formData);\n    }\n    deleteSubsidiaryEmissionDataByID(orgID, subsidiaryEmissionDataID) {\n      return this.http.delete(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/subsidiary/emission/data/${subsidiaryEmissionDataID}`);\n    }\n    getEmissionDataByOrgID(orgID, startDate, endDate) {\n      let params = new HttpParams();\n      // params = params.append('emmissionOf', emissionBy);\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/subsidiary/emission`, {\n        params: params\n      });\n    }\n    getEmissionDataByRequestID(orgID, requestID, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organization/${orgID}/request/${requestID}/emission/data`, {\n        params: params\n      });\n    }\n    checkTokenValidation(token) {\n      let headers = new HttpHeaders().set('skipAuth', '1');\n      let params = new HttpParams();\n      params = params.append('token', encodeURIComponent(token));\n      return this.http.get(`${environment.ORGANIZATION_PUBLIC_API_URL}subsidiary/emission/token/validate`, {\n        params: params,\n        headers: headers\n      });\n    }\n    sendOtp(emailID) {\n      let params = new HttpParams();\n      params = params.append('email', encodeURIComponent(emailID));\n      return this.http.post(`${environment.ORGANIZATION_PUBLIC_API_URL}email/otp`, '', {\n        params: params\n      });\n    }\n  }\n  SubsidiaryEmissionDataController.ɵfac = function SubsidiaryEmissionDataController_Factory(t) {\n    return new (t || SubsidiaryEmissionDataController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SubsidiaryEmissionDataController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubsidiaryEmissionDataController,\n    factory: SubsidiaryEmissionDataController.ɵfac,\n    providedIn: 'root'\n  });\n  return SubsidiaryEmissionDataController;\n})();","map":null,"metadata":{},"sourceType":"module"}