{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { PROCESS_INPUT_ENUM, PROCESS_OUTPUT_ENUM } from '@netzero/enum/process.enum';\nimport { MatSelectSearchService } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport let FormService = /*#__PURE__*/(() => {\n  class FormService {\n    constructor(formBuilder) {\n      this.formBuilder = formBuilder;\n    }\n    getInputFG(inputMehtod, isStandard, subList, optionList) {\n      let search_utility = new MatSelectSearchService(['name']);\n      search_utility.entityArr = subList;\n      search_utility.createSubscription();\n      let key_id = inputMehtod ? inputMehtod.keyID : null;\n      let fg = this.formBuilder.group({\n        typeID: [inputMehtod ? inputMehtod.id : null, [Validators.required]],\n        typeKeyID: [inputMehtod ? inputMehtod.keyID : null],\n        typeName: [inputMehtod ? inputMehtod.name : null],\n        isStandard: [isStandard],\n        subType: [subList !== null && subList !== void 0 ? subList : null],\n        optionList: [optionList !== null && optionList !== void 0 ? optionList : null],\n        searchUtil: [search_utility],\n        entityIDs: [, key_id != null && (key_id == PROCESS_INPUT_ENUM.RAW_MATERIAL || key_id == PROCESS_INPUT_ENUM.INTERMEDIATE_PRODUCT || key_id == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT) ? [Validators.required] : null],\n        entitySourceIDs: [, key_id != null && (key_id == PROCESS_INPUT_ENUM.HEAT || key_id == PROCESS_INPUT_ENUM.ELECTRICITY || key_id == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT) ? [Validators.required] : null]\n      });\n      return fg;\n    }\n    getOutputFG(outputMethod, subList, optionList) {\n      let search_utility = new MatSelectSearchService(['name']);\n      search_utility.entityArr = subList;\n      search_utility.createSubscription();\n      let key_id = outputMethod ? outputMethod.keyID : null;\n      let fg = this.formBuilder.group({\n        typeID: [outputMethod ? outputMethod.id : null, [Validators.required]],\n        typeKeyID: [outputMethod ? outputMethod.keyID : null],\n        typeName: [outputMethod ? outputMethod.name : null],\n        isStandard: [],\n        subType: [subList !== null && subList !== void 0 ? subList : null],\n        optionList: [optionList !== null && optionList !== void 0 ? optionList : null],\n        searchUtil: [search_utility],\n        entityIDs: [, key_id != null && (key_id == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.BY_PRODUCT_AND_WASTE || key_id == PROCESS_OUTPUT_ENUM.CO_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.PROCESS_EMISSIONS) ? [Validators.required] : null],\n        entitySourceIDs: [, key_id != null && (key_id == PROCESS_OUTPUT_ENUM.ELECTRICITY || key_id == PROCESS_OUTPUT_ENUM.HEAT || key_id == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.WASTE_GAS_STREAM) ? [Validators.required] : null]\n      });\n      return fg;\n    }\n    patchAndGetInputFG(input, entities, entitySources, subList, optionList) {\n      let search_utility = new MatSelectSearchService(['name']);\n      search_utility.entityArr = subList;\n      search_utility.createSubscription();\n      let entityIDs = entities != null ? entities.map(e => e.id) : null;\n      let entitySourceIDs = entitySources != null ? entitySources.map(e => e.id) : null;\n      let type = input.type;\n      let key_id = type.keyID;\n      return this.formBuilder.group({\n        typeID: [type.id, [Validators.required]],\n        typeKeyID: [key_id],\n        typeName: [type.name],\n        isStandard: [],\n        subType: [subList],\n        optionList: [optionList],\n        searchUtil: [search_utility],\n        entityIDs: [key_id == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT ? entityIDs[0] : entityIDs, key_id == PROCESS_INPUT_ENUM.RAW_MATERIAL || key_id == PROCESS_INPUT_ENUM.INTERMEDIATE_PRODUCT || key_id == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT ? [Validators.required] : null],\n        entitySourceIDs: [entitySourceIDs, key_id == PROCESS_INPUT_ENUM.HEAT || key_id == PROCESS_INPUT_ENUM.ELECTRICITY || key_id == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT ? [Validators.required] : null]\n      });\n    }\n    patchAndGetOutputFG(output, entities, entitySources, subList, optionList) {\n      let search_utility = new MatSelectSearchService(['name']);\n      search_utility.entityArr = subList;\n      search_utility.createSubscription();\n      let type = output.type;\n      let key_id = type.keyID;\n      let entityIDs = entities != null ? entities.map(e => e.id) : null;\n      let entitySourceIDs = entitySources != null ? entitySources.map(e => e.id) : null;\n      return this.formBuilder.group({\n        typeID: [type.id, [Validators.required]],\n        typeKeyID: [key_id],\n        typeName: [type.name],\n        isStandard: [],\n        subType: [subList],\n        optionList: [optionList],\n        searchUtil: [search_utility],\n        entityIDs: [key_id == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT ? entityIDs[0] /* for given keys single select is used */ : entityIDs, key_id == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.BY_PRODUCT_AND_WASTE || key_id == PROCESS_OUTPUT_ENUM.CO_PRODUCT ? [Validators.required] : null],\n        entitySourceIDs: [entitySourceIDs, key_id == PROCESS_OUTPUT_ENUM.ELECTRICITY || key_id == PROCESS_OUTPUT_ENUM.HEAT || key_id == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || key_id == PROCESS_OUTPUT_ENUM.WASTE_GAS_STREAM ? [Validators.required] : null]\n      });\n    }\n    createValueJson(process, processComponent) {\n      let standardFuel;\n      let input_includes_fuel = false;\n      if (process.isCBAMProcess) {\n        process.input = process.input.map(input => {\n          let type_key_id = input.typeKeyID;\n          if (input.typeKeyID == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT) {\n            input.entityIDs = [input.entityIDs];\n          }\n          if (type_key_id == PROCESS_INPUT_ENUM.FUEL) {\n            input_includes_fuel = true;\n            standardFuel = {\n              typeID: input.typeID,\n              typeKeyID: input.typeKeyID,\n              typeName: input.typeName,\n              isStandard: true,\n              entityIDs: processComponent.standardFuelFC.value,\n              entitySourceIDs: input.entitySourceIDs\n            };\n            return {\n              typeID: input.typeID,\n              typeKeyID: input.typeKeyID,\n              typeName: input.typeName,\n              isStandard: false,\n              entityIDs: processComponent.customFuelFC.value,\n              entitySourceIDs: input.entitySourceIDs\n            };\n          } else {\n            return {\n              typeID: input.typeID,\n              typeKeyID: input.typeKeyID,\n              typeName: input.typeName,\n              isStandard: input.isStandard,\n              entityIDs: input.entityIDs,\n              entitySourceIDs: input.entitySourceIDs\n            };\n          }\n        });\n        if (input_includes_fuel) process.input.push(standardFuel);\n        process.output = process.output.map(output => {\n          let entityIDs = output.entityIDs;\n          if (output.typeKeyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT || output.typeKeyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT || output.typeKeyID == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT) {\n            entityIDs = [output.entityIDs];\n          }\n          return {\n            typeID: output.typeID,\n            typeKeyID: output.typeKeyID,\n            typeName: output.typeName,\n            entityIDs: entityIDs,\n            entitySourceIDs: output.entitySourceIDs\n          };\n        });\n      }\n    }\n  }\n  FormService.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.FormBuilder));\n  };\n  FormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n  return FormService;\n})();","map":null,"metadata":{},"sourceType":"module"}