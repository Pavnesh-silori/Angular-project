{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmployeeSurveyController = /*#__PURE__*/(() => {\n  class EmployeeSurveyController {\n    constructor(http) {\n      this.http = http;\n    }\n    createSurvey(orgID, value) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/employee-commuting/surveys`, value);\n    }\n    getEmployeeSurveyByPage(orgID, pageNo, pazeSize, sortBy, orderBy, filterArr, searchValue, dateFlag, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      if (searchValue != null) {\n        params = params.append('searchValue', searchValue);\n      }\n      filterArr.forEach(filter => params = params.append('filter', filter));\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/employee-commuting/surveys/page`, {\n        params: params\n      });\n    }\n    getSurveyByID(orgID, surveyID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/employee-commuting/surveys/${surveyID}`);\n    }\n    createSurveyData(value) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_PUBLIC_API_URL}employee-commuting/surveys/data`, value);\n    }\n    getSurveyDataByPage(orgID, surveyID, pageNo, pazeSize, sortBy, orderBy, filterArr, searchFlag, searchValue) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pazeSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      if (searchFlag) {\n        params = params.append('searchValue', searchValue);\n      }\n      filterArr.forEach(filter => params = params.append('filter', filter));\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/employee-commuting/surveys/${surveyID}/data/page`, {\n        params: params\n      });\n    }\n    getAllModeOfTransport(orgID) {\n      let params = new HttpParams();\n      params = params.append('rootOrgID', orgID);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_PUBLIC_API_URL}employee-commuting/mode-of-transports`, {\n        params: params\n      });\n    }\n    getExistingSurveyStatus(orgID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/employee-commuting/existing-survey`);\n    }\n    sendReminderSurvey(orgID, surveyID) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/surveys/${surveyID}/reminder`, {});\n    }\n    endSurvey(orgID, surveyID) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/surveys/${surveyID}/end-survey`, {});\n    }\n    getSurveySummary(orgID, surveyID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/employee-commuting/surveys/${surveyID}/cohort-graph`);\n    }\n    genreateOTP(value) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_PUBLIC_API_URL}employee-commuting/generate-otp`, value);\n    }\n    getEmployeeCount(orgID) {\n      return this.http.get(`${environment.COMMON_API_URL}organizations/${orgID}/employees/count`);\n    }\n    getEmployeeData(employeeID) {\n      return this.http.get(`${environment.COMMON_PUBLIC_API_URL}employees/${employeeID}`);\n    }\n  }\n  EmployeeSurveyController.ɵfac = function EmployeeSurveyController_Factory(t) {\n    return new (t || EmployeeSurveyController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  EmployeeSurveyController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeSurveyController,\n    factory: EmployeeSurveyController.ɵfac,\n    providedIn: 'root'\n  });\n  return EmployeeSurveyController;\n})();","map":null,"metadata":{},"sourceType":"module"}