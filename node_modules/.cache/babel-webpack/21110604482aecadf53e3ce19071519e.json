{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { CalculationApproachKeyIDEnum } from '@carbon/enum/equiment.enum';\nimport { GasGwpDataSet, RecordData } from '@report-framework/model/record-data.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@carbon/controller/activity-data.controller\";\nimport * as i3 from \"@carbon/controller/gwp-dataset.controller\";\nimport * as i4 from \"@library/storage-service\";\nimport * as i5 from \"./shared/header/header.component\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"./shared/details/details.component\";\nimport * as i8 from \"../view/_shared/emission-details/emission-details.component\";\nimport * as i9 from \"../view/_shared/calculation-details/calculation-details.component\";\nimport * as i10 from \"./shared/factor-details/factor-details.component\";\nfunction RecordDetailsComponent_factor_details_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"factor-details\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"gwpResponse\", ctx_r0.gwpResponse);\n  }\n}\nexport let RecordDetailsComponent = /*#__PURE__*/(() => {\n  class RecordDetailsComponent {\n    constructor(activatedRoute, activityDataService, gwpdatasetController, storageService) {\n      this.activatedRoute = activatedRoute;\n      this.activityDataService = activityDataService;\n      this.gwpdatasetController = gwpdatasetController;\n      this.storageService = storageService;\n      this.recordData = new RecordData();\n      this.gwpResponse = new GasGwpDataSet();\n      this.isGwDataLoaded = false;\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.getAllData();\n    }\n    getAllData() {\n      this.activatedRoute.params.subscribe(params => {\n        this.calculationApproachKeyID = params.calculationApproachKeyID;\n        this.cedID = parseInt(params.calculatedEmissionDataID);\n        this.getEmissionDataByActivityDataID();\n        this.getFactorDetails();\n        if (this.calculationApproachKeyID == CalculationApproachKeyIDEnum.CALCULATION_SCREENING) {\n          this.getScreeningActivity();\n          this.getScreeningRecordData();\n        } else {\n          this.getRecordData();\n        }\n      });\n    }\n    getFactorDetails() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.gwpdatasetController.getFugitiveFactorDetails(this.currentOrgID, this.cedID).subscribe(response => {\n          this.gwpResponse = response;\n          this.isGwDataLoaded = true;\n          this.gasName = this.gwpResponse.gasName;\n        }, error => {\n          console.log('error in getFactorDetails() - ', error);\n        });\n      });\n    }\n    getRecordData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.activityDataService.getFugitiveRecordData(this.currentOrgID, this.cedID).subscribe(response => {\n          this.recordData = response;\n        }, error => {\n          console.log('error in getRecordData() - ', error);\n        });\n      });\n    }\n    getScreeningActivity() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.activityDataService.getScreeningActivity(this.currentOrgID, this.cedID).subscribe(recordDataRes => {\n          this.recordData = recordDataRes;\n        }, error => {\n          console.log('error in getScreeningActivity() - ', error);\n        });\n      });\n    }\n    getScreeningRecordData() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.activityDataService.getSalesRecord(this.currentOrgID, this.cedID).subscribe(recordDataRes => {\n          this.screeningRecordData = recordDataRes;\n        }, error => {\n          console.log('error in getScreeningRecordData() - ', error);\n        });\n      });\n    }\n    getEmissionDataByActivityDataID() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.activityDataService.getEmissionDataByActivityDataID(this.currentOrgID, this.cedID).subscribe(emissionRes => {\n          if (emissionRes != null) {\n            this.emissionData = emissionRes;\n            this.cedID = emissionRes['cedID'];\n          }\n        }, error => {\n          console.log('error in getEmissionDataByActivityDataID() - ', error);\n        });\n      });\n    }\n  }\n  RecordDetailsComponent.ɵfac = function RecordDetailsComponent_Factory(t) {\n    return new (t || RecordDetailsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ActivityDataController), i0.ɵɵdirectiveInject(i3.GwpdatasetController), i0.ɵɵdirectiveInject(i4.StorageService));\n  };\n  RecordDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RecordDetailsComponent,\n    selectors: [[\"app-record-details\"]],\n    decls: 10,\n    vars: 9,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\", \"h100\"], [3, \"recordData\", \"gasName\"], [1, \"mt-0\"], [1, \"row\", \"pb-2\"], [1, \"col-sm-4\"], [3, \"gwpResponse\", 4, \"ngIf\"], [1, \"col-sm-8\", \"recordData\"], [3, \"recordData\", \"gasName\", \"screeningRecordData\"], [3, \"recordData\", \"emissionData\"], [3, \"emissionData\"], [3, \"gwpResponse\"]],\n    template: function RecordDetailsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"header\", 1);\n        i0.ɵɵelement(2, \"hr\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtemplate(5, RecordDetailsComponent_factor_details_5_Template, 1, 1, \"factor-details\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelement(7, \"app-details\", 7);\n        i0.ɵɵelement(8, \"emission-details\", 8);\n        i0.ɵɵelement(9, \"calculation-details\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"recordData\", ctx.recordData)(\"gasName\", ctx.gasName);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGwDataLoaded);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"recordData\", ctx.recordData)(\"gasName\", ctx.gasName)(\"screeningRecordData\", ctx.screeningRecordData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"recordData\", ctx.recordData)(\"emissionData\", ctx.emissionData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"emissionData\", ctx.emissionData);\n      }\n    },\n    directives: [i5.HeaderComponent, i6.NgIf, i7.DetailsComponent, i8.EmissionDetailsComponent, i9.CalculationDetailsComponent, i10.FactorDetailsComponent],\n    styles: [\".sectionHeader[_ngcontent-%COMP%]{font-size:20px;font-weight:500;color:#000;border:1px;height:35px;border-radius:8px;background-color:#0000000f;background-color:#e0e5f0f6;display:flex;align-items:center}.sectionHeader[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{margin-left:15px}.section[_ngcontent-%COMP%]{background-color:#e0e5f04d}.sectionSubHeader[_ngcontent-%COMP%]{font-weight:500;color:#000;border:1px;font-size:15px!important;margin-top:15px;margin-bottom:10px}  a{cursor:pointer}.borderLeft[_ngcontent-%COMP%]{border-left:2px solid #4950573e}.col-form-value[_ngcontent-%COMP%]{padding-top:.5rem}.linkColor[_ngcontent-%COMP%]{color:#3f6ad8}.recordData[_ngcontent-%COMP%]{border-left:1px rgba(75,82,90,.185) solid}\"]\n  });\n  return RecordDetailsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}