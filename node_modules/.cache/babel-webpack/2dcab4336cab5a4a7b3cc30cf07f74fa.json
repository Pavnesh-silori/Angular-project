{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmissionController = /*#__PURE__*/(() => {\n  class EmissionController {\n    constructor(http) {\n      this.http = http;\n    }\n    getScopeActivityWiseYearlyEmission(orgID, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/base-year/sbti/emission`, {\n        params: params\n      });\n    }\n    getScopeWiseEmissionAtGasLevel(orgID, year, consolidationApproachKeyID, isIncludeSubsidiary) {\n      let params = new HttpParams();\n      params = params.append('isIncludeSubsidiary', isIncludeSubsidiary);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/calculated-emission/${year}/consolidation-approach/${consolidationApproachKeyID}`, {\n        params: params\n      });\n    }\n    getConsolidationApproachBasedScopeActivityEmissionByOrgID(orgID, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/base-year/ghg/emission`, {\n        params: params\n      });\n    }\n    getBiogenicEmissions(orgID, startDate, endDate, isIncludeSubsidiary, consolidationApproach) {\n      let params = new HttpParams();\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      params = params.append('isIncludeSubsidiary', isIncludeSubsidiary);\n      params = params.append('consolidationApproach', consolidationApproach);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/biogenic-emission`, {\n        params: params\n      });\n    }\n  }\n  EmissionController.ɵfac = function EmissionController_Factory(t) {\n    return new (t || EmissionController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  EmissionController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmissionController,\n    factory: EmissionController.ɵfac,\n    providedIn: 'root'\n  });\n  return EmissionController;\n})();","map":null,"metadata":{},"sourceType":"module"}