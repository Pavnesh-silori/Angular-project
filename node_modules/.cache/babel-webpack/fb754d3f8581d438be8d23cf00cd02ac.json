{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { isEqual } from 'lodash';\nimport { startWith } from 'rxjs/operators';\nimport { ActivityKeyIDEnum } from \"@carbon/enum/activity.enum\";\nimport { FormAction, FormErrorEnum, MaterialFormFieldAppearance } from \"@library/tsc-common\";\nexport class ActivityConfig {\n  constructor() {\n    this.FormAction = FormAction;\n    this.FormErrorEnum = FormErrorEnum;\n    this.ActivityKeyIDEnum = ActivityKeyIDEnum;\n    this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n    this.isEqual = new EventEmitter();\n    this.validity = new EventEmitter();\n    this.isValid = () => {\n      return !this.activityConfigFG.invalid;\n    };\n    this.errorHandling = (formGroup, controlPath, error) => {\n      return formGroup.get(controlPath).hasError(error);\n    };\n    this.errorHandlingForRadio = (formGroup, controlPath, error) => {\n      return formGroup.get(controlPath).hasError(error) && formGroup.get(controlPath).touched;\n    };\n  }\n  get activityConfigAC() {\n    return this.activityConfigFG.get('activityConfig');\n  }\n  get activityConfigDataAC() {\n    return this.activityConfigFG.get('activityConfigData');\n  }\n  isValidForm() {\n    if (this.activityConfigFG.invalid) {\n      this.activityConfigFG.markAllAsTouched();\n      console.error('invalid activityConfigFG -', this.activityConfigFG);\n      return false;\n    }\n    this.configuration = {};\n    this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.getRawValue()));\n    return true;\n  }\n  activityConfigValidity() {\n    this.activityConfigFG.valueChanges.subscribe(() => this.validity.emit(this.activityConfigFG.invalid));\n  }\n  readOnlyForm() {\n    this.activityConfigFG.disable();\n  }\n  get configNameAC() {\n    throw new Error('Method not implemented.');\n  }\n  get activityConfigSourceFA() {\n    throw new Error(\"Method not implemented.\");\n  }\n  updateInitialObject() {\n    this.initialObject = this.activityConfigFG.getRawValue();\n    this.activityConfigFG.valueChanges.pipe(startWith({})).subscribe(() => {\n      this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}