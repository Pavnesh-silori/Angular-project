{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { CARBON_CONSTANT } from '@carbon/constant/carbon.constant';\nimport { DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\n// tsc-library\nimport { UnitTypeKeyID } from \"@library/unit-service\";\nimport { MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@carbon/service/asset.service\";\nimport * as i4 from \"@carbon/service/data-input-method.service\";\nimport * as i5 from \"@library/unit-service\";\nimport * as i6 from \"@library/storage-service\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/radio\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"ngx-mat-select-search\";\nimport * as i14 from \"@angular/material/input\";\nfunction CreateUpdateComponent_mat_form_field_5_mat_error_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Enter an activity form name \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_form_field_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 17);\n    i0.ɵɵelementStart(1, \"mat-label\", 13);\n    i0.ɵɵtext(2, \" Activity form name \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 18);\n    i0.ɵɵtemplate(4, CreateUpdateComponent_mat_form_field_5_mat_error_4_Template, 2, 0, \"mat-error\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.activityConfigFG.get(\"activityConfig\").get(\"configName\").hasError(\"required\"));\n  }\n}\nfunction CreateUpdateComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelementStart(2, \"mat-radio-button\", 21);\n    i0.ɵɵlistener(\"change\", function CreateUpdateComponent_div_12_Template_mat_radio_button_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const input_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.alterValidators(input_r7.keyID);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", input_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r7.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Select an option \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_div_14_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelementStart(2, \"mat-radio-button\", 21);\n    i0.ɵɵlistener(\"change\", function CreateUpdateComponent_div_14_div_6_Template_mat_radio_button_change_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const input_r12 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.alterValidatorsForDataInput(input_r12.keyID);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r12 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", input_r12.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r12.name, \" \");\n  }\n}\nfunction CreateUpdateComponent_div_14_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Select an option \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵtext(2, \"Enter data using\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵelementStart(4, \"mat-radio-group\", 23);\n    i0.ɵɵelementStart(5, \"div\", 8);\n    i0.ɵɵtemplate(6, CreateUpdateComponent_div_14_div_6_Template, 4, 2, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, CreateUpdateComponent_div_14_mat_error_7_Template, 2, 0, \"mat-error\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.statndardMointor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.requiredCheck(\"dataInputMethodID\"));\n  }\n}\nfunction CreateUpdateComponent_ng_container_15_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Enter a meter rollover value\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_ng_container_15_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Meter rollover value can not be negative\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_ng_container_15_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 30);\n    i0.ɵɵelementStart(1, \"div\", 31);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r19 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", input_r19.id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", input_r19.name + \" - \", \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(input_r19.uomCode);\n  }\n}\nfunction CreateUpdateComponent_ng_container_15_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Select Unit\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 24);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 25);\n    i0.ɵɵelementStart(3, \"mat-label\", 13);\n    i0.ɵɵtext(4, \" Meter rollover value \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 26);\n    i0.ɵɵtemplate(6, CreateUpdateComponent_ng_container_15_mat_error_6_Template, 2, 0, \"mat-error\", 10);\n    i0.ɵɵtemplate(7, CreateUpdateComponent_ng_container_15_mat_error_7_Template, 2, 0, \"mat-error\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-form-field\", 27);\n    i0.ɵɵelementStart(9, \"mat-label\", 13);\n    i0.ɵɵtext(10, \" Select Unit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"mat-select\", 28);\n    i0.ɵɵelementStart(12, \"mat-option\");\n    i0.ɵɵelement(13, \"ngx-mat-select-search\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, CreateUpdateComponent_ng_container_15_mat_option_14_Template, 6, 3, \"mat-option\", 29);\n    i0.ɵɵpipe(15, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, CreateUpdateComponent_ng_container_15_mat_error_16_Template, 2, 0, \"mat-error\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r4.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.requiredCheck(\"meterRollOver\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.minCheck(\"meterRollOver\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r4.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r4.unitSearchUtil.filterFC);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 7, ctx_r4.unitSearchUtil.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.requiredCheck(\"meterUnitID\"));\n  }\n}\nfunction CreateUpdateComponent_mat_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 32);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_mat_option_22_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const input_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.setSourceTypeID(input_r20);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const input_r20 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", input_r20.assetID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", input_r20.assetName, \" \");\n  }\n}\n// tsc-library\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(fb, activatedRoute, assetService, dataInputMethodService, unitService, storageService) {\n      this.fb = fb;\n      this.activatedRoute = activatedRoute;\n      this.assetService = assetService;\n      this.dataInputMethodService = dataInputMethodService;\n      this.unitService = unitService;\n      this.storageService = storageService;\n      this.carbonConstant = CARBON_CONSTANT;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.origin = 'default';\n      this.dataInputMethodList = [];\n      this.fuelEnergyMonitor = [];\n      this.statndardMointor = [];\n      this.isDataButton = false;\n      this.isMeterReading = false;\n      this.isFuelGenerated = false;\n      this.isEnergyGenerated = false;\n      this.getAllUnit = [];\n      this.unitSearchUtil = new MatSelectSearchService(['name']);\n      this.sourceSearchUtil = new MatSelectSearchService(['assetName']);\n      this.isEqual = new EventEmitter();\n      this.validity = new EventEmitter();\n      this.isValid = () => {\n        return !this.activityConfigFG.invalid;\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = parseInt(this.storageService.getStorage(['currentOrgID']));\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        this.queryParam = queryParams;\n        if (queryParams['activityID']) {\n          this.activityID = queryParams['activityID'];\n          this.activityKeyID = queryParams['activityKeyID'];\n          this.origin = queryParams['origin'];\n        }\n        // if (queryParams['origin']) {\n        //   this.origin = queryParams['origin'];\n        //   if (queryParams['origin'] == 'ad-hoc') {\n        //     // this.createSaveAsPFFControlSubscription();\n        //   }\n        // }\n      });\n\n      this.getUnit();\n      this.activityConfigInit();\n      this.getAllAsset();\n      this.getAllDataInputMethodList();\n    }\n    activityConfigInit() {\n      this.activityConfigFG = this.fb.group({\n        activityConfig: this.fb.group({\n          configName: []\n        }),\n        activityConfigData: this.fb.group({\n          fuelMonitorDataInputMethodID: [, Validators.required],\n          dataInputMethodID: [, Validators.required],\n          meterRollOver: [],\n          meterUnitID: []\n        }),\n        activityConfigSource: this.fb.group({\n          sourceTypeID: [],\n          sourceID: null\n        })\n      });\n    }\n    getAllAsset() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          this.getAllSource = yield this.assetService.getAllAsset(this.currentOrgID);\n          this.sourceSearchUtil.entityArr = this.getAllSource;\n          this.sourceSearchUtil.createSubscription();\n        } catch (error) {\n          console.error('Error fetching asset:', error);\n        }\n      });\n    }\n    getAllDataInputMethodList() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          this.dataInputMethodList = yield this.dataInputMethodService.getAllDataInputMethodList();\n          this.dataInputMethodList.forEach(res => {\n            if (res.activityID == this.activityID && res.type == this.carbonConstant.fuelEnergyMonitorInput) {\n              this.fuelEnergyMonitor.push(res);\n            }\n            if (res.activityID == this.activityID && res.type == this.carbonConstant.standardDataInput) {\n              this.statndardMointor.push(res);\n            }\n          });\n        } catch (error) {\n          console.error('Error fetching data input methods:', error);\n        }\n      });\n    }\n    alterValidators(res) {\n      this.isDataButton = true;\n      if (res == DataInputMethodKeyIDEnum.FUEL_CONSUMPTION) {\n        this.getAllUnit = this.unitLengVolum;\n        this.unitSearchUtil.entityArr = this.getAllUnit;\n        this.unitSearchUtil.createSubscription();\n      } else {\n        this.getAllUnit = this.unitMEnergy;\n        this.unitSearchUtil.entityArr = this.getAllUnit;\n        this.unitSearchUtil.createSubscription();\n      }\n    }\n    alterValidatorsForDataInput(res) {\n      if (res == DataInputMethodKeyIDEnum.METER_READING) {\n        this.isMeterReading = true;\n        this.applyValidators();\n      } else {\n        this.isMeterReading = false;\n        this.removeValidators();\n      }\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.unitM = yield this.unitService.getUnit([]);\n        this.unitLengVolum = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.VOLUME, UnitTypeKeyID.LENGTH]);\n        this.unitMEnergy = this.unitService.filterUnit(this.unitM, [UnitTypeKeyID.ENERGY]);\n      });\n    }\n    // Apply validators for if the user choose meter-reading\n    applyValidators() {\n      const activityConfigData = this.activityConfigFG.get('activityConfigData');\n      const meterRollOverControl = activityConfigData.get('meterRollOver');\n      meterRollOverControl === null || meterRollOverControl === void 0 ? void 0 : meterRollOverControl.setValidators([Validators.required, Validators.min(0)]);\n      meterRollOverControl === null || meterRollOverControl === void 0 ? void 0 : meterRollOverControl.updateValueAndValidity();\n      const meterUnitIDControl = activityConfigData.get('meterUnitID');\n      meterUnitIDControl === null || meterUnitIDControl === void 0 ? void 0 : meterUnitIDControl.setValidators(Validators.required);\n      meterUnitIDControl === null || meterUnitIDControl === void 0 ? void 0 : meterUnitIDControl.updateValueAndValidity();\n    }\n    // remove the validators on other case\n    removeValidators() {\n      const activityConfigData = this.activityConfigFG.get('activityConfigData');\n      const meterRollOverControl = activityConfigData.get('meterRollOver');\n      meterRollOverControl === null || meterRollOverControl === void 0 ? void 0 : meterRollOverControl.clearValidators();\n      meterRollOverControl === null || meterRollOverControl === void 0 ? void 0 : meterRollOverControl.updateValueAndValidity();\n      const meterUnitIDControl = activityConfigData.get('meterUnitID');\n      meterUnitIDControl === null || meterUnitIDControl === void 0 ? void 0 : meterUnitIDControl.clearValidators();\n      meterUnitIDControl === null || meterUnitIDControl === void 0 ? void 0 : meterUnitIDControl.updateValueAndValidity();\n    }\n    requiredCheck(control) {\n      const formArray = this.activityConfigFG.get('activityConfigData');\n      return formArray.get(control).touched && formArray.get(control).hasError('required');\n    }\n    minCheck(control) {\n      const formArray = this.activityConfigFG.get('activityConfigData');\n      return formArray.get(control).touched && formArray.get(control).hasError('min');\n    }\n    get getConfigJson() {\n      this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.value));\n      this.configuration['activityConfigSource']['sourceID'] = this.configuration['activityConfigSource']['sourceID'];\n      return this.configuration;\n    }\n    setSourceTypeID(data) {\n      this.activityConfigFG.get('activityConfigSource').get('sourceTypeID').patchValue(data.sourceTypeID), {\n        emitEvent: false\n      };\n    }\n    isValidForm() {\n      if (this.activityConfigFG.invalid) {\n        this.activityConfigFG.markAllAsTouched();\n        return false;\n      }\n      this.configuration = {};\n      this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.getRawValue()));\n      this.configuration['activityConfigSource']['sourceID'] = this.configuration['activityConfigSource']['sourceID'];\n      return true;\n    }\n    activityConfigValidity() {\n      this.activityConfigFG.valueChanges.subscribe(() => this.validity.emit(!this.activityConfigFG.invalid));\n    }\n    // Here i patch the data\n    patchConfiguration(configuration) {\n      this.activityConfigFG.valueChanges.subscribe(() => {\n        this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n      });\n      let activityConfig = configuration['activityConfig'];\n      let activityConfigData = configuration['activityConfigData'];\n      let activityConfigSource = configuration['activityConfigSource'];\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig['configName']\n        });\n      } else {\n        this.readOnlyForm();\n      }\n      if (activityConfigSource['sourceID'] != null) {\n        this.activityConfigSourceAC.patchValue({\n          sourceID: activityConfigSource['sourceID'],\n          sourceTypeID: activityConfigSource['sourceTypeID']\n        });\n      }\n      // here I find the dataInputMethod for user selection\n      const dataInputMethod = activityConfigData['fuelMonitorDataInputMethodID'];\n      const dataInputMethodForData = activityConfigData['dataInputMethodID'];\n      const selectedMethod = this.dataInputMethodList.find(res => dataInputMethod === res.id);\n      const selectedMethodForData = this.dataInputMethodList.find(res => dataInputMethodForData === res.id);\n      if (selectedMethod) {\n        this.alterValidators(selectedMethod.keyID);\n      }\n      this.activityConfigDataAC.patchValue({\n        fuelMonitorDataInputMethodID: activityConfigData['fuelMonitorDataInputMethodID']\n      });\n      this.isDataButton = true;\n      if (selectedMethodForData.keyID == DataInputMethodKeyIDEnum.TOTAL_AMOUNT) {\n        this.activityConfigDataAC.patchValue({\n          dataInputMethodID: activityConfigData['dataInputMethodID']\n        });\n      } else if (selectedMethodForData.keyID == DataInputMethodKeyIDEnum.METER_READING) {\n        this.isMeterReading = true;\n        this.activityConfigDataAC.patchValue({\n          dataInputMethodID: activityConfigData['dataInputMethodID'],\n          meterUnitID: activityConfigData['meterUnitID'],\n          meterRollOver: activityConfigData['meterRollOver']\n        });\n      }\n    }\n    readOnlyForm() {\n      this.activityConfigFG.disable({\n        emitEvent: false\n      });\n    }\n    get activityConfigAC() {\n      const array = this.activityConfigFG.get('activityConfig');\n      return array;\n    }\n    get activityConfigSourceAC() {\n      return this.activityConfigFG.get('activityConfigSource');\n    }\n    get activityConfigDataAC() {\n      return this.activityConfigFG.get('activityConfigData');\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.AssetService), i0.ɵɵdirectiveInject(i4.DataInputMethodService), i0.ɵɵdirectiveInject(i5.UnitService), i0.ɵɵdirectiveInject(i6.StorageService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create-update\"]],\n    decls: 24,\n    vars: 11,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [1, \"col-sm-6\"], [\"formGroupName\", \"activityConfig\", \"class\", \"matFieldWidth100\", 3, \"appearance\", 4, \"ngIf\"], [\"formGroupName\", \"activityConfigData\"], [1, \"row\"], [\"formControlName\", \"fuelMonitorDataInputMethodID\"], [1, \"row\", \"my-2\"], [\"class\", \"col-sm-3 columnRadioBtn\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"class\", \"mt-2\", 4, \"ngIf\"], [\"formGroupName\", \"activityConfigSource\", 1, \"mat-field-width-100\", \"mt-2\", \"col-sm-6\", 3, \"appearance\"], [1, \"formLabel\"], [\"multiple\", \"true\", \"formControlName\", \"sourceID\"], [\"placeholderLabel\", \"Search by name\", \"noEntriesFoundLabel\", \"No matching name found.\", 3, \"formControl\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"activityConfig\", 1, \"matFieldWidth100\", 3, \"appearance\"], [\"matInput\", \"\", \"formControlName\", \"configName\", \"required\", \"\"], [1, \"col-sm-3\", \"columnRadioBtn\"], [1, \"flex\"], [1, \"radioBtnLabel\", 3, \"value\", \"change\"], [1, \"mt-2\"], [\"formControlName\", \"dataInputMethodID\"], [1, \"row\", \"pt-2\"], [1, \"col-sm-3\", \"mat-field\", \"columnWidth\", 3, \"appearance\"], [\"matInput\", \"\", \"formControlName\", \"meterRollOver\", \"type\", \"number\", \"min\", \"0\"], [1, \"col-sm-3\", 3, \"appearance\"], [\"formControlName\", \"meterUnitID\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"miterRoll\"], [3, \"value\", \"click\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵtemplate(5, CreateUpdateComponent_mat_form_field_5_Template, 5, 2, \"mat-form-field\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerStart(6, 5);\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵtext(8, \"What do you monitor during fuel combustion?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelementStart(10, \"mat-radio-group\", 7);\n        i0.ɵɵelementStart(11, \"div\", 8);\n        i0.ɵɵtemplate(12, CreateUpdateComponent_div_12_Template, 4, 2, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, CreateUpdateComponent_mat_error_13_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(14, CreateUpdateComponent_div_14_Template, 8, 2, \"div\", 11);\n        i0.ɵɵtemplate(15, CreateUpdateComponent_ng_container_15_Template, 17, 9, \"ng-container\", 10);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementStart(16, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(17, \"mat-label\", 13);\n        i0.ɵɵtext(18, \" Select Combustion equipment \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"mat-select\", 14);\n        i0.ɵɵelementStart(20, \"mat-option\");\n        i0.ɵɵelement(21, \"ngx-mat-select-search\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, CreateUpdateComponent_mat_option_22_Template, 2, 2, \"mat-option\", 16);\n        i0.ɵɵpipe(23, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.queryParam.origin !== \"ad-hoc\" && !ctx.queryParam.activityDataID || ctx.queryParam.usePFF == \"YES\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.fuelEnergyMonitor);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.requiredCheck(\"fuelMonitorDataInputMethodID\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isDataButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isMeterReading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.sourceSearchUtil.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(23, 9, ctx.sourceSearchUtil.filteredEntities));\n      }\n    },\n    directives: [i7.MatCard, i1.NgControlStatusGroup, i1.FormGroupDirective, i8.NgIf, i1.FormGroupName, i9.MatRadioGroup, i1.NgControlStatus, i1.FormControlName, i8.NgForOf, i10.MatFormField, i10.MatLabel, i11.MatSelect, i12.MatOption, i13.MatSelectSearchComponent, i1.FormControlDirective, i14.MatInput, i1.DefaultValueAccessor, i1.RequiredValidator, i10.MatError, i9.MatRadioButton, i1.NumberValueAccessor, i1.MinValidator],\n    pipes: [i8.AsyncPipe],\n    styles: [\".meterRoll[_ngcontent-%COMP%]{margin-top:10px;display:flex;grid-gap:10px;gap:10px}.meterRoll[_ngcontent-%COMP%]   .columnWidth[_ngcontent-%COMP%]{width:60%}\"]\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}