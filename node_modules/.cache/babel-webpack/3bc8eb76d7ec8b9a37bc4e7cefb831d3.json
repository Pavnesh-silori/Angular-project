{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EquipmentServicingM, InventoryM, ProductManufactureM, EquipmentCapacityM } from '@carbon/model/fugitive.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/fugitive-inventory.controller\";\nimport * as i2 from \"@carbon/controller/fugitive-service-by-contractor.controller\";\nimport * as i3 from \"@carbon/controller/fugitive-screening.controller\";\nimport * as i4 from \"@carbon/controller/fugitive-myself-manufacture.controller\";\nexport let FugitiveService = /*#__PURE__*/(() => {\n  class FugitiveService {\n    constructor(fugitiveInventoryController, fugitiveServiceByContractorController, fugitiveScreeningController, fugitiveMyselfManufacturerController) {\n      this.fugitiveInventoryController = fugitiveInventoryController;\n      this.fugitiveServiceByContractorController = fugitiveServiceByContractorController;\n      this.fugitiveScreeningController = fugitiveScreeningController;\n      this.fugitiveMyselfManufacturerController = fugitiveMyselfManufacturerController;\n    }\n    getInventoryRecordByID(currentOrgID, inventoryID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let inventoryM;\n        try {\n          inventoryM = yield this.fugitiveInventoryController.getInventoryRecordByID(currentOrgID, inventoryID).toPromise();\n          if (inventoryM) {\n            return inventoryM;\n          } else {\n            return new InventoryM();\n          }\n        } catch (error) {\n          console.log('error in getInventoryRecordByID -', error);\n          return new InventoryM();\n        }\n      });\n    }\n    getEquipmentServicingRecordByID(currentOrgID, equipmentServicingID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let equipmentServicingM;\n        try {\n          equipmentServicingM = yield this.fugitiveServiceByContractorController.getEquipmentServicingRecordByID(currentOrgID, equipmentServicingID).toPromise();\n          if (equipmentServicingM) {\n            return equipmentServicingM;\n          } else {\n            return new EquipmentServicingM();\n          }\n        } catch (error) {\n          console.log('error in getEquipmentServicingRecordByID -', error);\n          return new EquipmentServicingM();\n        }\n      });\n    }\n    getScreeningRecordByID(currentOrgID, recordID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let screeningApproachM;\n        try {\n          screeningApproachM = yield this.fugitiveScreeningController.getEquipmentCapacityRecordByID(currentOrgID, recordID).toPromise();\n          if (screeningApproachM) {\n            return screeningApproachM;\n          } else {\n            return new EquipmentCapacityM();\n          }\n        } catch (error) {\n          console.log('error in getScreeningRecordByID -', error);\n          return new EquipmentCapacityM();\n        }\n      });\n    }\n    getServiceByContractorRecordByID(currentOrgID, recordID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let equipmentCapacityRecordM;\n        try {\n          equipmentCapacityRecordM = yield this.fugitiveServiceByContractorController.getEquipmentCapacityRecordByID(currentOrgID, recordID).toPromise();\n          if (equipmentCapacityRecordM) {\n            return equipmentCapacityRecordM;\n          } else {\n            return new EquipmentCapacityM();\n          }\n        } catch (error) {\n          console.log('error in getServiceByContractorRecordByID -', error);\n          return new EquipmentCapacityM();\n        }\n      });\n    }\n    getServiceMyselfRecordByID(currentOrgID, recordID, calculationApproachKeyID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let productManufactureM;\n        try {\n          productManufactureM = yield this.fugitiveMyselfManufacturerController.getEquipmentGasQuantityRecordByID(currentOrgID, recordID, calculationApproachKeyID).toPromise();\n          if (productManufactureM) {\n            return productManufactureM;\n          } else {\n            return new ProductManufactureM();\n          }\n        } catch (error) {\n          console.log('error in getServiceMyselfRecordByID -', error);\n          return new ProductManufactureM();\n        }\n      });\n    }\n  }\n  FugitiveService.ɵfac = function FugitiveService_Factory(t) {\n    return new (t || FugitiveService)(i0.ɵɵinject(i1.FugitiveInventoryController), i0.ɵɵinject(i2.FugitiveServiceByContractorController), i0.ɵɵinject(i3.FugitiveScreeningController), i0.ɵɵinject(i4.FugitiveMyselfManufacturerController));\n  };\n  FugitiveService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FugitiveService,\n    factory: FugitiveService.ɵfac,\n    providedIn: 'root'\n  });\n  return FugitiveService;\n})();","map":null,"metadata":{},"sourceType":"module"}