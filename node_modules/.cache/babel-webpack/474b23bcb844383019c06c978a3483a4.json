{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ActiveFugitiveApproachM, ShowFugitiveApproachM } from '@carbon/model/fugitive.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@carbon/controller/fugitive-activity-configurator.controller\";\n// / tsc-library\nexport let FugitiveConfiguratorService = /*#__PURE__*/(() => {\n  class FugitiveConfiguratorService {\n    constructor(storageService, fugitiveActivityConfiguratorController) {\n      this.storageService = storageService;\n      this.fugitiveActivityConfiguratorController = fugitiveActivityConfiguratorController;\n    }\n    getConfiguredActivityConfiguration() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const currentOrgID = this.storageService.getStorage('currentOrgID');\n        let fugitiveApproachM;\n        try {\n          fugitiveApproachM = yield this.fugitiveActivityConfiguratorController.getConfiguredApproach(currentOrgID).toPromise();\n          if (fugitiveApproachM) {\n            return fugitiveApproachM;\n          } else {\n            return new ShowFugitiveApproachM();\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return new ShowFugitiveApproachM();\n        }\n      });\n    }\n    getActiveActivityConfiguration(currentOrgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let activeFugitiveApproachM;\n        try {\n          activeFugitiveApproachM = yield this.fugitiveActivityConfiguratorController.getActiveConfiguredApproach(currentOrgID).toPromise();\n          if (activeFugitiveApproachM) {\n            return activeFugitiveApproachM;\n          } else {\n            return new ActiveFugitiveApproachM();\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return new ActiveFugitiveApproachM();\n        }\n      });\n    }\n  }\n  FugitiveConfiguratorService.ɵfac = function FugitiveConfiguratorService_Factory(t) {\n    return new (t || FugitiveConfiguratorService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.FugitiveActivityConfiguratorController));\n  };\n  FugitiveConfiguratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FugitiveConfiguratorService,\n    factory: FugitiveConfiguratorService.ɵfac,\n    providedIn: 'root'\n  });\n  return FugitiveConfiguratorService;\n})();","map":null,"metadata":{},"sourceType":"module"}