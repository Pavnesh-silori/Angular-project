{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ScopeKeyIDEnum } from '@carbon/enum/scope.enum';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@carbon/service/activity-data.service\";\nimport * as i3 from \"@carbon/service/activity.service\";\nimport * as i4 from \"@carbon/controller/activity-data.controller\";\nimport * as i5 from \"@carbon/controller/gwp-dataset.controller\";\nimport * as i6 from \"@carbon/controller/employee-survey.controller\";\nimport * as i7 from \"@library/storage-service\";\nimport * as i8 from \"./_shared/view-header/view-header.component\";\nimport * as i9 from \"./_shared/factor-details/factor-details.component\";\nimport * as i10 from \"./_shared/record-details/record-details.component\";\nimport * as i11 from \"./_shared/activity-data/activity-data.component\";\nimport * as i12 from \"./_shared/emission-details/emission-details.component\";\nimport * as i13 from \"./_shared/calculation-details/calculation-details.component\";\nexport let ViewComponent = /*#__PURE__*/(() => {\n  class ViewComponent {\n    constructor(activatedRoute, activityDataService, activityService, activityDataController, gwpdatasetController, employeeSurveyController, storageService) {\n      this.activatedRoute = activatedRoute;\n      this.activityDataService = activityDataService;\n      this.activityService = activityService;\n      this.activityDataController = activityDataController;\n      this.gwpdatasetController = gwpdatasetController;\n      this.employeeSurveyController = employeeSurveyController;\n      this.storageService = storageService;\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.storageService.setStorage('switchOrgRedirect', 'YES');\n        this.currentOrgID = this.storageService.getStorage(['currentOrgID']);\n        yield this.getAllActivity();\n        this.activatedRoute.params.subscribe(params => {\n          this.activityDataID = parseInt(params.activityDataID);\n          this.activityKeyID = params.activityKeyID;\n          this.calculatedEmissionDataID = parseInt(params.calculatedEmissionDataID);\n          this.selectActivity();\n          if (this.activityKeyID == ActivityKeyIDEnum.EMPLOYEE_COMMUTING) {\n            this.getEmissionDataForEmployeeComm();\n          } else {\n            this.getEmissionDataByActivityDataID();\n          }\n        });\n      });\n    }\n    getAllActivity() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.allActivities = yield this.activityService.getAllActivityNew();\n      });\n    }\n    selectActivity() {\n      const all_scope_activities = this.allActivities.filter(activity => activity.scope != null);\n      const scope1And2Activities = all_scope_activities.filter(activity => activity.scope.keyID == ScopeKeyIDEnum.SCOPE_1_KEY_ID || activity.scope.keyID == ScopeKeyIDEnum.SCOPE_2_KEY_ID).map(activity => activity.keyID);\n      const scope3Activities = all_scope_activities.filter(activity => activity.scope.keyID == ScopeKeyIDEnum.SCOPE_3_KEY_ID).map(activity => activity.keyID);\n      if (scope1And2Activities.includes(this.activityKeyID)) {\n        this.getActivityDataByID();\n      } else if (this.activityKeyID == ActivityKeyIDEnum.EMPLOYEE_COMMUTING) {\n        this.getActivityDataByIDForEmployee();\n      } else if (scope3Activities.includes(this.activityKeyID)) {\n        this.getScope3ActivityDataByID();\n      }\n    }\n    getActivityDataByID() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.recordData = yield this.activityDataService.getActivityDataByID(this.currentOrgID, this.activityDataID, this.activityKeyID);\n      });\n    }\n    getActivityDataByIDForEmployee() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.recordData = yield this.activityDataController.getEmissionDataForEmployeeComm(this.currentOrgID, this.calculatedEmissionDataID).subscribe(res => {\n          this.recordData = res;\n          this.surveyID = res['activityData']['recordID'];\n          this.getTableData();\n        }, error => {\n          console.log(error);\n        });\n      });\n    }\n    getScope3ActivityDataByID() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.activityKeyID == 'waste-generated-in-operations') {\n          this.activityDataController.getWasateGeneratedDetails(this.currentOrgID, this.activityDataID).subscribe(res => {\n            this.recordData = res;\n          }, error => {\n            console.log(error, 'Waste generation');\n          });\n        } else {\n          this.activityDataController.getScope3ActivityDataByID(this.currentOrgID, this.activityDataID).subscribe(recordDataRes => {\n            this.recordData = recordDataRes;\n          }, error => {\n            console.log('error in getScope3ActivityDataByID() - ', error);\n          });\n        }\n      });\n    }\n    getEmissionDataByActivityDataID() {\n      this.activityDataController.getEmissionDataByActivityDataID(this.currentOrgID, this.calculatedEmissionDataID).subscribe(emissionRes => {\n        if (emissionRes != null) {\n          this.emissionData = emissionRes;\n          this.cedID = emissionRes['cedID'];\n          this.gwpDatasetID = emissionRes['gwpDatasetID'];\n          this.getFactorDetailsByCEDID();\n          if (this.gwpDatasetID) this.getGasAndGwpdatasetByID();\n        }\n      }, error => {\n        console.log('error in getEmissionDataByActivityDataID() - ', error);\n      });\n    }\n    getEmissionDataForEmployeeComm() {\n      this.activityDataController.getEmissionDataByActivityDataIDForEmployee(this.currentOrgID, this.calculatedEmissionDataID).subscribe(emissionRes => {\n        if (emissionRes != null) {\n          this.emissionData = emissionRes;\n          this.calAppInEmployComm = this.emissionData['calculationDetails'].calculationApproachStdKeyID;\n          this.cedID = this.emissionData.cedID;\n          this.gwpDatasetID = this.emissionData['calculationDetails'].gwpDatasetID;\n          // this.emissionData = emissionRes['calculationDetails'];\n          this.employeeCommutingData = emissionRes['primaryEmissionModesList'];\n          this.getFactorDetailsEmpCommByCEDID();\n          if (this.gwpDatasetID) this.getGasAndGwpdatasetByID();\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n    getFactorDetailsByCEDID() {\n      this.activityDataController.getCalculatedEmissionDataByCEDID(this.currentOrgID, this.cedID).subscribe(factorRes => {\n        this.factorData = factorRes;\n      }, error => {\n        console.log('error in getFactorDetailsByCEDID() - ', error);\n      });\n    }\n    getFactorDetailsEmpCommByCEDID() {\n      this.activityDataController.getEmissionFactorForModeOfTransport(this.currentOrgID, this.calculatedEmissionDataID).subscribe(res => {\n        this.factorData = res;\n      });\n    }\n    getGasAndGwpdatasetByID() {\n      this.gwpdatasetController.getGasAndGwpdatasetByID(this.gwpDatasetID).subscribe(gwpDatasetRes => {\n        this.gasGwp = gwpDatasetRes;\n      }, error => {\n        console.log('error in getGasAndGwpdatasetByID() - ', error);\n      });\n    }\n    getTableData() {\n      this.employeeSurveyController.getSurveySummary(this.currentOrgID, this.surveyID).subscribe(tableData => {\n        this.tableData = tableData;\n      });\n    }\n  }\n  ViewComponent.ɵfac = function ViewComponent_Factory(t) {\n    return new (t || ViewComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ActivityDataService), i0.ɵɵdirectiveInject(i3.ActivityService), i0.ɵɵdirectiveInject(i4.ActivityDataController), i0.ɵɵdirectiveInject(i5.GwpdatasetController), i0.ɵɵdirectiveInject(i6.EmployeeSurveyController), i0.ɵɵdirectiveInject(i7.StorageService));\n  };\n  ViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ViewComponent,\n    selectors: [[\"app-view\"]],\n    decls: 11,\n    vars: 16,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\"], [3, \"recordData\", \"calAppInEmployComm\"], [1, \"mt-0\"], [1, \"row\", \"pb-2\"], [1, \"col-sm-4\"], [3, \"activityKeyID\", \"factorData\", \"gasGwp\", \"emissionsData\", \"calAppInEmployComm\"], [1, \"col-sm-8\", 2, \"border-left\", \"1px rgba(75, 82, 90, 0.185) solid\"], [3, \"recordData\", \"calAppInEmployComm\", \"tableData\"], [3, \"recordData\", \"emissionData\", \"calAppInEmployComm\"], [3, \"emissionData\"]],\n    template: function ViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"view-header\", 1);\n        i0.ɵɵelement(2, \"hr\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelement(5, \"factor-details\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelement(7, \"record-details\", 1);\n        i0.ɵɵelement(8, \"activity-data\", 7);\n        i0.ɵɵelement(9, \"emission-details\", 8);\n        i0.ɵɵelement(10, \"calculation-details\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"recordData\", ctx.recordData)(\"calAppInEmployComm\", ctx.calAppInEmployComm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"activityKeyID\", ctx.activityKeyID)(\"factorData\", ctx.factorData)(\"gasGwp\", ctx.gasGwp)(\"emissionsData\", ctx.emissionData)(\"calAppInEmployComm\", ctx.calAppInEmployComm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"recordData\", ctx.recordData)(\"calAppInEmployComm\", ctx.calAppInEmployComm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"recordData\", ctx.recordData)(\"calAppInEmployComm\", ctx.calAppInEmployComm)(\"tableData\", ctx.tableData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"recordData\", ctx.recordData)(\"emissionData\", ctx.emissionData)(\"calAppInEmployComm\", ctx.calAppInEmployComm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"emissionData\", ctx.emissionData);\n      }\n    },\n    directives: [i8.ViewHeaderComponent, i9.FactorDetailsComponent, i10.RecordDetailsComponent, i11.ActivityDataComponent, i12.EmissionDetailsComponent, i13.CalculationDetailsComponent],\n    encapsulation: 2\n  });\n  return ViewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}