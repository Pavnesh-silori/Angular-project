{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { SbtiSector, SbtiSetting, SbtiSettingDifference } from '../model/sbti.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/sbti.controller\";\nexport let SbtiService = /*#__PURE__*/(() => {\n  class SbtiService {\n    constructor(sbtiController) {\n      this.sbtiController = sbtiController;\n    }\n    getAllSbtiSector() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let sbtiSectorM;\n        try {\n          sbtiSectorM = yield this.sbtiController.getAllSbtiSector().toPromise();\n          if (sbtiSectorM) {\n            return sbtiSectorM;\n          } else {\n            return [new SbtiSector()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new SbtiSector()];\n        }\n      });\n    }\n    getSbtiSettingsByOrgID(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let sbtiSettingsM;\n        try {\n          sbtiSettingsM = yield this.sbtiController.getSbtiSettingsByOrgID(orgID).toPromise();\n          if (sbtiSettingsM) {\n            return sbtiSettingsM;\n          } else {\n            return new SbtiSetting();\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return new SbtiSetting();\n        }\n      });\n    }\n    getSettingEmissionDifference(orgID, formData) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let sbtiDifferenceM;\n        try {\n          sbtiDifferenceM = yield this.sbtiController.getSettingEmissionDifference(orgID, formData).toPromise();\n          if (sbtiDifferenceM) {\n            return sbtiDifferenceM;\n          } else {\n            return [new SbtiSettingDifference()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new SbtiSettingDifference()];\n        }\n      });\n    }\n  }\n  SbtiService.ɵfac = function SbtiService_Factory(t) {\n    return new (t || SbtiService)(i0.ɵɵinject(i1.SbtiController));\n  };\n  SbtiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SbtiService,\n    factory: SbtiService.ɵfac,\n    providedIn: 'root'\n  });\n  return SbtiService;\n})();","map":null,"metadata":{},"sourceType":"module"}