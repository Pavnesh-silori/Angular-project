{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ActivityM } from '@carbon/model/activity.model';\nimport { InvalidForm } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@library/storage-service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@library/toastr-service\";\nimport * as i5 from \"@carbon/service/activity-data.service\";\nimport * as i6 from \"@carbon/controller/activity-data.controller\";\nimport * as i7 from \"@carbon/controller/activity-config.controller\";\nimport * as i8 from \"@carbon/service/activity.service\";\nconst _c0 = [\"configCreate\"];\nconst _c1 = [\"activityDataComp\"];\n/* tsc-library */\nexport let MobileCombustion2Component = /*#__PURE__*/(() => {\n  class MobileCombustion2Component {\n    constructor(storageService, activatedRoute, location, toastrService, activityDataService, activityDataController, activityConfigController, activityService) {\n      this.activatedRoute = activatedRoute;\n      this.location = location;\n      this.toastrService = toastrService;\n      this.activityDataService = activityDataService;\n      this.activityDataController = activityDataController;\n      this.activityConfigController = activityConfigController;\n      this.activityService = activityService;\n      this.activity = new ActivityM();\n      this.selectedTab = 1;\n      this.isActivityDataValid = true;\n      this.approveBtn = false;\n      this.updateBtn = true;\n      this.submitBtn = false;\n      this.activityDataAction = 'APPROVED';\n      this.isApiValid = true;\n      storageService.setStorage('switchOrgRedirect', 'YES');\n      this.currentOrgID = parseInt(storageService.getStorage(['currentOrgID']));\n    }\n    ngOnInit() {\n      let params = this.activatedRoute.snapshot.params;\n      this.activityDataID = params['activityDataID'];\n      this.activatedRoute.data.subscribe(routeData => {\n        if (routeData['activityID']) {\n          this.activityID = routeData['activityID'];\n          this.getActivityByID(this.activityID);\n        }\n        if (routeData['activityKeyID']) {\n          this.activityKeyID = routeData['activityKeyID'];\n        }\n      });\n    }\n    getActivityByID(activityID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.activity = yield this.activityService.getActivityByID(activityID);\n        this.activityKeyID = this.activity.keyID;\n        this.getActivityDataWithActivityDataConfig(this.activityKeyID, this.activityDataID);\n      });\n    }\n    getActivityDataWithActivityDataConfig(activityKeyID, activityDataID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.activityDataWithDataConfig = yield this.activityDataService.getActivityDataWithActivityDataConfig(this.currentOrgID, activityKeyID, activityDataID);\n        const activityConfigData = this.activityDataWithDataConfig.activityConfigData;\n        const activityConfigID = activityConfigData.activityConfigID;\n        if (activityConfigID != null) {\n          this.activityConfigController.getActivityConfigByID(this.currentOrgID, this.activityKeyID, activityConfigID).subscribe(getRes => {\n            this.configuration = getRes;\n            this.checkApprover(this.configuration);\n          }, error => {\n            console.log('error in getActivityConfigByID -', error);\n          });\n        }\n        this.activityConfigComp.patchConfiguration(this.activityDataWithDataConfig);\n        this.activityDataComp.getConfiguration(this.activityDataWithDataConfig);\n      });\n    }\n    checkApprover(configuration) {\n      var _a, _b, _c, _d;\n      if (configuration['workflow'] != null) {\n        if ((_b = (_a = configuration['workflow']) === null || _a === void 0 ? void 0 : _a['activityConfigApprover']) === null || _b === void 0 ? void 0 : _b['isApprover']) {\n          this.approveBtn = true;\n          this.updateBtn = false;\n        } else if (((_d = (_c = configuration['workflow']) === null || _c === void 0 ? void 0 : _c['activityConfigWorkflow']) === null || _d === void 0 ? void 0 : _d['autoApprove']) == 'YES') {\n          this.approveBtn = true;\n          this.updateBtn = false;\n        } else {\n          this.submitBtn = true;\n          this.updateBtn = false;\n          this.activityDataAction = 'SUBMITTED';\n        }\n      }\n    }\n    updateActivityData() {\n      var _a;\n      this.isActivityDataValid = (_a = this.activityDataComp) === null || _a === void 0 ? void 0 : _a.isValidForm();\n      if (!this.isActivityDataValid) {\n        this.toastrService.error(InvalidForm.INVALID_FORM_MESSAGE);\n        return false;\n      }\n      this.activityDataController.updateActivityData(this.currentOrgID, this.activityKeyID, this.activityDataID, this.activityDataComp.updateActivityData(), this.activityDataAction).subscribe(() => {\n        this.location.back();\n      }, error => {\n        console.log('error in createAdHocWithoutActivityConfig() -', error);\n      });\n    }\n    cancelBtn() {\n      this.location.back();\n    }\n  }\n  MobileCombustion2Component.ɵfac = function MobileCombustion2Component_Factory(t) {\n    return new (t || MobileCombustion2Component)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Location), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.ActivityDataService), i0.ɵɵdirectiveInject(i6.ActivityDataController), i0.ɵɵdirectiveInject(i7.ActivityConfigController), i0.ɵɵdirectiveInject(i8.ActivityService));\n  };\n  MobileCombustion2Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MobileCombustion2Component,\n    selectors: [[\"app-Mobile-combustion\"]],\n    viewQuery: function MobileCombustion2Component_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.component = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.activityDataComp = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    template: function MobileCombustion2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" activityData update\\n\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return MobileCombustion2Component;\n})();","map":null,"metadata":{},"sourceType":"module"}