{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as moment from 'moment';\nimport { isEqual } from 'lodash';\nimport { ConfirmationDailog } from '@carbon/component/activity-data/ghg/scope-1/fugitive-emission/_shared/confirmation-dailog/confirmation-dailog.component';\nimport { DaterangepickerDirective } from 'ngx-daterangepicker-material';\nimport { ButtonLabelEnum, DialogEnum, FormAction, InvalidForm, MatSelectSearchService, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport { ToastrColor } from '@library/toastr-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@library/storage-service\";\nimport * as i4 from \"@carbon/controller/other-fugitive-source.controller\";\nimport * as i5 from \"@carbon/service/fugitive-activity-type.service\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@library/unit-service\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"ngx-mat-select-search\";\nimport * as i12 from \"@angular/common\";\nimport * as i13 from \"@angular/material/input\";\nimport * as i14 from \"ngx-daterangepicker-material\";\nimport * as i15 from \"@angular/material/datepicker\";\nfunction FugitiveReleasesCreateUpdateDailog_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵelementStart(1, \"span\", 22);\n    i0.ɵɵlistener(\"click\", function FugitiveReleasesCreateUpdateDailog_mat_option_11_Template_span_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const source_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.getGasesByOtherFugitiveSourceID(source_r6.id);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const source_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", source_r6.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", source_r6.name, \" \");\n  }\n}\nfunction FugitiveReleasesCreateUpdateDailog_p_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 23);\n    i0.ɵɵtext(1, \"Quantity of gases released\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FugitiveReleasesCreateUpdateDailog_div_17_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Gas quantity is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FugitiveReleasesCreateUpdateDailog_div_17_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Gas quantity can't be negative. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FugitiveReleasesCreateUpdateDailog_div_17_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵelementStart(1, \"span\", 34);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r14.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", unit_r14.name, \" -- \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r14.uomCode);\n  }\n}\nfunction FugitiveReleasesCreateUpdateDailog_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵelementStart(1, \"div\", 25);\n    i0.ɵɵelementStart(2, \"div\", 26);\n    i0.ɵɵelement(3, \"input\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-form-field\", 28);\n    i0.ɵɵelement(5, \"input\", 29);\n    i0.ɵɵtemplate(6, FugitiveReleasesCreateUpdateDailog_div_17_mat_error_6_Template, 2, 0, \"mat-error\", 30);\n    i0.ɵɵtemplate(7, FugitiveReleasesCreateUpdateDailog_div_17_mat_error_7_Template, 2, 0, \"mat-error\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-form-field\", 31);\n    i0.ɵɵelementStart(9, \"mat-label\", 5);\n    i0.ɵɵtext(10, \"Unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"mat-select\", 32);\n    i0.ɵɵelementStart(12, \"mat-option\", 33);\n    i0.ɵɵtext(13, \"Select unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, FugitiveReleasesCreateUpdateDailog_div_17_mat_option_14_Template, 5, 3, \"mat-option\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"mat-error\");\n    i0.ɵɵtext(16, \" unit ID is required field \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r10 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r10);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"appearance\", ctx_r2.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.errorHandlingArray(i_r10, \"gasQuantity\", \"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.errorHandlingArray(i_r10, \"gasQuantity\", \"min\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r2.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.unitList);\n  }\n}\nfunction FugitiveReleasesCreateUpdateDailog_button_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function FugitiveReleasesCreateUpdateDailog_button_29_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.createFugitiveRelease();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.ButtonLabelEnum.CREATE_BTN_LABEL, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\nfunction FugitiveReleasesCreateUpdateDailog_button_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function FugitiveReleasesCreateUpdateDailog_button_30_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.getConfirmation();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r4.isEqual));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.ButtonLabelEnum.SAVE_BTN_LABEL, \" \");\n  }\n}\nfunction FugitiveReleasesCreateUpdateDailog_button_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 37);\n  }\n}\nconst _c1 = function () {\n  return {\n    direction: \"ltr\",\n    applyLabel: \"Apply\",\n    format: \"DD-MMM-YYYY\"\n  };\n};\nexport let FugitiveReleasesCreateUpdateDailog = /*#__PURE__*/(() => {\n  class FugitiveReleasesCreateUpdateDailog {\n    constructor(dialog, formBuilder, storageService, otherFugitiveSourceController, fugitiveActivityTypeService, toastrService, unitService, dialogRef, data) {\n      this.dialog = dialog;\n      this.formBuilder = formBuilder;\n      this.storageService = storageService;\n      this.otherFugitiveSourceController = otherFugitiveSourceController;\n      this.fugitiveActivityTypeService = fugitiveActivityTypeService;\n      this.toastrService = toastrService;\n      this.unitService = unitService;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.ButtonLabelEnum = ButtonLabelEnum;\n      this.FormAction = FormAction;\n      this.title = 'Create';\n      this.isCreate = false;\n      this.gasList = [];\n      this.showGasField = false;\n      this.isEqual = false;\n      this.isReadOnly = false;\n      this.sourceSearchUtil = new MatSelectSearchService(['name']);\n      this.errorHandlingArray = (index, control, error) => {\n        return this.formDataArray.controls[index]['controls'][control].hasError(error);\n      };\n      this.action = this.data['action'];\n      this.currentOrgID = this.data['currentOrgID'];\n      this.dialogRef.disableClose = true;\n    }\n    ngOnInit() {\n      this.otherFugitiveSourceFGInit();\n      this.getOtherFugitiveSourceList();\n      this.getUnit();\n      if (this.action == FormAction.CREATE) {\n        this.isCreate = true;\n      } else if (this.action == FormAction.UPDATE) {\n        this.isCreate = false;\n        this.title = \"Update\";\n        this.activityDataID = this.data['activityDataID'];\n        this.isReadOnly = true;\n        this.getFugitiveSourceByGroupID();\n      } else {\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, 'Unrecognized action!', ToastrColor.ERROR);\n        this.dialogRef.close();\n      }\n    }\n    formatDate() {\n      let date = this.otherFugitiveSourceFG.get('dateRange').value;\n      let startDate = moment(date.startDate).format(\"YYYY-MM-DD\");\n      let endDate = moment(date.endDate).format(\"YYYY-MM-DD\");\n      this.otherFugitiveSourceFG.controls['startDate'].patchValue(startDate);\n      this.otherFugitiveSourceFG.controls['endDate'].patchValue(endDate);\n    }\n    ngAfterViewInit() {\n      this.otherFugitiveSourceFG.valueChanges.subscribe(() => {\n        this.isEqual = isEqual(this.initialObject, this.otherFugitiveSourceFG.value);\n      });\n    }\n    otherFugitiveSourceFGInit() {\n      this.otherFugitiveSourceFG = this.formBuilder.group({\n        recordID: [null],\n        fugitiveSourceID: [, Validators.required],\n        dateRange: [, Validators.required],\n        startDate: [, Validators.required],\n        endDate: [, Validators.required],\n        gas: this.formBuilder.array([])\n      });\n    }\n    getGasesByOtherFugitiveSourceID(sourceID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.gasList = [];\n        this.gasList = yield this.fugitiveActivityTypeService.getGasesByFugitiveSourceID(this.currentOrgID, sourceID);\n        this.addGases(this.gasList, 'Create');\n      });\n    }\n    addGases(gases, value) {\n      if (value == 'Create') {\n        this.formDataArray.clear();\n        gases.forEach(gas => {\n          this.formDataArray.push(this.formBuilder.group({\n            gasID: gas['id'],\n            gasName: gas['name'],\n            gasQuantity: [],\n            gasQuantityUnitID: []\n          }));\n          this.showGasField = true;\n        });\n      } else {\n        gases.forEach(gas => {\n          this.formDataArray.push(this.formBuilder.group({\n            gasID: gas['gasID'],\n            gasName: gas['gasName'],\n            gasQuantity: gas['gasQuantity'],\n            gasQuantityUnitID: gas['gasQuantityUnitId']\n          }));\n          this.showGasField = true;\n        });\n      }\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let unitFilter = [];\n        unitFilter = ['unitType:MASS'];\n        this.unitList = yield this.unitService.getUnit(unitFilter);\n      });\n    }\n    get formDataArray() {\n      return this.otherFugitiveSourceFG.get('gas');\n    }\n    getOtherFugitiveSourceList() {\n      this.otherFugitiveSourceController.getOtherFugitiveSourceListByOrg(this.currentOrgID).subscribe(res => {\n        this.otherFugitiveSourceList = res;\n        // ngx mat select search\n        this.sourceSearchUtil.entityArr = this.otherFugitiveSourceList;\n        this.sourceSearchUtil.createSubscription();\n      }, error => {\n        console.log('error in getOtherFugitiveSourceList -', error);\n      });\n    }\n    createFugitiveRelease() {\n      if (this.otherFugitiveSourceFG.invalid) {\n        console.log('invalid form -', this.otherFugitiveSourceFG.value);\n        this.otherFugitiveSourceFG.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return [];\n      }\n      this.otherFugitiveSourceController.createOtherFugitiveSource(this.currentOrgID, this.otherFugitiveSourceFG.value).subscribe(createRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in createOtherFugitiveSource -', error);\n      });\n    }\n    getFugitiveSourceByGroupID() {\n      this.otherFugitiveSourceController.getOtherFugitiveReleasedByID(this.currentOrgID, this.activityDataID).subscribe(response => {\n        this.fugitiveReleased = response;\n        this.patchFugitiveSource(this.fugitiveReleased);\n      }, error => {\n        console.log('error in getEquipmentCapacityByID -', error);\n      });\n    }\n    getConfirmation() {\n      const message = 'This will cause recalculation of this record for the mentioned accounting period.';\n      const dialogRef = this.dialog.open(ConfirmationDailog, {\n        data: {\n          currentOrgID: this.currentOrgID,\n          message: message\n        },\n        maxWidth: '500px',\n        maxHeight: '600px'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result == 'YES') {\n          this.updateFugitiveRelease();\n        } else {\n          this.dialogRef.close('close');\n        }\n      });\n    }\n    patchFugitiveSource(fugitiveReleased) {\n      this.otherFugitiveSourceFG.patchValue({\n        recordID: fugitiveReleased['recordID'],\n        fugitiveSourceID: fugitiveReleased['fugitiveSourceID'],\n        dateRange: {\n          startDate: moment(fugitiveReleased['startDate']),\n          endDate: moment(fugitiveReleased['endDate'])\n        }\n      });\n      this.addGases(fugitiveReleased['gases'], 'Update');\n      this.initialObject = this.otherFugitiveSourceFG.value;\n      this.isEqual = true;\n    }\n    updateFugitiveRelease() {\n      if (this.otherFugitiveSourceFG.invalid) {\n        console.log('invalid form -', this.otherFugitiveSourceFG.value);\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return [];\n      }\n      this.otherFugitiveSourceController.updateOtherFugitiveSource(this.currentOrgID, this.activityDataID, this.otherFugitiveSourceFG.value).subscribe(createRes => {\n        this.dialogRef.close(DialogEnum.SUCCESS_DR);\n      }, error => {\n        console.log('error in updateOtherFugitiveSource -', error);\n      });\n    }\n    ngOnDestroy() {\n      this.storageService.setStorage('switchOrgRedirect', 'NO');\n    }\n  }\n  FugitiveReleasesCreateUpdateDailog.ɵfac = function FugitiveReleasesCreateUpdateDailog_Factory(t) {\n    return new (t || FugitiveReleasesCreateUpdateDailog)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.OtherFugitiveSourceController), i0.ɵɵdirectiveInject(i5.FugitiveActivityTypeService), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.UnitService), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  FugitiveReleasesCreateUpdateDailog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FugitiveReleasesCreateUpdateDailog,\n    selectors: [[\"app-fugitive-releases-create-update\"]],\n    viewQuery: function FugitiveReleasesCreateUpdateDailog_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DaterangepickerDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pickerDirective = _t.first);\n      }\n    },\n    decls: 32,\n    vars: 24,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogHeader\"], [\"mat-dialog-content\", \"\", 1, \"cardOverWrite\", \"h100\"], [3, \"formGroup\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"fugitiveSourceID\", \"required\", \"\", 3, \"disabled\"], [\"placeholderLabel\", \"Search by source name\", \"noEntriesFoundLabel\", \"No matching found.\", 3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-secondary ms-2\", 4, \"ngIf\"], [\"formArrayName\", \"gas\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"matFieldWidth100\", 2, \"cursor\", \"pointer\", 3, \"appearance\", \"id\"], [\"matInput\", \"\", \"ngxDaterangepickerMd\", \"\", \"id\", \"date\", \"autocomplete\", \"off\", \"name\", \"dateRange\", \"formControlName\", \"dateRange\", \"required\", \"\", \"placeholder\", \"dd-mmm-yyyy - dd-mmm-yyyy\", 3, \"locale\", \"drops\", \"opens\", \"alwaysShowCalendars\", \"keepCalendarOpeningWithRange\", \"showDropdowns\", \"showCancel\", \"ngModelChange\"], [\"matSuffix\", \"\", 1, \"ngx-daterangepicker-action\", 3, \"for\"], [\"align\", \"end\", 1, \"py-5\"], [\"type\", \"button\", \"mat-dialog-close\", \"\", 1, \"button\", \"btn\", \"btn-secondary\", \"me-2\"], [1, \"d-inline\", 3, \"ngSwitch\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"click\", 4, \"ngSwitchCase\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"ngClass\", \"click\", 4, \"ngSwitchCase\"], [\"class\", \"d-none\", 4, \"ngSwitchDefault\"], [3, \"value\"], [1, \"d-flex\", \"justify-content-between\", 3, \"click\"], [1, \"text-secondary\", \"ms-2\"], [3, \"formGroupName\"], [1, \"row\"], [1, \"col-sm-3\", \"mt-3\", \"ms-2\", \"text-secondary\"], [\"matInput\", \"\", \"formControlName\", \"gasName\", \"readonly\", \"\", 1, \"formPlaceholder\"], [1, \"col-sm-4\", 3, \"appearance\"], [\"matInput\", \"\", \"type\", \"number\", \"min\", \"0\", \"placeholder\", \"0\", \"formControlName\", \"gasQuantity\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [1, \"col-sm-4\", \"ms-3\", 3, \"appearance\"], [\"formControlName\", \"gasQuantityUnitID\", \"required\", \"\"], [\"disabled\", \"\"], [1, \"d-flex\", \"justify-content-between\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"click\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"ngClass\", \"click\"], [1, \"d-none\"]],\n    template: function FugitiveReleasesCreateUpdateDailog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"form\", 3);\n        i0.ɵɵelementStart(5, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(6, \"mat-label\", 5);\n        i0.ɵɵtext(7, \"Select fugitive source\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-select\", 6);\n        i0.ɵɵelementStart(9, \"mat-option\");\n        i0.ɵɵelement(10, \"ngx-mat-select-search\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, FugitiveReleasesCreateUpdateDailog_mat_option_11_Template, 3, 2, \"mat-option\", 8);\n        i0.ɵɵpipe(12, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-error\");\n        i0.ɵɵtext(14, \" Source ID is required field \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, FugitiveReleasesCreateUpdateDailog_p_15_Template, 2, 0, \"p\", 9);\n        i0.ɵɵelementStart(16, \"div\", 10);\n        i0.ɵɵtemplate(17, FugitiveReleasesCreateUpdateDailog_div_17_Template, 17, 6, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(19, \"mat-label\", 5);\n        i0.ɵɵtext(20, \" Release date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function FugitiveReleasesCreateUpdateDailog_Template_input_ngModelChange_21_listener() {\n          return ctx.formatDate();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"mat-datepicker-toggle\", 14);\n        i0.ɵɵelementStart(23, \"mat-error\");\n        i0.ɵɵtext(24, \" Release date is required field \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 15);\n        i0.ɵɵelementStart(26, \"button\", 16);\n        i0.ɵɵtext(27, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 17);\n        i0.ɵɵtemplate(29, FugitiveReleasesCreateUpdateDailog_button_29_Template, 2, 1, \"button\", 18);\n        i0.ɵɵtemplate(30, FugitiveReleasesCreateUpdateDailog_button_30_Template, 2, 4, \"button\", 19);\n        i0.ɵɵtemplate(31, FugitiveReleasesCreateUpdateDailog_button_31_Template, 1, 0, \"button\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.title, \" fugitive release record \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.otherFugitiveSourceFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.isReadOnly);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControl\", ctx.sourceSearchUtil.filterFC);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 21, ctx.sourceSearchUtil.filteredEntities));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showGasField);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.formDataArray[\"controls\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE)(\"id\", \"daterangeFF\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"locale\", i0.ɵɵpureFunction0(23, _c1))(\"drops\", \"down\")(\"opens\", \"right\")(\"alwaysShowCalendars\", true)(\"keepCalendarOpeningWithRange\", true)(\"showDropdowns\", true)(\"showCancel\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", ctx.pickerDirective);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.action);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.FormAction.CREATE);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.FormAction.UPDATE);\n      }\n    },\n    directives: [i1.MatDialogTitle, i1.MatDialogContent, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i8.MatFormField, i8.MatLabel, i9.MatSelect, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i10.MatOption, i11.MatSelectSearchComponent, i2.FormControlDirective, i12.NgForOf, i8.MatError, i12.NgIf, i2.FormArrayName, i13.MatInput, i14.DaterangepickerDirective, i2.DefaultValueAccessor, i15.MatDatepickerToggle, i8.MatSuffix, i1.MatDialogClose, i12.NgSwitch, i12.NgSwitchCase, i12.NgSwitchDefault, i2.FormGroupName, i2.MinValidator, i2.NumberValueAccessor, i12.NgClass],\n    pipes: [i12.AsyncPipe],\n    encapsulation: 2\n  });\n  return FugitiveReleasesCreateUpdateDailog;\n})();","map":null,"metadata":{},"sourceType":"module"}