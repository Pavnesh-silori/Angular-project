{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/process.controller\";\nexport let ProcessService = /*#__PURE__*/(() => {\n  class ProcessService {\n    constructor(processController) {\n      this.processController = processController;\n    }\n    getProcessList(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let processM;\n        let process;\n        try {\n          processM = yield this.processController.getProcessList(orgID).toPromise();\n          if (processM) {\n            return processM;\n          } else {\n            return process;\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return process;\n        }\n      });\n    }\n    getIpccProcess() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let ipccProcess;\n        try {\n          ipccProcess = yield this.processController.getIpccProcess().toPromise();\n          if (ipccProcess) {\n            return ipccProcess;\n            // return new IpccProcess();\n          } else {\n            // return new IpccProcess();\n          }\n        } catch (error) {\n          console.error('error in getIpccProcess -', error);\n          // return new IpccProcess();\n        }\n      });\n    }\n\n    getProcessParamTech(ippcProcessID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let ipccProcess;\n        try {\n          ipccProcess = yield this.processController.getProcessParamTech(ippcProcessID).toPromise();\n          if (ipccProcess) {\n            return ipccProcess;\n            // return new IpccProcess();\n          } else {\n            // return new IpccProcess();\n          }\n        } catch (error) {\n          console.error('error in getProcessParamTech -', error);\n          // return new IpccProcess();\n        }\n      });\n    }\n\n    getProcessByID(ordID, processID, isLatest = null) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let process;\n        try {\n          process = yield this.processController.getProcessByID(ordID, processID, isLatest).toPromise();\n          if (process) {\n            return process;\n          } else {\n            return null;\n          }\n        } catch (error) {\n          console.error('error in getProcessByID -', error);\n          return null;\n        }\n      });\n    }\n    getProcessInputs() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let processInput;\n        try {\n          processInput = yield this.processController.getProcessInputs().toPromise();\n          if (processInput) {\n            return processInput;\n          } else {\n            return null;\n          }\n        } catch (error) {\n          console.error('error in getProcessInputs -', error);\n          return null;\n        }\n      });\n    }\n  }\n  ProcessService.ɵfac = function ProcessService_Factory(t) {\n    return new (t || ProcessService)(i0.ɵɵinject(i1.ProcessController));\n  };\n  ProcessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProcessService,\n    factory: ProcessService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProcessService;\n})();","map":null,"metadata":{},"sourceType":"module"}