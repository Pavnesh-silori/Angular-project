{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nclass FacilityServiceService {\n  constructor() {}\n}\nFacilityServiceService.ɵfac = function FacilityServiceService_Factory(t) {\n  return new (t || FacilityServiceService)();\n};\nFacilityServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FacilityServiceService,\n  factory: FacilityServiceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FacilityServiceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass FacilityServiceComponent {\n  constructor() {}\n  ngOnInit() {}\n}\nFacilityServiceComponent.ɵfac = function FacilityServiceComponent_Factory(t) {\n  return new (t || FacilityServiceComponent)();\n};\nFacilityServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FacilityServiceComponent,\n  selectors: [[\"lib-facility-service\"]],\n  decls: 2,\n  vars: 0,\n  template: function FacilityServiceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \" facility-service works! \");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FacilityServiceComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-facility-service',\n      template: `\n    <p>\n      facility-service works!\n    </p>\n  `,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass FacilityServiceModule {\n  static forRoot(environment) {\n    return {\n      ngModule: FacilityServiceModule,\n      providers: [{\n        provide: 'environment',\n        useValue: environment\n      }]\n    };\n  }\n}\nFacilityServiceModule.ɵfac = function FacilityServiceModule_Factory(t) {\n  return new (t || FacilityServiceModule)();\n};\nFacilityServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FacilityServiceModule\n});\nFacilityServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FacilityServiceModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FacilityServiceComponent],\n      imports: [],\n      exports: [FacilityServiceComponent]\n    }]\n  }], null, null);\n})();\nclass Facility {}\nclass FacilityController {\n  constructor(http, environment) {\n    this.http = http;\n    this.environment = environment;\n  }\n  getFacilityByID(rootOrgID, facilityID) {\n    return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${rootOrgID}/facility/${facilityID}`);\n  }\n}\nFacilityController.ɵfac = function FacilityController_Factory(t) {\n  return new (t || FacilityController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n};\nFacilityController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FacilityController,\n  factory: FacilityController.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FacilityController, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['environment']\n      }]\n    }];\n  }, null);\n})();\nclass FacilityService {\n  constructor(facilityController) {\n    this.facilityController = facilityController;\n  }\n  getFacilityByID(rootOrgID, facilityID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let facilityM;\n      let facility = new Facility();\n      try {\n        facilityM = yield this.facilityController.getFacilityByID(rootOrgID, facilityID).toPromise();\n        if (facilityM) {\n          return facilityM;\n        } else {\n          return facility;\n        }\n      } catch (error) {\n        console.error('Error -', error);\n        return facility;\n      }\n    });\n  }\n}\nFacilityService.ɵfac = function FacilityService_Factory(t) {\n  return new (t || FacilityService)(i0.ɵɵinject(FacilityController));\n};\nFacilityService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FacilityService,\n  factory: FacilityService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FacilityService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FacilityController\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of facility-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Facility, FacilityController, FacilityService, FacilityServiceComponent, FacilityServiceModule, FacilityServiceService };","map":{"version":3,"names":["i0","Injectable","Component","NgModule","Inject","i1","__awaiter","FacilityServiceService","constructor","ɵfac","FacilityServiceService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","FacilityServiceComponent","ngOnInit","FacilityServiceComponent_Factory","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","FacilityServiceComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","encapsulation","selector","styles","FacilityServiceModule","forRoot","environment","ngModule","providers","provide","useValue","FacilityServiceModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","Facility","FacilityController","http","getFacilityByID","rootOrgID","facilityID","get","ORGANIZATION_API_URL","FacilityController_Factory","ɵɵinject","HttpClient","undefined","decorators","FacilityService","facilityController","facilityM","facility","toPromise","error","console","FacilityService_Factory"],"sources":["/home/silori/projects/gitClones/admin-ui/library/facility-service/fesm2015/library-facility-service.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { __awaiter } from 'tslib';\n\nclass FacilityServiceService {\n    constructor() { }\n}\nFacilityServiceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFacilityServiceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass FacilityServiceComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n}\nFacilityServiceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nFacilityServiceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: FacilityServiceComponent, selector: \"lib-facility-service\", ngImport: i0, template: `\n    <p>\n      facility-service works!\n    </p>\n  `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-facility-service',\n                    template: `\n    <p>\n      facility-service works!\n    </p>\n  `,\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass FacilityServiceModule {\n    static forRoot(environment) {\n        return {\n            ngModule: FacilityServiceModule,\n            providers: [\n                { provide: 'environment', useValue: environment }\n            ]\n        };\n    }\n}\nFacilityServiceModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFacilityServiceModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceModule, declarations: [FacilityServiceComponent], exports: [FacilityServiceComponent] });\nFacilityServiceModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityServiceModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        FacilityServiceComponent\n                    ],\n                    imports: [],\n                    exports: [\n                        FacilityServiceComponent\n                    ]\n                }]\n        }] });\n\nclass Facility {\n}\n\nclass FacilityController {\n    constructor(http, environment) {\n        this.http = http;\n        this.environment = environment;\n    }\n    getFacilityByID(rootOrgID, facilityID) {\n        return this.http.get(`${this.environment.ORGANIZATION_API_URL}organizations/${rootOrgID}/facility/${facilityID}`);\n    }\n}\nFacilityController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityController, deps: [{ token: i1.HttpClient }, { token: 'environment' }], target: i0.ɵɵFactoryTarget.Injectable });\nFacilityController.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityController, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityController, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['environment']\n                }] }]; } });\n\nclass FacilityService {\n    constructor(facilityController) {\n        this.facilityController = facilityController;\n    }\n    getFacilityByID(rootOrgID, facilityID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let facilityM;\n            let facility = new Facility();\n            try {\n                facilityM = yield this.facilityController.getFacilityByID(rootOrgID, facilityID).toPromise();\n                if (facilityM) {\n                    return facilityM;\n                }\n                else {\n                    return facility;\n                }\n            }\n            catch (error) {\n                console.error('Error -', error);\n                return facility;\n            }\n        });\n    }\n}\nFacilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityService, deps: [{ token: FacilityController }], target: i0.ɵɵFactoryTarget.Injectable });\nFacilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: FacilityService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: FacilityController }]; } });\n\n/*\n * Public API Surface of facility-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Facility, FacilityController, FacilityService, FacilityServiceComponent, FacilityServiceModule, FacilityServiceService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}