{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { ActivityConfig } from '@carbon/component/activity-config/activity-config';\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\nimport { ProcessEmissionActivityTypeKeyIDEnum } from '@carbon/enum/activity.enum';\n// tsc-library\nimport { COMMON_CONSTANT, MatSelectSearchService } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@carbon/service/process.service\";\nimport * as i4 from \"@library/storage-service\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"ngx-mat-select-search\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/tooltip\";\nfunction ProcessEmissionActivityConfigCreateComponent_ng_container_6_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProcessEmissionActivityConfigCreateComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 13);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 7);\n    i0.ɵɵelementStart(2, \"mat-label\", 8);\n    i0.ɵɵtext(3, \"Activity form name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 14);\n    i0.ɵɵtemplate(5, ProcessEmissionActivityConfigCreateComponent_ng_container_6_mat_error_5_Template, 2, 1, \"mat-error\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandling(ctx_r0.activityConfigFG, \"activityConfig.configName\", \"required\"));\n  }\n}\nfunction ProcessEmissionActivityConfigCreateComponent_ng_container_16_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 16);\n    i0.ɵɵlistener(\"click\", function ProcessEmissionActivityConfigCreateComponent_ng_container_16_mat_option_1_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const process_r5 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.processChange(process_r5);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const process_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"value\", process_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", process_r5.name, \" \");\n  }\n}\nfunction ProcessEmissionActivityConfigCreateComponent_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ProcessEmissionActivityConfigCreateComponent_ng_container_16_mat_option_1_Template, 2, 2, \"mat-option\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const process_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", process_r5.isStandard);\n  }\n}\nfunction ProcessEmissionActivityConfigCreateComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProcessEmissionActivityConfigCreateComponent_ng_container_20_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const processParamTech_r13 = ctx.$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"value\", processParamTech_r13.id)(\"matTooltip\", ctx_r11.getProcessParamTechName(processParamTech_r13));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r11.getProcessParamTechName(processParamTech_r13), \" \");\n  }\n}\nfunction ProcessEmissionActivityConfigCreateComponent_ng_container_20_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.FormErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction ProcessEmissionActivityConfigCreateComponent_ng_container_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 7);\n    i0.ɵɵelementStart(2, \"mat-label\", 8);\n    i0.ɵɵtext(3, \"Select parameter/technology\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 17);\n    i0.ɵɵelementStart(5, \"mat-option\");\n    i0.ɵɵelement(6, \"ngx-mat-select-search\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ProcessEmissionActivityConfigCreateComponent_ng_container_20_mat_option_7_Template, 2, 3, \"mat-option\", 19);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, ProcessEmissionActivityConfigCreateComponent_ng_container_20_mat_error_9_Template, 2, 1, \"mat-error\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"appearance\", ctx_r3.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formControl\", ctx_r3.processParamTechSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx_r3.COMMON_CONSTANT.NO_MATCH_FOUND);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 5, ctx_r3.processParamTechSelectSearch.filteredEntities));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorHandling(ctx_r3.activityConfigFG, \"activityConfigData.ipccProcessParamTechMapID\", \"required\"));\n  }\n}\n// /tsc-library/\nexport let ProcessEmissionActivityConfigCreateComponent = /*#__PURE__*/(() => {\n  class ProcessEmissionActivityConfigCreateComponent extends ActivityConfig {\n    constructor(activatedRoute, formBuilder, processService,\n    // tsc-library\n    storageService\n    // /tsc-library\n    ) {\n      super();\n      this.activatedRoute = activatedRoute;\n      this.formBuilder = formBuilder;\n      this.processService = processService;\n      this.activityConfig = {\n        \"activityConfigData\": {\n          \"process\": {\n            \"type\": \"STANDARD\",\n            \"id\": 1,\n            \"name\": \"process name\",\n            \"ipccProcessParamTechMapID\": 3,\n            \"parameter\": {\n              \"id\": 1,\n              \"name\": \"Parameter\"\n            },\n            \"technology\": {\n              \"id\": 1,\n              \"name\": \"Parameter\"\n            }\n          }\n        }\n      };\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.ActivityConfigEnum = ActivityConfigEnum;\n      this.origin = 'default';\n      this.processSelectSearch = new MatSelectSearchService(['name']);\n      this.processParamTechSelectSearch = new MatSelectSearchService(['parameter']);\n      this.showIpccProcessParamTech = false;\n      this.currentOrgID = storageService.getStorage('currentOrgID');\n    }\n    ngOnInit() {\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        this.activityKeyID = this.activatedRoute.snapshot.data.activityKeyID;\n        if (queryParams['activityID']) {\n          this.activityID = queryParams['activityID'];\n        }\n        if (queryParams['origin']) {\n          this.origin = queryParams['origin'];\n        }\n      });\n      this.formGroupInit();\n      this.getProcess(this.currentOrgID);\n    }\n    formGroupInit() {\n      this.activityConfigFG = this.formBuilder.group({\n        activityConfig: this.formBuilder.group({\n          activityID: this.activityID,\n          activityKeyID: this.activityKeyID,\n          configName: [, Validators.required],\n          reminderEnabled: [],\n          workflowEnabled: [],\n          apiEnabled: []\n        }),\n        activityConfigData: this.formBuilder.group({\n          type: [, Validators.required],\n          processID: [, Validators.required],\n          ipccProcessParamTechMapID: []\n        }),\n        activityConfigSource: this.formBuilder.group({\n          sourceTypeID: [],\n          sourceID: []\n        })\n      });\n    }\n    getProcess(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let ipccProcess;\n        let customProcess;\n        let modifiedIpccProcess;\n        let modifiedCustomProcess;\n        [ipccProcess, customProcess] = yield Promise.all([this.processService.getIpccProcess(), this.processService.getProcessList(orgID)]);\n        modifiedIpccProcess = ipccProcess.map(process => {\n          return Object.assign(Object.assign({}, process), {\n            isStandard: true,\n            uID: 'S' + process.id\n          });\n        });\n        modifiedCustomProcess = customProcess.map(process => {\n          return Object.assign(Object.assign({}, process), {\n            isStandard: false\n          });\n        });\n        this.process = modifiedIpccProcess.concat(modifiedCustomProcess);\n        this.processSelectSearch.entityArr = this.process;\n        this.processSelectSearch.createSubscription();\n      });\n    }\n    processChange(process) {\n      this.patchControl(this.activityConfigFG, 'activityConfigData.type', process.isStandard ? ProcessEmissionActivityTypeKeyIDEnum.STANDARD : ProcessEmissionActivityTypeKeyIDEnum.CUSTOM);\n      this.patchControl(this.activityConfigFG, 'activityConfigData.ipccProcessParamTechMapID', null);\n      this.showIpccProcessParamTechFn(process.id, process.isStandard);\n    }\n    showIpccProcessParamTechFn(processID, isStandardProcess) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (isStandardProcess) {\n          this.processParamTech = yield this.processService.getProcessParamTech(processID);\n          if (this.processParamTech) {\n            this.activityConfigFG.get('activityConfigData.ipccProcessParamTechMapID').setValidators([Validators.required]);\n            this.showIpccProcessParamTech = true;\n          } else {\n            this.activityConfigFG.get('activityConfigData.ipccProcessParamTechMapID').clearValidators();\n            this.showIpccProcessParamTech = false;\n          }\n          this.processParamTechSelectSearch.entityArr = this.processParamTech;\n          this.processParamTechSelectSearch.createSubscription();\n        } else {\n          this.activityConfigFG.get('activityConfigData.ipccProcessParamTechMapID').clearValidators();\n          this.patchControl(this.activityConfigFG, 'activityConfigData.ipccProcessParamTechMapID', null);\n          this.showIpccProcessParamTech = false;\n        }\n        this.activityConfigFG.get('activityConfigData.ipccProcessParamTechMapID').updateValueAndValidity();\n      });\n    }\n    getProcessParamTechName(processParamTech) {\n      let processParamTechName;\n      if (processParamTech.technology) {\n        processParamTechName = `${processParamTech.parameter} > ${processParamTech.technology}`;\n      } else {\n        processParamTechName = processParamTech.parameter;\n      }\n      return processParamTechName;\n    }\n    patchConfiguration(configuration) {\n      let activityConfig;\n      let activityConfigData;\n      activityConfig = configuration.activityConfig != null ? configuration['activityConfig'] : null;\n      activityConfigData = configuration['activityConfigData'];\n      if (activityConfig != null) {\n        this.activityConfigAC.patchValue({\n          configName: activityConfig.configName\n        });\n      } else {\n        this.readOnlyForm();\n      }\n      this.activityConfigDataAC.patchValue({\n        type: activityConfigData.type,\n        processID: activityConfigData.id,\n        ipccProcessParamTechMapID: activityConfigData.ipccProcessParamTechMapID\n      });\n      if (activityConfigData.type == ProcessEmissionActivityTypeKeyIDEnum.STANDARD) {\n        this.showIpccProcessParamTechFn(activityConfigData.id, true);\n      } else {\n        this.showIpccProcessParamTechFn(null, false);\n      }\n      this.updateInitialObject();\n    }\n    patchControl(formGroup, controlPath, value) {\n      formGroup.get(controlPath).patchValue(value);\n    }\n  }\n  ProcessEmissionActivityConfigCreateComponent.ɵfac = function ProcessEmissionActivityConfigCreateComponent_Factory(t) {\n    return new (t || ProcessEmissionActivityConfigCreateComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ProcessService), i0.ɵɵdirectiveInject(i4.StorageService));\n  };\n  ProcessEmissionActivityConfigCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProcessEmissionActivityConfigCreateComponent,\n    selectors: [[\"app-process-emission-activity-config-create\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 21,\n    vars: 10,\n    consts: [[1, \"cardOverwrite\", \"border\"], [1, \"cardTitle\", \"pb-2\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-sm-6\"], [\"formGroupName\", \"activityConfig\", \"class\", \"col-sm-8\", 4, \"ngIf\"], [\"formGroupName\", \"activityConfigData\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"formControlName\", \"processID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by process name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"formGroupName\", \"activityConfig\", 1, \"col-sm-8\"], [\"type\", \"text\", \"placeholder\", \"Activity form name\", \"matInput\", \"\", \"formControlName\", \"configName\", \"required\", \"\", 1, \"formPlaceholder\"], [3, \"value\", \"click\", 4, \"ngIf\"], [3, \"value\", \"click\"], [\"formControlName\", \"ipccProcessParamTechMapID\", \"required\", \"\"], [\"placeholderLabel\", \"Search by parameter name\", 3, \"formControl\", \"noEntriesFoundLabel\"], [\"matTooltipPosition\", \"above\", 3, \"value\", \"matTooltip\", 4, \"ngFor\", \"ngForOf\"], [\"matTooltipPosition\", \"above\", 3, \"value\", \"matTooltip\"]],\n    template: function ProcessEmissionActivityConfigCreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \" Details \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, ProcessEmissionActivityConfigCreateComponent_ng_container_6_Template, 6, 2, \"ng-container\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 3);\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵelementStart(10, \"mat-form-field\", 7);\n        i0.ɵɵelementStart(11, \"mat-label\", 8);\n        i0.ɵɵtext(12, \"Select process\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-select\", 9);\n        i0.ɵɵelementStart(14, \"mat-option\");\n        i0.ɵɵelement(15, \"ngx-mat-select-search\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, ProcessEmissionActivityConfigCreateComponent_ng_container_16_Template, 2, 1, \"ng-container\", 11);\n        i0.ɵɵpipe(17, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, ProcessEmissionActivityConfigCreateComponent_mat_error_18_Template, 2, 1, \"mat-error\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 4);\n        i0.ɵɵtemplate(20, ProcessEmissionActivityConfigCreateComponent_ng_container_20_Template, 10, 7, \"ng-container\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.activityConfigFG);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.origin == ctx.ActivityConfigEnum.PFF);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.processSelectSearch.filterFC)(\"noEntriesFoundLabel\", ctx.COMMON_CONSTANT.NO_MATCH_FOUND);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 8, ctx.processSelectSearch.filteredEntities));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(ctx.activityConfigFG, \"activityConfigData.processID\", \"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showIpccProcessParamTech);\n      }\n    },\n    directives: [i5.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i6.NgIf, i2.FormGroupName, i7.MatFormField, i7.MatLabel, i8.MatSelect, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i9.MatOption, i10.MatSelectSearchComponent, i2.FormControlDirective, i6.NgForOf, i11.MatInput, i2.DefaultValueAccessor, i7.MatError, i12.MatTooltip],\n    pipes: [i6.AsyncPipe],\n    encapsulation: 2\n  });\n  return ProcessEmissionActivityConfigCreateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}