{"ast":null,"code":"import { MatTableDataSource } from '@angular/material/table';\nimport { ToastrColor } from '@library/toastr-service';\nimport { InvalidForm, TABLE_CONSTANT } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/boundary-question.controller\";\nimport * as i2 from \"@library/storage-service\";\nimport * as i3 from \"@library/toastr-service\";\nimport * as i4 from \"@angular/material/table\";\nimport * as i5 from \"@angular/common\";\nfunction ActivityComponent_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 17);\n    i0.ɵɵtext(1, \" Activity Type \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ActivityComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", row_r9.activityName, \" \");\n  }\n}\nfunction ActivityComponent_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 19);\n    i0.ɵɵtext(1, \" Scope \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ActivityComponent_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", row_r10.scopeName, \" \");\n  }\n}\nfunction ActivityComponent_th_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"th\", 20);\n  }\n}\nfunction ActivityComponent_td_16_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 24);\n    i0.ɵɵtext(2, \" check_circle \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction ActivityComponent_td_16_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 25);\n    i0.ɵɵtext(1, \" cancel \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ActivityComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵtemplate(1, ActivityComponent_td_16_ng_container_1_Template, 3, 0, \"ng-container\", 22);\n    i0.ɵɵtemplate(2, ActivityComponent_td_16_ng_template_2_Template, 2, 0, \"ng-template\", null, 23, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r11 = ctx.$implicit;\n    const _r13 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", row_r11.activityEnable == \"YES\")(\"ngIfElse\", _r13);\n  }\n}\nfunction ActivityComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 26);\n  }\n}\nfunction ActivityComponent_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 27);\n  }\n}\nfunction ActivityComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 28);\n    i0.ɵɵelementStart(1, \"td\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", ctx_r8.displayedColumns.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.TABLE_CONSTANT.TABLE_NO_DATA, \" \");\n  }\n}\nexport let ActivityComponent = /*#__PURE__*/(() => {\n  class ActivityComponent {\n    constructor(boundaryQuestionController, storageService, toasterService) {\n      this.boundaryQuestionController = boundaryQuestionController;\n      this.storageService = storageService;\n      this.toasterService = toasterService;\n      this.TABLE_CONSTANT = TABLE_CONSTANT;\n      this.displayedColumns = ['activityName', 'scopeName', 'activityEnable'];\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.getAllActivityFlagList();\n    }\n    getAllActivityFlagList() {\n      this.boundaryQuestionController.getAllActivityFlagList(this.currentOrgID).subscribe(allFormRes => {\n        let formOrganized = [];\n        formOrganized = formOrganized.concat(allFormRes.filter(form => {\n          return form['scopeName'] == 'Scope 1';\n        }));\n        formOrganized = formOrganized.concat(allFormRes.filter(form => {\n          return form['scopeName'] == 'Scope 2';\n        }));\n        formOrganized = formOrganized.concat(allFormRes.filter(form => {\n          return form['scopeName'] == 'Scope 3';\n        }));\n        this.dataSource = new MatTableDataSource(formOrganized);\n      }, error => {\n        console.log('error in getAllActivityFlagList() -', error);\n        this.toasterService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n      });\n    }\n  }\n  ActivityComponent.ɵfac = function ActivityComponent_Factory(t) {\n    return new (t || ActivityComponent)(i0.ɵɵdirectiveInject(i1.BoundaryQuestionController), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.ToastrService));\n  };\n  ActivityComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActivityComponent,\n    selectors: [[\"app-activity\"]],\n    decls: 20,\n    vars: 3,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\"], [1, \"card-header\", \"mt-2\", \"bottomBorderNone\"], [1, \"card-title\", \"my-auto\"], [1, \"pageTitle\"], [1, \"pageSubtitle\"], [\"mat-table\", \"\", 1, \"w-100\", \"customTable\", \"roundedBorder\", \"mb-4\", 3, \"dataSource\"], [\"matColumnDef\", \"activityName\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"scopeName\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"matColumnDef\", \"activityEnable\"], [\"class\", \"text-center\", \"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"class\", \"text-center cursorDefaultHover\", \"mat-cell\", \"\", 4, \"matCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"class\", \"mat-row\", 4, \"matNoDataRow\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 1, \"text-center\"], [\"mat-cell\", \"\", 1, \"text-center\", \"cursorDefaultHover\"], [4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [1, \"material-symbols-outlined\", \"text-success\"], [1, \"material-symbols-outlined\", \"text-danger\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"], [1, \"mat-row\"], [1, \"mat-cell\", \"text-center\"]],\n    template: function ActivityComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4, \" Activity Types \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtext(6, \" Based on the boundary questions you answered, view activity types for each scope that you should account for as per the GHG protocol. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"table\", 5);\n        i0.ɵɵelementContainerStart(8, 6);\n        i0.ɵɵtemplate(9, ActivityComponent_th_9_Template, 2, 0, \"th\", 7);\n        i0.ɵɵtemplate(10, ActivityComponent_td_10_Template, 2, 1, \"td\", 8);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(11, 9);\n        i0.ɵɵtemplate(12, ActivityComponent_th_12_Template, 2, 0, \"th\", 10);\n        i0.ɵɵtemplate(13, ActivityComponent_td_13_Template, 2, 1, \"td\", 8);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(14, 11);\n        i0.ɵɵtemplate(15, ActivityComponent_th_15_Template, 1, 0, \"th\", 12);\n        i0.ɵɵtemplate(16, ActivityComponent_td_16_Template, 4, 2, \"td\", 13);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(17, ActivityComponent_tr_17_Template, 1, 0, \"tr\", 14);\n        i0.ɵɵtemplate(18, ActivityComponent_tr_18_Template, 1, 0, \"tr\", 15);\n        i0.ɵɵtemplate(19, ActivityComponent_tr_19_Template, 3, 2, \"tr\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      }\n    },\n    directives: [i4.MatTable, i4.MatColumnDef, i4.MatHeaderCellDef, i4.MatCellDef, i4.MatHeaderRowDef, i4.MatRowDef, i4.MatNoDataRow, i4.MatHeaderCell, i4.MatCell, i5.NgIf, i4.MatHeaderRow, i4.MatRow],\n    encapsulation: 2\n  });\n  return ActivityComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}