{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ProductAndService } from \"@netzero/model/product-service.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@netzero/controller/product-and-service.controller\";\nexport let ProductAndServiceService = /*#__PURE__*/(() => {\n  class ProductAndServiceService {\n    constructor(productAndServiceController) {\n      this.productAndServiceController = productAndServiceController;\n    }\n    getProductByID(orgID, id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let productM;\n        let product = new ProductAndService();\n        try {\n          productM = yield this.productAndServiceController.getProductByID(orgID, id).toPromise();\n          if (productM) {\n            return productM;\n          } else {\n            return product;\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return product;\n        }\n      });\n    }\n    getServiceByID(orgID, id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let serviceM;\n        let service = new ProductAndService();\n        try {\n          serviceM = yield this.productAndServiceController.getServiceByID(orgID, id).toPromise();\n          if (serviceM) {\n            return serviceM;\n          } else {\n            return service;\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return service;\n        }\n      });\n    }\n    getProductList(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let productList;\n        try {\n          productList = yield this.productAndServiceController.getProductList(orgID).toPromise();\n          if (productList) return productList;\n        } catch (error) {\n          console.error('Error -', error);\n        }\n        return [];\n      });\n    }\n  }\n  ProductAndServiceService.ɵfac = function ProductAndServiceService_Factory(t) {\n    return new (t || ProductAndServiceService)(i0.ɵɵinject(i1.ProductAndServiceController));\n  };\n  ProductAndServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductAndServiceService,\n    factory: ProductAndServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductAndServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}