{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport * as i1 from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nlet UnitServiceService = /*#__PURE__*/(() => {\n  class UnitServiceService {\n    constructor() {}\n  }\n  UnitServiceService.ɵfac = function UnitServiceService_Factory(t) {\n    return new (t || UnitServiceService)();\n  };\n  UnitServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UnitServiceService,\n    factory: UnitServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return UnitServiceService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UnitServiceComponent = /*#__PURE__*/(() => {\n  class UnitServiceComponent {\n    constructor() {}\n    ngOnInit() {}\n  }\n  UnitServiceComponent.ɵfac = function UnitServiceComponent_Factory(t) {\n    return new (t || UnitServiceComponent)();\n  };\n  UnitServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UnitServiceComponent,\n    selectors: [[\"lib-unit-service\"]],\n    decls: 2,\n    vars: 0,\n    template: function UnitServiceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" unit-service works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return UnitServiceComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UnitServiceModule = /*#__PURE__*/(() => {\n  class UnitServiceModule {\n    static forRoot(environment) {\n      return {\n        ngModule: UnitServiceModule,\n        providers: [{\n          provide: 'environment',\n          useValue: environment\n        }]\n      };\n    }\n  }\n  UnitServiceModule.ɵfac = function UnitServiceModule_Factory(t) {\n    return new (t || UnitServiceModule)();\n  };\n  UnitServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: UnitServiceModule\n  });\n  UnitServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return UnitServiceModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar UnitTypeKeyID = /*#__PURE__*/(() => {\n  (function (UnitTypeKeyID) {\n    UnitTypeKeyID[\"LENGTH\"] = \"LENGTH\";\n    UnitTypeKeyID[\"VOLUME\"] = \"VOLUME\";\n    UnitTypeKeyID[\"ENERGY\"] = \"ENERGY\";\n    UnitTypeKeyID[\"EQUIVALENT_EMISSION\"] = \"EQUIVALENT_EMISSION\";\n    UnitTypeKeyID[\"MASS\"] = \"MASS\";\n  })(UnitTypeKeyID || (UnitTypeKeyID = {}));\n  return UnitTypeKeyID;\n})();\nvar UomCode = /*#__PURE__*/(() => {\n  (function (UomCode) {\n    UomCode[\"TCO2E\"] = \"tCO2e\";\n  })(UomCode || (UomCode = {}));\n  return UomCode;\n})();\nclass OldUnit {\n  constructor() {\n    this.unitID = null;\n    this.uomName = null;\n    this.uomCode = null;\n    this.unitType = null;\n    this.unitSubType = null;\n  }\n}\nclass Unit {\n  constructor() {\n    this.id = null;\n    this.name = null;\n    this.uomCode = null;\n    this.type = null;\n    this.subType = null;\n  }\n}\nlet UnitController = /*#__PURE__*/(() => {\n  class UnitController {\n    constructor(http, environment) {\n      this.http = http;\n      this.environment = environment;\n    }\n    getUnit(filters) {\n      let params = new HttpParams();\n      filters.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${this.environment.COMMON_API_URL}units/filter`, {\n        params: params\n      });\n    }\n    getUnitUsingPublicUrl(filters) {\n      let params = new HttpParams();\n      filters.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${this.environment.COMMON_PUBLIC_API_URL}units/filter`, {\n        params: params\n      });\n    }\n  }\n  UnitController.ɵfac = function UnitController_Factory(t) {\n    return new (t || UnitController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n  };\n  UnitController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UnitController,\n    factory: UnitController.ɵfac,\n    providedIn: 'root'\n  });\n  return UnitController;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UnitService = /*#__PURE__*/(() => {\n  class UnitService {\n    constructor(unitController) {\n      this.unitController = unitController;\n    }\n    getUnit(apiFilter) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let oldUnitM;\n        let unitM;\n        try {\n          oldUnitM = yield this.unitController.getUnit(apiFilter).toPromise();\n          if (oldUnitM) {\n            unitM = oldUnitM.map(this.transformUnit);\n            unitM.unshift({\n              id: null,\n              name: 'Select none',\n              uomCode: null,\n              type: null,\n              typeName: null,\n              subType: null\n            });\n            return unitM;\n          } else {\n            return [new Unit()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new Unit()];\n        }\n      });\n    }\n    getUnitUsingPublicUrl(apiFilter) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let oldUnitM;\n        let unitM;\n        try {\n          oldUnitM = yield this.unitController.getUnitUsingPublicUrl(apiFilter).toPromise();\n          if (oldUnitM) {\n            unitM = oldUnitM.map(this.transformUnit);\n            unitM.unshift({\n              id: null,\n              name: 'Select none',\n              uomCode: null,\n              type: null,\n              typeName: null,\n              subType: null\n            });\n            return unitM;\n          } else {\n            return [new Unit()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new Unit()];\n        }\n      });\n    }\n    transformUnit(oldUnit) {\n      return {\n        id: oldUnit.unitID,\n        name: oldUnit.uomName,\n        uomCode: oldUnit.uomCode,\n        type: oldUnit.unitType,\n        typeName: oldUnit.unitTypeName,\n        subType: oldUnit.unitSubType\n      };\n    }\n    filterUnit(unit, unitTypeFilter) {\n      let unitM;\n      unitM = unit.filter(unit => unitTypeFilter.includes(unit.type));\n      unitM.unshift({\n        id: null,\n        name: 'Select none',\n        uomCode: null,\n        type: null,\n        typeName: null,\n        subType: null\n      });\n      return unitM;\n    }\n  }\n  UnitService.ɵfac = function UnitService_Factory(t) {\n    return new (t || UnitService)(i0.ɵɵinject(UnitController));\n  };\n  UnitService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UnitService,\n    factory: UnitService.ɵfac,\n    providedIn: 'root'\n  });\n  return UnitService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of unit-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { OldUnit, Unit, UnitService, UnitServiceComponent, UnitServiceModule, UnitServiceService, UnitTypeKeyID, UomCode };\n//# sourceMappingURL=library-unit-service.js.map","map":null,"metadata":{},"sourceType":"module"}