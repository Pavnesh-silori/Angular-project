{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SpendBasedController = /*#__PURE__*/(() => {\n  class SpendBasedController {\n    constructor(http) {\n      this.http = http;\n    }\n    createImportRequest(orgID, body) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/request`, body);\n    }\n    getInflationRate(orgID, methodID, startDate, endDate, currencyID) {\n      let params = new HttpParams();\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      params = params.append('methodID', methodID);\n      params = params.append(\"currencyID\", currencyID);\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/inflation`, {\n        params: params\n      });\n    }\n    saveConfigureData(orgID, body) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/create`, body);\n    }\n    getConfigAccount(orgID, configID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/config/${configID}/account`);\n    }\n    getActivities(orgID, methodID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/method/${methodID}/activity`);\n    }\n    getCategoryRecords(pageNo, pageSize, sortBy, orderBy, filterArr, orgID, configID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/config/${configID}/records`, {\n        params: params\n      });\n    }\n    saveUserPrefrenceCategory(orgID, preferenceData) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/record/preference`, preferenceData);\n    }\n    getUserPrefrenceCategory(orgID, recordID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/record/${recordID}/preference`);\n    }\n    saveCategoryRecordsData(orgID, configID, categoryData) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/config/${configID}/record`, categoryData);\n    }\n    getImportRecordsPreview(pageNo, pageSize, sortBy, orderBy, filterArr, orgID, configID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/config/${configID}/preview`, {\n        params: params\n      });\n    }\n    submitPreviewData(orgID, configID, configStatus) {\n      let params = new HttpParams();\n      params = params.append('status', configStatus);\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/config/${configID}/submit`, '', {\n        params: params\n      });\n    }\n    getImportRecordHistory(pageNo, pageSize, sortBy, orderBy, filterArr, orgID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/history`, {\n        params: params\n      });\n    }\n    deleteImportRecordConfig(orgID, configID) {\n      return this.http.delete(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/config/${configID}`);\n    }\n    getImportRecordConfiguredData(orgID, configID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/config/${configID}`);\n    }\n    updateConfiguredData(orgID, configID, configuredData) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/config/${configID}`, configuredData);\n    }\n    getImportRecordsAccountByOrg(orgID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/import-record/account`);\n    }\n    getImportRecordsByOrg(pageNo, pageSize, sortBy, orderBy, filterArr, orgID, startDate, endDate) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      params = params.append('startDate', startDate);\n      params = params.append('endDate', endDate);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/scope3/record`, {\n        params: params\n      });\n    }\n    deleteImportRecord(orgID, recordID) {\n      return this.http.delete(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/scope3/record/${recordID}`);\n    }\n    getImportRecordsEmissionByOrg(pageNo, pageSize, sortBy, orderBy, filterArr, orgID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo + 1);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      filterArr.forEach(filter => {\n        params = params.append('filter', filter);\n      });\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/scope3/emission`, {\n        params: params\n      });\n    }\n    updateCategorizedRecords(orgID, recordID, categorizedRecords) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/scope3/record/${recordID}`, categorizedRecords);\n    }\n    getCategoryMapping(orgID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/category`);\n    }\n  }\n  SpendBasedController.ɵfac = function SpendBasedController_Factory(t) {\n    return new (t || SpendBasedController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SpendBasedController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpendBasedController,\n    factory: SpendBasedController.ɵfac,\n    providedIn: 'root'\n  });\n  return SpendBasedController;\n})();","map":null,"metadata":{},"sourceType":"module"}