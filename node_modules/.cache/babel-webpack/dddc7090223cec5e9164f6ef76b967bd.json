{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { isEqual } from \"lodash\";\n// tsc-common\nimport { MaterialFormFieldAppearance, InvalidForm } from '@library/tsc-common';\nimport { ToastrColor, ToastrTitle } from '@library/toastr-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@netzero/controller/asset.controller\";\nimport * as i3 from \"@netzero/controller/source.controller\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@library/toastr-service\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nfunction CreateUpdateComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Combustion equipment code already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Description is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateUpdateComponent_button_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_button_29_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.checkKeyAvailability();\n    });\n    i0.ɵɵtext(1, \" Create \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\nfunction CreateUpdateComponent_button_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function CreateUpdateComponent_button_30_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.updateAsset();\n    });\n    i0.ɵɵtext(1, \" Update \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(1, _c0, ctx_r4.isEqual));\n  }\n}\nfunction CreateUpdateComponent_button_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 18);\n  }\n}\n// /tsc-common/\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(assetFB, assetController, sourceController, dialogRef, data, toastrService) {\n      this.assetFB = assetFB;\n      this.assetController = assetController;\n      this.sourceController = sourceController;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.toastrService = toastrService;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.Title = 'Create';\n      this.action = 'create';\n      this.assetID = '';\n      this.currentOrgID = '';\n      this.maxLength = 500;\n      this.charactersRemainingFn = fg => {\n        let description = fg.get('description').value;\n        if (description) return this.maxLength - description.length;else return this.maxLength;\n      };\n      this.errorHandling = (control, error) => {\n        return this.assetFG.controls[control].hasError(error);\n      };\n      this.action = data['action'];\n      this.currentOrgID = data['currentOrgID'];\n      this.dialogRef.disableClose = true;\n    }\n    ngOnInit() {\n      this.assetInit();\n      if (this.action === 'update') {\n        this.Title = 'Update';\n        this.patchAsset(this.data['asset']);\n        this.assetID = this.data['asset'].assetID;\n      }\n    }\n    ngAfterViewInit() {\n      this.assetFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.assetFG.value));\n    }\n    assetInit() {\n      this.assetFG = this.assetFB.group({\n        assetName: [, Validators.required],\n        assetAssetID: [],\n        description: []\n      });\n    }\n    checkKeyAvailability() {\n      if (this.assetFG.invalid) {\n        console.log('invalid form -', this.assetFG.value);\n        this.toastrService.openToast(ToastrTitle.ERROR, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return [];\n      }\n      let keyID = this.assetFG.controls['assetAssetID'].value;\n      if (keyID !== null && keyID !== '' && keyID.trim() !== '') {\n        this.sourceController.checkKeyAvailability(this.currentOrgID, 'assets', keyID).subscribe(isAvailableRes => {\n          if (isAvailableRes['assetKeyIDExist'] === 'NO') {\n            this.createAsset();\n          } else {\n            this.assetFG.get('assetAssetID').setErrors({\n              'duplicate_key': true\n            });\n            this.toastrService.openToast(ToastrTitle.ERROR, 'Asset ID assigned already exists!', ToastrColor.ERROR);\n            return [];\n          }\n        }, error => {\n          console.log('error in checkKeyValidity -', error);\n          this.toastrService.openToast(ToastrTitle.ERROR, 'Error in validating keyID', ToastrColor.ERROR);\n        });\n      } else {\n        this.createAsset();\n      }\n    }\n    createAsset() {\n      this.assetController.createAsset(this.assetFG.value, this.currentOrgID).subscribe(createRes => {\n        this.dialogRef.close('opSuccess');\n      }, error => {\n        console.log('error in createAsset -', error);\n      });\n    }\n    patchAsset(asset) {\n      this.assetFG.patchValue({\n        assetName: asset['assetName'],\n        assetAssetID: asset['assetAssetID'],\n        description: asset['description']\n      });\n      this.initialObject = this.assetFG.value;\n      this.isEqual = true;\n    }\n    updateAsset() {\n      if (this.assetFG.invalid) {\n        console.log('invalid form -', this.assetFG.value);\n        this.toastrService.openToast(ToastrTitle.ERROR, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return [];\n      }\n      this.assetController.updateAsset(this.assetFG.value, this.assetID, this.currentOrgID).subscribe(updateRes => {\n        this.dialogRef.close('opSuccess');\n      }, error => {\n        console.log('error in updateAsset -', error);\n        if (error.error['errorCode'] == 409) {\n          this.assetFG.get('assetAssetID').setErrors({\n            'duplicate_key': true\n          });\n        }\n      });\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AssetController), i0.ɵɵdirectiveInject(i3.SourceController), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i5.ToastrService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create-update\"]],\n    decls: 32,\n    vars: 16,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogHeader\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"Combustion Equipment Name\", \"formControlName\", \"assetName\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"Combustion Equipment Code\", \"formControlName\", \"assetAssetID\", 1, \"formPlaceholder\"], [\"matInput\", \"\", \"matTextareaAutosize\", \"\", \"matAutosizeMinRows\", \"2\", \"matAutosizeMaxRows\", \"10\", \"formControlName\", \"description\", 3, \"maxlength\"], [\"align\", \"end\", 1, \"py-5\"], [\"type\", \"button\", \"mat-dialog-close\", \"\", 1, \"button\", \"btn\", \"btn-secondary\", \"me-2\"], [1, \"d-inline\", 3, \"ngSwitch\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"click\", 4, \"ngSwitchCase\"], [\"type\", \"submit\", \"class\", \"button btn btn-success\", 3, \"ngClass\", \"click\", 4, \"ngSwitchCase\"], [\"class\", \"d-none\", 4, \"ngSwitchDefault\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"click\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"ngClass\", \"click\"], [1, \"d-none\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"form\", 3);\n        i0.ɵɵelementStart(5, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(6, \"mat-label\", 5);\n        i0.ɵɵtext(7, \"Combustion Equipment Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 6);\n        i0.ɵɵtemplate(9, CreateUpdateComponent_mat_error_9_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(11, \"mat-label\", 5);\n        i0.ɵɵtext(12, \"Combustion Equipment Code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 8);\n        i0.ɵɵtemplate(14, CreateUpdateComponent_mat_error_14_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(16, \"mat-label\", 5);\n        i0.ɵɵtext(17, \" Description \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"textarea\", 9);\n        i0.ɵɵelementStart(19, \"mat-hint\");\n        i0.ɵɵtext(20, \"Total number of character remaining: \");\n        i0.ɵɵelementStart(21, \"span\");\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, CreateUpdateComponent_mat_error_24_Template, 2, 0, \"mat-error\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 10);\n        i0.ɵɵelementStart(26, \"button\", 11);\n        i0.ɵɵtext(27, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 12);\n        i0.ɵɵtemplate(29, CreateUpdateComponent_button_29_Template, 2, 0, \"button\", 13);\n        i0.ɵɵtemplate(30, CreateUpdateComponent_button_30_Template, 2, 3, \"button\", 14);\n        i0.ɵɵtemplate(31, CreateUpdateComponent_button_31_Template, 1, 0, \"button\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.Title, \" Combustion Equipment \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.assetFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"assetName\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"assetAssetID\", \"duplicate_key\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"maxlength\", ctx.maxLength);\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassMap(ctx.charactersRemainingFn(ctx.assetFG) < 20 ? \"text-danger\" : \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.charactersRemainingFn(ctx.assetFG));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" /\", ctx.maxLength, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"description\", \"required\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.action);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"create\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", \"update\");\n      }\n    },\n    directives: [i4.MatDialogTitle, i4.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i6.MatFormField, i6.MatLabel, i7.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i8.NgIf, i7.MatTextareaAutosize, i1.MaxLengthValidator, i6.MatHint, i4.MatDialogClose, i8.NgSwitch, i8.NgSwitchCase, i8.NgSwitchDefault, i6.MatError, i8.NgClass],\n    encapsulation: 2\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}