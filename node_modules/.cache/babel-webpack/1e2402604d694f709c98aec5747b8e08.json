{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport { DataCollectionMethodKeyIDEnum } from '@carbon/enum/data-collection-method.enum';\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { PROCESS_OUTPUT_ENUM, PROCESS_INPUT_ENUM } from '@netzero/enum/process.enum';\nimport { PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM } from '@netzero/enum/process.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@library/storage-service\";\nimport * as i3 from \"@library/toastr-service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@carbon/service/data-collection-method.service\";\nimport * as i6 from \"@carbon/service/process.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"./meter-reading/meter-reading.component\";\nimport * as i9 from \"./total-amount/total-amount.component\";\nconst _c0 = [\"MeterReadingComponent\"];\nconst _c1 = [\"TotalAmountComponent\"];\nfunction CreateUpdateComponent_app_meter_reading_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-meter-reading\", 1, 2);\n    i0.ɵɵlistener(\"validFields\", function CreateUpdateComponent_app_meter_reading_0_Template_app_meter_reading_validFields_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.setValidFields($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"activityDataFG\", ctx_r0.activityDataFG)(\"activityConfig\", ctx_r0.activityConfig)(\"docFileList\", ctx_r0.docFileList)(\"defaultDataCollectionMethodID\", ctx_r0.defaultDataCollectionMethodID)(\"sourceTypeID\", ctx_r0.sourceTypeID)(\"entity\", ctx_r0.entity);\n  }\n}\nfunction CreateUpdateComponent_app_total_amount_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-total-amount\", 1, 3);\n    i0.ɵɵlistener(\"validFields\", function CreateUpdateComponent_app_total_amount_1_Template_app_total_amount_validFields_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.setValidFields($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"activityDataFG\", ctx_r1.activityDataFG)(\"activityConfig\", ctx_r1.activityConfig)(\"docFileList\", ctx_r1.docFileList)(\"defaultDataCollectionMethodID\", ctx_r1.defaultDataCollectionMethodID)(\"sourceTypeID\", ctx_r1.sourceTypeID)(\"entity\", ctx_r1.entity);\n  }\n}\n// lib /\nexport let CreateUpdateComponent = /*#__PURE__*/(() => {\n  class CreateUpdateComponent {\n    constructor(activatedRoute, storageService, toastrService, formBuilder, dataCollectionMethodService, processService) {\n      this.activatedRoute = activatedRoute;\n      this.storageService = storageService;\n      this.toastrService = toastrService;\n      this.formBuilder = formBuilder;\n      this.dataCollectionMethodService = dataCollectionMethodService;\n      this.processService = processService;\n      this.DataInputMethodKeyIDEnum = DataInputMethodKeyIDEnum;\n      this.ActivityKeyIDEnum = ActivityKeyIDEnum;\n      this.excluded_controls = ['sourceID', 'sourceName', 'sourceTypeID', 'activityID', 'activityKeyID', 'dateRange', 'dataCollectionMethodID', 'meterUnitID'];\n      this.validity = new EventEmitter();\n      this.validationSubscriptionInit = true;\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.activatedRoute.queryParams.subscribe(queryParam => {\n        this.action = queryParam.action;\n        this.activityID = queryParam.activityID;\n        this.activityKeyID = this.activatedRoute.snapshot.data.activityKeyID;\n      });\n      this.activityDataFG = this.formBuilder.group({\n        activityDataDetails: this.formBuilder.array([])\n      });\n      this.getDataCollectionMethod();\n    }\n    get activityDataFA() {\n      return this.activityDataFG.get('activityDataDetails');\n    }\n    getDataCollectionMethod() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let dataCollectionMethods = yield this.dataCollectionMethodService.getDataCollectionMethod();\n        let manual_entry = dataCollectionMethods.find(dcm => dcm.keyID == DataCollectionMethodKeyIDEnum.MANUAL_ENTRY);\n        this.defaultDataCollectionMethodID = manual_entry.dataCollectionMethodID;\n      });\n    }\n    getConfiguration(configuration) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.activityConfig = configuration;\n        if (this.action == 'create') {\n          let processID = this.activityConfig.activityConfigData.process.recordID;\n          this.allProcess = yield this.getProcess(processID);\n          for (let i = 0; i < this.allProcess.output.length; i++) {\n            const res = this.allProcess.output[i];\n            if (res.sourceTypeID != null) {\n              this.sourceTypeID = res.sourceTypeID;\n              break;\n            }\n          }\n          this.createEntitySource(this.activityKeyID);\n          this.docFileList = new Array(this.entity.length).fill(null);\n        }\n        this.dataInputMethoutStdKeyID = this.activityConfig.activityConfigData.dataInputMethod.keyID;\n      });\n    }\n    createEntitySource(process) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      process = this.allProcess;\n      let inputOutput;\n      let coProduct;\n      let finishProduct;\n      switch (this.activityKeyID) {\n        case this.ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT:\n          {\n            let entityID = null;\n            entityID = [...((_c = new Set((_b = (_a = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT)) === null || _a === void 0 ? void 0 : _a.entitySource.filter(entity => entity.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_FROM_THIS_PROCESS)) === null || _b === void 0 ? void 0 : _b.map(entity => entity.entityID))) !== null && _c !== void 0 ? _c : [])];\n            if ((entityID === null || entityID === void 0 ? void 0 : entityID.length) > 0) {\n              inputOutput = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.PRECURSOR_PRODUCT).entities.filter(entity => entityID.includes(entity.id));\n            }\n            break;\n          }\n        case this.ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT:\n          {\n            let entityID = null;\n            entityID = [...((_f = new Set((_e = (_d = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT)) === null || _d === void 0 ? void 0 : _d.entitySource.filter(entity => entity.keyID == PROCESS_OUTPUT_ENTITY_SOURCE_KEYID_ENUM.EXPORTED_FROM_THIS_PROCESS)) === null || _e === void 0 ? void 0 : _e.map(entity => entity.entityID))) !== null && _f !== void 0 ? _f : [])];\n            if ((entityID === null || entityID === void 0 ? void 0 : entityID.length) > 0) {\n              inputOutput = process.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.INTERMEDIATE_PRODUCT).entities.filter(entity => entityID.includes(entity.id));\n            }\n            break;\n          }\n        case this.ActivityKeyIDEnum.PROCESS_PRODUCTION_LEVEL:\n          {\n            coProduct = (_g = this.allProcess.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.CO_PRODUCT)) === null || _g === void 0 ? void 0 : _g.entities;\n            finishProduct = (_h = this.allProcess.output.find(output => output.type.keyID == PROCESS_OUTPUT_ENUM.FINISHED_PRODUCT)) === null || _h === void 0 ? void 0 : _h.entities;\n            // coProduct = coProduct?.entities;\n            // finishProduct = finishProduct?.en\n            if (coProduct) {\n              inputOutput = coProduct;\n            } else if (finishProduct) {\n              inputOutput = finishProduct;\n            } else {\n              inputOutput = null;\n            }\n            break;\n          }\n        case this.ActivityKeyIDEnum.PROCESS_PRECURSOR_CONSUMPTION:\n          {\n            inputOutput = (_j = process.input.find(input => input.type.keyID == PROCESS_INPUT_ENUM.PRECURSOR_PRODUCT)) === null || _j === void 0 ? void 0 : _j.entities;\n          }\n      }\n      if (inputOutput) {\n        this.entity = inputOutput;\n      } else {\n        this.entity = [];\n      }\n    }\n    getProcess(processID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let process = yield this.processService.getProcessByID(this.currentOrgID, processID, true);\n        return process;\n      });\n    }\n    isValidForm() {\n      let isAnyRowFilled = this.isAnyRowFilled();\n      if (!isAnyRowFilled) {\n        this.toastrService.error('Fill atleast one data row!');\n        return false;\n      }\n      if (this.activityDataFG.invalid) {\n        this.activityDataFG.markAllAsTouched();\n        return false;\n      }\n      this.activityData = {};\n      this.activityData = JSON.parse(JSON.stringify(this.activityDataFG.value.activityDataDetails));\n      return true;\n    }\n    isAnyRowFilled() {\n      for (let i = 0; i < this.activityDataFA.controls.length; ++i) {\n        let formGroup = this.activityDataFA.get(`${i}`);\n        if (this.haveValue(formGroup)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    haveValue(formGroup) {\n      for (let control in formGroup.controls) {\n        if (!this.excluded_controls.includes(control)) {\n          let value = formGroup.get(control).value;\n          if (value !== null && value !== void 0 ? value : false) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    activityDataValidity() {\n      this.activityDataFG.valueChanges.subscribe(() => this.validity.emit(!this.activityDataFG.invalid));\n    }\n    getActivityData() {\n      return {\n        'activityData': this.activityData,\n        'activityDataFile': this.docFileList\n      };\n    }\n    updateActivityData() {\n      return this.activityData[0];\n    }\n    setValidFields(event) {\n      this.validFields = event;\n      if (this.validationSubscriptionInit) {\n        this.validationSubscriptionInit = false;\n        this.initFormValidation();\n      }\n    }\n    initFormValidation() {\n      this.activityDataFA.valueChanges.subscribe(() => {\n        this.activityDataFA.controls.forEach(formGroup => {\n          if (this.haveValue(formGroup)) this.addValidationToGroup(formGroup);else this.removeValidationFromGroup(formGroup);\n        });\n      });\n    }\n    addValidationToGroup(formGroup) {\n      for (let control of this.validFields) {\n        formGroup.get(control).addValidators([Validators.required]);\n        formGroup.get(control).updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n    }\n    removeValidationFromGroup(formGroup) {\n      for (let control in formGroup.controls) {\n        formGroup.get(control).removeValidators([Validators.required]);\n        formGroup.get(control).updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n    }\n  }\n  CreateUpdateComponent.ɵfac = function CreateUpdateComponent_Factory(t) {\n    return new (t || CreateUpdateComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.DataCollectionMethodService), i0.ɵɵdirectiveInject(i6.ProcessService));\n  };\n  CreateUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateUpdateComponent,\n    selectors: [[\"app-create\"]],\n    viewQuery: function CreateUpdateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.MeterReadingComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.TotalAmountComponent = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"activityDataFG\", \"activityConfig\", \"docFileList\", \"defaultDataCollectionMethodID\", \"sourceTypeID\", \"entity\", \"validFields\", 4, \"ngIf\"], [3, \"activityDataFG\", \"activityConfig\", \"docFileList\", \"defaultDataCollectionMethodID\", \"sourceTypeID\", \"entity\", \"validFields\"], [\"MeterReadingComponent\", \"\"], [\"TotalAmountComponent\", \"\"]],\n    template: function CreateUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CreateUpdateComponent_app_meter_reading_0_Template, 2, 6, \"app-meter-reading\", 0);\n        i0.ɵɵtemplate(1, CreateUpdateComponent_app_total_amount_1_Template, 2, 6, \"app-total-amount\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.dataInputMethoutStdKeyID == ctx.DataInputMethodKeyIDEnum.METER_READING);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dataInputMethoutStdKeyID == ctx.DataInputMethodKeyIDEnum.TOTAL_AMOUNT);\n      }\n    },\n    directives: [i7.NgIf, i8.MeterReadingComponent, i9.TotalAmountComponent],\n    encapsulation: 2\n  });\n  return CreateUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}