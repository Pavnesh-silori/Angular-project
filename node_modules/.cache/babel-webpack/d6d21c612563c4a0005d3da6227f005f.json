{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { MobileCombustionDataInputTypeEnum, DataInputMethodKeyIDEnum } from '@carbon/enum/data-input-method.enum';\nimport { CARBON_CONSTANT } from '@carbon/constant/carbon.constant';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport { CreateUpdateComponent as VechileCreate } from \"@library/netzero\";\nimport { MatSelectSearchService, MaterialFormFieldAppearance, FormAction, VIEW_TYPE_ENUM, DialogEnum, FormErrorEnum } from '@library/tsc-common';\n// /tsc-library/\nlet ConfigCreateComponent = class ConfigCreateComponent {\n  constructor(formBuilder, storageService, activatedRoute, vehicleService, unitService, dialog, dataInputMethodService, router) {\n    this.formBuilder = formBuilder;\n    this.storageService = storageService;\n    this.activatedRoute = activatedRoute;\n    this.vehicleService = vehicleService;\n    this.unitService = unitService;\n    this.dialog = dialog;\n    this.dataInputMethodService = dataInputMethodService;\n    this.router = router;\n    this.FormAction = FormAction;\n    this.FormErrorEnum = FormErrorEnum;\n    this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n    this.MobileCombustionDataInputTypeEnum = MobileCombustionDataInputTypeEnum;\n    this.DataInputMethodKeyIDEnum = DataInputMethodKeyIDEnum;\n    this.vehicles = [];\n    this.onRoad = [];\n    this.nonRoad = [];\n    this.distanceUnit = [];\n    this.dataInputMethodList = [];\n    this.fuelInputList = [];\n    this.distanceInputList = [];\n    this.vechileTypeFlag = false;\n    this.sourceSearchUtil = new MatSelectSearchService(['vehicleName']);\n    this.formDataEvent = new EventEmitter();\n    this.isEqual = new EventEmitter();\n    this.validity = new EventEmitter();\n    this.errorHandling = (control, error) => {\n      return this.activityConfigFG.get(control).hasError(error);\n    };\n    this.isValid = () => {\n      return !this.activityConfigFG.invalid;\n    };\n  }\n  ngOnInit() {\n    this.currentOrgID = this.storageService.getStorage('currentOrgID');\n    this.activatedRoute.data.subscribe(routeData => {\n      console.log(routeData);\n      this.action = routeData['action'];\n      if (routeData['activityID']) {\n        this.activityID = routeData['activityID'];\n      }\n      if (routeData['origin']) {\n        this.origin = routeData['origin'];\n      }\n    });\n    this.activityKeyID = this.activatedRoute.snapshot.data['activityKeyID'];\n    this.getVehicleType();\n    this.getAllVehicle();\n    this.getUnit();\n    this.getAllDataInputMethodList();\n    this.activityConfigInit();\n  }\n  activityConfigInit() {\n    this.activityConfigFG = this.formBuilder.group({\n      activityConfig: this.formBuilder.group({\n        activityID: [this.activityID],\n        activityKeyID: [this.activityKeyID],\n        configName: [, Validators.required]\n      }),\n      activityConfigData: this.formBuilder.group({\n        vehicleTypeID: [, Validators.required],\n        fuelDataInputMethodID: [, Validators.required],\n        distanceDataInputMethodID: [, Validators.required],\n        meterRollOver: [],\n        meterUnitID: []\n      }),\n      activityConfigSource: this.formBuilder.group({\n        sourceID: [, Validators.required],\n        sourceTypeID: []\n      })\n    });\n    if (this.origin == 'ad-hoc') {\n      this.configNameAC.disable();\n    }\n  }\n  setSourceTypeID(data) {\n    this.activityConfigFG.get('activityConfigSource').get('sourceTypeID').patchValue(data.sourceTypeID, {\n      emitEvent: false\n    });\n  }\n  readOnlyForm() {\n    this.activityConfigFG.disable();\n  }\n  patchConfiguration(configuration) {\n    this.activityConfigFG.valueChanges.subscribe(() => {\n      this.isEqual.next(isEqual(this.initialObject, this.activityConfigFG.getRawValue()));\n    });\n    let activityConfig = configuration.activityConfig != null ? configuration.activityConfig : null;\n    let activityConfigData = configuration.activityConfigData;\n    let activityConfigSource = configuration.activityConfigSource;\n    if (activityConfig != null) {\n      this.activityConfigAC.patchValue({\n        configName: activityConfig.configName\n      });\n    }\n    //  else {\n    //     this.readOnlyForm();\n    // }\n    if (activityConfigData.vehicleTypeID) {\n      let type = this.vehicleType.find(res => res.id == activityConfigData.vehicleTypeID).keyID;\n      this.chooseVehicleType(type);\n    }\n    let distanceInputMethod = this.distanceInputList.find(res => res.id == activityConfigData.distanceDataInputMethodID);\n    this.getDistance(distanceInputMethod.keyID);\n    this.activityConfigDataAC.patchValue({\n      vehicleTypeID: activityConfigData.vehicleTypeID,\n      fuelDataInputMethodID: activityConfigData.fuelDataInputMethodID,\n      distanceDataInputMethodID: activityConfigData.distanceDataInputMethodID,\n      meterRollOver: activityConfigData.meterRollOver,\n      meterUnitID: activityConfigData.meterUnitID\n    });\n    this.activityConfigSourceAC.patchValue({\n      sourceID: activityConfigSource.sourceID,\n      sourceName: activityConfigSource.sourceName,\n      sourceTypeID: activityConfigSource.sourceTypeID\n    });\n    this.isEqual.next(true);\n    this.initialObject = this.activityConfigFG.value;\n  }\n  getVehicleType() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.vehicleType = yield this.vehicleService.getVehicleType();\n      this.vehicleType.forEach(res => {\n        if (res.keyID == CARBON_CONSTANT.VEHICLE_TYPE_ON_ROAD) {\n          this.onRoadID = res.id;\n        } else if (res.keyID == CARBON_CONSTANT.VEHICLE_TYPE_NON_ROAD) {\n          this.nonRoadID = res.id;\n        }\n      });\n    });\n  }\n  getAllVehicle() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.vehicles = yield this.vehicleService.getAllVehicle(this.currentOrgID);\n      console.log(this.vehicles);\n      this.vehicles.forEach(vehicle => {\n        if (vehicle.vehicleTypeID == this.onRoadID) {\n          this.onRoad.push(vehicle);\n        } else if (vehicle.vehicleTypeID == this.nonRoadID) {\n          this.nonRoad.push(vehicle);\n        }\n      });\n    });\n  }\n  chooseVehicleType(value) {\n    const inputFieldControl = this.activityConfigFG.get('activityConfigSource.sourceID');\n    inputFieldControl.reset('');\n    this.sourceSearchUtil.entityArr = [];\n    if (value == CARBON_CONSTANT.VEHICLE_TYPE_ON_ROAD && this.onRoad.length > 0) {\n      this.sourceSearchUtil.entityArr = this.onRoad;\n      this.sourceSearchUtil.createSubscription();\n      this.vechileTypeFlag = false;\n    } else if (value == CARBON_CONSTANT.VEHICLE_TYPE_NON_ROAD && this.nonRoad.length > 0) {\n      this.sourceSearchUtil.entityArr = this.nonRoad;\n      this.sourceSearchUtil.createSubscription();\n      this.vechileTypeFlag = false;\n    } else {\n      console.log('no vehicle found');\n      this.vechileTypeFlag = true;\n    }\n  }\n  getDistance(value) {\n    this.distanceID = value;\n    const activityConfigDataGroup = this.activityConfigFG.get('activityConfigData');\n    if (value == DataInputMethodKeyIDEnum.ODOMETER_READING) {\n      activityConfigDataGroup.get('meterRollOver').setValidators([Validators.required, Validators.min(0)]);\n      activityConfigDataGroup.get('meterUnitID').setValidators(Validators.required);\n    } else {\n      activityConfigDataGroup.get('meterRollOver').clearValidators();\n      activityConfigDataGroup.get('meterUnitID').clearValidators();\n    }\n    activityConfigDataGroup.get('meterRollOver').updateValueAndValidity();\n    activityConfigDataGroup.get('meterUnitID').updateValueAndValidity();\n    return this.distanceID;\n  }\n  emitFormData() {\n    if (this.formGroup.valid) {\n      this.formDataEvent.emit(this.formGroup.value);\n    } else {\n      this.formGroup.markAllAsTouched();\n    }\n  }\n  getAllDataInputMethodList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.dataInputMethodList = yield this.dataInputMethodService.getAllDataInputMethodList();\n      this.dataInputMethodList.forEach(res => {\n        if (res.activityID == this.activityID && res.type == MobileCombustionDataInputTypeEnum.FUEL) {\n          this.fuelInputList.push(res);\n        } else if (res.activityID == this.activityID && res.type == MobileCombustionDataInputTypeEnum.DISTANCE) {\n          this.distanceInputList.push(res);\n        }\n      });\n    });\n  }\n  get getConfigJson() {\n    this.configuration = {};\n    this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.value));\n    this.configuration.activityConfigSource.sourceID = this.configuration.activityConfigSource.sourceID;\n    return this.configuration;\n  }\n  isValidForm() {\n    if (this.activityConfigFG.invalid) {\n      this.activityConfigFG.markAllAsTouched();\n      return false;\n    }\n    this.configuration = {};\n    this.configuration = JSON.parse(JSON.stringify(this.activityConfigFG.getRawValue()));\n    this.configuration.activityConfigSource.sourceID = this.configuration.activityConfigSource.sourceID;\n    return true;\n  }\n  activityConfigValidity() {\n    this.activityConfigFG.valueChanges.subscribe(() => this.validity.emit(!this.activityConfigFG.invalid));\n  }\n  getUnit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.distanceUnit = yield this.unitService.getUnitUsingPublicUrl([`type:${UnitTypeKeyID.LENGTH}`]);\n    });\n  }\n  get activityConfigAC() {\n    return this.activityConfigFG.get('activityConfig');\n  }\n  get activityConfigSourceAC() {\n    return this.activityConfigFG.get('activityConfigSource');\n  }\n  get configNameAC() {\n    return this.activityConfigAC.get('configName');\n  }\n  get activityConfigDataAC() {\n    return this.activityConfigFG.get('activityConfigData');\n  }\n  createVehicle(operation) {\n    let action = operation;\n    let dialogRef;\n    let data;\n    if (action == FormAction.CREATE) {\n      data = {\n        action: FormAction.CREATE,\n        source: VIEW_TYPE_ENUM.DIALOG\n      };\n    }\n    dialogRef = this.dialog.open(VechileCreate, {\n      data: data,\n      minWidth: '600px',\n      maxWidth: '600px',\n      height: '100%',\n      position: {\n        right: '-2px',\n        top: '0px'\n      },\n      panelClass: 'matDialogContainerOverride'\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result.status == DialogEnum.SUCCESS_DR) {\n        this.getAllVehicle();\n      }\n    });\n  }\n};\n__decorate([Output()], ConfigCreateComponent.prototype, \"formDataEvent\", void 0);\nConfigCreateComponent = __decorate([Component({\n  selector: 'app-config-create',\n  templateUrl: './config-create.component.html',\n  styleUrls: ['./config-create.component.scss']\n})], ConfigCreateComponent);\nexport { ConfigCreateComponent };","map":null,"metadata":{},"sourceType":"module"}