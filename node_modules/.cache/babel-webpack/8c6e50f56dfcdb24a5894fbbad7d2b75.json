{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivityConfigEnum } from '@carbon/enum/activity-config.enum';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { FormControl } from '@angular/forms';\nimport { faEllipsisV, faPlus } from '@fortawesome/free-solid-svg-icons';\n//tsc-library\nimport { TABLE_CONSTANT, COMMON_CONSTANT } from '@library/tsc-common';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@library/storage-service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@carbon/service/activity.service\";\nimport * as i5 from \"@carbon/controller/activity-config.controller\";\nimport * as i6 from \"@carbon/controller/activity.controller\";\nimport * as i7 from \"@library/tsc-common\";\nimport * as i8 from \"@angular/material/table\";\nimport * as i9 from \"@angular/material/sort\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/tooltip\";\nimport * as i12 from \"@angular/material/checkbox\";\nconst _c0 = [\"refreshBtn\"];\nconst _c1 = [\"formType\"];\nconst _c2 = [\"statusSelect\"];\nconst _c3 = [\"formBtn\"];\nconst _c4 = [\"activitySelect\"];\nconst _c5 = [\"activityBtn\"];\nfunction ActivityMappingComponent_th_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 33);\n    i0.ɵɵtext(1, \" Form ID \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", !(ctx_r3.origin == ctx_r3.ActivityConfigEnum.PFF));\n  }\n}\nfunction ActivityMappingComponent_td_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r15 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", !(ctx_r4.origin == ctx_r4.ActivityConfigEnum.PFF));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", row_r15.id, \" \");\n  }\n}\nfunction ActivityMappingComponent_th_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 35);\n    i0.ɵɵtext(1, \" Form Name\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ActivityMappingComponent_td_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r16 = ctx.$implicit;\n    i0.ɵɵproperty(\"matTooltip\", row_r16.name.length > 25 ? row_r16.name : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", row_r16.name.length > 18 ? row_r16.name.slice(0, 18) + \"...\" : row_r16.name, \" \");\n  }\n}\nfunction ActivityMappingComponent_th_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 37);\n    i0.ɵɵtext(1, \" Activity\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ActivityMappingComponent_td_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 38);\n    i0.ɵɵlistener(\"click\", function ActivityMappingComponent_td_28_Template_td_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const row_r17 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.navigateToViewPage(row_r17.id, row_r17.name);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"matTooltip\", row_r17.activity.name.length > 25 ? row_r17.activity.name : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", row_r17.activity.name.length > 18 ? row_r17.activity.name.slice(0, 18) + \"...\" : row_r17.activity.name, \" \");\n  }\n}\nfunction ActivityMappingComponent_th_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"th\", 39);\n  }\n}\nfunction ActivityMappingComponent_td_31_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 40);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 41);\n    i0.ɵɵlistener(\"change\", function ActivityMappingComponent_td_31_Template_mat_checkbox_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const row_r20 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.selection.toggle(row_r20.id);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r20 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", ctx_r10.origin == ctx_r10.ActivityConfigEnum.PFF);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r10.selection.isSelected(row_r20[\"id\"]));\n  }\n}\nfunction ActivityMappingComponent_tr_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 42);\n  }\n}\nfunction ActivityMappingComponent_tr_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 43);\n  }\n}\nfunction ActivityMappingComponent_tr_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 44);\n    i0.ɵɵelementStart(1, \"td\", 45);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", ctx_r13.displayedColumns.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.TABLE_CONSTANT.TABLE_NO_DATA, \" \");\n  }\n}\nconst _c6 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\n// /tsc-library/\nexport let ActivityMappingComponent = /*#__PURE__*/(() => {\n  class ActivityMappingComponent {\n    constructor(data, dialogRef, stroageService, activatedRoute, activityService, activityConfigController, activityController) {\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.stroageService = stroageService;\n      this.activatedRoute = activatedRoute;\n      this.activityService = activityService;\n      this.activityConfigController = activityConfigController;\n      this.activityController = activityController;\n      this.closeDialogEvent = new EventEmitter();\n      this.ActivityConfigEnum = ActivityConfigEnum;\n      this.COMMON_CONSTANT = COMMON_CONSTANT;\n      this.TABLE_CONSTANT = TABLE_CONSTANT;\n      this.faEllipsisV = faEllipsisV;\n      this.faPlus = faPlus;\n      this.resultLength = 0;\n      this.checkAll = new FormControl(false);\n      this.bulkActionArr = [];\n      this.selection = new SelectionModel(true, []);\n      this.displayedColumns = ['id', 'formName', 'activityType', 'useActivityConfig'];\n      this.statusFlag = false;\n      this.statusFC = new FormControl('ALL');\n      this.searchFC = new FormControl('');\n      this.searchBy = '';\n      this.searchFlag = false;\n      this.activityFlag = false;\n      this.activityFC = new FormControl(['all']);\n      this.all_activity_keyID = [];\n      this.totalActivity = 0;\n      this.activityFilterApplied = false;\n      this.selected_activity = [];\n      this.formTypeFlag = false;\n      this.formTypeFC = new FormControl(['all']);\n      this.all_form_keyID = [];\n      this.formFilteredApplied = false;\n      this.selectFormType = [];\n      this.filter = '';\n      this.categoryFlag = false;\n      this.categoryFC = new FormControl([]);\n      this.isActivitySelection = false;\n      this.emitValueOnChange = true;\n      this.disabledOK = false;\n      this.statusList = [{\n        \"id\": 1,\n        \"keyID\": 'ALL',\n        \"name\": 'Select none'\n      }, {\n        \"id\": 2,\n        \"keyID\": 'active',\n        \"name\": 'Active'\n      }, {\n        \"id\": 3,\n        \"keyID\": 'inactive',\n        \"name\": 'INActive'\n      }];\n      if (data) {\n        this.dialogRef.disableClose = true;\n        this.activityKeyID = data.activityID.keyID;\n        this.isActivitySelection = data.isActivitySelection;\n        this.selectedActivity = data.activityFormID;\n        this.currentSelected = data.activityFormID;\n        this.processID = data.processID;\n      }\n    }\n    ngOnInit() {\n      this.currentOrgID = this.stroageService.getStorage('currentOrgID');\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        if (queryParams['origin']) {\n          this.origin = queryParams['origin'];\n        }\n      });\n      this.getActivityConfig(this.activityKeyID, this.processID, this.currentOrgID);\n      this.getAllActivity();\n      this.getAllFormType();\n      if (this.isActivitySelection) {\n        this.getAllActivity();\n        if (this.selectedActivity.length > 0) {\n          this.selectedActivity.forEach(element => {\n            this.selection.toggle(element);\n          });\n        }\n      }\n    }\n    getActivityConfig(activityKeyID, processID, currentOrgID) {\n      this.activityConfigController.getActivityConfig(activityKeyID, processID, currentOrgID).subscribe(res => {\n        this.dataSource = res;\n        this.activityDataClone = res;\n        console.log('result length', res);\n        if (res.length == 0) {\n          this.disabledOK = true;\n        }\n      });\n    }\n    getAllActivity() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.allActivity = yield this.activityService.getAllActivity();\n      });\n    }\n    getAllFormType() {\n      this.activityController.getAllFormsType().subscribe(res => {\n        this.allFormType = res;\n        this.totalFormActivity = this.allFormType.length;\n        this.allFormType.map(framework => {\n          this.all_form_keyID.push(framework['keyID']);\n        });\n        this.all_form_keyID.unshift('all');\n        this.selectAllActivityFormControl();\n      }, error => {\n        console.log('error in getReportingFramework -', error);\n      });\n    }\n    searchFn(event) {\n      try {\n        const searchTerm = (event || '').trim().toLowerCase();\n        if (!searchTerm) {\n          this.dataSource = this.activityDataClone;\n        } else {\n          this.dataSource = this.activityDataClone.filter(activity => activity.name.toLowerCase().includes(searchTerm));\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    manualSelect(id, status, datasource) {\n      if (status) {\n        this.bulkActionArr.push({\n          \"id\": id\n        });\n      } else {\n        for (let i = this.bulkActionArr.length - 1; i >= 0; i--) {\n          if (this.bulkActionArr[i].id == id) {\n            this.bulkActionArr.splice(i, 1);\n          }\n        }\n      }\n      if (this.bulkActionArr.length === datasource.length) {\n        this.checkAll.setValue(true);\n      } else {\n        this.checkAll.setValue(false);\n      }\n    }\n    selectAll() {\n      this.bulkActionArr = [];\n      if (this.isAllSelected()) {\n        this.selection.clear();\n        return;\n      }\n      this.selection.select(...this.bulkActionArr);\n      this.dataSource.forEach(element => {\n        this.selection.select(element.id);\n        this.bulkActionArr.push({\n          \"id\": element.id,\n          \"status\": element.runStatus\n        });\n      });\n    }\n    isAllSelected() {\n      const selected = this.selection.selected.length;\n      const numRows = this.dataSource.length;\n      console.log(selected, numRows);\n      return selected === numRows;\n    }\n    resetOnNoChange(event) {\n      if (event) {\n        this.prev = this.activityFC.value;\n        this.activityFilterApplied = false;\n      } else {\n        if (this.prev != this.activityFC.value && !this.activityFilterApplied) {\n          this.activityFC.patchValue(this.prev, {\n            onlySelf: true\n          });\n        }\n      }\n    }\n    selectAllActivity() {\n      if (!this.activityFC.value.includes('all') && this.activityFC.value.length > 0) {\n        this.activityFC.reset([]);\n        this.selected_activity = [];\n        return;\n      }\n      this.activityFC.patchValue(this.all_activity_keyID);\n    }\n    // second filter code\n    resetOnNoChangeForFormType(event) {\n      if (event) {\n        this.prev = this.formTypeFC.value;\n        this.activityFilterApplied = false;\n      } else {\n        if (this.prev != this.formTypeFC.value && !this.activityFilterApplied) {\n          this.formTypeFC.patchValue(this.prev, {\n            onlySelf: true\n          });\n        }\n      }\n    }\n    selectAllActivityFormControl() {\n      if (!this.formTypeFC.value.includes('all') && this.formTypeFC.value.length > 0) {\n        this.formTypeFC.reset([]);\n        this.selectFormType = [];\n        return;\n      }\n      this.formTypeFC.patchValue(this.all_form_keyID);\n    }\n    selectForm(activity) {\n      const index = this.selectFormType.indexOf(activity);\n      if (index >= 0) {\n        this.selectFormType.splice(index, 1);\n      } else {\n        this.selectFormType.push(activity);\n      }\n      const k = this.formTypeFC.value.indexOf('all');\n      if (k > -1) {\n        if (this.formTypeFC.value.length > this.totalFormActivity) {\n          this.formTypeFC.patchValue([]);\n        } else if (this.formTypeFC.value.length == this.totalFormActivity) {\n          this.formTypeFC.value.splice(k, 1);\n          this.formTypeFC.patchValue(this.formTypeFC.value);\n        } else {\n          this.formTypeFC.patchValue(this.all_form_keyID);\n        }\n      } else {\n        if (this.formTypeFC.value.length == this.totalFormActivity) {\n          this.formTypeFC.patchValue(this.all_form_keyID);\n        }\n      }\n    }\n    applyFormTypeFilter() {\n      if (this.formTypeFC.value.length == 0) {\n        return;\n      }\n      this.formFilteredApplied = true;\n      if (this.formTypeFC.value.includes('all')) {\n        this.formTypeFlag = false;\n        return;\n      }\n    }\n    closedDialog() {\n      if (this.dataSource.length) {\n        this.dialogRef.close(this.selection.selected);\n      }\n    }\n    checkFalseCase() {\n      this.dialogRef.close(this.currentSelected);\n    }\n  }\n  ActivityMappingComponent.ɵfac = function ActivityMappingComponent_Factory(t) {\n    return new (t || ActivityMappingComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.ActivityService), i0.ɵɵdirectiveInject(i5.ActivityConfigController), i0.ɵɵdirectiveInject(i6.ActivityController));\n  };\n  ActivityMappingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActivityMappingComponent,\n    selectors: [[\"app-activity-mapping\"]],\n    viewQuery: function ActivityMappingComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(MatPaginator, 7);\n        i0.ɵɵviewQuery(MatSort, 7);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.refreshBtn = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formType = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusSelect = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formBtn = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.activitySelect = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.activityBtn = _t.first);\n      }\n    },\n    outputs: {\n      closeDialogEvent: \"closeDialogEvent\"\n    },\n    decls: 39,\n    vars: 8,\n    consts: [[\"header\", \"\"], [1, \"headerContainer\", \"p-0\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"pageSubtitle\"], [1, \"headerRightContainer\"], [1, \"headerRightContainerInner\"], [1, \"btn\", \"btn-sm\", \"centerAlign\", \"py-1\", \"iconBtn\"], [1, \"material-symbols-outlined\", 3, \"click\"], [1, \"headerRightContainer\", \"pt-3\"], [1, \"float-end\", 3, \"searchBy\", \"emitValueOnChange\", \"emitSearch\"], [\"searchBar\", \"\"], [1, \"mat-typography\", \"customScrollBar\", \"pt-2\"], [\"body\", \"\"], [\"mat-table\", \"\", \"matSort\", \"\", \"matSortActive\", \"id\", \"matSortDisableClear\", \"\", \"matSortDirection\", \"desc\", 1, \"sticky-header\", 3, \"dataSource\"], [\"matColumnDef\", \"id\"], [\"class\", \"columnWidth\", \"mat-header-cell\", \"\", \"mat-sort-header\", \"\", \"disableClear\", \"\", 3, \"hidden\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"hidden\", 4, \"matCellDef\"], [\"matColumnDef\", \"formName\"], [\"class\", \"columnWidth\", \"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"matTooltip\", 4, \"matCellDef\"], [\"matColumnDef\", \"activityType\"], [\"class\", \"col-sm-1 reportingFrameWork\", \"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"class\", \"cursorPointer\", \"mat-cell\", \"\", 3, \"matTooltip\", \"click\", 4, \"matCellDef\"], [\"matColumnDef\", \"useActivityConfig\"], [\"class\", \"ps-5\", \"mat-header-cell\", \"\", \"class\", \"isChecked\", 4, \"matHeaderCellDef\"], [\"class\", \"ps-5\", \"mat-cell\", \"\", \"class\", \"text-start\", 3, \"hidden\", 4, \"matCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"class\", \"mat-row\", 4, \"matNoDataRow\"], [1, \"tscDialogFooter\", 3, \"ngClass\"], [\"footer\", \"\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", \"disableClear\", \"\", 1, \"columnWidth\", 3, \"hidden\"], [\"mat-cell\", \"\", 3, \"hidden\"], [\"mat-header-cell\", \"\", 1, \"columnWidth\"], [\"mat-cell\", \"\", 3, \"matTooltip\"], [\"mat-header-cell\", \"\", 1, \"col-sm-1\", \"reportingFrameWork\"], [\"mat-cell\", \"\", 1, \"cursorPointer\", 3, \"matTooltip\", \"click\"], [\"mat-header-cell\", \"\", 1, \"isChecked\"], [\"mat-cell\", \"\", 1, \"text-start\", 3, \"hidden\"], [3, \"checked\", \"change\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"], [1, \"mat-row\"], [1, \"mat-cell\", \"text-center\"]],\n    template: function ActivityMappingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", null, 0);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵtext(5, \"Select an activity form\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"button\", 7);\n        i0.ɵɵelementStart(10, \"span\", 8);\n        i0.ɵɵlistener(\"click\", function ActivityMappingComponent_Template_span_click_10_listener() {\n          return ctx.checkFalseCase();\n        });\n        i0.ɵɵtext(11, \" close \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 9);\n        i0.ɵɵelementStart(13, \"div\", 6);\n        i0.ɵɵelementStart(14, \"lib-search-bar-one\", 10, 11);\n        i0.ɵɵlistener(\"emitSearch\", function ActivityMappingComponent_Template_lib_search_bar_one_emitSearch_14_listener($event) {\n          return ctx.searchFn($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-dialog-content\", 12, 13);\n        i0.ɵɵelementStart(18, \"table\", 14);\n        i0.ɵɵelementContainerStart(19, 15);\n        i0.ɵɵtemplate(20, ActivityMappingComponent_th_20_Template, 2, 1, \"th\", 16);\n        i0.ɵɵtemplate(21, ActivityMappingComponent_td_21_Template, 2, 2, \"td\", 17);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(22, 18);\n        i0.ɵɵtemplate(23, ActivityMappingComponent_th_23_Template, 2, 0, \"th\", 19);\n        i0.ɵɵtemplate(24, ActivityMappingComponent_td_24_Template, 2, 2, \"td\", 20);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(25);\n        i0.ɵɵelementContainerStart(26, 21);\n        i0.ɵɵtemplate(27, ActivityMappingComponent_th_27_Template, 2, 0, \"th\", 22);\n        i0.ɵɵtemplate(28, ActivityMappingComponent_td_28_Template, 2, 2, \"td\", 23);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(29, 24);\n        i0.ɵɵtemplate(30, ActivityMappingComponent_th_30_Template, 1, 0, \"th\", 25);\n        i0.ɵɵtemplate(31, ActivityMappingComponent_td_31_Template, 2, 2, \"td\", 26);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(32, ActivityMappingComponent_tr_32_Template, 1, 0, \"tr\", 27);\n        i0.ɵɵtemplate(33, ActivityMappingComponent_tr_33_Template, 1, 0, \"tr\", 28);\n        i0.ɵɵtemplate(34, ActivityMappingComponent_tr_34_Template, 3, 2, \"tr\", 29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 30, 31);\n        i0.ɵɵelementStart(37, \"button\", 32);\n        i0.ɵɵlistener(\"click\", function ActivityMappingComponent_Template_button_click_37_listener() {\n          return ctx.closedDialog();\n        });\n        i0.ɵɵtext(38, \" OK \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"searchBy\", \"name\")(\"emitValueOnChange\", ctx.emitValueOnChange);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c6, ctx.disabledOK));\n      }\n    },\n    directives: [i7.SearchBarOneComponent, i1.MatDialogContent, i8.MatTable, i9.MatSort, i8.MatColumnDef, i8.MatHeaderCellDef, i8.MatCellDef, i8.MatHeaderRowDef, i8.MatRowDef, i8.MatNoDataRow, i10.NgClass, i8.MatHeaderCell, i9.MatSortHeader, i8.MatCell, i11.MatTooltip, i12.MatCheckbox, i8.MatHeaderRow, i8.MatRow],\n    styles: [\".isChecked[_ngcontent-%COMP%]{width:5%;align-items:center}.columnWidth[_ngcontent-%COMP%]{width:7%}.reportingPeriod[_ngcontent-%COMP%]{width:15%}.filter2[_ngcontent-%COMP%]{padding-left:20px;width:100px}.linkedRecords[_ngcontent-%COMP%]{width:10%}.options[_ngcontent-%COMP%]{width:5%}.btn-secondary-overwrite[_ngcontent-%COMP%]{color:#f2f5f7;background-color:#777;border-color:#6c757d;cursor:not-allowed}.cursor-not-allowed[_ngcontent-%COMP%]{cursor:not-allowed}.activityType[_ngcontent-%COMP%]{max-width:140px}.categoryStyle[_ngcontent-%COMP%]{width:0;height:0;overflow:hidden}.funnelStyle[_ngcontent-%COMP%]{width:0;height:0;overflow:hidden}.headerWidth[_ngcontent-%COMP%]{width:100px}.useActivityConfig[_ngcontent-%COMP%]{width:50px}.sticky-header[_ngcontent-%COMP%]{overflow:hidden}.float-button[_ngcontent-%COMP%]{position:fixed;bottom:20px;right:20px;z-index:1000}.reportingFrameWork[_ngcontent-%COMP%]{max-width:215vw}\"]\n  });\n  return ActivityMappingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}