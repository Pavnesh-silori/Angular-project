{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Inject } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nlet LayoutServiceService = /*#__PURE__*/(() => {\n  class LayoutServiceService {\n    constructor() {}\n  }\n  LayoutServiceService.ɵfac = function LayoutServiceService_Factory(t) {\n    return new (t || LayoutServiceService)();\n  };\n  LayoutServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LayoutServiceService,\n    factory: LayoutServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return LayoutServiceService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LayoutServiceComponent = /*#__PURE__*/(() => {\n  class LayoutServiceComponent {\n    constructor() {}\n    ngOnInit() {}\n  }\n  LayoutServiceComponent.ɵfac = function LayoutServiceComponent_Factory(t) {\n    return new (t || LayoutServiceComponent)();\n  };\n  LayoutServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LayoutServiceComponent,\n    selectors: [[\"lib-layout-service\"]],\n    decls: 2,\n    vars: 0,\n    template: function LayoutServiceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" layout-service works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return LayoutServiceComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LayoutServiceModule = /*#__PURE__*/(() => {\n  class LayoutServiceModule {\n    static forRoot(environment) {\n      return {\n        ngModule: LayoutServiceModule,\n        providers: [{\n          provide: 'environment',\n          useValue: environment\n        }]\n      };\n    }\n  }\n  LayoutServiceModule.ɵfac = function LayoutServiceModule_Factory(t) {\n    return new (t || LayoutServiceModule)();\n  };\n  LayoutServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LayoutServiceModule\n  });\n  LayoutServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return LayoutServiceModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass Layout {}\nlet LayoutController = /*#__PURE__*/(() => {\n  class LayoutController {\n    constructor(http, environment) {\n      this.http = http;\n      this.environment = environment;\n    }\n    getLayoutByPage(pageNo, pageSize, sortBy, orderBy, search, orgID) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      search.forEach(search => params = params.append('search', search));\n      return this.http.get(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/page`, {\n        params: params\n      });\n    }\n    getLayoutByOrgID(orgID) {\n      return this.http.get(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts`);\n    }\n    getLayoutByID(orgID, layoutID) {\n      return this.http.get(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}`);\n    }\n    createLayout(orgID, layout) {\n      return this.http.post(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts`, layout);\n    }\n    updateLayout(orgID, layoutID, layout) {\n      return this.http.patch(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}`, layout);\n    }\n    deleteLayout(orgID, layoutID) {\n      return this.http.delete(`${this.environment.TSC_COMMON_API_URL}organizations/${orgID}/layouts/${layoutID}`);\n    }\n  }\n  LayoutController.ɵfac = function LayoutController_Factory(t) {\n    return new (t || LayoutController)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('environment'));\n  };\n  LayoutController.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LayoutController,\n    factory: LayoutController.ɵfac,\n    providedIn: 'root'\n  });\n  return LayoutController;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LayoutService = /*#__PURE__*/(() => {\n  class LayoutService {\n    constructor(layoutController) {\n      this.layoutController = layoutController;\n    }\n    getLayoutByOrgID(orgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let layoutM;\n        try {\n          layoutM = yield this.layoutController.getLayoutByOrgID(orgID).toPromise();\n          if (layoutM) {\n            return layoutM;\n          } else {\n            return [new Layout()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new Layout()];\n        }\n      });\n    }\n    getLayoutByID(orgID, layoutID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let layoutM;\n        try {\n          layoutM = yield this.layoutController.getLayoutByID(orgID, layoutID).toPromise();\n          if (layoutM) {\n            return layoutM;\n          } else {\n            return new Layout();\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return new Layout();\n        }\n      });\n    }\n  }\n  LayoutService.ɵfac = function LayoutService_Factory(t) {\n    return new (t || LayoutService)(i0.ɵɵinject(LayoutController));\n  };\n  LayoutService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LayoutService,\n    factory: LayoutService.ɵfac,\n    providedIn: 'root'\n  });\n  return LayoutService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of layout-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Layout, LayoutController, LayoutService, LayoutServiceComponent, LayoutServiceModule, LayoutServiceService };\n//# sourceMappingURL=library-layout-service.js.map","map":null,"metadata":{},"sourceType":"module"}