{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { cloneDeep } from 'lodash-es';\nimport * as i1 from 'ngx-toastr';\nlet ToastrServiceService = /*#__PURE__*/(() => {\n  class ToastrServiceService {\n    constructor() {}\n  }\n  ToastrServiceService.ɵfac = function ToastrServiceService_Factory(t) {\n    return new (t || ToastrServiceService)();\n  };\n  ToastrServiceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastrServiceService,\n    factory: ToastrServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ToastrServiceService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastrServiceComponent = /*#__PURE__*/(() => {\n  class ToastrServiceComponent {\n    constructor() {}\n    ngOnInit() {}\n  }\n  ToastrServiceComponent.ɵfac = function ToastrServiceComponent_Factory(t) {\n    return new (t || ToastrServiceComponent)();\n  };\n  ToastrServiceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastrServiceComponent,\n    selectors: [[\"lib-toastr-service\"]],\n    decls: 2,\n    vars: 0,\n    template: function ToastrServiceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" toastr-service works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return ToastrServiceComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastrServiceModule = /*#__PURE__*/(() => {\n  class ToastrServiceModule {}\n  ToastrServiceModule.ɵfac = function ToastrServiceModule_Factory(t) {\n    return new (t || ToastrServiceModule)();\n  };\n  ToastrServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrServiceModule\n  });\n  ToastrServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return ToastrServiceModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar ToastrTitle = /*#__PURE__*/(() => {\n  (function (ToastrTitle) {\n    ToastrTitle[\"SUCCESS\"] = \"Success\";\n    ToastrTitle[\"WARNING\"] = \"Warning\";\n    ToastrTitle[\"ERROR\"] = \"Error\";\n    ToastrTitle[\"INFO\"] = \"Info\";\n  })(ToastrTitle || (ToastrTitle = {}));\n  return ToastrTitle;\n})();\nvar ToastrColor = /*#__PURE__*/(() => {\n  (function (ToastrColor) {\n    ToastrColor[\"SUCCESS\"] = \"success\";\n    ToastrColor[\"WARNING\"] = \"warning\";\n    ToastrColor[\"ERROR\"] = \"error\";\n    ToastrColor[\"INFO\"] = \"info\";\n  })(ToastrColor || (ToastrColor = {}));\n  return ToastrColor;\n})();\nlet ToastrService = /*#__PURE__*/(() => {\n  class ToastrService {\n    constructor(ngxToastrService) {\n      this.ngxToastrService = ngxToastrService;\n      this.success = message => {\n        this.openToast(ToastrTitle.SUCCESS, message, ToastrColor.SUCCESS);\n      };\n      this.error = message => {\n        this.openToast(ToastrTitle.ERROR, message, ToastrColor.ERROR);\n      };\n      this.warn = message => {\n        this.openToast(ToastrTitle.WARNING, message, ToastrColor.WARNING);\n      };\n      this.info = message => {\n        this.openToast(ToastrTitle.INFO, message, ToastrColor.INFO);\n      };\n    }\n    openToast(title, message, notiType) {\n      // Clone current config so it doesn't change when ngModel updates\n      const opt = cloneDeep(this.ngxToastrService.toastrConfig);\n      const inserted = this.ngxToastrService.show(message, title, opt, this.ngxToastrService.toastrConfig.iconClasses[notiType]);\n      return inserted;\n    }\n    getToastStatus(status) {\n      let toast = {\n        title: '',\n        color: ''\n      };\n      switch (status) {\n        case \"error\":\n          toast.title = ToastrTitle.ERROR;\n          toast.color = ToastrColor.ERROR;\n          break;\n        case 'warning':\n          toast.title = ToastrTitle.WARNING;\n          toast.color = ToastrColor.WARNING;\n          break;\n        case 'info':\n          toast.title = ToastrTitle.INFO;\n          toast.color = ToastrColor.INFO;\n          break;\n        case 'success':\n          toast.title = ToastrTitle.SUCCESS;\n          toast.color = ToastrColor.SUCCESS;\n          break;\n        default:\n          toast.title = ToastrTitle.ERROR;\n          toast.color = ToastrColor.ERROR;\n      }\n      return toast;\n    }\n  }\n  ToastrService.ɵfac = function ToastrService_Factory(t) {\n    return new (t || ToastrService)(i0.ɵɵinject(i1.ToastrService));\n  };\n  ToastrService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastrService,\n    factory: ToastrService.ɵfac,\n    providedIn: 'root'\n  });\n  return ToastrService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of toastr-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ToastrColor, ToastrService, ToastrServiceComponent, ToastrServiceModule, ToastrServiceService, ToastrTitle };\n//# sourceMappingURL=library-toastr-service.js.map","map":null,"metadata":{},"sourceType":"module"}