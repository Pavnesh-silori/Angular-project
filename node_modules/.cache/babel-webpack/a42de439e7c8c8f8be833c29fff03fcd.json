{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ConsolidationApproach } from \"@carbon/model/consolidation-approach.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@carbon/controller/consolidation-approach.controller\";\nexport let ConsolidationApproachService = /*#__PURE__*/(() => {\n  class ConsolidationApproachService {\n    constructor(consolidationApproachController) {\n      this.consolidationApproachController = consolidationApproachController;\n    }\n    getAllConsolidationApproach() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let sbtiSectorM;\n        try {\n          sbtiSectorM = yield this.consolidationApproachController.getAllConsolidationApproach().toPromise();\n          if (sbtiSectorM) {\n            return sbtiSectorM;\n          } else {\n            return [new ConsolidationApproach()];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [new ConsolidationApproach()];\n        }\n      });\n    }\n    getAllConsolidationApproachByOrgID(rootOrgID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let consolidationApproachM;\n        try {\n          consolidationApproachM = yield this.consolidationApproachController.getAllConsolidationApproachByOrgID(rootOrgID).toPromise();\n          if (consolidationApproachM) {\n            return consolidationApproachM;\n          } else {\n            return [];\n          }\n        } catch (error) {\n          console.error('Error -', error);\n          return [];\n        }\n      });\n    }\n  }\n  ConsolidationApproachService.ɵfac = function ConsolidationApproachService_Factory(t) {\n    return new (t || ConsolidationApproachService)(i0.ɵɵinject(i1.ConsolidationApproachController));\n  };\n  ConsolidationApproachService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConsolidationApproachService,\n    factory: ConsolidationApproachService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConsolidationApproachService;\n})();","map":null,"metadata":{},"sourceType":"module"}