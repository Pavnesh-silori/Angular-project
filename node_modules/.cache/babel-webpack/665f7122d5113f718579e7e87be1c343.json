{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { isEqual } from 'lodash';\nimport { AccountingPreference } from '@carbon/model/accounting-preference.model';\nimport { ToastrColor } from '@library/toastr-service';\nimport { ButtonLabelEnum, InvalidForm } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@carbon/controller/accounting-preference.controller\";\nimport * as i3 from \"@carbon/service/accounting-preference.service\";\nimport * as i4 from \"@library/storage-service\";\nimport * as i5 from \"@library/toastr-service\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/checkbox\";\nimport * as i8 from \"@angular/material/tooltip\";\nimport * as i9 from \"@angular/common\";\nconst _c0 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\nexport let AccountingPreferenceComponent = /*#__PURE__*/(() => {\n  class AccountingPreferenceComponent {\n    constructor(formBuilder, accountingPreferenceController, accountingPreferenceService, stroageService, toastrService) {\n      this.formBuilder = formBuilder;\n      this.accountingPreferenceController = accountingPreferenceController;\n      this.accountingPreferenceService = accountingPreferenceService;\n      this.stroageService = stroageService;\n      this.toastrService = toastrService;\n      this.ButtonLabelEnum = ButtonLabelEnum;\n      this.isProductEmbeddedEmissionValid = true;\n      this.accountingPreferenceM = new AccountingPreference();\n      this.isUpdate = false;\n    }\n    ngOnInit() {\n      this.rootOrgID = this.stroageService.getStorage('rootOrgID');\n      this.accountingPrefFGInit();\n      this.getAccountingPreferenceByID();\n    }\n    accountingPrefFGInit() {\n      this.accountingPrefFG = this.formBuilder.group({\n        isProductIntensity: [false],\n        isProductEmbeddedEmission: [, Validators.required],\n        isProductCarbonFootPrint: [false]\n      });\n    }\n    getAccountingPreferenceByID() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.accountingPreferenceM = yield this.accountingPreferenceService.getAccountingPreferenceByOrgID(this.rootOrgID);\n        if (this.accountingPreferenceM.id) {\n          this.isUpdate = true;\n          this.patchFormGroup();\n        }\n      });\n    }\n    patchFormGroup() {\n      this.accountingPrefFG.patchValue({\n        isProductIntensity: this.accountingPreferenceM.isProductIntensity,\n        isProductEmbeddedEmission: this.accountingPreferenceM.isProductEmbeddedEmission,\n        isProductCarbonFootPrint: this.accountingPreferenceM.isProductCarbonFootPrint\n      });\n      this.initialObject = this.accountingPrefFG.value;\n      this.isEqual = true;\n    }\n    ngAfterViewInit() {\n      this.accountingPrefFG.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.accountingPrefFG.value));\n      // this.accountingPrefFG.get('isProductEmbeddedEmission').valueChanges.subscribe(value => {\n      //     if (!this.isUpdate) {\n      //         this.isProductEmbeddedEmissionValid = value;\n      //     }\n      // });\n    }\n\n    onSubmit() {\n      if (!this.isFormValid()) {\n        return;\n      }\n      if (!this.isUpdate) {\n        this.createAccountingPreference();\n      } else {\n        this.updateAccountingPreference();\n      }\n    }\n    createAccountingPreference() {\n      this.accountingPreferenceController.createAccountingPreference(this.rootOrgID, this.accountingPrefFG.value).subscribe(response => {\n        this.getAccountingPreferenceByID();\n      }, error => {\n        console.log('error in createAccountingPreference() -', error);\n      });\n    }\n    updateAccountingPreference() {\n      this.accountingPreferenceController.updateAccountingPreference(this.rootOrgID, this.accountingPrefFG.value).subscribe(response => {\n        this.getAccountingPreferenceByID();\n      }, error => {\n        console.log('error in updateAccountingPreference() -', error);\n      });\n    }\n    isFormValid() {\n      if (this.accountingPrefFG.invalid) {\n        console.log('invalid form -', this.accountingPrefFG.value);\n        this.isProductEmbeddedEmissionValid = false;\n        this.accountingPrefFG.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return false;\n      }\n      // if (this.isUpdate) {\n      //     return true;\n      // } else if (!this.accountingPrefFG.get('isProductEmbeddedEmission').value) {\n      //     this.isProductEmbeddedEmissionValid = false;\n      //     return false;\n      // }\n      return true;\n    }\n  }\n  AccountingPreferenceComponent.ɵfac = function AccountingPreferenceComponent_Factory(t) {\n    return new (t || AccountingPreferenceComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AccountingPreferenceController), i0.ɵɵdirectiveInject(i3.AccountingPreferenceService), i0.ɵɵdirectiveInject(i4.StorageService), i0.ɵɵdirectiveInject(i5.ToastrService));\n  };\n  AccountingPreferenceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AccountingPreferenceComponent,\n    selectors: [[\"app-accounting-preference\"]],\n    decls: 35,\n    vars: 5,\n    consts: [[1, \"card\", \"main-card\", \"cardOverwrite\"], [1, \"headerContainer\"], [1, \"headerLeftContainer\"], [1, \"pageTitle\"], [1, \"pageSubtitle\"], [1, \"card-body\"], [1, \"col-sm-7\"], [1, \"border\", \"cardOverwrite\"], [1, \"cardTitle\"], [3, \"formGroup\"], [1, \"d-flex\", \"mt-2\"], [\"formControlName\", \"isProductIntensity\", \"disabled\", \"\", 1, \"me-2\"], [1, \"me-2\"], [\"matTooltip\", \"Product intensity\", \"matTooltipPosition\", \"above\", 1, \"material-symbols-outlined\", \"cursorPointer\"], [\"formControlName\", \"isProductEmbeddedEmission\", 1, \"me-2\"], [\"matTooltip\", \"Product embedded emissions-CBAM\", \"matTooltipPosition\", \"above\", 1, \"material-symbols-outlined\", \"cursorPointer\"], [\"formControlName\", \"isProductCarbonFootPrint\", \"disabled\", \"\", 1, \"me-2\"], [\"matTooltip\", \"Product carbon footprint\", \"matTooltipPosition\", \"above\", 1, \"material-symbols-outlined\", \"cursorPointer\"], [1, \"float-end\", \"mt-4\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"ngClass\", \"click\"]],\n    template: function AccountingPreferenceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4, \" Accounting Preference \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtext(6, \" Select the standard emission factors and GWP dataset you want to use for emission calculations. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"mat-card\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵtext(11, \" Select carbon preference \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"form\", 9);\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵelementStart(14, \"mat-checkbox\", 11);\n        i0.ɵɵelementStart(15, \"span\", 12);\n        i0.ɵɵtext(16, \" Product intensity \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"span\", 13);\n        i0.ɵɵtext(18, \" info \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 10);\n        i0.ɵɵelementStart(20, \"mat-checkbox\", 14);\n        i0.ɵɵelementStart(21, \"span\", 12);\n        i0.ɵɵtext(22, \" Product embedded emissions-CBAM \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"span\", 15);\n        i0.ɵɵtext(24, \" info \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 10);\n        i0.ɵɵelementStart(26, \"mat-checkbox\", 16);\n        i0.ɵɵelementStart(27, \"span\", 12);\n        i0.ɵɵtext(28, \" Product carbon footprint \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"span\", 17);\n        i0.ɵɵtext(30, \" info \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 6);\n        i0.ɵɵelementStart(32, \"div\", 18);\n        i0.ɵɵelementStart(33, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function AccountingPreferenceComponent_Template_button_click_33_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(34);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"formGroup\", ctx.accountingPrefFG);\n        i0.ɵɵadvance(21);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, ctx.isEqual));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.ButtonLabelEnum.SAVE_BTN_LABEL, \" \");\n      }\n    },\n    directives: [i6.MatCard, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i7.MatCheckbox, i1.NgControlStatus, i1.FormControlName, i8.MatTooltip, i9.NgClass],\n    encapsulation: 2\n  });\n  return AccountingPreferenceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}