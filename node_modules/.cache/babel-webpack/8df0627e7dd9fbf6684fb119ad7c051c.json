{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, Output, Input, ViewChild, NgModule } from '@angular/core';\nimport * as i2 from 'ng-otp-input';\nimport { NgOtpInputComponent, NgOtpInputModule } from 'ng-otp-input';\nimport { MATERIAL_CONSTANT } from '@library/tsc-common';\nimport * as i1 from '@library/toastr-service';\nimport { ToastrTitle, ToastrColor } from '@library/toastr-service';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/core';\nimport { MatRippleModule } from '@angular/material/core';\nfunction GenerateOtpComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function GenerateOtpComponent_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.generateOtp();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRippleCentered\", ctx_r0.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.generateOtpBtnLbl, \" \");\n  }\n}\nfunction GenerateOtpComponent_div_2_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"in \", ctx_r4.formatTime(), \"\");\n  }\n}\nconst _c0 = function () {\n  return {\n    length: 6,\n    inputClass: \"dot\",\n    allowNumbersOnly: true\n  };\n};\nfunction GenerateOtpComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 4);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"Enter a OTP\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ng-otp-input\", 5);\n    i0.ɵɵlistener(\"onInputChange\", function GenerateOtpComponent_div_2_Template_ng_otp_input_onInputChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onOtpChange($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 4);\n    i0.ɵɵelementStart(6, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function GenerateOtpComponent_div_2_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.resendOtp();\n    });\n    i0.ɵɵelementStart(7, \"span\", 7);\n    i0.ɵɵtext(8, \"Resend OTP \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, GenerateOtpComponent_div_2_span_9_Template, 2, 1, \"span\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 9);\n    i0.ɵɵelementStart(11, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GenerateOtpComponent_div_2_Template_button_click_11_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.submitOtp();\n    });\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"config\", i0.ɵɵpureFunction0(5, _c0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.remainingTime > 0);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.remainingTime > 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matRippleCentered\", ctx_r1.MATERIAL_CONSTANT.MAT_RIPPLE_CENTER);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.submitBtnLbl, \" \");\n  }\n}\nlet GenerateOtpService = /*#__PURE__*/(() => {\n  class GenerateOtpService {\n    constructor() {}\n  }\n  GenerateOtpService.ɵfac = function GenerateOtpService_Factory(t) {\n    return new (t || GenerateOtpService)();\n  };\n  GenerateOtpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: GenerateOtpService,\n    factory: GenerateOtpService.ɵfac,\n    providedIn: 'root'\n  });\n  return GenerateOtpService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet GenerateOtpComponent = /*#__PURE__*/(() => {\n  class GenerateOtpComponent {\n    constructor(toastrService) {\n      this.toastrService = toastrService;\n      // library\n      this.MATERIAL_CONSTANT = MATERIAL_CONSTANT;\n      // /library/\n      this.otpEmitter = new EventEmitter();\n      this.generateOtpBtnLbl = 'Generate OTP';\n      this.submitBtnLbl = 'Submit';\n      this.resendOtpBoolean = false;\n      this.showGenreateOtpBtn = true;\n      this.showEnterOtp = false;\n      this.defaultRemainingTime = 100;\n      this.remainingTime = this.defaultRemainingTime;\n    }\n    ngOnInit() {}\n    ngOnChanges(changes) {\n      if (changes.submitBtnLblInput && this.submitBtnLblInput) {\n        this.submitBtnLbl = this.submitBtnLblInput;\n      }\n      if (changes.generateOtpBtnLblInput && this.generateOtpBtnLblInput) {\n        this.generateOtpBtnLbl = this.generateOtpBtnLblInput;\n      }\n      if (changes.remainingTimeInput && this.remainingTimeInput) {\n        this.defaultRemainingTime = this.remainingTimeInput;\n        this.remainingTime = this.remainingTimeInput;\n      }\n      if (this.showEnterOtpInput) {\n        this.showEnterOtpFnc();\n      }\n    }\n    generateOtp() {\n      this.otpEmitter.emit({\n        otp: this.otpValue,\n        resendOtp: this.resendOtpBoolean\n      });\n    }\n    showEnterOtpFnc() {\n      this.showGenreateOtpBtn = false;\n      this.showEnterOtp = true;\n      this.remainingTime = this.defaultRemainingTime;\n      // Start the countdown timer\n      this.startCountdown();\n    }\n    onOtpChange(value) {\n      // Handle OTP change if needed\n      this.otpValue = value;\n      this.checkOtp = true;\n    }\n    resendOtp() {\n      this.showEnterOtpInput = false;\n      this.ngOtpInput.setValue(null);\n      this.otpValue = null;\n      this.checkOtp = false;\n      this.resendOtpBoolean = true;\n      this.otpEmitter.emit({\n        otp: this.otpValue,\n        resendOtp: this.resendOtpBoolean\n      });\n      this.startCountdown();\n    }\n    submitOtp() {\n      this.resendOtpBoolean = false;\n      if (this.checkOtp && this.otpValue.length == 6) {\n        this.otpEmitter.emit({\n          otp: this.otpValue,\n          resendOtp: this.resendOtpBoolean\n        });\n      } else {\n        this.toastrService.openToast(ToastrTitle.ERROR, 'Plese enter 6 digit OTP.', ToastrColor.ERROR);\n        return;\n      }\n    }\n    startCountdown() {\n      const interval = 1000; // Update every second\n      this.remainingTime = this.defaultRemainingTime;\n      const countdown = setInterval(() => {\n        this.remainingTime--;\n        if (this.remainingTime <= 0) {\n          clearInterval(countdown); // Stop the countdown when time reaches 0\n        }\n      }, interval);\n    }\n    formatTime() {\n      clearInterval(this.countdownInterval);\n      const seconds = this.remainingTime;\n      const minutes = Math.floor(seconds % 3600 / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes}:${remainingSeconds}`;\n    }\n  }\n  GenerateOtpComponent.ɵfac = function GenerateOtpComponent_Factory(t) {\n    return new (t || GenerateOtpComponent)(i0.ɵɵdirectiveInject(i1.ToastrService));\n  };\n  GenerateOtpComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GenerateOtpComponent,\n    selectors: [[\"lib-generate-otp\"]],\n    viewQuery: function GenerateOtpComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(NgOtpInputComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ngOtpInput = _t.first);\n      }\n    },\n    inputs: {\n      showEnterOtpInput: \"showEnterOtpInput\",\n      generateOtpBtnLblInput: \"generateOtpBtnLblInput\",\n      submitBtnLblInput: \"submitBtnLblInput\",\n      remainingTimeInput: \"remainingTimeInput\"\n    },\n    outputs: {\n      otpEmitter: \"otpEmitter\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"text-end\"], [\"class\", \"btn btn-success\", \"type\", \"button\", \"matRipple\", \"\", 3, \"matRippleCentered\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"matRipple\", \"\", 1, \"btn\", \"btn-success\", 3, \"matRippleCentered\", \"click\"], [1, \"pt-2\"], [3, \"config\", \"onInputChange\"], [1, \"btn\", \"ps-1\", \"fw-normal\", 3, \"disabled\", \"click\"], [1, \"cursorPointer\", \"btn-link\"], [\"class\", \"ml-2\", 4, \"ngIf\"], [1, \"pt-1\", \"sm-3\"], [\"matRipple\", \"\", 1, \"btn\", \"btn-success\", 3, \"matRippleCentered\", \"click\"], [1, \"ml-2\"]],\n    template: function GenerateOtpComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, GenerateOtpComponent_button_1_Template, 2, 2, \"button\", 1);\n        i0.ɵɵtemplate(2, GenerateOtpComponent_div_2_Template, 13, 6, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showGenreateOtpBtn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showEnterOtp);\n      }\n    },\n    directives: [i3.NgIf, i4.MatRipple, i2.NgOtpInputComponent],\n    styles: [\".otp-input{width:25px!important;height:25px!important;border-radius:5px!important;text-align:center!important;font-size:12px!important}\"]\n  });\n  return GenerateOtpComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet GenerateOtpModule = /*#__PURE__*/(() => {\n  class GenerateOtpModule {}\n  GenerateOtpModule.ɵfac = function GenerateOtpModule_Factory(t) {\n    return new (t || GenerateOtpModule)();\n  };\n  GenerateOtpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GenerateOtpModule\n  });\n  GenerateOtpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatRippleModule, NgOtpInputModule]]\n  });\n  return GenerateOtpModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of generate-otp\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GenerateOtpComponent, GenerateOtpModule, GenerateOtpService };\n//# sourceMappingURL=library-generate-otp.js.map","map":null,"metadata":{},"sourceType":"module"}