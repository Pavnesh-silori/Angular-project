{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport * as moment from 'moment';\nimport { isEqual } from \"lodash\";\nimport { ActivityKeyIDEnum } from '@carbon/enum/activity.enum';\nimport { UnitTypeKeyID } from '@library/unit-service';\nimport { DateFormatEnum, DateInputTypeEnum, DateInputComponent } from '@library/date';\nimport { FormErrorEnum, MaterialFormFieldAppearance, NocFileUploadEnum, TypeConfirmationDialog } from '@library/tsc-common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@carbon/controller/document.controller\";\nimport * as i3 from \"@carbon/service/process.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@library/toastr-service\";\nimport * as i7 from \"@library/date\";\nimport * as i8 from \"@library/storage-service\";\nimport * as i9 from \"@library/unit-service\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/card\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/input\";\nimport * as i14 from \"@angular/material/select\";\nimport * as i15 from \"@angular/material/core\";\nimport * as i16 from \"@angular/material/tooltip\";\nconst _c0 = [\"fileInput\"];\nfunction TotalAmountComponent_ng_container_2_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r4 = i0.ɵɵnextContext().index;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.errorHandlingForFormArrayData(\"productProduced\", \"min\", i_r4) ? \"Quantity cannot be negative\" : ctx_r6.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_2_mat_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r13.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r13.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r13.uomCode);\n  }\n}\nfunction TotalAmountComponent_ng_container_2_mat_error_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_2_div_26_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r4 = i0.ɵɵnextContext(2).index;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.errorHandlingForFormArrayData(\"productExported\", \"min\", i_r4) ? \"Quantity cannot be negative\" : ctx_r14.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_2_div_26_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const unit_r18 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", unit_r18.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", unit_r18.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(unit_r18.uomCode);\n  }\n}\nfunction TotalAmountComponent_ng_container_2_div_26_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.formErrorEnum.REQUIRED, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_2_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"div\", 12);\n    i0.ɵɵelementStart(2, \"mat-form-field\", 13);\n    i0.ɵɵelementStart(3, \"mat-label\", 14);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 22);\n    i0.ɵɵtemplate(6, TotalAmountComponent_ng_container_2_div_26_mat_error_6_Template, 2, 1, \"mat-error\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 12);\n    i0.ɵɵelementStart(8, \"mat-form-field\", 13);\n    i0.ɵɵelementStart(9, \"mat-label\", 14);\n    i0.ɵɵtext(10, \"Select unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"mat-select\", 23);\n    i0.ɵɵtemplate(12, TotalAmountComponent_ng_container_2_div_26_mat_option_12_Template, 4, 3, \"mat-option\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, TotalAmountComponent_ng_container_2_div_26_mat_error_13_Template, 2, 1, \"mat-error\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r4 = i0.ɵɵnextContext().index;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r9.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.getLabelOnExport(ctx_r9.activityKeyID), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.errorHandlingForFormArrayData(\"productExported\", \"min\", i_r4) || ctx_r9.errorHandlingForFormArrayData(\"productExported\", \"required\", i_r4));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r9.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.allUnit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.errorHandlingForFormArrayData(\"productExportedUnitID\", \"required\", i_r4));\n  }\n}\nfunction TotalAmountComponent_ng_container_2_ng_container_27_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"d-none\": a0\n  };\n};\nfunction TotalAmountComponent_ng_container_2_ng_container_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 6);\n    i0.ɵɵelementStart(2, \"div\", 24);\n    i0.ɵɵelementStart(3, \"input\", 25, 26);\n    i0.ɵɵlistener(\"change\", function TotalAmountComponent_ng_container_2_ng_container_27_Template_input_change_3_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r23.$implicit;\n      const i_r4 = ctx_r23.index;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.fileUpload($event, activityData_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 27);\n    i0.ɵɵelementStart(6, \"div\", 9);\n    i0.ɵɵelementStart(7, \"div\", 28);\n    i0.ɵɵelementStart(8, \"div\", 29);\n    i0.ɵɵtemplate(9, TotalAmountComponent_ng_container_2_ng_container_27_ng_container_9_Template, 1, 0, \"ng-container\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 29);\n    i0.ɵɵelementStart(11, \"div\", 31);\n    i0.ɵɵtext(12);\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 32);\n    i0.ɵɵelementStart(16, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function TotalAmountComponent_ng_container_2_ng_container_27_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r26 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r26.$implicit;\n      const i_r4 = ctx_r26.index;\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.removeFile(activityData_r3, i_r4);\n    });\n    i0.ɵɵelementStart(17, \"span\", 34);\n    i0.ɵɵtext(18, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext();\n    const i_r4 = ctx_r27.index;\n    const activityData_r3 = ctx_r27.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, ctx_r10.docFileList[i_r4] == null));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", activityData_r3.get(\"docName\").value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", activityData_r3.get(\"docSize\").value, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_2_ng_container_28_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TotalAmountComponent_ng_container_2_ng_container_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 27);\n    i0.ɵɵelementStart(2, \"div\", 9);\n    i0.ɵɵelementStart(3, \"div\", 35);\n    i0.ɵɵtemplate(4, TotalAmountComponent_ng_container_2_ng_container_28_ng_container_4_Template, 1, 0, \"ng-container\", 30);\n    i0.ɵɵelementStart(5, \"div\", 29);\n    i0.ɵɵelementStart(6, \"div\", 36);\n    i0.ɵɵelementStart(7, \"a\", 37);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 38);\n    i0.ɵɵelementStart(10, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function TotalAmountComponent_ng_container_2_ng_container_28_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const _r29 = i0.ɵɵreference(14);\n      return _r29.click();\n    });\n    i0.ɵɵelementStart(11, \"span\", 40);\n    i0.ɵɵtext(12, \" edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"input\", 41, 26);\n    i0.ɵɵlistener(\"change\", function TotalAmountComponent_ng_container_2_ng_container_28_Template_input_change_13_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r33 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r33.$implicit;\n      const i_r4 = ctx_r33.index;\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.fileUpload($event, activityData_r3, i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function TotalAmountComponent_ng_container_2_ng_container_28_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r35 = i0.ɵɵnextContext();\n      const activityData_r3 = ctx_r35.$implicit;\n      const i_r4 = ctx_r35.index;\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.deleteConfirmation(activityData_r3, i_r4);\n    });\n    i0.ɵɵelementStart(16, \"span\", 34);\n    i0.ɵɵtext(17, \" delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activityData_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"href\", activityData_r3.get(\"docPath\").value, i0.ɵɵsanitizeUrl);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, !activityData_r3.get(\"docPath\").value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", activityData_r3.get(\"docName\").value, \" \");\n  }\n}\nfunction TotalAmountComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-card\", 4);\n    i0.ɵɵelementContainerStart(2, 5);\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵelementStart(4, \"div\", 7);\n    i0.ɵɵtext(5, \" Product name: \");\n    i0.ɵɵelementStart(6, \"span\", 8);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 6);\n    i0.ɵɵelementStart(9, \"div\", 9);\n    i0.ɵɵelementStart(10, \"lib-date-input\", 10, 11);\n    i0.ɵɵlistener(\"emitFilter\", function TotalAmountComponent_ng_container_2_Template_lib_date_input_emitFilter_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const i_r4 = restoredCtx.index;\n      const ctx_r37 = i0.ɵɵnextContext();\n      return ctx_r37.dateInpChange(i_r4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 6);\n    i0.ɵɵelementStart(13, \"div\", 12);\n    i0.ɵɵelementStart(14, \"mat-form-field\", 13);\n    i0.ɵɵelementStart(15, \"mat-label\", 14);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(17, \"input\", 15);\n    i0.ɵɵtemplate(18, TotalAmountComponent_ng_container_2_mat_error_18_Template, 2, 1, \"mat-error\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 12);\n    i0.ɵɵelementStart(20, \"mat-form-field\", 13);\n    i0.ɵɵelementStart(21, \"mat-label\", 14);\n    i0.ɵɵtext(22, \"Select unit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"mat-select\", 17);\n    i0.ɵɵtemplate(24, TotalAmountComponent_ng_container_2_mat_option_24_Template, 4, 3, \"mat-option\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(25, TotalAmountComponent_ng_container_2_mat_error_25_Template, 2, 1, \"mat-error\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(26, TotalAmountComponent_ng_container_2_div_26_Template, 14, 6, \"div\", 19);\n    i0.ɵɵtemplate(27, TotalAmountComponent_ng_container_2_ng_container_27_Template, 19, 6, \"ng-container\", 16);\n    i0.ɵɵtemplate(28, TotalAmountComponent_ng_container_2_ng_container_28_Template, 18, 6, \"ng-container\", 16);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const activityData_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dataSource[i_r4].id.name, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"materialFieldWidthInp\", true)(\"materialFormFieldAppearanceInp\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE)(\"isMandatoryFieldInp\", true)(\"dateInputTypeInp\", ctx_r0.dateInputTypeEnum.CUSTOM_INPUT)(\"cdrFormatInp\", ctx_r0.DateFomratEnum.DD_MMM_YYYY)(\"labelInp\", \"Accounting Period\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getLabelText(ctx_r0.activityKeyID), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandlingForFormArrayData(\"productProduced\", \"min\", i_r4) || ctx_r0.errorHandlingForFormArrayData(\"productProduced\", \"required\", i_r4));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r0.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.allUnit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorHandlingForFormArrayData(\"productProducedUnitID\", \"required\", i_r4));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isExportActivity());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"docPath\").value == null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", activityData_r3.get(\"docPath\").value != null);\n  }\n}\nfunction TotalAmountComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵelementStart(1, \"div\", 43);\n    i0.ɵɵelement(2, \"img\", 44);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r2.billFileName);\n  }\n}\n// /tsc-library/\nexport let TotalAmountComponent = /*#__PURE__*/(() => {\n  class TotalAmountComponent {\n    constructor(dialog, carbonDocumentController, processService, activatedRoute, formBuilder, toastrService, dateService, storageService, unitService) {\n      this.dialog = dialog;\n      this.carbonDocumentController = carbonDocumentController;\n      this.processService = processService;\n      this.activatedRoute = activatedRoute;\n      this.formBuilder = formBuilder;\n      this.toastrService = toastrService;\n      this.dateService = dateService;\n      this.storageService = storageService;\n      this.unitService = unitService;\n      this.filled = false;\n      this.submit = false;\n      this.sourceName = null;\n      this.isSource = false;\n      this.dataSource = [];\n      this.billFile = null;\n      this.noBillFileAvailable = true;\n      this.isEqual = true;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.formErrorEnum = FormErrorEnum;\n      this.dateInputTypeEnum = DateInputTypeEnum;\n      this.DateFomratEnum = DateFormatEnum;\n      this.ActivityKeyIDEnum = ActivityKeyIDEnum;\n      this.getAllSource = [];\n      this.formGroupChange = new EventEmitter();\n      this.docUploadChange = new EventEmitter();\n      this._valid_fields = new EventEmitter();\n      this.valid_fields = ['productProduced', 'productProducedUnitID', 'startDate', 'endDate'];\n      this.errorHandlingForFormArrayData = (control, error, index) => {\n        const activityConfigDetailsFA = this.activityDataFG.get('activityDataDetails');\n        const formGroup = activityConfigDetailsFA.at(index);\n        return formGroup.get(control).hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.getUnit();\n    }\n    ngOnChanges(changes) {\n      this.currentOrgID = this.storageService.getStorage('currentOrgID');\n      this.activatedRoute.queryParams.subscribe(queryParam => {\n        this.action = queryParam.action;\n        this.activityID = queryParam.activityID;\n        this.activityKeyID = this.activatedRoute.snapshot.data.activityKeyID;\n      });\n      if (changes === null || changes === void 0 ? void 0 : changes.defaultDataCollectionMethodID) {\n        if (this.defaultDataCollectionMethodID != undefined || this.defaultDataCollectionMethodID != null) this.setDataCollectionMethod();\n      }\n      this.getConfiguration(this.activityConfig);\n      if (this.activityKeyID === ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT || this.activityKeyID === ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT) {\n        this.valid_fields.push('productExported');\n        this.valid_fields.push('productExportedUnitID');\n      }\n      console.log('valid details', this.valid_fields);\n      this._valid_fields.emit(this.valid_fields);\n    }\n    getLabelText(activityKeyID) {\n      switch (activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT:\n          return 'Quantity of total intermediate product produce in this process';\n        case ActivityKeyIDEnum.PROCESS_PRODUCTION_LEVEL:\n          return 'Quantity of total product produced at production level';\n        case ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT:\n          return 'Quantity of precursor produced in this process';\n        case ActivityKeyIDEnum.PROCESS_PRECURSOR_CONSUMPTION:\n          return 'Quantity of precursor consumed';\n        default:\n          return '';\n      }\n    }\n    getLabelOnExport(activityKeyID) {\n      switch (activityKeyID) {\n        case ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT:\n          return 'Quantity of total intermediate product exported out of this process';\n        case ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT:\n          return 'Quantity of precursor exported out of this process';\n        default:\n          return '';\n      }\n    }\n    isExportActivity() {\n      if (this.activityKeyID === ActivityKeyIDEnum.PROCESS_INTERMEDIATE_PRODUCT_EXPORT || this.activityKeyID === ActivityKeyIDEnum.PROCESS_PRECURSOR_EXPORT) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    setDataCollectionMethod() {\n      this.activityDataFA.controls.forEach(group => {\n        group.get('dataCollectionMethodID').patchValue(this.defaultDataCollectionMethodID);\n      });\n    }\n    ngAfterViewInit() {\n      this.fileInputLoadSub = this.fileInput.changes.subscribe(() => this.updateFileInputArray());\n      this.updateFileInputArray();\n      if (this.action == 'update') {\n        this.activityData = this.activityConfig.activityData;\n        this.patchActivityData();\n        this.dateInputSub = this.customDateInputs.changes.subscribe(list => {\n          if (list.length > 0) {\n            this.patchDate();\n            this.dateInputSub.unsubscribe();\n          }\n        });\n      }\n    }\n    updateFileInputArray() {\n      if (this.fileInput && this.fileInput.length > 0) {\n        this.fileInputArr = this.fileInput.toArray();\n      }\n    }\n    patchDate() {\n      const customDateInputInstance = this.customDateInputs.toArray()[0];\n      if (customDateInputInstance) {\n        customDateInputInstance.daterange.patchValue({\n          startDate: moment(this.activityData['startDate']),\n          endDate: moment(this.activityData['endDate'])\n        });\n      }\n    }\n    dateInpChange(index) {\n      if (this.customDateInputs) {\n        const customDateInputInstance = this.customDateInputs.toArray()[index];\n        let startDate = customDateInputInstance.startDateFC.value;\n        let endDate = customDateInputInstance.endDateFC.value;\n        if (startDate) {\n          this.startDate = this.dateService.formatDate(startDate, DateFormatEnum.YYYY_MM_DD);\n          this.activityDataFA.controls[index].get('startDate').patchValue(this.startDate);\n        }\n        if (endDate) {\n          this.endDate = this.dateService.formatDate(endDate, DateFormatEnum.YYYY_MM_DD);\n          this.activityDataFA.controls[index].get('endDate').patchValue(this.endDate);\n        }\n      }\n    }\n    get activityDataFA() {\n      return this.activityDataFG.get('activityDataDetails');\n    }\n    initFormControl(sourceID) {\n      this.activityDataFA.push(this.formBuilder.group({\n        activityDataID: [],\n        sourceTypeID: this.sourceTypeID,\n        sourceID: sourceID.id,\n        startDate: [],\n        endDate: [],\n        productProduced: [],\n        productProducedUnitID: [],\n        activityID: this.activityID,\n        dataCollectionMethodID: this.defaultDataCollectionMethodID,\n        productExported: [],\n        productExportedUnitID: [],\n        docID: [],\n        docType: [],\n        docName: [],\n        docSize: [],\n        docPath: []\n      }));\n    }\n    getConfiguration(configuration) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.action == 'create') {\n          this.entity.forEach(res => {\n            this.isSource = true;\n            this.dataSource.push({\n              id: res\n            });\n          });\n          this.addFormControls();\n        } else {\n          this.docFileList = new Array(1).fill(null);\n        }\n      });\n    }\n    getProcess(processID) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let process = yield this.processService.getProcessByID(this.currentOrgID, processID, true);\n        return process;\n      });\n    }\n    addFormControls() {\n      if (this.isSource) {\n        this.dataSource.forEach(ds => {\n          this.initFormControl(ds.id);\n        });\n      } else {\n        this.initFormControl(null);\n      }\n    }\n    getUnit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.allUnit = yield this.unitService.getUnit([`type:${UnitTypeKeyID.MASS}`]);\n      });\n    }\n    getProductName(row) {\n      let ans;\n      if (row) {\n        let allSources = this.allProcess.output[0].entities;\n        const ans = allSources.find(res => res.id === row.id);\n      }\n      if (ans) {\n        return ans.name;\n      }\n    }\n    patchActivityData() {\n      this.activityData = this.activityConfig.activityData;\n      let source = this.activityConfig.source;\n      this.sourceName = source.source.name;\n      this.sourceTypeID = this.activityConfig.source.sourceType.id;\n      let sourceID = source.source.id;\n      this.activityDataFA.push(this.formBuilder.group({\n        activityDataID: this.activityData.id,\n        recordID: this.activityData.recordID,\n        sourceTypeID: this.sourceTypeID,\n        sourceTypeName: this.sourceName,\n        sourceID: sourceID,\n        startDate: this.activityData.startDate,\n        endDate: this.activityData.endDate,\n        productProduced: this.activityData.productProduced,\n        productProducedUnitID: this.activityData.productProducedUnitID,\n        openingMeterReading: this.activityData.openingMeterReading,\n        closingMeterReading: this.activityData.closingMeterReading,\n        activityID: this.activityID,\n        productExported: this.activityData.productExported,\n        productExportedUnitID: this.activityData.productExportedUnitID,\n        meterRolloverUnitID: this.activityData.meterUnitID,\n        docID: [this.activityData.file ? this.activityData.file.id : null],\n        docName: [this.activityData.file ? this.activityData.file.name : null],\n        docPath: [this.activityData.file ? this.activityData.file.path : null],\n        docSize: []\n      }));\n      this.dataSource.push({\n        id: this.activityData.source\n      });\n      if (this.activityData.sourceName != null) {\n        this.sourceName = this.activityData.sourceName;\n        this.isSource = true;\n      }\n      // this.updateValidators();\n      this.activityDataFA.valueChanges.subscribe(() => this.isEqual = isEqual(this.initialObject, this.activityDataFA.value));\n      this.initialObject = this.activityDataFA.value;\n      this.isEqual = true;\n    }\n    fileUpload(event, formGroup, index) {\n      let file = event.target.files[0];\n      if (file) {\n        if (file.type !== 'application/pdf') {\n          this.toastrService.error(NocFileUploadEnum.INVALID_FILE_TYPE_ERROR);\n          return;\n        }\n        if (file.size > NocFileUploadEnum.MAX_FILE_SIZE) {\n          this.toastrService.error(NocFileUploadEnum.INVAID_FILE_SIZE_ERROR);\n          return;\n        }\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = e => {};\n        this.billFile = file;\n        this.billFileName = file['name'];\n        formGroup.get('docName').patchValue(file['name']);\n        formGroup.get('docSize').patchValue(this.getFileSizeWithUnit(file['size']));\n        this.docFileList[index] = this.billFile;\n        if (this.action == 'update') {\n          this.fileCreateUpdate(formGroup);\n        }\n      } else {\n        this.toastrService.error('Please upload a file!');\n        return;\n      }\n    }\n    getFileSizeWithUnit(billFileSize) {\n      const fileSizeInKB = Math.round(billFileSize / 1024);\n      const fileSizeInMB = Math.round(fileSizeInKB / 1024);\n      const fileSizeInGB = Math.round(fileSizeInMB / 1024);\n      if (fileSizeInGB > 1) {\n        return fileSizeInGB + ' GB';\n      } else if (fileSizeInMB > 1) {\n        return fileSizeInMB + ' MB';\n      } else {\n        return fileSizeInKB + ' KB';\n      }\n    }\n    removeFile(formGroup, index) {\n      if (this.action == 'create') {\n        this.fileInputArr[index].nativeElement.value = null;\n      }\n      this.billFile = null;\n      this.billFileName = '';\n      formGroup.get('docName').reset();\n      formGroup.get('docSize').reset();\n      formGroup.get('docPath').reset(null);\n      formGroup.get('docID').reset();\n      this.docFileList[index] = this.billFile;\n    }\n    toFormData() {\n      const formData = new FormData();\n      formData.append('payload', this.billFile);\n      return formData;\n    }\n    fileCreateUpdate(formGroup) {\n      if (formGroup.get('docID').value == null) {\n        this.carbonDocumentController.createDocument(this.currentOrgID, formGroup.get('activityDataID').value, this.activityKeyID, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileCreate -\", error);\n        });\n      } else {\n        this.carbonDocumentController.updateDocument(this.currentOrgID, formGroup.get('docID').value, this.toFormData()).subscribe(response => {\n          this.file = response['response'];\n          this.updateFileFormControl(formGroup);\n        }, error => {\n          console.log(\"error in fileUpdate -\", error);\n        });\n      }\n    }\n    updateFileFormControl(formGroup) {\n      formGroup.get('docID').patchValue(this.file.id);\n      formGroup.get('docName').patchValue(this.file.name);\n      formGroup.get('docPath').patchValue(this.file.path);\n    }\n    deleteConfirmation(formGroup, index) {\n      const dialogRef = this.dialog.open(TypeConfirmationDialog, {\n        minWidth: '650px',\n        maxWidth: '600px',\n        data: {\n          icon: 'delete',\n          header: 'Are you sure you want to delete ?',\n          body: '<p class = \"ps-1\"><strong class=\"pe-1\"> Note:</strong>This file will be deleted permanently and you won`t be able to track it`s progress.</p><span class=\"fw-bold ps-1\">Are you sure you want to delete?</span>',\n          confirmationInput: 'DELETE',\n          buttonOne: 'Cancel',\n          buttonTwo: 'Delete'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.deleteDocument(formGroup.get('docID').value, formGroup, index);\n        } else {\n          dialogRef.close();\n        }\n      });\n    }\n    deleteDocument(docID, formGroup, index) {\n      this.carbonDocumentController.deleteDocument(this.currentOrgID, docID).subscribe(res => {\n        this.removeFile(formGroup, index);\n      }, error => {\n        console.log(\"error in deleteDocument -\", error);\n      });\n    }\n  }\n  TotalAmountComponent.ɵfac = function TotalAmountComponent_Factory(t) {\n    return new (t || TotalAmountComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.CarbonDocumentController), i0.ɵɵdirectiveInject(i3.ProcessService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i5.FormBuilder), i0.ɵɵdirectiveInject(i6.ToastrService), i0.ɵɵdirectiveInject(i7.DateService), i0.ɵɵdirectiveInject(i8.StorageService), i0.ɵɵdirectiveInject(i9.UnitService));\n  };\n  TotalAmountComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TotalAmountComponent,\n    selectors: [[\"app-total-amount\"]],\n    viewQuery: function TotalAmountComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(DateInputComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customDateInputs = _t);\n      }\n    },\n    inputs: {\n      activityDataFG: \"activityDataFG\",\n      activityConfig: \"activityConfig\",\n      getAllSource: \"getAllSource\",\n      docFileList: \"docFileList\",\n      defaultDataCollectionMethodID: \"defaultDataCollectionMethodID\",\n      entity: \"entity\",\n      sourceTypeID: \"sourceTypeID\"\n    },\n    outputs: {\n      formGroupChange: \"formGroupChange\",\n      docUploadChange: \"docUploadChange\",\n      _valid_fields: \"validFields\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 2,\n    consts: [[3, \"formGroup\"], [\"formArrayName\", \"activityDataDetails\"], [4, \"ngFor\", \"ngForOf\"], [\"docImg\", \"\"], [1, \"border\", \"cardOverwrite\", \"my-1\", \"mt-3\"], [3, \"formGroupName\"], [1, \"row\"], [1, \"col-sm-4\", \"mb-3\"], [1, \"cardTitle\", \"pb-2\"], [1, \"col-sm-8\"], [1, \"cursorPointer\", 3, \"materialFieldWidthInp\", \"materialFormFieldAppearanceInp\", \"isMandatoryFieldInp\", \"dateInputTypeInp\", \"cdrFormatInp\", \"labelInp\", \"emitFilter\"], [\"customDateInput\", \"\"], [1, \"col-sm-4\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"type\", \"number\", \"matInput\", \"\", \"placeholder\", \"0.00\", \"min\", \"0\", \"formControlName\", \"productProduced\"], [4, \"ngIf\"], [\"formControlName\", \"productProducedUnitID\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"row\", 4, \"ngIf\"], [3, \"value\"], [1, \"float-end\"], [\"type\", \"number\", \"matInput\", \"\", \"placeholder\", \"0.00\", \"min\", \"0\", \"formControlName\", \"productExported\"], [\"formControlName\", \"productExportedUnitID\"], [1, \"col-sm-8\", \"fileInput\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 3, \"change\"], [\"fileInput\", \"\"], [1, \"row\", \"pt-2\"], [1, \"border\", \"rounded\", \"d-flex\", 3, \"ngClass\"], [1, \"p-1\"], [4, \"ngTemplateOutlet\"], [1, \"centerAlignVertical\", \"p-1\"], [1, \"ms-auto\", \"p-1\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-danger\"], [1, \"border\", \"rounded\", \"d-flex\"], [1, \"centerAlignVertical\", \"p-3\"], [\"target\", \"_blank\", 3, \"href\", \"ngClass\"], [1, \"ms-auto\", \"centerAlignVertical\", \"p-2\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Edit\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [1, \"material-symbols-outlined\", \"text-primary\", \"updateIconHover\", \"fs-5\"], [\"type\", \"file\", \"accept\", \"application/pdf\", 1, \"form-control\", 2, \"display\", \"none\", 3, \"change\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"matTooltip\", \"Delete\", \"matTooltipClass\", \"nameTooltip\", \"matTooltipPosition\", \"below\", 1, \"btn\", \"p-1\", 3, \"click\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"mat-raised-button\", \"\", \"matTooltipPosition\", \"below\", 1, \"docIcon\", \"p-1\", 3, \"matTooltip\"], [\"height\", \"40px\", \"src\", \"assets/images/default-doc.ico\", \"alt\", \"bill document preview\"]],\n    template: function TotalAmountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementContainerStart(1, 1);\n        i0.ɵɵtemplate(2, TotalAmountComponent_ng_container_2_Template, 29, 17, \"ng-container\", 2);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, TotalAmountComponent_ng_template_3_Template, 3, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.activityDataFG);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.activityDataFA.controls);\n      }\n    },\n    directives: [i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormArrayName, i10.NgForOf, i11.MatCard, i5.FormGroupName, i7.DateInputComponent, i12.MatFormField, i12.MatLabel, i5.MinValidator, i5.NumberValueAccessor, i13.MatInput, i5.DefaultValueAccessor, i5.NgControlStatus, i5.FormControlName, i10.NgIf, i14.MatSelect, i12.MatError, i15.MatOption, i10.NgClass, i10.NgTemplateOutlet, i16.MatTooltip, i12.MatSuffix],\n    encapsulation: 2\n  });\n  return TotalAmountComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}