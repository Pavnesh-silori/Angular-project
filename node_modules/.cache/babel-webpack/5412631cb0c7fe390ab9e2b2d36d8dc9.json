{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SubsidiaryController = /*#__PURE__*/(() => {\n  class SubsidiaryController {\n    constructor(http) {\n      this.http = http;\n    }\n    getEmissionRequestByPage(orgID, pageNo, pageSize, sortBy, orderBy, search, filter) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      search.forEach(search => params = params.append('search', search));\n      filter.forEach(filter => params = params.append('filter', filter));\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/emissions/requests/sent/page`, {\n        params: params\n      });\n    }\n    getEmissionResponseByPage(orgID, pageNo, pageSize, sortBy, orderBy, search, filter) {\n      let params = new HttpParams();\n      params = params.append('pageNo', pageNo);\n      params = params.append('pageSize', pageSize);\n      params = params.append('sortBy', sortBy);\n      params = params.append('orderBy', orderBy);\n      search.forEach(search => params = params.append('search', search));\n      filter.forEach(filter => params = params.append('filter', filter));\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/emissions/requests/received/page`, {\n        params: params\n      });\n    }\n    getActivityByID(activityID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}activity/${activityID}`);\n    }\n    getActivityListByScopeID(scopeID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_API_URL}scopes/${scopeID}/activity`);\n    }\n    getSubsidaryType() {\n      return new Observable(observer => {\n        observer.next([{\n          id: 1,\n          key: 'SUBSIDIARY',\n          name: 'Subsidiary'\n        }, {\n          id: 2,\n          key: 'JOINT_VENTURE',\n          name: 'Joint venture'\n        }]);\n      });\n    }\n    getEmissionRequestByID(requestID) {\n      return this.http.get(`${environment.CARBON_ACCOUNTING_PUBLIC_API_URL}subsidiary/emission-request/${requestID}`);\n    }\n    sendEmissionRequest(orgID, request) {\n      return this.http.post(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/subsidiary/my-request`, request);\n    }\n    reSendEmissionRequest(orgID, requestID, request) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/subsidiary/my-request/${requestID}`, request);\n    }\n    cancelRequest(orgID, requestID) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/emission/request/${requestID}/cancel`, '');\n    }\n    declineRequest(orgID, requestID, reason) {\n      return this.http.patch(`${environment.CARBON_ACCOUNTING_API_URL}organizations/${orgID}/emission/request/${requestID}/decline`, reason);\n    }\n    getSubsidiaryByOrgID(orgID, status) {\n      let params = new HttpParams();\n      if (status) params = params.append('status', status);\n      return this.http.get(`${environment.ORGANIZATION_API_URL}organizations/${orgID}/subsidiary`, {\n        params: params\n      });\n    }\n    getConsolidationApproachByOrgID(orgID) {\n      return this.http.get(`${environment.ORGANIZATION_PUBLIC_API_URL}consolidation-approach`);\n      // return this.http.get(`${environment.ORGANIZATION_API_URL}organizations/${orgID}/consolidation-approach`);\n    }\n\n    getSubsidaryUserListByOrgIDAndsubsidiaryID(orgID, subsidiaryID, applicationKeyID, roleCategoryKeyID) {\n      return this.http.get(`${environment.ORGANIZATION_API_URL}organizations/${orgID}/subsidiary/${subsidiaryID}/users/application/${applicationKeyID}/roles/${roleCategoryKeyID}`);\n    }\n  }\n  SubsidiaryController.ɵfac = function SubsidiaryController_Factory(t) {\n    return new (t || SubsidiaryController)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SubsidiaryController.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubsidiaryController,\n    factory: SubsidiaryController.ɵfac,\n    providedIn: 'root'\n  });\n  return SubsidiaryController;\n})();","map":null,"metadata":{},"sourceType":"module"}