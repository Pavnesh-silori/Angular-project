{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as moment from 'moment';\nimport { sampleSetFrequency } from '@carbon/constant/employee.constant';\n// tsc-library\nimport { ButtonLabelEnum, DialogEnum, InvalidForm, MaterialFormFieldAppearance } from '@library/tsc-common';\nimport { ToastrColor } from '@library/toastr-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@carbon/controller/employee-survey.controller\";\nimport * as i3 from \"@library/toastr-service\";\nimport * as i4 from \"@library/storage-service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/tooltip\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@library/date\";\nimport * as i12 from \"@angular/material/datepicker\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/core\";\nfunction CreateComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Date is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateComponent_mat_option_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const sample_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", sample_r5[\"key\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", sample_r5.value, \" \");\n  }\n}\nfunction CreateComponent_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Sample set is required \");\n    i0.ɵɵelementEnd();\n  }\n}\n// /tsc-library/\nexport let CreateComponent = /*#__PURE__*/(() => {\n  class CreateComponent {\n    constructor(formbuilder, employeeSurveyController, toastrService, storageService, dialogRef) {\n      this.formbuilder = formbuilder;\n      this.employeeSurveyController = employeeSurveyController;\n      this.toastrService = toastrService;\n      this.storageService = storageService;\n      this.dialogRef = dialogRef;\n      this.DialogEnum = DialogEnum;\n      this.MaterialFormFieldAppearance = MaterialFormFieldAppearance;\n      this.sampleSetFrequency = sampleSetFrequency;\n      this.ButtonLabelEnum = ButtonLabelEnum;\n      this.errorHandling = (control, error) => {\n        return this.createSurveyFG.controls[control].hasError(error);\n      };\n    }\n    ngOnInit() {\n      this.rootOrgID = this.storageService.getStorage('rootOrgID');\n      this.getEmployeeCount();\n      this.createSurveyFG = this.formbuilder.group({\n        surveyName: [, Validators.required],\n        accountingStartDate: [, Validators.required],\n        totalEmployee: [, Validators.required],\n        sampleSetPercentage: [, Validators.required]\n      });\n    }\n    getEmployeeCount() {\n      this.employeeSurveyController.getEmployeeCount(this.rootOrgID).subscribe(res => {\n        this.createSurveyFG.patchValue({\n          totalEmployee: res\n        });\n      });\n    }\n    formatDate(control) {\n      if (this.createSurveyFG.controls[control].value === null) return;\n      let date = moment(this.createSurveyFG.controls[control].value).format(\"YYYY-MM-DD\");\n      this.createSurveyFG.controls[control].patchValue(date);\n    }\n    onSubmit() {\n      if (this.createSurveyFG.invalid) {\n        this.createSurveyFG.markAllAsTouched();\n        this.toastrService.openToast(InvalidForm.INVALID_FORM_TITLE, InvalidForm.INVALID_FORM_MESSAGE, ToastrColor.ERROR);\n        return;\n      }\n      this.employeeSurveyController.createSurvey(this.rootOrgID, this.createSurveyFG.value).subscribe(response => {\n        console.log(response);\n        if (response['status'] == 'success') {\n          this.dialogRef.close('opSuccess');\n        }\n      }, error => {\n        console.log('error in sendSurveyForm() -', error);\n      });\n    }\n    openDatepicker(datepicker) {\n      if (!datepicker.opened) {\n        datepicker.open();\n      }\n    }\n  }\n  CreateComponent.ɵfac = function CreateComponent_Factory(t) {\n    return new (t || CreateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EmployeeSurveyController), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.StorageService), i0.ɵɵdirectiveInject(i5.MatDialogRef));\n  };\n  CreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateComponent,\n    selectors: [[\"app-create\"]],\n    decls: 36,\n    vars: 12,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"dialogTitle\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", \"cdkFocusInitial\", \"\", \"matTooltip\", \"Close\", \"matTooltipPosition\", \"before\", 1, \"float-end\", \"matDialogClose\"], [1, \"material-symbols-outlined\"], [\"mat-dialog-content\", \"\", 1, \"matDialogContent\"], [3, \"formGroup\"], [1, \"matFieldWidth100\", 3, \"appearance\"], [1, \"formLabel\"], [\"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"Survey Name\", \"formControlName\", \"surveyName\", \"required\", \"\", 1, \"formPlaceholder\"], [4, \"ngIf\"], [\"appDateMonthYearFormat\", \"\", 1, \"matFieldWidth100\", \"cursorPointer\", 3, \"appearance\", \"click\", \"keydown.enter\", \"keydown.arrowdown\"], [\"matInput\", \"\", \"formControlName\", \"accountingStartDate\", \"required\", \"\", 1, \"noFocus\", 3, \"matDatepicker\", \"readonly\", \"dateInput\"], [\"matSuffix\", \"\", 3, \"for\"], [\"disabled\", \"false\"], [\"date\", \"\"], [1, \"form-group\", \"row\"], [1, \"col-sm-6\", \"col-form-label\"], [1, \"col-sm-6\"], [\"type\", \"number\", \"value\", \"NonEditableContent\", \"readonly\", \"\", \"formControlName\", \"totalEmployee\", 1, \"form-control-plaintext\"], [\"formControlName\", \"sampleSetPercentage\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-dialog-footer\", \"\", \"align\", \"end\"], [1, \"d-inline\"], [\"type\", \"submit\", 1, \"button\", \"btn\", \"btn-success\", 3, \"click\"], [3, \"value\"]],\n    template: function CreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r6 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"strong\", 1);\n        i0.ɵɵtext(2, \" New Survey \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 2);\n        i0.ɵɵelementStart(4, \"span\", 3);\n        i0.ɵɵtext(5, \"close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"form\", 5);\n        i0.ɵɵelementStart(8, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(9, \"mat-label\", 7);\n        i0.ɵɵtext(10, \"Survey name \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 8);\n        i0.ɵɵtemplate(12, CreateComponent_mat_error_12_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-form-field\", 10);\n        i0.ɵɵlistener(\"click\", function CreateComponent_Template_mat_form_field_click_13_listener() {\n          i0.ɵɵrestoreView(_r6);\n          const _r1 = i0.ɵɵreference(19);\n          return ctx.openDatepicker(_r1);\n        })(\"keydown.enter\", function CreateComponent_Template_mat_form_field_keydown_enter_13_listener() {\n          i0.ɵɵrestoreView(_r6);\n          const _r1 = i0.ɵɵreference(19);\n          return ctx.openDatepicker(_r1);\n        })(\"keydown.arrowdown\", function CreateComponent_Template_mat_form_field_keydown_arrowdown_13_listener() {\n          i0.ɵɵrestoreView(_r6);\n          const _r1 = i0.ɵɵreference(19);\n          return ctx.openDatepicker(_r1);\n        });\n        i0.ɵɵelementStart(14, \"mat-label\", 7);\n        i0.ɵɵtext(15, \" Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"input\", 11);\n        i0.ɵɵlistener(\"dateInput\", function CreateComponent_Template_input_dateInput_16_listener() {\n          return ctx.formatDate(\"accountingStartDate\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"mat-datepicker-toggle\", 12);\n        i0.ɵɵelement(18, \"mat-datepicker\", 13, 14);\n        i0.ɵɵtemplate(20, CreateComponent_mat_error_20_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 15);\n        i0.ɵɵelementStart(22, \"label\", 16);\n        i0.ɵɵtext(23, \"Total Employees\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 17);\n        i0.ɵɵelement(25, \"input\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(27, \"mat-label\", 7);\n        i0.ɵɵtext(28, \"Select sample set \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"mat-select\", 19);\n        i0.ɵɵtemplate(30, CreateComponent_mat_option_30_Template, 2, 2, \"mat-option\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(31, CreateComponent_mat_error_31_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 21);\n        i0.ɵɵelementStart(33, \"div\", 22);\n        i0.ɵɵelementStart(34, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function CreateComponent_Template_button_click_34_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(35);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(19);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.createSurveyFG);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"surveyName\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matDatepicker\", _r1)(\"readonly\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r1);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"accountingStartDate\", \"required\"));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"appearance\", ctx.MaterialFormFieldAppearance.FORM_FIELD_APPEARANCE);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sampleSetFrequency);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"sampleSetPercentage\", \"required\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", ctx.ButtonLabelEnum.CREATE_BTN_LABEL, \" \");\n      }\n    },\n    directives: [i5.MatDialogTitle, i6.MatButton, i5.MatDialogClose, i7.MatTooltip, i5.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i8.MatFormField, i8.MatLabel, i9.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i10.NgIf, i11.DateMonthYearFormatDirective, i12.MatDatepickerInput, i12.MatDatepickerToggle, i8.MatSuffix, i12.MatDatepicker, i1.NumberValueAccessor, i13.MatSelect, i10.NgForOf, i8.MatError, i14.MatOption],\n    encapsulation: 2\n  });\n  return CreateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}