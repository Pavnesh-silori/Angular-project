{"version":3,"file":"angular-gauge.umd.js","sources":["../../src/gauge-defaults.service.ts","../../src/gauge.component.ts","../../src/gauge.module.ts","../../src/angular-gauge.ts"],"names":["EventEmitter","Gauge","Component","ElementRef","Input","Output","InjectionToken","NgModule"],"mappings":"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","sourcesContent":["export interface GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle?: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle?: number;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius?: number;\n\n  /**\n   * The minumum value for the gauge\n   */\n  min?: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max?: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label?: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color?: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue?: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass?: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass?: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass?: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass?: string;\n\n  /**\n   * The value of the gauge\n   */\n  value?: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated?: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration?: number;\n}\n\nexport class GaugeDefaults implements GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle: number = 135;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle: number = 45;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius: number = 40;\n\n  /**\n   * The minimum value for the gauge\n   */\n  min: number = 0;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max: number = 100;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue: boolean = true;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass: string = 'gauge';\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass: string = 'dial';\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass: string = 'value';\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass: string = 'value-text';\n\n  /**\n   * The value of the gauge\n   */\n  value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated: boolean = false;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration: number;\n}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport Gauge from 'svg-gauge';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\n@Component({\n  selector: 'mwl-gauge',\n  template: '',\n})\nexport class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  @Input() dialStartAngle: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  @Input() dialEndAngle: number;\n\n  /**\n   * The radius of the gauge\n   */\n  @Input() dialRadius: number;\n\n  /**\n   * The minimum value for the gauge\n   */\n  @Input() min: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  @Input() max: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  @Input() label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  @Input() color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  @Input() showValue: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  @Input() gaugeClass: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  @Input() dialClass: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  @Input() valueDialClass: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  @Input() valueClass: string;\n\n  /**\n   * The value of the gauge\n   */\n  @Input() value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  @Input() animated: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  @Input() animationDuration: number;\n\n  /**\n   * Called when the gauge is created\n   */\n  @Output() gaugeCreated: EventEmitter<{ gauge: any }> = new EventEmitter();\n\n  private gauge: any;\n\n  constructor(private elm: ElementRef, private defaults: GaugeDefaults) {}\n\n  ngAfterViewInit(): void {\n    const options: GaugeOptions = {\n      dialStartAngle: this.dialStartAngle,\n      dialEndAngle: this.dialEndAngle,\n      dialRadius: this.dialRadius,\n      min: this.min,\n      max: this.max,\n      label: this.label,\n      showValue: this.showValue,\n      gaugeClass: this.gaugeClass,\n      dialClass: this.dialClass,\n      valueDialClass: this.valueDialClass,\n      valueClass: this.valueClass,\n      value: this.value,\n      color: this.color,\n    };\n\n    Object.keys(this.defaults).forEach((optionKey) => {\n      if (typeof options[optionKey] === 'undefined') {\n        options[optionKey] = this.defaults[optionKey];\n      }\n    });\n\n    Object.keys(options).forEach((optionKey) => {\n      if (typeof options[optionKey] === 'undefined') {\n        delete options[optionKey];\n      }\n    });\n\n    this.gauge = Gauge(this.elm.nativeElement, options);\n\n    this.gaugeCreated.emit({ gauge: this.gauge });\n\n    this.updateValue();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.updateValue();\n    }\n  }\n\n  private updateValue(): void {\n    if (this.gauge) {\n      if (this.animated) {\n        this.gauge.setValueAnimated(this.value, this.animationDuration);\n      } else {\n        this.gauge.setValue(this.value);\n      }\n    }\n  }\n}\n","import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\nexport const USER_DEFAULTS: InjectionToken<string> = new InjectionToken(\n  'gauge defaults'\n);\n\nexport function defaultsFactory(userDefaults: GaugeOptions): GaugeDefaults {\n  const defaults: GaugeDefaults = new GaugeDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [GaugeComponent],\n  exports: [GaugeComponent],\n})\nexport class GaugeModule {\n  static forRoot(\n    userDefaults: GaugeOptions = {}\n  ): ModuleWithProviders<GaugeModule> {\n    return {\n      ngModule: GaugeModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults,\n        },\n        {\n          provide: GaugeDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS],\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {GaugeDefaults as ɵb} from './gauge-defaults.service';\nexport {GaugeComponent as ɵa} from './gauge.component';"]}