import { Component, ElementRef, Input, Output, EventEmitter, } from '@angular/core';
import Gauge from 'svg-gauge';
import { GaugeDefaults } from './gauge-defaults.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './gauge-defaults.service';
export class GaugeComponent {
    constructor(elm, defaults) {
        this.elm = elm;
        this.defaults = defaults;
        /**
         * Called when the gauge is created
         */
        this.gaugeCreated = new EventEmitter();
    }
    ngAfterViewInit() {
        const options = {
            dialStartAngle: this.dialStartAngle,
            dialEndAngle: this.dialEndAngle,
            dialRadius: this.dialRadius,
            min: this.min,
            max: this.max,
            label: this.label,
            showValue: this.showValue,
            gaugeClass: this.gaugeClass,
            dialClass: this.dialClass,
            valueDialClass: this.valueDialClass,
            valueClass: this.valueClass,
            value: this.value,
            color: this.color,
        };
        Object.keys(this.defaults).forEach((optionKey) => {
            if (typeof options[optionKey] === 'undefined') {
                options[optionKey] = this.defaults[optionKey];
            }
        });
        Object.keys(options).forEach((optionKey) => {
            if (typeof options[optionKey] === 'undefined') {
                delete options[optionKey];
            }
        });
        this.gauge = Gauge(this.elm.nativeElement, options);
        this.gaugeCreated.emit({ gauge: this.gauge });
        this.updateValue();
    }
    ngOnChanges(changes) {
        if (changes['value']) {
            this.updateValue();
        }
    }
    updateValue() {
        if (this.gauge) {
            if (this.animated) {
                this.gauge.setValueAnimated(this.value, this.animationDuration);
            }
            else {
                this.gauge.setValue(this.value);
            }
        }
    }
}
GaugeComponent.ɵfac = function GaugeComponent_Factory(t) { return new (t || GaugeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GaugeDefaults)); };
GaugeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GaugeComponent, selectors: [["mwl-gauge"]], inputs: { dialStartAngle: "dialStartAngle", dialEndAngle: "dialEndAngle", dialRadius: "dialRadius", min: "min", max: "max", label: "label", color: "color", showValue: "showValue", gaugeClass: "gaugeClass", dialClass: "dialClass", valueDialClass: "valueDialClass", valueClass: "valueClass", value: "value", animated: "animated", animationDuration: "animationDuration" }, outputs: { gaugeCreated: "gaugeCreated" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function GaugeComponent_Template(rf, ctx) { }, encapsulation: 2 });
GaugeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: GaugeDefaults }
];
GaugeComponent.propDecorators = {
    dialStartAngle: [{ type: Input }],
    dialEndAngle: [{ type: Input }],
    dialRadius: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    label: [{ type: Input }],
    color: [{ type: Input }],
    showValue: [{ type: Input }],
    gaugeClass: [{ type: Input }],
    dialClass: [{ type: Input }],
    valueDialClass: [{ type: Input }],
    valueClass: [{ type: Input }],
    value: [{ type: Input }],
    animated: [{ type: Input }],
    animationDuration: [{ type: Input }],
    gaugeCreated: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GaugeComponent, [{
        type: Component,
        args: [{
                selector: 'mwl-gauge',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.GaugeDefaults }]; }, { gaugeCreated: [{
            type: Output
        }], dialStartAngle: [{
            type: Input
        }], dialEndAngle: [{
            type: Input
        }], dialRadius: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], label: [{
            type: Input
        }], color: [{
            type: Input
        }], showValue: [{
            type: Input
        }], gaugeClass: [{
            type: Input
        }], dialClass: [{
            type: Input
        }], valueDialClass: [{
            type: Input
        }], valueClass: [{
            type: Input
        }], value: [{
            type: Input
        }], animated: [{
            type: Input
        }], animationDuration: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,