import { NgModule, InjectionToken } from '@angular/core';
import { GaugeComponent } from './gauge.component';
import { GaugeDefaults } from './gauge-defaults.service';
import * as ɵngcc0 from '@angular/core';
export const USER_DEFAULTS = new InjectionToken('gauge defaults');
export function defaultsFactory(userDefaults) {
    const defaults = new GaugeDefaults();
    Object.assign(defaults, userDefaults);
    return defaults;
}
export class GaugeModule {
    static forRoot(userDefaults = {}) {
        return {
            ngModule: GaugeModule,
            providers: [
                {
                    provide: USER_DEFAULTS,
                    useValue: userDefaults,
                },
                {
                    provide: GaugeDefaults,
                    useFactory: defaultsFactory,
                    deps: [USER_DEFAULTS],
                },
            ],
        };
    }
}
GaugeModule.ɵfac = function GaugeModule_Factory(t) { return new (t || GaugeModule)(); };
GaugeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: GaugeModule });
GaugeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GaugeModule, [{
        type: NgModule,
        args: [{
                declarations: [GaugeComponent],
                exports: [GaugeComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GaugeModule, { declarations: function () { return [GaugeComponent]; }, exports: function () { return [GaugeComponent]; } }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9Vc2Vycy9tYXR0bGV3aXMvQ29kZS9vcGVuLXNvdXJjZS9hbmd1bGFyLWdhdWdlL3NyYy9nYXVnZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFnQixNQUFNLDBCQUEwQixDQUFDOztBQUV2RSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQTJCLElBQUksY0FBYyxDQUNyRSxnQkFBZ0IsQ0FDakIsQ0FBQztBQUVGLE1BQU0sVUFBVSxlQUFlLENBQUMsWUFBMEI7QUFBSSxJQUM1RCxNQUFNLFFBQVEsR0FBa0IsSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUN0RCxJQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLElBQUUsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQU1ELE1BQU0sT0FBTyxXQUFXO0FBQ3hCLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FDWixlQUE2QixFQUFFO0FBQ2hDLFFBQ0MsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLFdBQVc7QUFDM0IsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsYUFBYTtBQUNoQyxvQkFBVSxRQUFRLEVBQUUsWUFBWTtBQUNoQyxpQkFBUztBQUNULGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLGFBQWE7QUFDaEMsb0JBQVUsVUFBVSxFQUFFLGVBQWU7QUFDckMsb0JBQVUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQy9CLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO3VDQXZCQyxRQUFRLFNBQUMsa0JBQ1IsWUFBWSxFQUFFO0FBQUMsY0FBYyxDQUFDLGtCQUM5QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFDMUI7Ozs7Ozs7Ozs4TkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHYXVnZUNvbXBvbmVudCB9IGZyb20gJy4vZ2F1Z2UuY29tcG9uZW50JztcbmltcG9ydCB7IEdhdWdlRGVmYXVsdHMsIEdhdWdlT3B0aW9ucyB9IGZyb20gJy4vZ2F1Z2UtZGVmYXVsdHMuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBVU0VSX0RFRkFVTFRTOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+ID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnZ2F1Z2UgZGVmYXVsdHMnXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdHNGYWN0b3J5KHVzZXJEZWZhdWx0czogR2F1Z2VPcHRpb25zKTogR2F1Z2VEZWZhdWx0cyB7XG4gIGNvbnN0IGRlZmF1bHRzOiBHYXVnZURlZmF1bHRzID0gbmV3IEdhdWdlRGVmYXVsdHMoKTtcbiAgT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgdXNlckRlZmF1bHRzKTtcbiAgcmV0dXJuIGRlZmF1bHRzO1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtHYXVnZUNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtHYXVnZUNvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIEdhdWdlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoXG4gICAgdXNlckRlZmF1bHRzOiBHYXVnZU9wdGlvbnMgPSB7fVxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEdhdWdlTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBHYXVnZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVVNFUl9ERUZBVUxUUyxcbiAgICAgICAgICB1c2VWYWx1ZTogdXNlckRlZmF1bHRzLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogR2F1Z2VEZWZhdWx0cyxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBkZWZhdWx0c0ZhY3RvcnksXG4gICAgICAgICAgZGVwczogW1VTRVJfREVGQVVMVFNdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=