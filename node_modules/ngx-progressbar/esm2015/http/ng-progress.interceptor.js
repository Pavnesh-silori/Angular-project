import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-progressbar';
export class NgProgressInterceptor {
    constructor(ngProgress, config) {
        this.ngProgress = ngProgress;
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
    }
    intercept(req, next) {
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        this._progressRef = this.ngProgress.ref(this._config.id);
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(() => {
            this._inProgressCount--;
            if (this._inProgressCount === 0) {
                this._progressRef.complete();
            }
        }));
    }
    /**
     * Check if request is silent.
     * @param req request
     */
    checkUrl(req) {
        const url = req.url.toLowerCase();
        const found = this._config.silentApis.find((u) => url.startsWith(u));
        return !!found;
    }
}
NgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) { return new (t || NgProgressInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8)); };
NgProgressInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgProgressInterceptor, factory: NgProgressInterceptor.ɵfac });
NgProgressInterceptor.ctorParameters = () => [
    { type: NgProgress },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgProgressInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_HTTP_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wcm9ncmVzc2Jhci9odHRwL3NyYy9uZy1wcm9ncmVzcy5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQWlCLE1BQU0saUJBQWlCLENBQUM7QUFDNUQsT0FBTyxFQUE0Qyx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFHakgsTUFBTSxPQUFPLHFCQUFxQjtBQUFHLElBU25DLFlBQXNCLFVBQXNCLEVBQStDLE1BQTZCO0FBQzFILFFBRHdCLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQVByQyxxQkFBZ0IsR0FBRyxDQUFDLENBQUM7QUFDL0IsUUFDbUIsWUFBTyxHQUF1QjtBQUNqRCxZQUFJLEVBQUUsRUFBRSxNQUFNO0FBQ2QsWUFBSSxVQUFVLEVBQUUsRUFBRTtBQUNsQixTQUFHLENBQUM7QUFDSixRQUVJLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsaUNBQUssSUFBSSxDQUFDLE9BQU8sR0FBSyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDeEUsSUFBRSxDQUFDO0FBQ0gsSUFDRSxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtBQUFJLFFBRXBELDRCQUE0QjtBQUNoQyxRQUFJLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBRTtBQUM5QyxZQUFNLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEYsU0FBSztBQUNMLFFBQ0ksNkJBQTZCO0FBQ2pDLFFBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzVCLFlBQU0sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQzVCLFFBQ0ksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdELFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFO0FBQ3RDLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNoQyxTQUFLO0FBQ0wsUUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixRQUFRLENBQUMsR0FBRyxFQUFFO0FBQ3BCLFlBQVEsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDaEMsWUFBUSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLEVBQUU7QUFDekMsZ0JBQVUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN2QyxhQUFTO0FBQ1QsUUFBTSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBVSxRQUFRLENBQUMsR0FBcUI7QUFBSSxRQUN4QyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3RDLFFBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekUsUUFBSSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDbkIsSUFBRSxDQUFDO0FBQ0g7aURBcERDLFVBQVU7NklBQ1Q7QUFBQztBQUErQyxZQUp6QyxVQUFVO0FBQUksNENBYTBCLFFBQVEsWUFBSSxNQUFNLFNBQUMsdUJBQXVCO0FBQVE7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBOZ1Byb2dyZXNzLCBOZ1Byb2dyZXNzUmVmIH0gZnJvbSAnbmd4LXByb2dyZXNzYmFyJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnLCBQcm9ncmVzc0h0dHBDb25maWcsIE5HX1BST0dSRVNTX0hUVFBfQ09ORklHIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy1odHRwLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIHByaXZhdGUgX2luUHJvZ3Jlc3NDb3VudCA9IDA7XG4gIHByaXZhdGUgX3Byb2dyZXNzUmVmITogTmdQcm9ncmVzc1JlZjtcbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBQcm9ncmVzc0h0dHBDb25maWcgPSB7XG4gICAgaWQ6ICdyb290JyxcbiAgICBzaWxlbnRBcGlzOiBbXVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBuZ1Byb2dyZXNzOiBOZ1Byb2dyZXNzLCBAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1BST0dSRVNTX0hUVFBfQ09ORklHKSBjb25maWc/OiBOZ1Byb2dyZXNzSHR0cENvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZyA/IHsuLi50aGlzLl9jb25maWcsIC4uLmNvbmZpZ30gOiB0aGlzLl9jb25maWc7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcblxuICAgIC8vIElnbm9yZSBieSByZXF1ZXN0IGhlYWRlcnNcbiAgICBpZiAocmVxLmhlYWRlcnMuaGFzKCdpZ25vcmVQcm9ncmVzc0JhcicpKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxLmNsb25lKHtoZWFkZXJzOiByZXEuaGVhZGVycy5kZWxldGUoJ2lnbm9yZVByb2dyZXNzQmFyJyl9KSk7XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIHNpbGVudCBhcGkgcmVxdWVzdHNcbiAgICBpZiAodGhpcy5jaGVja1VybChyZXEpKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICB0aGlzLl9pblByb2dyZXNzQ291bnQrKztcblxuICAgIHRoaXMuX3Byb2dyZXNzUmVmID0gdGhpcy5uZ1Byb2dyZXNzLnJlZih0aGlzLl9jb25maWcuaWQpO1xuICAgIGlmICghdGhpcy5fcHJvZ3Jlc3NSZWYuaXNTdGFydGVkKSB7XG4gICAgICB0aGlzLl9wcm9ncmVzc1JlZi5zdGFydCgpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudC0tO1xuICAgICAgICBpZiAodGhpcy5faW5Qcm9ncmVzc0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NSZWYuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHJlcXVlc3QgaXMgc2lsZW50LlxuICAgKiBAcGFyYW0gcmVxIHJlcXVlc3RcbiAgICovXG4gIHByaXZhdGUgY2hlY2tVcmwocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XG4gICAgY29uc3QgdXJsID0gcmVxLnVybC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGZvdW5kID0gdGhpcy5fY29uZmlnLnNpbGVudEFwaXMuZmluZCgodSkgPT4gdXJsLnN0YXJ0c1dpdGgodSkpO1xuICAgIHJldHVybiAhIWZvdW5kO1xuICB9XG59XG4iXX0=