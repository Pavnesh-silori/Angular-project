import { Injectable, Optional, Inject } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';
import { of } from 'rxjs';
import { tap, delay, switchMap, filter } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';
import { NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';
import * as i0 from "@angular/core";
import * as i1 from "ngx-progressbar";
import * as i2 from "@angular/router";
import * as i3 from "./ng-progress-router.interface";
/**
 * Check if a router event type exists in an array of router event types
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-progressbar';
import * as ɵngcc2 from '@angular/router';
function eventExists(routerEvent, events) {
    let res = false;
    events.map((event) => res = res || routerEvent instanceof event);
    return res;
}
export class NgProgressRouter {
    constructor(progress, router, config) {
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
        const progressRef = progress.ref(this._config.id);
        const startProgress = of({}).pipe(tap(() => progressRef.start()));
        const completeProgress = of({}).pipe(delay(this._config.delay), tap(() => progressRef.complete()));
        const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];
        router.events.pipe(filter((event) => eventExists(event, filterEvents)), switchMap((event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)).subscribe();
    }
}
NgProgressRouter.ɵfac = function NgProgressRouter_Factory(t) { return new (t || NgProgressRouter)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(NG_PROGRESS_ROUTER_CONFIG, 8)); };
NgProgressRouter.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgProgressRouter_Factory() { return new NgProgressRouter(i0.ɵɵinject(i1.NgProgress), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NG_PROGRESS_ROUTER_CONFIG, 8)); }, token: NgProgressRouter, providedIn: "root" });
NgProgressRouter.ctorParameters = () => [
    { type: NgProgress },
    { type: Router },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_ROUTER_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgProgressRouter, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: ɵngcc2.Router }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_ROUTER_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wcm9ncmVzc2Jhci9yb3V0ZXIvc3JjL25nLXByb2dyZXNzLXJvdXRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFzQixNQUFNLGlCQUFpQixDQUFDO0FBQ2hJLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQWlCLE1BQU0saUJBQWlCLENBQUM7QUFDNUQsT0FBTyxFQUFnRCx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3pIO0FBRWdDO0FBQXVDO0FBRXRDO0FBSGpDO0FBQ0E7QUFDQSxHQUFHOzs7O0FBQ0gsU0FBUyxXQUFXLENBQUMsV0FBa0IsRUFBRSxNQUEyQjtBQUFJLElBQ3RFLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNsQixJQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLFdBQVcsWUFBWSxLQUFLLENBQUMsQ0FBQztBQUN0RixJQUFFLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUtELE1BQU0sT0FBTyxnQkFBZ0I7QUFDN0IsSUFPRSxZQUFZLFFBQW9CLEVBQUUsTUFBYyxFQUFpRCxNQUE4QjtBQUNqSSxRQVJtQixZQUFPLEdBQXlCO0FBQ25ELFlBQUksRUFBRSxFQUFFLE1BQU07QUFDZCxZQUFJLEtBQUssRUFBRSxDQUFDO0FBQ1osWUFBSSxXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUM7QUFDbEMsWUFBSSxjQUFjLEVBQUUsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDO0FBQ3RFLFNBQUcsQ0FBQztBQUNKLFFBRUksSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxpQ0FBSyxJQUFJLENBQUMsT0FBTyxHQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4RSxRQUFJLE1BQU0sV0FBVyxHQUFrQixRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckUsUUFDSSxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMvQixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQy9CLENBQUM7QUFDTixRQUNJLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDbEMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3pCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDbEMsQ0FBQztBQUNOLFFBQ0ksTUFBTSxZQUFZLEdBQXdCLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDNUcsUUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQzFELFNBQVMsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQzdHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBQ0g7d05BQUM7QUFDRCxpUkE3Qks7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFJSSxZQWhCUCxVQUFVO2FBYWpCLGJBYnFCLFlBSGQsTUFBTTtDQWdCSCxFQUFFLE1BQU0sY0FDbkIsdkJBakJrQiw0Q0EwQmtDLFFBQVEsWUFBSSxNQUFNLFNBQUMseUJBQXlCO0FBQVE7Ozs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25TdGFydCwgTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVycm9yLCBSb3V0ZXJFdmVudCwgRXZlbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCwgZGVsYXksIHN3aXRjaE1hcCwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTmdQcm9ncmVzcywgTmdQcm9ncmVzc1JlZiB9IGZyb20gJ25neC1wcm9ncmVzc2Jhcic7XG5pbXBvcnQgeyBOZ1Byb2dyZXNzUm91dGVyQ29uZmlnLCBQcm9ncmVzc1JvdXRlckNvbmZpZywgTkdfUFJPR1JFU1NfUk9VVEVSX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3Mtcm91dGVyLmludGVyZmFjZSc7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSByb3V0ZXIgZXZlbnQgdHlwZSBleGlzdHMgaW4gYW4gYXJyYXkgb2Ygcm91dGVyIGV2ZW50IHR5cGVzXG4gKi9cbmZ1bmN0aW9uIGV2ZW50RXhpc3RzKHJvdXRlckV2ZW50OiBFdmVudCwgZXZlbnRzOiBUeXBlPFJvdXRlckV2ZW50PltdKTogYm9vbGVhbiB7XG4gIGxldCByZXMgPSBmYWxzZTtcbiAgZXZlbnRzLm1hcCgoZXZlbnQ6IFR5cGU8Um91dGVyRXZlbnQ+KSA9PiByZXMgPSByZXMgfHwgcm91dGVyRXZlbnQgaW5zdGFuY2VvZiBldmVudCk7XG4gIHJldHVybiByZXM7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NSb3V0ZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc6IFByb2dyZXNzUm91dGVyQ29uZmlnID0ge1xuICAgIGlkOiAncm9vdCcsXG4gICAgZGVsYXk6IDAsXG4gICAgc3RhcnRFdmVudHM6IFtOYXZpZ2F0aW9uU3RhcnRdLFxuICAgIGNvbXBsZXRlRXZlbnRzOiBbTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVycm9yXVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb2dyZXNzOiBOZ1Byb2dyZXNzLCByb3V0ZXI6IFJvdXRlciwgQE9wdGlvbmFsKCkgQEluamVjdChOR19QUk9HUkVTU19ST1VURVJfQ09ORklHKSBjb25maWc6IE5nUHJvZ3Jlc3NSb3V0ZXJDb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWcgPyB7Li4udGhpcy5fY29uZmlnLCAuLi5jb25maWd9IDogdGhpcy5fY29uZmlnO1xuICAgIGNvbnN0IHByb2dyZXNzUmVmOiBOZ1Byb2dyZXNzUmVmID0gcHJvZ3Jlc3MucmVmKHRoaXMuX2NvbmZpZy5pZCk7XG5cbiAgICBjb25zdCBzdGFydFByb2dyZXNzID0gb2Yoe30pLnBpcGUoXG4gICAgICB0YXAoKCkgPT4gcHJvZ3Jlc3NSZWYuc3RhcnQoKSlcbiAgICApO1xuXG4gICAgY29uc3QgY29tcGxldGVQcm9ncmVzcyA9IG9mKHt9KS5waXBlKFxuICAgICAgZGVsYXkodGhpcy5fY29uZmlnLmRlbGF5KSxcbiAgICAgIHRhcCgoKSA9PiBwcm9ncmVzc1JlZi5jb21wbGV0ZSgpKVxuICAgICk7XG5cbiAgICBjb25zdCBmaWx0ZXJFdmVudHM6IFR5cGU8Um91dGVyRXZlbnQ+W10gPSBbLi4udGhpcy5fY29uZmlnLnN0YXJ0RXZlbnRzLCAuLi50aGlzLl9jb25maWcuY29tcGxldGVFdmVudHNdO1xuXG4gICAgcm91dGVyLmV2ZW50cy5waXBlKFxuICAgICAgZmlsdGVyKChldmVudDogRXZlbnQpID0+IGV2ZW50RXhpc3RzKGV2ZW50LCBmaWx0ZXJFdmVudHMpKSxcbiAgICAgIHN3aXRjaE1hcCgoZXZlbnQ6IEV2ZW50KSA9PiBldmVudEV4aXN0cyhldmVudCwgdGhpcy5fY29uZmlnLnN0YXJ0RXZlbnRzKSA/IHN0YXJ0UHJvZ3Jlc3MgOiBjb21wbGV0ZVByb2dyZXNzKVxuICAgICkuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==