import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';
import * as i2 from '@angular/router';
import { NavigationStart, NavigationEnd, NavigationCancel, NavigationError, Router } from '@angular/router';
import { of } from 'rxjs';
import { tap, delay, filter, switchMap } from 'rxjs/operators';
import * as i1 from 'ngx-progressbar';
import { NgProgress } from 'ngx-progressbar';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-progressbar';
import * as ɵngcc2 from '@angular/router';
const NG_PROGRESS_ROUTER_CONFIG = new InjectionToken('ngProgressRouterConfig');

/**
 * Check if a router event type exists in an array of router event types
 */
function eventExists(routerEvent, events) {
    let res = false;
    events.map((event) => res = res || routerEvent instanceof event);
    return res;
}
class NgProgressRouter {
    constructor(progress, router, config) {
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
        const progressRef = progress.ref(this._config.id);
        const startProgress = of({}).pipe(tap(() => progressRef.start()));
        const completeProgress = of({}).pipe(delay(this._config.delay), tap(() => progressRef.complete()));
        const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];
        router.events.pipe(filter((event) => eventExists(event, filterEvents)), switchMap((event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)).subscribe();
    }
}
NgProgressRouter.ɵfac = function NgProgressRouter_Factory(t) { return new (t || NgProgressRouter)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(NG_PROGRESS_ROUTER_CONFIG, 8)); };
NgProgressRouter.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgProgressRouter_Factory() { return new NgProgressRouter(i0.ɵɵinject(i1.NgProgress), i0.ɵɵinject(i2.Router), i0.ɵɵinject(NG_PROGRESS_ROUTER_CONFIG, 8)); }, token: NgProgressRouter, providedIn: "root" });
NgProgressRouter.ctorParameters = () => [
    { type: NgProgress },
    { type: Router },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_ROUTER_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgProgressRouter, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: ɵngcc2.Router }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_ROUTER_CONFIG]
            }] }]; }, null); })();

class NgProgressRouterModule {
    // Inject the service to activate it
    constructor(ngProgressRouter) {
    }
    static withConfig(config) {
        return {
            ngModule: NgProgressRouterModule,
            providers: [
                { provide: NG_PROGRESS_ROUTER_CONFIG, useValue: config }
            ]
        };
    }
}
NgProgressRouterModule.ɵfac = function NgProgressRouterModule_Factory(t) { return new (t || NgProgressRouterModule)(ɵngcc0.ɵɵinject(NgProgressRouter)); };
NgProgressRouterModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgProgressRouterModule });
NgProgressRouterModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
NgProgressRouterModule.ctorParameters = () => [
    { type: NgProgressRouter }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgProgressRouterModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: NgProgressRouter }]; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NG_PROGRESS_ROUTER_CONFIG, NgProgressRouterModule, NgProgressRouter as ɵa };

//# sourceMappingURL=ngx-progressbar-router.js.map