{"version":3,"file":"ngx-progressbar-router.js","sources":["../../../projects/ngx-progressbar/router/src/ng-progress-router.interface.ts","../../../projects/ngx-progressbar/router/src/ng-progress-router.service.ts","../../../projects/ngx-progressbar/router/src/ng-progress-router.module.ts","../../../projects/ngx-progressbar/router/src/ngx-progressbar-router.ts"],"names":[],"mappings":";;;;;;;;;;;;MAYa,yBAAyB,GAAG,IAAI,cAAc,CAAyB,wBAAwB;AAC5G;ACNA;AACA;AACA;AACA,SAAS,WAAW,CAAC,WAAkB,EAAE,MAA2B;AAAI,IACtE,IAAI,GAAG,GAAG,KAAK,CAAC;AAClB,IAAE,MAAM,CAAC,GAAG,CAAC,CAAC,KAAwB,KAAK,GAAG,GAAG,GAAG,IAAI,WAAW,YAAY,KAAK,CAAC,CAAC;AACtF,IAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD,MAIa,gBAAgB;AAC7B,IAOE,YAAY,QAAoB,EAAE,MAAc,EAAiD,MAA8B;AACjI,QARmB,YAAO,GAAyB;AACnD,YAAI,EAAE,EAAE,MAAM;AACd,YAAI,KAAK,EAAE,CAAC;AACZ,YAAI,WAAW,EAAE,CAAC,eAAe,CAAC;AAClC,YAAI,cAAc,EAAE,CAAC,aAAa,EAAE,gBAAgB,EAAE,eAAe,CAAC;AACtE,SAAG,CAAC;AACJ,QAEI,IAAI,CAAC,OAAO,GAAG,MAAM,mCAAO,IAAI,CAAC,OAAO,GAAK,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC;AACxE,QAAI,MAAM,WAAW,GAAkB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACrE,QACI,MAAM,aAAa,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAC/B,GAAG,CAAC,MAAM,WAAW,CAAC,KAAK,EAAE,CAAC,CAC/B,CAAC;AACN,QACI,MAAM,gBAAgB,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAClC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EACzB,GAAG,CAAC,MAAM,WAAW,CAAC,QAAQ,EAAE,CAAC,CAClC,CAAC;AACN,QACI,MAAM,YAAY,GAAwB,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC5G,QACI,MAAM,CAAC,MAAM,CAAC,IAAI,CAChB,MAAM,CAAC,CAAC,KAAY,KAAK,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,EAC1D,SAAS,CAAC,CAAC,KAAY,KAAK,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,aAAa,GAAG,gBAAgB,CAAC,CAC7G,CAAC,SAAS,EAAE,CAAC;AAClB,KAAG;AACH;wNAAC;AACD,8QA7BK;AAAC;EAHL,UAAU,SAAC,rBAII,YAhBP,UAAU;aAajB,bAbqB,YAHd,MAAM;CAgBH,EAAE,MAAM,cACnB,vBAjBkB,4CA0BkC,QAAQ,YAAI,MAAM,SAAC,yBAAyB;AAAQ;;;;;;;;;;;kCAAE;AAAC;AAAC,MCtBhG,sBAAsB;AACnC;AAEC,IAAC,YAAY,gBAAkC;AAChD,KAAG;AACH,IACE,OAAO,UAAU,CAAC,MAA8B;AAAI,QAClD,OAAO;AACX,YAAM,QAAQ,EAAE,sBAAsB;AACtC,YAAM,SAAS,EAAE;AACjB,gBAAQ,EAAE,OAAO,EAAE,yBAAyB,EAAE,QAAQ,EAAE,MAAM,EAAE;AAChE,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;kDAfC,QAAQ,SAAC,EAAE;;wEACP;AAAC;AAES,YALN,gBAAgB;AAAG;;;;0EAAE;AAAC;ACF/B;AACA;AACA;AACA;AACA;AAEuD","sourcesContent":["import { InjectionToken, Type } from '@angular/core';\nimport { RouterEvent } from '@angular/router';\n\nexport interface ProgressRouterConfig {\n  id: string;\n  delay: number;\n  startEvents: Type<RouterEvent>[];\n  completeEvents: Type<RouterEvent>[];\n}\n\nexport type NgProgressRouterConfig = Partial<ProgressRouterConfig>;\n\nexport const NG_PROGRESS_ROUTER_CONFIG = new InjectionToken<NgProgressRouterConfig>('ngProgressRouterConfig');\n","import { Injectable, Optional, Inject, Type } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RouterEvent, Event } from '@angular/router';\nimport { of } from 'rxjs';\nimport { tap, delay, switchMap, filter } from 'rxjs/operators';\nimport { NgProgress, NgProgressRef } from 'ngx-progressbar';\nimport { NgProgressRouterConfig, ProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\n\n/**\n * Check if a router event type exists in an array of router event types\n */\nfunction eventExists(routerEvent: Event, events: Type<RouterEvent>[]): boolean {\n  let res = false;\n  events.map((event: Type<RouterEvent>) => res = res || routerEvent instanceof event);\n  return res;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgProgressRouter {\n  private readonly _config: ProgressRouterConfig = {\n    id: 'root',\n    delay: 0,\n    startEvents: [NavigationStart],\n    completeEvents: [NavigationEnd, NavigationCancel, NavigationError]\n  };\n\n  constructor(progress: NgProgress, router: Router, @Optional() @Inject(NG_PROGRESS_ROUTER_CONFIG) config: NgProgressRouterConfig) {\n    this._config = config ? {...this._config, ...config} : this._config;\n    const progressRef: NgProgressRef = progress.ref(this._config.id);\n\n    const startProgress = of({}).pipe(\n      tap(() => progressRef.start())\n    );\n\n    const completeProgress = of({}).pipe(\n      delay(this._config.delay),\n      tap(() => progressRef.complete())\n    );\n\n    const filterEvents: Type<RouterEvent>[] = [...this._config.startEvents, ...this._config.completeEvents];\n\n    router.events.pipe(\n      filter((event: Event) => eventExists(event, filterEvents)),\n      switchMap((event: Event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)\n    ).subscribe();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\nimport { NgProgressRouter } from './ng-progress-router.service';\n\n@NgModule({})\nexport class NgProgressRouterModule {\n\n  // Inject the service to activate it\n  constructor(ngProgressRouter: NgProgressRouter) {\n  }\n\n  static withConfig(config: NgProgressRouterConfig): ModuleWithProviders<NgProgressRouterModule> {\n    return {\n      ngModule: NgProgressRouterModule,\n      providers: [\n        { provide: NG_PROGRESS_ROUTER_CONFIG, useValue: config }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {NgProgressRouter as Éµa} from './ng-progress-router.service';"]}