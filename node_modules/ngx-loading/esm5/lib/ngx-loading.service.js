/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { NgxLoadingConfig } from './ngx-loading-config';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var NgxLoadingService = /** @class */ (function () {
    function NgxLoadingService(config) {
        this.config = config;
        this.loadingConfig = this.config || new NgxLoadingConfig();
    }
    /** @nocollapse */
    NgxLoadingService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['loadingConfig',] }] }
    ]; };
    /** @nocollapse */ NgxLoadingService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxLoadingService_Factory() { return new NgxLoadingService(i0.ɵɵinject("loadingConfig", 8)); }, token: NgxLoadingService, providedIn: "root" });
NgxLoadingService.ɵfac = function NgxLoadingService_Factory(t) { return new (t || NgxLoadingService)(ɵngcc0.ɵɵinject('loadingConfig', 8)); };
NgxLoadingService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxLoadingService, factory: function (t) { return NgxLoadingService.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxLoadingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: ['loadingConfig']
            }] }]; }, null); })();
    return NgxLoadingService;
}());
export { NgxLoadingService };
if (false) {
    /** @type {?} */
    NgxLoadingService.prototype.loadingConfig;
    /** @type {?} */
    NgxLoadingService.prototype.config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRpbmcuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmd4LWxvYWRpbmcvbGliL25neC1sb2FkaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQXFCLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0U7O0FBQ0E7QUFHYSxJQUdYLDJCQUF5RCxNQUF5QjtBQUNwRixRQUQyRCxXQUFNLEdBQU4sTUFBTSxDQUFtQjtBQUFFLFFBQ2xGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLGdCQUFnQixFQUFFLENBQUM7QUFDL0QsSUFBRSxDQUFDLEFBTE87QUFBRTs4QkFIWCxVQUFVLFNBQUMsakRBSVY7U0FIQSxVQUFVLEVBQUUsTUFBTSxtQkFDbkIsOUNBSWtCLGdEQUFKLFFBQVEsWUFBSSxNQUFNLFNBQUMsZUFBZTtBQUFTO0FBQVc7Ozs7Ozs7Ozs7Ozs7a0NBSW1GO0FBQUUsNEJBYjFKO0FBQUcsQ0FZRixBQVRELElBU0M7QUFDRCxTQVBhLGlCQUFpQjtBQUM3QjtBQUFjO0FBQXNCLElBQW5DLDBDQUF3QztBQUMxQztBQUNvQixJQUFOLG1DQUFzRTs7QUFUQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVRBLEFBWUEsQUFUQSxBQVNBLEFBTkEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJTmd4TG9hZGluZ0NvbmZpZywgTmd4TG9hZGluZ0NvbmZpZyB9IGZyb20gJy4vbmd4LWxvYWRpbmctY29uZmlnJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neExvYWRpbmdTZXJ2aWNlIHtcclxuICBwdWJsaWMgbG9hZGluZ0NvbmZpZzogSU5neExvYWRpbmdDb25maWc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoJ2xvYWRpbmdDb25maWcnKSBwcml2YXRlIGNvbmZpZzogSU5neExvYWRpbmdDb25maWcpIHtcclxuICAgIHRoaXMubG9hZGluZ0NvbmZpZyA9IHRoaXMuY29uZmlnIHx8IG5ldyBOZ3hMb2FkaW5nQ29uZmlnKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==