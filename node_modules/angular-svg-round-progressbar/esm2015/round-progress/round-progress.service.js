import { Injectable, Inject, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
const DEGREE_IN_RADIANS = Math.PI / 180;
export class RoundProgressService {
    constructor(document) {
        this.supportsSvg = !!(document &&
            document.createElementNS &&
            document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);
        this.base = document && document.head.querySelector('base');
        this.hasPerf =
            typeof window !== 'undefined' &&
                window.performance &&
                window.performance.now &&
                typeof window.performance.now() === 'number';
    }
    /**
     * Resolves a SVG color against the page's `base` tag.
     */
    resolveColor(color) {
        if (this.base && this.base.href) {
            const hashIndex = color.indexOf('#');
            if (hashIndex > -1 && color.indexOf('url') > -1) {
                return color.slice(0, hashIndex) + location.href + color.slice(hashIndex);
            }
        }
        return color;
    }
    /**
     * Generates a timestamp.
     */
    getTimestamp() {
        return this.hasPerf ? window.performance.now() : Date.now();
    }
    /**
     * Generates the value for an SVG arc.
     * @param current       Current value.
     * @param total         Maximum value.
     * @param pathRadius    Radius of the SVG path.
     * @param elementRadius Radius of the SVG container.
     * @param isSemicircle  Whether the element should be a semicircle.
     */
    getArc(current, total, pathRadius, elementRadius, isSemicircle = false) {
        const value = Math.max(0, Math.min(current || 0, total));
        const maxAngle = isSemicircle ? 180 : 359.9999;
        const percentage = total === 0 ? maxAngle : (value / total) * maxAngle;
        const start = this._polarToCartesian(elementRadius, pathRadius, percentage);
        const end = this._polarToCartesian(elementRadius, pathRadius, 0);
        const arcSweep = percentage <= 180 ? 0 : 1;
        return `M ${start} A ${pathRadius} ${pathRadius} 0 ${arcSweep} 0 ${end}`;
    }
    /**
     * Converts polar cooradinates to Cartesian.
     * @param elementRadius  Radius of the wrapper element.
     * @param pathRadius     Radius of the path being described.
     * @param angleInDegrees Degree to be converted.
     */
    _polarToCartesian(elementRadius, pathRadius, angleInDegrees) {
        const angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;
        const x = elementRadius + pathRadius * Math.cos(angleInRadians);
        const y = elementRadius + pathRadius * Math.sin(angleInRadians);
        return x + ' ' + y;
    }
}
RoundProgressService.ɵfac = function RoundProgressService_Factory(t) { return new (t || RoundProgressService)(ɵngcc0.ɵɵinject(DOCUMENT, 8)); };
RoundProgressService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoundProgressService_Factory() { return new RoundProgressService(i0.ɵɵinject(i1.DOCUMENT, 8)); }, token: RoundProgressService, providedIn: "root" });
RoundProgressService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RoundProgressService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,