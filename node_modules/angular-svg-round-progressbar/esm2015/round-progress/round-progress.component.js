import { Component, Input, Output, NgZone, EventEmitter, ViewChild, Inject, ChangeDetectionStrategy, } from '@angular/core';
import { RoundProgressService } from './round-progress.service';
import { ROUND_PROGRESS_DEFAULTS } from './round-progress.config';
import { RoundProgressEase } from './round-progress.ease';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './round-progress.service';
import * as ɵngcc2 from './round-progress.ease';

const _c0 = ["path"];
export class RoundProgressComponent {
    constructor(service, easing, defaults, ngZone) {
        this.service = service;
        this.easing = easing;
        this.defaults = defaults;
        this.ngZone = ngZone;
        /** Radius of the circle. */
        this.radius = this.defaults.radius;
        /** Name of the easing function to use when animating. */
        this.animation = this.defaults.animation;
        /** Time in millisconds by which to delay the animation. */
        this.animationDelay = this.defaults.animationDelay;
        /** Duration of the animation. */
        this.duration = this.defaults.duration;
        /** Width of the circle's stroke. */
        this.stroke = this.defaults.stroke;
        /** Color of the circle. */
        this.color = this.defaults.color;
        /** Background color of the circle. */
        this.background = this.defaults.background;
        /** Whether the circle should take up the width of its parent. */
        this.responsive = this.defaults.responsive;
        /** Whether the circle is filling up clockwise. */
        this.clockwise = this.defaults.clockwise;
        /** Whether to render a semicircle. */
        this.semicircle = this.defaults.semicircle;
        /** Whether the tip of the progress should be rounded off. */
        this.rounded = this.defaults.rounded;
        /** Emits when a new value has been rendered. */
        this.onRender = new EventEmitter();
        this.lastAnimationId = 0;
    }
    /** Animates a change in the current value. */
    _animateChange(from, to) {
        if (typeof from !== 'number') {
            from = 0;
        }
        to = this._clamp(to);
        from = this._clamp(from);
        const self = this;
        const changeInValue = to - from;
        const duration = self.duration;
        // Avoid firing change detection for each of the animation frames.
        self.ngZone.runOutsideAngular(() => {
            const start = () => {
                const startTime = self.service.getTimestamp();
                const id = ++self.lastAnimationId;
                requestAnimationFrame(function animation() {
                    const currentTime = Math.min(self.service.getTimestamp() - startTime, duration);
                    const value = self.easing[self.animation](currentTime, from, changeInValue, duration);
                    self._setPath(value);
                    self.onRender.emit(value);
                    if (id === self.lastAnimationId && currentTime < duration) {
                        requestAnimationFrame(animation);
                    }
                });
            };
            if (this.animationDelay > 0) {
                setTimeout(start, this.animationDelay);
            }
            else {
                start();
            }
        });
    }
    /** Sets the path dimensions. */
    _setPath(value) {
        if (this.path) {
            const arc = this.service.getArc(value, this.max, this.radius - this.stroke / 2, this.radius, this.semicircle);
            this.path.nativeElement.setAttribute('d', arc);
        }
    }
    /** Clamps a value between the maximum and 0. */
    _clamp(value) {
        return Math.max(0, Math.min(value || 0, this.max));
    }
    /** Determines the SVG transforms for the <path> node. */
    getPathTransform() {
        const diameter = this._getDiameter();
        if (this.semicircle) {
            return this.clockwise
                ? `translate(0, ${diameter}) rotate(-90)`
                : `translate(${diameter + ',' + diameter}) rotate(90) scale(-1, 1)`;
        }
        else if (!this.clockwise) {
            return `scale(-1, 1) translate(-${diameter} 0)`;
        }
    }
    /** Resolves a color through the service. */
    resolveColor(color) {
        return this.service.resolveColor(color);
    }
    /** Change detection callback. */
    ngOnChanges(changes) {
        if (changes.current) {
            this._animateChange(changes.current.previousValue, changes.current.currentValue);
        }
        else {
            this._setPath(this.current);
        }
    }
    /** Diameter of the circle. */
    _getDiameter() {
        return this.radius * 2;
    }
    /** The CSS height of the wrapper element. */
    _getElementHeight() {
        if (!this.responsive) {
            return (this.semicircle ? this.radius : this._getDiameter()) + 'px';
        }
    }
    /** Viewbox for the SVG element. */
    _getViewBox() {
        const diameter = this._getDiameter();
        return `0 0 ${diameter} ${this.semicircle ? this.radius : diameter}`;
    }
    /** Bottom padding for the wrapper element. */
    _getPaddingBottom() {
        if (this.responsive) {
            return this.semicircle ? '50%' : '100%';
        }
    }
}
RoundProgressComponent.ɵfac = function RoundProgressComponent_Factory(t) { return new (t || RoundProgressComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RoundProgressService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.RoundProgressEase), ɵngcc0.ɵɵdirectiveInject(ROUND_PROGRESS_DEFAULTS), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
RoundProgressComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RoundProgressComponent, selectors: [["round-progress"]], viewQuery: function RoundProgressComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.path = _t.first);
    } }, hostAttrs: ["role", "progressbar"], hostVars: 10, hostBindings: function RoundProgressComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-valuemin", ctx.current)("aria-valuemax", ctx.max);
        ɵngcc0.ɵɵstyleProp("width", ctx.responsive ? "" : ctx._getDiameter() + "px")("height", ctx._getElementHeight())("padding-bottom", ctx._getPaddingBottom());
        ɵngcc0.ɵɵclassProp("responsive", ctx.responsive);
    } }, inputs: { radius: "radius", animation: "animation", animationDelay: "animationDelay", duration: "duration", stroke: "stroke", color: "color", background: "background", responsive: "responsive", clockwise: "clockwise", semicircle: "semicircle", rounded: "rounded", current: "current", max: "max" }, outputs: { onRender: "onRender" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 15, consts: [["xmlns", "http://www.w3.org/2000/svg"], ["fill", "none"], ["path", ""]], template: function RoundProgressComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(0, "svg", 0);
        ɵngcc0.ɵɵelement(1, "circle", 1);
        ɵngcc0.ɵɵelement(2, "path", 1, 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("viewBox", ctx._getViewBox());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("stroke", ctx.resolveColor(ctx.background))("stroke-width", ctx.stroke);
        ɵngcc0.ɵɵattribute("cx", ctx.radius)("cy", ctx.radius)("r", ctx.radius - ctx.stroke / 2);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("stroke-width", ctx.stroke)("stroke", ctx.resolveColor(ctx.color))("stroke-linecap", ctx.rounded ? "round" : "");
        ɵngcc0.ɵɵattribute("transform", ctx.getPathTransform());
    } }, styles: ["[_nghost-%COMP%]{display:block;overflow:hidden;position:relative}.responsive[_nghost-%COMP%]{padding-bottom:100%;width:100%}.responsive[_nghost-%COMP%] > svg[_ngcontent-%COMP%]{height:100%;left:0;position:absolute;top:0;width:100%}"], changeDetection: 0 });
RoundProgressComponent.ctorParameters = () => [
    { type: RoundProgressService },
    { type: RoundProgressEase },
    { type: undefined, decorators: [{ type: Inject, args: [ROUND_PROGRESS_DEFAULTS,] }] },
    { type: NgZone }
];
RoundProgressComponent.propDecorators = {
    path: [{ type: ViewChild, args: ['path',] }],
    current: [{ type: Input }],
    max: [{ type: Input }],
    radius: [{ type: Input }],
    animation: [{ type: Input }],
    animationDelay: [{ type: Input }],
    duration: [{ type: Input }],
    stroke: [{ type: Input }],
    color: [{ type: Input }],
    background: [{ type: Input }],
    responsive: [{ type: Input }],
    clockwise: [{ type: Input }],
    semicircle: [{ type: Input }],
    rounded: [{ type: Input }],
    onRender: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RoundProgressComponent, [{
        type: Component,
        args: [{
                selector: 'round-progress',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "<svg xmlns=\"http://www.w3.org/2000/svg\" [attr.viewBox]=\"_getViewBox()\">\n  <circle\n    fill=\"none\"\n    [attr.cx]=\"radius\"\n    [attr.cy]=\"radius\"\n    [attr.r]=\"radius - stroke / 2\"\n    [style.stroke]=\"resolveColor(background)\"\n    [style.stroke-width]=\"stroke\"/>\n\n  <path\n    #path\n    fill=\"none\"\n    [style.stroke-width]=\"stroke\"\n    [style.stroke]=\"resolveColor(color)\"\n    [style.stroke-linecap]=\"rounded ? 'round' : ''\"\n    [attr.transform]=\"getPathTransform()\"/>\n</svg>\n",
                host: {
                    role: 'progressbar',
                    '[attr.aria-valuemin]': 'current',
                    '[attr.aria-valuemax]': 'max',
                    '[style.width]': 'responsive ? "" : _getDiameter() + "px"',
                    '[style.height]': '_getElementHeight()',
                    '[style.padding-bottom]': '_getPaddingBottom()',
                    '[class.responsive]': 'responsive'
                },
                styles: [":host{display:block;overflow:hidden;position:relative}:host(.responsive){padding-bottom:100%;width:100%}:host(.responsive)>svg{height:100%;left:0;position:absolute;top:0;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.RoundProgressService }, { type: ɵngcc2.RoundProgressEase }, { type: undefined, decorators: [{
                type: Inject,
                args: [ROUND_PROGRESS_DEFAULTS]
            }] }, { type: ɵngcc0.NgZone }]; }, { radius: [{
            type: Input
        }], animation: [{
            type: Input
        }], animationDelay: [{
            type: Input
        }], duration: [{
            type: Input
        }], stroke: [{
            type: Input
        }], color: [{
            type: Input
        }], background: [{
            type: Input
        }], responsive: [{
            type: Input
        }], clockwise: [{
            type: Input
        }], semicircle: [{
            type: Input
        }], rounded: [{
            type: Input
        }], onRender: [{
            type: Output
        }], path: [{
            type: ViewChild,
            args: ['path']
        }], current: [{
            type: Input
        }], max: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,