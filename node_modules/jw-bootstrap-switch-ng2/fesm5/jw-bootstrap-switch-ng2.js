import { Component, Input, Output, HostListener, forwardRef, EventEmitter, ViewChild, Renderer2, ChangeDetectorRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';

var _c0 = ["container"];
var _c1 = ["on"];
var _c2 = ["label"];
var _c3 = ["off"];
var callback = function () {
};
/** @type {?} */
var CUSTOM_INPUT = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return JwBootstrapSwitchNg2Component; }),
    multi: true
};
var JwBootstrapSwitchNg2Component = /** @class */ (function () {
    function JwBootstrapSwitchNg2Component(cd, render) {
        this.cd = cd;
        this.render = render;
        // Defining Default Options for Switch
        this.handleWidth = 0;
        this.labelWidth = 0;
        this.labelText = '';
        this.inverse = false;
        this.baseClass = 'bootstrap-switch';
        this.onText = 'ON';
        this.offText = 'OFF';
        this.disabled = false;
        this.readonly = false;
        this._focused = false;
        this._size = 'normal';
        this._animate = true;
        this._innerAnimate = true;
        this._indeterminate = false;
        this._onColor = 'primary';
        this._offColor = 'default';
        this._wrapperClass = 'wrapper';
        this._innerState = false;
        this._innerHandleWidth = 'auto';
        this._innerLabelWidth = 'auto';
        this._dragStart = null;
        this._dragEnd = null;
        this._onTouchedCallback = callback;
        this._onChangeCallback = callback;
        this.changeState = new EventEmitter();
    }
    /**
     * @private
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$on = /**
     * @private
     * @return {?}
     */
    function () {
        return this.on.nativeElement;
    };
    /**
     * @private
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$off = /**
     * @private
     * @return {?}
     */
    function () {
        return this.off.nativeElement;
    };
    /**
     * @private
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$label = /**
     * @private
     * @return {?}
     */
    function () {
        return this.label.nativeElement;
    };
    /**
     * @private
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$container = /**
     * @private
     * @return {?}
     */
    function () {
        return this.container.nativeElement;
    };
    /**
     * @description:  Function to set the Classes for the Wrapper Div
     * @returns string
     */
    /**
     * \@description: Function to set the Classes for the Wrapper Div
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getWrapperClasses = /**
     * \@description: Function to set the Classes for the Wrapper Div
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var output = this.baseClass + ' ' + this.baseClass + '-' + this._wrapperClass;
        if (this._focused) {
            output += ' ' + this.baseClass + '-focused';
        }
        if (this.readonly) {
            output += ' ' + this.baseClass + '-readonly';
        }
        if (this._size != null) {
            output += ' ' + this.baseClass + '-' + this._size;
        }
        if (this._innerState) {
            output += ' ' + this.baseClass + '-on';
        }
        else {
            output += ' ' + this.baseClass + '-off';
        }
        if (this._animate) {
            output += ' ' + this.baseClass + '-animate';
        }
        if (this.disabled) {
            output += ' ' + this.baseClass + '-disabled';
        }
        if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
            output += ' ' + this.baseClass + '-indeterminate';
        }
        if (this.inverse) {
            output += ' ' + this.baseClass + '-inverse';
        }
        return output;
    };
    /**
     * @description Function to set the css classes for #on
     * @returns string
     */
    /**
     * \@description Function to set the css classes for #on
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getOnClasses = /**
     * \@description Function to set the css classes for #on
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var output = this.baseClass + '-handle-on';
        if (this._onColor) {
            output += ' ' + this.baseClass + '-' + this._onColor;
        }
        return output;
    };
    /**
     * @description Function to set the css classes for #off
     * @returns string
     */
    /**
     * \@description Function to set the css classes for #off
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getOffClasses = /**
     * \@description Function to set the css classes for #off
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var output = this.baseClass + '-handle-off';
        if (this._offColor) {
            output += ' ' + this.baseClass + '-' + this._offColor;
        }
        return output;
    };
    /**
     * @description  Function set the marging of the #label when change the state
     * @returns string
     */
    /**
     * \@description Function set the marging of the #label when change the state
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getLabelMarginLeft = /**
     * \@description Function set the marging of the #label when change the state
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var width = (this.inverse) ? -this.handleWidth : 0;
        if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
            width = -(this.handleWidth / 2);
        }
        else if (this._dragEnd) {
            width = this._dragEnd;
        }
        else if (!this._innerState) {
            if (!this.inverse) {
                width = -this.handleWidth;
            }
            else {
                width = 0;
            }
        }
        return width + 'px';
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['setLabelText'] ||
            changes['setOnText'] ||
            changes['setHandleWidth'] ||
            changes['setLabelWidth'] ||
            changes['setOffText'] ||
            changes['setSize']) {
            this.calculateWith(true);
        }
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.calculateWith();
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled && !this.readonly && !this._dragEnd) {
            this.setStateValue(!this._innerState);
        }
        else if (this._dragEnd) {
            this._dragEnd = null;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.which || this.disabled || this.readonly) {
            return;
        }
        switch (e.which) {
            case 37:
                e.preventDefault();
                e.stopImmediatePropagation();
                this.setStateValue(false);
                break;
            case 39:
                e.preventDefault();
                e.stopImmediatePropagation();
                this.setStateValue(true);
                break;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onDragStart = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.target === this.$label()) {
            if (this._dragStart || this.disabled || this.readonly) {
                return;
            }
            e.preventDefault();
            e.stopPropagation();
            this._dragStart = (e.pageX || e.touches[0].pageX) - parseInt(this.$container().style.marginLeft, 10);
            if (this._animate) {
                this._animate = !this._animate;
            }
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onDragMove = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._dragStart) {
            e.preventDefault();
            /** @type {?} */
            var difference = (e.pageX || e.touches[0].pageX) - this._dragStart;
            if (difference < -Number(this.handleWidth) || difference > 0) {
                return;
            }
            this._dragEnd = difference;
        }
    };
    /**
     * @private
     * @param {?} e
     * @param {?=} removeDragEnd
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onDragEnd = /**
     * @private
     * @param {?} e
     * @param {?=} removeDragEnd
     * @return {?}
     */
    function (e, removeDragEnd) {
        if (removeDragEnd === void 0) { removeDragEnd = false; }
        if (this._dragStart) {
            e.preventDefault();
            e.stopPropagation();
            if (this._dragEnd) {
                /** @type {?} */
                var state = this._dragEnd > -(Number(this.handleWidth) / 2);
                this.setStateValue((this.inverse) ? !state : state);
            }
            this._dragStart = null;
            if (removeDragEnd) {
                this._dragEnd = null;
            }
            if (this._innerAnimate) {
                this._animate = true;
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onTouchStart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragStart(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragStart(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onTouchMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragMove(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragMove(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseUp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragEnd(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onTouchEnd = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragEnd(e, true);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseLeave = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragEnd(e, true);
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this._focused = true;
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this._focused = false;
        this._onTouchedCallback();
    };
    /**
     * @description Function to make recalculate the size of the elements when options change
     * @param disableAnimation
     */
    /**
     * \@description Function to make recalculate the size of the elements when options change
     * @private
     * @param {?=} disableAnimation
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.calculateWith = /**
     * \@description Function to make recalculate the size of the elements when options change
     * @private
     * @param {?=} disableAnimation
     * @return {?}
     */
    function (disableAnimation) {
        var _this = this;
        if (disableAnimation === void 0) { disableAnimation = false; }
        if (disableAnimation && this._innerAnimate) {
            this._animate = false;
        }
        setTimeout(function () {
            _this.render.setStyle(_this.$on(), 'width', 'auto');
            _this.render.setStyle(_this.$off(), 'width', 'auto');
            _this.render.setStyle(_this.$label(), 'width', 'auto');
            /** @type {?} */
            var width = (_this._innerHandleWidth === 'auto')
                ? Math.max(_this.$on().offsetWidth, _this.$off().offsetWidth)
                : _this._innerHandleWidth;
            if (_this.$label().offsetWidth < width) {
                if (_this._innerLabelWidth === 'auto') {
                    _this.labelWidth = Number(width);
                }
                else {
                    _this.labelWidth = Number(_this._innerLabelWidth);
                }
            }
            else {
                if (_this._innerLabelWidth === 'auto') {
                    _this.labelWidth = _this.$label().offsetWidth;
                }
                else {
                    _this.labelWidth = Number(_this._innerLabelWidth);
                }
            }
            _this.handleWidth = Number(width);
            _this.render.setStyle(_this.$label(), 'width', _this.labelWidth + 'px');
            _this.render.setStyle(_this.$on(), 'width', _this.handleWidth + 'px');
            _this.render.setStyle(_this.$off(), 'width', _this.handleWidth + 'px');
            setTimeout(function () {
                if (disableAnimation && _this._innerAnimate) {
                    _this._animate = true;
                }
            });
            _this.cd.markForCheck();
        });
    };
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setBaseClass", {
        // Functions to set inputs and the private variables of the Switch
        set: 
        // Functions to set inputs and the private variables of the Switch
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.baseClass = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setWrapperClass", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._wrapperClass = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOffText", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.offText = (value) ? value : 'OFF';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setLabelText", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.labelText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOnText", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.onText = (value) ? value : 'ON';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setSize", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._size = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setAnimate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._animate = value;
            this._innerAnimate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOnColor", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._onColor = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOffColor", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._offColor = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setDisabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setReadOnly", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.readonly = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setIndeterminate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._indeterminate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setInverse", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.inverse = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setHandleWidth", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._innerHandleWidth = (typeof (value) !== 'undefined') ? value : 'auto';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setLabelWidth", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._innerLabelWidth = (typeof (value) !== 'undefined') ? value : 'auto';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._innerState;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v === null || typeof v === 'undefined') {
                this._indeterminate = true;
            }
            this.setStateValue(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.setStateValue = /**
     * @private
     * @param {?} v
     * @return {?}
     */
    function (v) {
        if (v !== this._innerState) {
            this._onChangeCallback(v);
            this.changeState.emit({
                previousValue: this._innerState,
                currentValue: v
            });
            this._innerState = v;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this._innerState) {
            this._innerState = value;
            this.cd.markForCheck();
        }
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchedCallback = fn;
    };
    /** @nocollapse */
    JwBootstrapSwitchNg2Component.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 }
    ]; };
    JwBootstrapSwitchNg2Component.propDecorators = {
        changeState: [{ type: Output }],
        container: [{ type: ViewChild, args: ['container',] }],
        on: [{ type: ViewChild, args: ['on',] }],
        label: [{ type: ViewChild, args: ['label',] }],
        off: [{ type: ViewChild, args: ['off',] }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onTouchMove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
        onMouseMove: [{ type: HostListener, args: ['mousemove', ['$event'],] }],
        onMouseUp: [{ type: HostListener, args: ['mouseup', ['$event'],] }],
        onTouchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }],
        setBaseClass: [{ type: Input, args: ['switch-base-class',] }],
        setWrapperClass: [{ type: Input, args: ['switch-wrapper-class',] }],
        setOffText: [{ type: Input, args: ['switch-off-text',] }],
        setLabelText: [{ type: Input, args: ['switch-label-text',] }],
        setOnText: [{ type: Input, args: ['switch-on-text',] }],
        setSize: [{ type: Input, args: ['switch-size',] }],
        setAnimate: [{ type: Input, args: ['switch-animate',] }],
        setOnColor: [{ type: Input, args: ['switch-on-color',] }],
        setOffColor: [{ type: Input, args: ['switch-off-color',] }],
        setDisabled: [{ type: Input, args: ['switch-disabled',] }],
        setReadOnly: [{ type: Input, args: ['switch-readonly',] }],
        setIndeterminate: [{ type: Input, args: ['switch-indeterminate',] }],
        setInverse: [{ type: Input, args: ['switch-inverse',] }],
        setHandleWidth: [{ type: Input, args: ['switch-handle-width',] }],
        setLabelWidth: [{ type: Input, args: ['switch-label-width',] }]
    };
JwBootstrapSwitchNg2Component.ɵfac = function JwBootstrapSwitchNg2Component_Factory(t) { return new (t || JwBootstrapSwitchNg2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
JwBootstrapSwitchNg2Component.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: JwBootstrapSwitchNg2Component, selectors: [["bSwitch"]], viewQuery: function JwBootstrapSwitchNg2Component_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
        ɵngcc0.ɵɵviewQuery(_c1, 5);
        ɵngcc0.ɵɵviewQuery(_c2, 5);
        ɵngcc0.ɵɵviewQuery(_c3, 5);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.on = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.off = _t.first);
    } }, hostBindings: function JwBootstrapSwitchNg2Component_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function JwBootstrapSwitchNg2Component_click_HostBindingHandler() { return ctx.onClick(); })("keydown", function JwBootstrapSwitchNg2Component_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })("touchstart", function JwBootstrapSwitchNg2Component_touchstart_HostBindingHandler($event) { return ctx.onTouchStart($event); })("mousedown", function JwBootstrapSwitchNg2Component_mousedown_HostBindingHandler($event) { return ctx.onMouseDown($event); })("touchmove", function JwBootstrapSwitchNg2Component_touchmove_HostBindingHandler($event) { return ctx.onTouchMove($event); })("mousemove", function JwBootstrapSwitchNg2Component_mousemove_HostBindingHandler($event) { return ctx.onMouseMove($event); })("mouseup", function JwBootstrapSwitchNg2Component_mouseup_HostBindingHandler($event) { return ctx.onMouseUp($event); })("touchend", function JwBootstrapSwitchNg2Component_touchend_HostBindingHandler($event) { return ctx.onTouchEnd($event); })("mouseleave", function JwBootstrapSwitchNg2Component_mouseleave_HostBindingHandler($event) { return ctx.onMouseLeave($event); });
    } }, inputs: { setBaseClass: ["switch-base-class", "setBaseClass"], setWrapperClass: ["switch-wrapper-class", "setWrapperClass"], setOffText: ["switch-off-text", "setOffText"], setLabelText: ["switch-label-text", "setLabelText"], setOnText: ["switch-on-text", "setOnText"], setSize: ["switch-size", "setSize"], setAnimate: ["switch-animate", "setAnimate"], setOnColor: ["switch-on-color", "setOnColor"], setOffColor: ["switch-off-color", "setOffColor"], setDisabled: ["switch-disabled", "setDisabled"], setReadOnly: ["switch-readonly", "setReadOnly"], setIndeterminate: ["switch-indeterminate", "setIndeterminate"], setInverse: ["switch-inverse", "setInverse"], setHandleWidth: ["switch-handle-width", "setHandleWidth"], setLabelWidth: ["switch-label-width", "setLabelWidth"] }, outputs: { changeState: "changeState" }, features: [ɵngcc0.ɵɵProvidersFeature([CUSTOM_INPUT]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 11, vars: 17, consts: [[3, "ngClass"], ["container", ""], [3, "innerHTML", "ngClass"], ["on", ""], ["label", ""], ["off", ""], ["type", "checkbox", 3, "ngModel", "readonly", "disabled", "ngModelChange", "focus", "blur"]], template: function JwBootstrapSwitchNg2Component_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 0, 1);
        ɵngcc0.ɵɵelement(3, "span", 2, 3);
        ɵngcc0.ɵɵelementStart(5, "span", 0, 4);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "span", 2, 5);
        ɵngcc0.ɵɵelementStart(10, "input", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function JwBootstrapSwitchNg2Component_Template_input_ngModelChange_10_listener($event) { return ctx.value = $event; })("focus", function JwBootstrapSwitchNg2Component_Template_input_focus_10_listener() { return ctx.onFocus(); })("blur", function JwBootstrapSwitchNg2Component_Template_input_blur_10_listener() { return ctx.onBlur(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("width", ctx.handleWidth + ctx.labelWidth + "px");
        ɵngcc0.ɵɵproperty("ngClass", ctx.getWrapperClasses());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.handleWidth * 2 + ctx.labelWidth + "px")("margin-left", ctx.getLabelMarginLeft());
        ɵngcc0.ɵɵproperty("ngClass", ctx.baseClass + "-container");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.inverse ? ctx.offText : ctx.onText, ɵngcc0.ɵɵsanitizeHtml)("ngClass", ctx.inverse ? ctx.getOffClasses() : ctx.getOnClasses());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ctx.baseClass + "-label");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("\u00A0", ctx.labelText, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.inverse ? ctx.onText : ctx.offText, ɵngcc0.ɵɵsanitizeHtml)("ngClass", ctx.inverse ? ctx.getOnClasses() : ctx.getOffClasses());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.value)("readonly", ctx.readonly)("disabled", ctx.disabled);
    } }, directives: [ɵngcc1.NgClass, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JwBootstrapSwitchNg2Component, [{
        type: Component,
        args: [{
                selector: 'bSwitch',
                providers: [CUSTOM_INPUT],
                template: "\n      <div [ngClass]=\"getWrapperClasses()\" [style.width]=\"(handleWidth  + labelWidth ) +'px'\">\n          <div #container [ngClass]=\"baseClass + '-container'\"\n               [style.width]=\"((handleWidth * 2) + labelWidth) +'px'\"\n               [style.margin-left]=\"getLabelMarginLeft()\"><!--\n              --><span #on [innerHTML]=\"(inverse) ? offText : onText\"\n                [ngClass]=\"(inverse) ? getOffClasses() : getOnClasses()\"></span><!--\n              --><span #label [ngClass]=\"baseClass + '-label'\">&nbsp;{{ labelText }}</span><!--\n              --><span #off [innerHTML]=\"(inverse) ? onText : offText\"\n                [ngClass]=\"(inverse) ? getOnClasses() : getOffClasses()\"></span><!--\n              --><input type=\"checkbox\" [(ngModel)]=\"value\" [readonly]=\"readonly\" [disabled]=\"disabled\"\n                     (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n          </div>\n      </div>"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }]; }, { changeState: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onTouchStart: [{
            type: HostListener,
            args: ['touchstart', ['$event']]
        }], onMouseDown: [{
            type: HostListener,
            args: ['mousedown', ['$event']]
        }], onTouchMove: [{
            type: HostListener,
            args: ['touchmove', ['$event']]
        }], onMouseMove: [{
            type: HostListener,
            args: ['mousemove', ['$event']]
        }], onMouseUp: [{
            type: HostListener,
            args: ['mouseup', ['$event']]
        }], onTouchEnd: [{
            type: HostListener,
            args: ['touchend', ['$event']]
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave', ['$event']]
        }], setBaseClass: [{
            type: Input,
            args: ['switch-base-class']
        }], setWrapperClass: [{
            type: Input,
            args: ['switch-wrapper-class']
        }], setOffText: [{
            type: Input,
            args: ['switch-off-text']
        }], setLabelText: [{
            type: Input,
            args: ['switch-label-text']
        }], setOnText: [{
            type: Input,
            args: ['switch-on-text']
        }], setSize: [{
            type: Input,
            args: ['switch-size']
        }], setAnimate: [{
            type: Input,
            args: ['switch-animate']
        }], setOnColor: [{
            type: Input,
            args: ['switch-on-color']
        }], setOffColor: [{
            type: Input,
            args: ['switch-off-color']
        }], setDisabled: [{
            type: Input,
            args: ['switch-disabled']
        }], setReadOnly: [{
            type: Input,
            args: ['switch-readonly']
        }], setIndeterminate: [{
            type: Input,
            args: ['switch-indeterminate']
        }], setInverse: [{
            type: Input,
            args: ['switch-inverse']
        }], setHandleWidth: [{
            type: Input,
            args: ['switch-handle-width']
        }], setLabelWidth: [{
            type: Input,
            args: ['switch-label-width']
        }], container: [{
            type: ViewChild,
            args: ['container']
        }], on: [{
            type: ViewChild,
            args: ['on']
        }], label: [{
            type: ViewChild,
            args: ['label']
        }], off: [{
            type: ViewChild,
            args: ['off']
        }] }); })();
    return JwBootstrapSwitchNg2Component;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JwBootstrapSwitchNg2Module = /** @class */ (function () {
    function JwBootstrapSwitchNg2Module() {
    }
JwBootstrapSwitchNg2Module.ɵfac = function JwBootstrapSwitchNg2Module_Factory(t) { return new (t || JwBootstrapSwitchNg2Module)(); };
JwBootstrapSwitchNg2Module.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: JwBootstrapSwitchNg2Module });
JwBootstrapSwitchNg2Module.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JwBootstrapSwitchNg2Module, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [JwBootstrapSwitchNg2Component],
                exports: [JwBootstrapSwitchNg2Component]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(JwBootstrapSwitchNg2Module, { declarations: function () { return [JwBootstrapSwitchNg2Component]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [JwBootstrapSwitchNg2Component]; } }); })();
    return JwBootstrapSwitchNg2Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { JwBootstrapSwitchNg2Component, JwBootstrapSwitchNg2Module };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,